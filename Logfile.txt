Diff Between 4b00d6d535d78179f226afdf2bb7031e0530054c 6e8056be8529eb8c6c20a6caf5fed070213eec41Diff Between 6e8056be8529eb8c6c20a6caf5fed070213eec41 dc2c8c6cce68dda91ff930a0a0a4c705fec59f9ediff --git a/src/main/java/org/dstadler/jgit/api/GetFileAttributes.java b/src/main/java/org/dstadler/jgit/api/GetFileAttributes.java
index 061e8b1..3b229f3 100755
--- a/src/main/java/org/dstadler/jgit/api/GetFileAttributes.java
+++ b/src/main/java/org/dstadler/jgit/api/GetFileAttributes.java
@@ -92 +92 @@
-                throw new IllegalStateException("Did not find expected file 'README.md'");
+                throw new IllegalStateException("Did not find expected folder 'src'");
Diff Between dc2c8c6cce68dda91ff930a0a0a4c705fec59f9e c0f0d591839382461119fc5bd7a73db109d795b0diff --git a/README.md b/README.md
index 7b4b7ec..6769660 100644
--- a/README.md
+++ b/README.md
@@ -11 +11 @@
-Please make sure to take a look at the nicely written [introduction](http://www.codeaffine.com/2015/12/15/getting-started-with-jgit/) and also use the existing [JavaDoc](http://download.eclipse.org/jgit/site/4.7.1.201706071930-r/apidocs/) and the [User Guide](http://wiki.eclipse.org/JGit/User_Guide) as well, as they are well done and provide detailed information and a general overview of JGit respectively.
+Please make sure to take a look at the nicely written [introduction](http://www.codeaffine.com/2015/12/15/getting-started-with-jgit/) and also use the existing [JavaDoc](http://download.eclipse.org/jgit/site/4.9.0.201710071750-r/apidocs/) and the [User Guide](http://wiki.eclipse.org/JGit/User_Guide) as well, as they are well done and provide detailed information and a general overview of JGit respectively.
@@ -121,2 +121,2 @@
-* Doing stuff without local storage: Using org.eclipse.jgit.storage.dfs.InMemoryRepository to clone a Git repo in-memory and work from there, see http://download.eclipse.org/jgit/site/4.7.1.201706071930-r/apidocs/org/eclipse/jgit/internal/storage/dfs/InMemoryRepository.html
-* CherryPick: http://download.eclipse.org/jgit/site/4.7.1.201706071930-r/apidocs/org/eclipse/jgit/api/CherryPickCommand.html http://stackoverflow.com/questions/18300898/how-to-cherry-pick-a-commit-that-has-more-than-one-parent
+* Doing stuff without local storage: Using org.eclipse.jgit.storage.dfs.InMemoryRepository to clone a Git repo in-memory and work from there, see http://download.eclipse.org/jgit/site/4.9.0.201710071750-r/apidocs/org/eclipse/jgit/internal/storage/dfs/InMemoryRepository.html
+* CherryPick: http://download.eclipse.org/jgit/site/4.9.0.201710071750-r/apidocs/org/eclipse/jgit/api/CherryPickCommand.html http://stackoverflow.com/questions/18300898/how-to-cherry-pick-a-commit-that-has-more-than-one-parent
@@ -129 +129 @@
-* [JGit JavaDoc](http://download.eclipse.org/jgit/site/4.7.1.201706071930-r/apidocs/)
+* [JGit JavaDoc](http://download.eclipse.org/jgit/site/4.9.0.201710071750-r/apidocs/)
diff --git a/build.gradle b/build.gradle
index 33b0bed..caad38d 100644
--- a/build.gradle
+++ b/build.gradle
@@ -15,4 +15,4 @@
-    compile 'org.eclipse.jgit:org.eclipse.jgit:4.7.1.201706071930-r'
-    compile 'org.eclipse.jgit:org.eclipse.jgit.archive:4.7.1.201706071930-r'
-    compile 'commons-io:commons-io:2.5'
-    compile 'org.slf4j:slf4j-simple:1.7.21'
+    compile 'org.eclipse.jgit:org.eclipse.jgit:4.9.0.201710071750-r'
+    compile 'org.eclipse.jgit:org.eclipse.jgit.archive:4.9.0.201710071750-r'
+    compile 'commons-io:commons-io:2.6'
+    compile 'org.slf4j:slf4j-simple:1.7.25'
diff --git a/httpserver/build.gradle b/httpserver/build.gradle
index 801dd3e..c8f63a8 100644
--- a/httpserver/build.gradle
+++ b/httpserver/build.gradle
@@ -13,2 +13,2 @@
-	compile 'org.eclipse.jgit:org.eclipse.jgit.http.server:4.7.1.201706071930-r'
-	compile 'org.eclipse.jetty:jetty-servlet:9.3.14.v20161028'
+	compile 'org.eclipse.jgit:org.eclipse.jgit.http.server:4.9.0.201710071750-r'
+	compile 'org.eclipse.jetty:jetty-servlet:9.3.22.v20171030'
@@ -16 +16 @@
-	compile 'org.slf4j:slf4j-simple:1.7.21'
+	compile 'org.slf4j:slf4j-simple:1.7.25'
diff --git a/pom.xml b/pom.xml
index d4492f9..e89cece 100644
--- a/pom.xml
+++ b/pom.xml
@@ -23 +23 @@
-      <version>4.7.1.201706071930-r</version>
+      <version>4.9.0.201710071750-r</version>
@@ -28 +28 @@
-      <version>4.7.1.201706071930-r</version>
+      <version>4.9.0.201710071750-r</version>
Diff Between c0f0d591839382461119fc5bd7a73db109d795b0 2410f3e85717cd1695bdf63fb02db1a1b4599785diff --git a/src/main/java/org/dstadler/jgit/porcelain/DiffRenamedFile.java b/src/main/java/org/dstadler/jgit/porcelain/DiffRenamedFile.java
index 6a076a7..37ad40d 100644
--- a/src/main/java/org/dstadler/jgit/porcelain/DiffRenamedFile.java
+++ b/src/main/java/org/dstadler/jgit/porcelain/DiffRenamedFile.java
@@ -2,0 +3,3 @@
+import java.io.IOException;
+import java.util.List;
+
@@ -11 +13,0 @@
-import org.eclipse.jgit.lib.ObjectId;
@@ -21,3 +22,0 @@
-import java.io.IOException;
-import java.util.List;
-
@@ -27,10 +26,7 @@
-	public static void main(String args[])
-			throws IOException, GitAPIException {
-		try (Repository repo = CookbookHelper.openJGitCookbookRepository()) {
-			// Diff README.md between two commits. The file is named README.md in
-			// the new commit (5a10bd6e), but was named "jgit-cookbook README.md" in
-			// the old commit (2e1d65e4).
-			DiffEntry diff = diffFile(repo,
-					"2e1d65e4cf6c5e267e109aa20fd68ae119fa5ec9",
-					"5a10bd6ee431e362facb03cfe763b9a3d9dfd02d",
-					"README.md");
+    public static void main(String args[])
+            throws IOException, GitAPIException {
+        try (Repository repo = CookbookHelper.openJGitCookbookRepository()) {
+            runDiff(repo,
+                    "2e1d65e4cf6c5e267e109aa20fd68ae119fa5ec9",
+                    "5a10bd6ee431e362facb03cfe763b9a3d9dfd02d",
+                    "README.md");
@@ -38,8 +34,5 @@
-			// Display the diff.
-			try (DiffFormatter formatter = new DiffFormatter(System.out)) {
-				formatter.setRepository(repo);
-				//noinspection ConstantConditions
-				formatter.format(diff);
-			}
-		}
-	}
+            // try the reverse as well
+            runDiff(repo,
+                    "5a10bd6ee431e362facb03cfe763b9a3d9dfd02d",
+                    "2e1d65e4cf6c5e267e109aa20fd68ae119fa5ec9",
+                    "README.md");
@@ -47,6 +40,7 @@
-	private static AbstractTreeIterator prepareTreeParser(Repository repository, String objectId) throws IOException {
-		// from the commit we can build the tree which allows us to construct the TreeParser
-		//noinspection Duplicates
-		try (RevWalk walk = new RevWalk(repository)) {
-			RevCommit commit = walk.parseCommit(ObjectId.fromString(objectId));
-			RevTree tree = walk.parseTree(commit.getTree().getId());
+            // caret allows to specify "the previous commit"
+            runDiff(repo,
+                    "7b2e6193a39726510ed9d0f66a779665d0e4ce23^",
+                    "7b2e6193a39726510ed9d0f66a779665d0e4ce23",
+                    "build.gradle");
+        }
+    }
@@ -54,4 +48,8 @@
-			CanonicalTreeParser treeParser = new CanonicalTreeParser();
-			try (ObjectReader reader = repository.newObjectReader()) {
-				treeParser.reset(reader, tree.getId());
-			}
+    private static void runDiff(Repository repo, String oldCommit, String newCommit, String path) throws IOException, GitAPIException {
+        // Diff README.md between two commits. The file is named README.md in
+        // the new commit (5a10bd6e), but was named "jgit-cookbook README.md" in
+        // the old commit (2e1d65e4).
+        DiffEntry diff = diffFile(repo,
+                oldCommit,
+                newCommit,
+                path);
@@ -59 +57,8 @@
-			walk.dispose();
+        // Display the diff
+        System.out.println("Showing diff of " + path);
+        try (DiffFormatter formatter = new DiffFormatter(System.out)) {
+            formatter.setRepository(repo);
+            //noinspection ConstantConditions
+            formatter.format(diff);
+        }
+    }
@@ -61,3 +66,6 @@
-			return treeParser;
-		}
-	}
+    private static AbstractTreeIterator prepareTreeParser(Repository repository, String objectId) throws IOException {
+        // from the commit we can build the tree which allows us to construct the TreeParser
+        //noinspection Duplicates
+        try (RevWalk walk = new RevWalk(repository)) {
+            RevCommit commit = walk.parseCommit(repository.resolve(objectId));
+            RevTree tree = walk.parseTree(commit.getTree().getId());
@@ -65,6 +73,17 @@
-	private static @NonNull DiffEntry diffFile(Repository repo, String oldCommit,
-					   String newCommit, String path) throws IOException, GitAPIException {
-		Config config = new Config();
-		config.setBoolean("diff", null, "renames", true);
-		DiffConfig diffConfig = config.get(DiffConfig.KEY);
-		try (Git git = new Git(repo)) {
+            CanonicalTreeParser treeParser = new CanonicalTreeParser();
+            try (ObjectReader reader = repository.newObjectReader()) {
+                treeParser.reset(reader, tree.getId());
+            }
+
+            walk.dispose();
+
+            return treeParser;
+        }
+    }
+
+    private static @NonNull DiffEntry diffFile(Repository repo, String oldCommit,
+                       String newCommit, String path) throws IOException, GitAPIException {
+        Config config = new Config();
+        config.setBoolean("diff", null, "renames", true);
+        DiffConfig diffConfig = config.get(DiffConfig.KEY);
+        try (Git git = new Git(repo)) {
@@ -72,11 +91,11 @@
-    			setOldTree(prepareTreeParser(repo, oldCommit)).
-    			setNewTree(prepareTreeParser(repo, newCommit)).
-    			setPathFilter(FollowFilter.create(path, diffConfig)).
-    			call();
-    		if (diffList.size() == 0)
-    			return null;
-    		if (diffList.size() > 1)
-    			throw new RuntimeException("invalid diff");
-    		return diffList.get(0);
-		}
-	}
+                setOldTree(prepareTreeParser(repo, oldCommit)).
+                setNewTree(prepareTreeParser(repo, newCommit)).
+                setPathFilter(FollowFilter.create(path, diffConfig)).
+                call();
+            if (diffList.size() == 0)
+                return null;
+            if (diffList.size() > 1)
+                throw new RuntimeException("invalid diff");
+            return diffList.get(0);
+        }
+    }
Diff Between 2410f3e85717cd1695bdf63fb02db1a1b4599785 9638410628de8d0559cc14ba1ea49887f23cbedddiff --git a/src/main/java/org/dstadler/jgit/porcelain/CommitFile.java b/src/main/java/org/dstadler/jgit/porcelain/CommitFile.java
index 503d5ac..f8a93ed 100644
--- a/src/main/java/org/dstadler/jgit/porcelain/CommitFile.java
+++ b/src/main/java/org/dstadler/jgit/porcelain/CommitFile.java
@@ -41,3 +41,3 @@
-                File myfile = new File(repository.getDirectory().getParent(), "testfile");
-                if(!myfile.createNewFile()) {
-                    throw new IOException("Could not create file " + myfile);
+                File myFile = new File(repository.getDirectory().getParent(), "testfile");
+                if(!myFile.createNewFile()) {
+                    throw new IOException("Could not create file " + myFile);
@@ -56 +56 @@
-                System.out.println("Committed file " + myfile + " to repository at " + repository.getDirectory());
+                System.out.println("Committed file " + myFile + " to repository at " + repository.getDirectory());
diff --git a/src/main/java/org/dstadler/jgit/porcelain/DiffFilesInCommit.java b/src/main/java/org/dstadler/jgit/porcelain/DiffFilesInCommit.java
index 54e041a..9ce9fca 100644
--- a/src/main/java/org/dstadler/jgit/porcelain/DiffFilesInCommit.java
+++ b/src/main/java/org/dstadler/jgit/porcelain/DiffFilesInCommit.java
@@ -26 +25,0 @@
-import org.eclipse.jgit.lib.ObjectId;
@@ -86,3 +85,3 @@
-            CanonicalTreeParser oldTreeParser = new CanonicalTreeParser();
-            try (ObjectReader oldReader = repository.newObjectReader()) {
-                oldTreeParser.reset(oldReader, tree.getId());
+            CanonicalTreeParser treeParser = new CanonicalTreeParser();
+            try (ObjectReader reader = repository.newObjectReader()) {
+                treeParser.reset(reader, tree.getId());
@@ -93 +92 @@
-            return oldTreeParser;
+            return treeParser;
@@ -96 +94,0 @@
-
diff --git a/src/main/java/org/dstadler/jgit/porcelain/DiffRenamedFile.java b/src/main/java/org/dstadler/jgit/porcelain/DiffRenamedFile.java
index 10d36af..6a076a7 100644
--- a/src/main/java/org/dstadler/jgit/porcelain/DiffRenamedFile.java
+++ b/src/main/java/org/dstadler/jgit/porcelain/DiffRenamedFile.java
@@ -26,0 +27,20 @@
+	public static void main(String args[])
+			throws IOException, GitAPIException {
+		try (Repository repo = CookbookHelper.openJGitCookbookRepository()) {
+			// Diff README.md between two commits. The file is named README.md in
+			// the new commit (5a10bd6e), but was named "jgit-cookbook README.md" in
+			// the old commit (2e1d65e4).
+			DiffEntry diff = diffFile(repo,
+					"2e1d65e4cf6c5e267e109aa20fd68ae119fa5ec9",
+					"5a10bd6ee431e362facb03cfe763b9a3d9dfd02d",
+					"README.md");
+
+			// Display the diff.
+			try (DiffFormatter formatter = new DiffFormatter(System.out)) {
+				formatter.setRepository(repo);
+				//noinspection ConstantConditions
+				formatter.format(diff);
+			}
+		}
+	}
+
@@ -31,2 +51,2 @@
-    		RevCommit commit = walk.parseCommit(ObjectId.fromString(objectId));
-    		RevTree tree = walk.parseTree(commit.getTree().getId());
+			RevCommit commit = walk.parseCommit(ObjectId.fromString(objectId));
+			RevTree tree = walk.parseTree(commit.getTree().getId());
@@ -34,4 +54,4 @@
-    		CanonicalTreeParser oldTreeParser = new CanonicalTreeParser();
-    		try (ObjectReader oldReader = repository.newObjectReader()) {
-    			oldTreeParser.reset(oldReader, tree.getId());
-    		}
+			CanonicalTreeParser treeParser = new CanonicalTreeParser();
+			try (ObjectReader reader = repository.newObjectReader()) {
+				treeParser.reset(reader, tree.getId());
+			}
@@ -39 +59 @@
-    		walk.dispose();
+			walk.dispose();
@@ -41 +61 @@
-    		return oldTreeParser;
+			return treeParser;
@@ -63,20 +82,0 @@
-
-	public static void main(String args[])
-		throws IOException, GitAPIException {
-		try (Repository repo = CookbookHelper.openJGitCookbookRepository()) {
-    		// Diff README.md between two commits. The file is named README.md in
-    		// the new commit (5a10bd6e), but was named "jgit-cookbook README.md" in
-    		// the old commit (2e1d65e4).
-    		DiffEntry diff = diffFile(repo,
-    			"2e1d65e4cf6c5e267e109aa20fd68ae119fa5ec9",
-    			"5a10bd6ee431e362facb03cfe763b9a3d9dfd02d",
-    			"README.md");
-
-    		// Display the diff.
-    		try (DiffFormatter formatter = new DiffFormatter(System.out)) {
-        		formatter.setRepository(repo);
-				//noinspection ConstantConditions
-				formatter.format(diff);
-    		}
-		}
-	}
diff --git a/src/main/java/org/dstadler/jgit/porcelain/ShowBranchDiff.java b/src/main/java/org/dstadler/jgit/porcelain/ShowBranchDiff.java
index d46c134..b7eed16 100755
--- a/src/main/java/org/dstadler/jgit/porcelain/ShowBranchDiff.java
+++ b/src/main/java/org/dstadler/jgit/porcelain/ShowBranchDiff.java
@@ -74,3 +74,3 @@
-            CanonicalTreeParser oldTreeParser = new CanonicalTreeParser();
-            try (ObjectReader oldReader = repository.newObjectReader()) {
-                oldTreeParser.reset(oldReader, tree.getId());
+            CanonicalTreeParser treeParser = new CanonicalTreeParser();
+            try (ObjectReader reader = repository.newObjectReader()) {
+                treeParser.reset(reader, tree.getId());
@@ -81 +81 @@
-            return oldTreeParser;
+            return treeParser;
diff --git a/src/main/java/org/dstadler/jgit/porcelain/ShowFileDiff.java b/src/main/java/org/dstadler/jgit/porcelain/ShowFileDiff.java
index b1da6e3..5c849c8 100644
--- a/src/main/java/org/dstadler/jgit/porcelain/ShowFileDiff.java
+++ b/src/main/java/org/dstadler/jgit/porcelain/ShowFileDiff.java
@@ -78,3 +78,3 @@
-            CanonicalTreeParser oldTreeParser = new CanonicalTreeParser();
-            try (ObjectReader oldReader = repository.newObjectReader()) {
-                oldTreeParser.reset(oldReader, tree.getId());
+            CanonicalTreeParser treeParser = new CanonicalTreeParser();
+            try (ObjectReader reader = repository.newObjectReader()) {
+                treeParser.reset(reader, tree.getId());
@@ -85 +85 @@
-            return oldTreeParser;
+            return treeParser;
Diff Between 9638410628de8d0559cc14ba1ea49887f23cbedd b5a2e09d202aeba4625e48a330251eeaca3c5e87diff --git a/README.md b/README.md
index 73ebeca..7b4b7ec 100644
--- a/README.md
+++ b/README.md
@@ -70,0 +71 @@
+* [List changed files between two commits](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/porcelain/DiffFilesInCommit.java)
diff --git a/src/main/java/org/dstadler/jgit/porcelain/DiffFilesInCommit.java b/src/main/java/org/dstadler/jgit/porcelain/DiffFilesInCommit.java
new file mode 100644
index 0000000..54e041a
--- /dev/null
+++ b/src/main/java/org/dstadler/jgit/porcelain/DiffFilesInCommit.java
@@ -0,0 +1,97 @@
+package org.dstadler.jgit.porcelain;
+
+/*
+   Copyright 2013, 2014 Dominik Stadler
+
+   Licensed under the Apache License, Version 2.0 (the "License");
+   you may not use this file except in compliance with the License.
+   You may obtain a copy of the License at
+
+     http://www.apache.org/licenses/LICENSE-2.0
+
+   Unless required by applicable law or agreed to in writing, software
+   distributed under the License is distributed on an "AS IS" BASIS,
+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+   See the License for the specific language governing permissions and
+   limitations under the License.
+ */
+
+import java.io.IOException;
+import java.util.List;
+
+import org.dstadler.jgit.helper.CookbookHelper;
+import org.eclipse.jgit.api.Git;
+import org.eclipse.jgit.api.errors.GitAPIException;
+import org.eclipse.jgit.diff.DiffEntry;
+import org.eclipse.jgit.lib.ObjectId;
+import org.eclipse.jgit.lib.ObjectReader;
+import org.eclipse.jgit.lib.Repository;
+import org.eclipse.jgit.revwalk.RevCommit;
+import org.eclipse.jgit.revwalk.RevTree;
+import org.eclipse.jgit.revwalk.RevWalk;
+import org.eclipse.jgit.treewalk.AbstractTreeIterator;
+import org.eclipse.jgit.treewalk.CanonicalTreeParser;
+
+/**
+ * Simple snippet which shows how to retrieve the diffs
+ * between two commits
+ */
+public class DiffFilesInCommit {
+
+    public static void main(String[] args) throws IOException, GitAPIException {
+        try (Repository repository = CookbookHelper.openJGitCookbookRepository()) {
+            try (Git git = new Git(repository)) {
+
+                // compare older commit with the newer one, showing an addition
+                // and 2 changes
+                listDiff(repository, git,
+                        "3cc51d5cfd1dc3e890f9d6ded4698cb0d22e650e",
+                        "19536fe5765ee79489265927a97cb0e19bb93e70");
+
+                // also the diffing the reverse works and now shows a delete
+                // instead of the added file
+                listDiff(repository, git,
+                        "19536fe5765ee79489265927a97cb0e19bb93e70",
+                        "3cc51d5cfd1dc3e890f9d6ded4698cb0d22e650e");
+
+                // to compare against the "previous" commit, you can use
+                // the caret-notation
+                listDiff(repository, git,
+                        "19536fe5765ee79489265927a97cb0e19bb93e70^",
+                        "19536fe5765ee79489265927a97cb0e19bb93e70");
+            }
+        }
+    }
+
+    private static void listDiff(Repository repository, Git git, String oldCommit, String newCommit) throws GitAPIException, IOException {
+        final List<DiffEntry> diffs = git.diff()
+                .setOldTree(prepareTreeParser(repository, oldCommit))
+                .setNewTree(prepareTreeParser(repository, newCommit))
+                .call();
+
+        System.out.println("Found: " + diffs.size() + " differences");
+        for (DiffEntry diff : diffs) {
+            System.out.println("Diff: " + diff.getChangeType() + ": " +
+                    (diff.getOldPath().equals(diff.getNewPath()) ? diff.getNewPath() : diff.getOldPath() + " -> " + diff.getNewPath()));
+        }
+    }
+
+    private static AbstractTreeIterator prepareTreeParser(Repository repository, String objectId) throws IOException {
+        // from the commit we can build the tree which allows us to construct the TreeParser
+        //noinspection Duplicates
+        try (RevWalk walk = new RevWalk(repository)) {
+            RevCommit commit = walk.parseCommit(repository.resolve(objectId));
+            RevTree tree = walk.parseTree(commit.getTree().getId());
+
+            CanonicalTreeParser oldTreeParser = new CanonicalTreeParser();
+            try (ObjectReader oldReader = repository.newObjectReader()) {
+                oldTreeParser.reset(oldReader, tree.getId());
+            }
+
+            walk.dispose();
+
+            return oldTreeParser;
+        }
+    }
+
+}
diff --git a/src/test/java/org/dstadler/jgit/porcelain/PorcelainTest.java b/src/test/java/org/dstadler/jgit/porcelain/PorcelainTest.java
index 009cc9c..637217b 100644
--- a/src/test/java/org/dstadler/jgit/porcelain/PorcelainTest.java
+++ b/src/test/java/org/dstadler/jgit/porcelain/PorcelainTest.java
@@ -23,0 +24 @@
+        DiffFilesInCommit.main(null);
Diff Between b5a2e09d202aeba4625e48a330251eeaca3c5e87 19536fe5765ee79489265927a97cb0e19bb93e70diff --git a/src/main/java/org/dstadler/jgit/porcelain/MergeChanges.java b/src/main/java/org/dstadler/jgit/porcelain/MergeChanges.java
index a28cc78..61a0958 100644
--- a/src/main/java/org/dstadler/jgit/porcelain/MergeChanges.java
+++ b/src/main/java/org/dstadler/jgit/porcelain/MergeChanges.java
@@ -18,0 +19 @@
+import org.apache.commons.io.FileUtils;
@@ -30,0 +32,2 @@
+import java.util.Arrays;
+import java.util.Map;
@@ -41 +44 @@
-                createCommit(repository, git, "masterFile");
+                createCommit(repository, git, "masterFile", "content12");
@@ -46,0 +50,3 @@
+                // now start a change on master
+                createCommit(repository, git, "sharedFile", "content12");
+
@@ -51,2 +57,3 @@
-                // create some commit on branch "changes"
-                createCommit(repository, git, "branchFile");
+                // create some commit on branch "changes", one of them conflicting with the change on master
+                createCommit(repository, git, "branchFile", "content98");
+                createCommit(repository, git, "sharedFile", "content98");
@@ -70,0 +78,6 @@
+                for (Map.Entry<String,int[][]> entry : merge.getConflicts().entrySet()) {
+                    System.out.println("Key: " + entry.getKey());
+                    for(int[] arr : entry.getValue()) {
+                        System.out.println("value: " + Arrays.toString(arr));
+                    }
+                }
@@ -75 +88 @@
-    private static void createCommit(Repository repository, Git git, String fileName) throws IOException, GitAPIException {
+    private static void createCommit(Repository repository, Git git, String fileName, String content) throws IOException, GitAPIException {
@@ -78,3 +91 @@
-        if(!myFile.createNewFile()) {
-            throw new IOException("Could not create file " + myFile);
-        }
+        FileUtils.writeStringToFile(myFile, content, "UTF-8");
Diff Between 19536fe5765ee79489265927a97cb0e19bb93e70 3cc51d5cfd1dc3e890f9d6ded4698cb0d22e650ediff --git a/README.md b/README.md
index fc0764c..73ebeca 100644
--- a/README.md
+++ b/README.md
@@ -69,0 +70 @@
+* [Merge changes from a branch](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/porcelain/MergeChanges.java)
diff --git a/src/main/java/org/dstadler/jgit/porcelain/MergeChanges.java b/src/main/java/org/dstadler/jgit/porcelain/MergeChanges.java
new file mode 100644
index 0000000..a28cc78
--- /dev/null
+++ b/src/main/java/org/dstadler/jgit/porcelain/MergeChanges.java
@@ -0,0 +1,94 @@
+package org.dstadler.jgit.porcelain;
+
+/*
+   Copyright 2017 Dominik Stadler
+
+   Licensed under the Apache License, Version 2.0 (the "License");
+   you may not use this file except in compliance with the License.
+   You may obtain a copy of the License at
+
+     http://www.apache.org/licenses/LICENSE-2.0
+
+   Unless required by applicable law or agreed to in writing, software
+   distributed under the License is distributed on an "AS IS" BASIS,
+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+   See the License for the specific language governing permissions and
+   limitations under the License.
+ */
+
+import org.dstadler.jgit.helper.CookbookHelper;
+import org.eclipse.jgit.api.Git;
+import org.eclipse.jgit.api.MergeCommand;
+import org.eclipse.jgit.api.MergeResult;
+import org.eclipse.jgit.api.errors.GitAPIException;
+import org.eclipse.jgit.lib.ObjectId;
+import org.eclipse.jgit.lib.Ref;
+import org.eclipse.jgit.lib.Repository;
+import org.eclipse.jgit.revwalk.RevCommit;
+
+import java.io.File;
+import java.io.IOException;
+
+/**
+ * Snippet which shows how to merge changes from another branch.
+ */
+public class MergeChanges {
+
+    public static void main(String[] args) throws IOException, GitAPIException {
+        try (Repository repository = CookbookHelper.createNewRepository()) {
+            try (Git git = new Git(repository)) {
+                // create some commit on master
+                createCommit(repository, git, "masterFile");
+
+                // create branch "changes"
+                Ref changes = git.branchCreate().setName("changes").call();
+                System.out.println("Result of creating the branch: " + changes);
+
+                // check out branch "changes"
+                Ref checkout = git.checkout().setName("changes").call();
+                System.out.println("Result of checking out the branch: " + checkout);
+
+                // create some commit on branch "changes"
+                createCommit(repository, git, "branchFile");
+
+                // check out "master"
+                checkout = git.checkout().setName("master").call();
+                System.out.println("Result of checking out master: " + checkout);
+
+                // retrieve the objectId of the latest commit on branch
+                ObjectId mergeBase = repository.resolve("changes");
+
+                // perform the actual merge, here we disable FastForward to see the
+                // actual merge-commit even though the merge is trivial
+                MergeResult merge = git.merge().
+                        include(mergeBase).
+                        setCommit(true).
+                        setFastForward(MergeCommand.FastForwardMode.NO_FF).
+                        //setSquash(false).
+                        setMessage("Merged changes").
+                        call();
+                System.out.println("Merge-Results for id: " + mergeBase + ": " + merge);
+            }
+        }
+    }
+
+    private static void createCommit(Repository repository, Git git, String fileName) throws IOException, GitAPIException {
+        // create the file
+        File myFile = new File(repository.getDirectory().getParent(), fileName);
+        if(!myFile.createNewFile()) {
+            throw new IOException("Could not create file " + myFile);
+        }
+
+        // run the add
+        git.add()
+                .addFilepattern(fileName)
+                .call();
+
+        // and then commit the changes
+        RevCommit revCommit = git.commit()
+                .setMessage("Added " + fileName)
+                .call();
+
+        System.out.println("Committed file " + myFile + " as " + revCommit + " to repository at " + repository.getDirectory());
+    }
+}
diff --git a/src/test/java/org/dstadler/jgit/porcelain/PorcelainTest.java b/src/test/java/org/dstadler/jgit/porcelain/PorcelainTest.java
index 9924254..009cc9c 100644
--- a/src/test/java/org/dstadler/jgit/porcelain/PorcelainTest.java
+++ b/src/test/java/org/dstadler/jgit/porcelain/PorcelainTest.java
@@ -33,0 +34 @@
+        MergeChanges.main(null);
Diff Between 3cc51d5cfd1dc3e890f9d6ded4698cb0d22e650e 7b2e6193a39726510ed9d0f66a779665d0e4ce23diff --git a/src/main/java/org/dstadler/jgit/porcelain/CreateCustomFormatArchive.java b/src/main/java/org/dstadler/jgit/porcelain/CreateCustomFormatArchive.java
index b1ca3cf..75a1b34 100644
--- a/src/main/java/org/dstadler/jgit/porcelain/CreateCustomFormatArchive.java
+++ b/src/main/java/org/dstadler/jgit/porcelain/CreateCustomFormatArchive.java
@@ -33,0 +34 @@
+import org.eclipse.jgit.lib.ObjectId;
@@ -36 +37 @@
-
+import org.eclipse.jgit.revwalk.RevCommit;
@@ -48 +49,2 @@
-     * A custom format for Zip-files, unfortunately JGit does not come with any pre-defined ones
+     * A simple custom format for Zip-files via ZipOutputStream,
+     * JGit only has one via commons-compress
@@ -58,0 +61,5 @@
+            putEntry(out, null, path, mode, loader);
+        }
+
+        @Override
+        public void putEntry(ZipOutputStream out, ObjectId tree, String path, FileMode mode, ObjectLoader loader) throws IOException {
@@ -61,0 +69,6 @@
+
+                if (tree instanceof RevCommit) {
+                    long t = ((RevCommit) tree).getCommitTime() * 1000L;
+                    entry.setTime(t);
+                }
+
@@ -68 +81 @@
-		@Override
+        @Override
Diff Between 7b2e6193a39726510ed9d0f66a779665d0e4ce23 f1d49722dd3498642d251dbc5265133b63e0c4e4diff --git a/README.md b/README.md
index d0625eb..fc0764c 100644
--- a/README.md
+++ b/README.md
@@ -11 +11 @@
-Please make sure to take a look at the nicely written [introduction](http://www.codeaffine.com/2015/12/15/getting-started-with-jgit/) and also use the existing [JavaDoc](http://download.eclipse.org/jgit/site/4.6.1.201703071140-r/apidocs/) and the [User Guide](http://wiki.eclipse.org/JGit/User_Guide) as well, as they are well done and provide detailed information and a general overview of JGit respectively.
+Please make sure to take a look at the nicely written [introduction](http://www.codeaffine.com/2015/12/15/getting-started-with-jgit/) and also use the existing [JavaDoc](http://download.eclipse.org/jgit/site/4.7.1.201706071930-r/apidocs/) and the [User Guide](http://wiki.eclipse.org/JGit/User_Guide) as well, as they are well done and provide detailed information and a general overview of JGit respectively.
@@ -119,2 +119,2 @@
-* Doing stuff without local storage: Using org.eclipse.jgit.storage.dfs.InMemoryRepository to clone a Git repo in-memory and work from there, see http://download.eclipse.org/jgit/site/4.6.1.201703071140-r/apidocs/org/eclipse/jgit/internal/storage/dfs/InMemoryRepository.html
-* CherryPick: http://download.eclipse.org/jgit/site/4.6.1.201703071140-r/apidocs/org/eclipse/jgit/api/CherryPickCommand.html http://stackoverflow.com/questions/18300898/how-to-cherry-pick-a-commit-that-has-more-than-one-parent
+* Doing stuff without local storage: Using org.eclipse.jgit.storage.dfs.InMemoryRepository to clone a Git repo in-memory and work from there, see http://download.eclipse.org/jgit/site/4.7.1.201706071930-r/apidocs/org/eclipse/jgit/internal/storage/dfs/InMemoryRepository.html
+* CherryPick: http://download.eclipse.org/jgit/site/4.7.1.201706071930-r/apidocs/org/eclipse/jgit/api/CherryPickCommand.html http://stackoverflow.com/questions/18300898/how-to-cherry-pick-a-commit-that-has-more-than-one-parent
@@ -127 +127 @@
-* [JGit JavaDoc](http://download.eclipse.org/jgit/site/4.6.1.201703071140-r/apidocs/)
+* [JGit JavaDoc](http://download.eclipse.org/jgit/site/4.7.1.201706071930-r/apidocs/)
diff --git a/build.gradle b/build.gradle
index 78899a8..33b0bed 100644
--- a/build.gradle
+++ b/build.gradle
@@ -15,2 +15,2 @@
-    compile 'org.eclipse.jgit:org.eclipse.jgit:4.6.1.201703071140-r'
-    compile 'org.eclipse.jgit:org.eclipse.jgit.archive:4.6.1.201703071140-r'
+    compile 'org.eclipse.jgit:org.eclipse.jgit:4.7.1.201706071930-r'
+    compile 'org.eclipse.jgit:org.eclipse.jgit.archive:4.7.1.201706071930-r'
diff --git a/httpserver/build.gradle b/httpserver/build.gradle
index 2c53138..801dd3e 100644
--- a/httpserver/build.gradle
+++ b/httpserver/build.gradle
@@ -13 +13 @@
-	compile 'org.eclipse.jgit:org.eclipse.jgit.http.server:4.6.1.201703071140-r'
+	compile 'org.eclipse.jgit:org.eclipse.jgit.http.server:4.7.1.201706071930-r'
diff --git a/pom.xml b/pom.xml
index 61ede63..d4492f9 100644
--- a/pom.xml
+++ b/pom.xml
@@ -23 +23 @@
-      <version>4.6.1.201703071140-r</version>
+      <version>4.7.1.201706071930-r</version>
@@ -28 +28 @@
-      <version>4.6.1.201703071140-r</version>
+      <version>4.7.1.201706071930-r</version>
Diff Between f1d49722dd3498642d251dbc5265133b63e0c4e4 611605f5ad2c65c8a56b4c4c1d1d13e202cc97ebdiff --git a/src/main/java/org/dstadler/jgit/porcelain/ShowFileDiff.java b/src/main/java/org/dstadler/jgit/porcelain/ShowFileDiff.java
index 0069554..b1da6e3 100644
--- a/src/main/java/org/dstadler/jgit/porcelain/ShowFileDiff.java
+++ b/src/main/java/org/dstadler/jgit/porcelain/ShowFileDiff.java
@@ -38 +37,0 @@
-
@@ -49,2 +48,2 @@
-            AbstractTreeIterator oldTreeParser = prepareTreeParser(repository, "09c65401f3730eb3e619c33bf31e2376fb393727");
-            AbstractTreeIterator newTreeParser = prepareTreeParser(repository, "aa31703b65774e4a06010824601e56375a70078c");
+            AbstractTreeIterator oldTreeParser = prepareTreeParser(repository, "b97b184b0ce11c0b6a4dcc2b57768ff155cb696b");
+            AbstractTreeIterator newTreeParser = prepareTreeParser(repository, "9e0719d7d773b41b49ebf04e6fd7b5c637e96063");
@@ -52 +51 @@
-            // then the procelain diff-command returns a list of diff entries
+            // then the porcelain diff-command returns a list of diff entries
@@ -57,0 +57,2 @@
+                        // to filter on Suffix use the following instead
+                        //setPathFilter(PathSuffixFilter.create(".java")).
Diff Between 611605f5ad2c65c8a56b4c4c1d1d13e202cc97eb 24918e125c7dc24dda3ff5183a28c804d499b58fdiff --git a/src/main/java/org/dstadler/jgit/porcelain/ListRemoteRepository.java b/src/main/java/org/dstadler/jgit/porcelain/ListRemoteRepository.java
index c150ced..fe93dee 100644
--- a/src/main/java/org/dstadler/jgit/porcelain/ListRemoteRepository.java
+++ b/src/main/java/org/dstadler/jgit/porcelain/ListRemoteRepository.java
@@ -24 +24 @@
-
+import java.util.Map;
@@ -48,0 +49,20 @@
+
+        final Map<String, Ref> map = Git.lsRemoteRepository()
+                .setHeads(true)
+                .setTags(true)
+                .setRemote(REMOTE_URL)
+                .callAsMap();
+
+        System.out.println("As map");
+        for (Map.Entry<String, Ref> entry : map.entrySet()) {
+            System.out.println("Key: " + entry.getKey() + ", Ref: " + entry.getValue());
+        }
+
+        refs = Git.lsRemoteRepository()
+                .setRemote(REMOTE_URL)
+                .call();
+
+        System.out.println("All refs");
+        for (Ref ref : refs) {
+            System.out.println("Ref: " + ref);
+        }
Diff Between 24918e125c7dc24dda3ff5183a28c804d499b58f 5fb2799341ce36f10542ce3e8397ec59ae2bd646diff --git a/.travis.yml b/.travis.yml
index 0a89cb3..9c2c025 100644
--- a/.travis.yml
+++ b/.travis.yml
@@ -13 +13 @@
-- cat build/test-results/*.xml
+- cat build/test-results/test/*.xml
Diff Between 5fb2799341ce36f10542ce3e8397ec59ae2bd646 3061a9b751add358ae5758c8fb99e5d59722b6ceDiff Between 3061a9b751add358ae5758c8fb99e5d59722b6ce dab33bcdca61e2e580b178ee93f039abf9a71dcediff --git a/README.md b/README.md
index af9a278..d0625eb 100644
--- a/README.md
+++ b/README.md
@@ -11 +11 @@
-Please make sure to take a look at the nicely written [introduction](http://www.codeaffine.com/2015/12/15/getting-started-with-jgit/) and also use the existing [JavaDoc](http://download.eclipse.org/jgit/site/4.2.0.201601211800-r/apidocs/) and the [User Guide](http://wiki.eclipse.org/JGit/User_Guide) as well, as they are well done and provide detailed information and a general overview of JGit respectively.
+Please make sure to take a look at the nicely written [introduction](http://www.codeaffine.com/2015/12/15/getting-started-with-jgit/) and also use the existing [JavaDoc](http://download.eclipse.org/jgit/site/4.6.1.201703071140-r/apidocs/) and the [User Guide](http://wiki.eclipse.org/JGit/User_Guide) as well, as they are well done and provide detailed information and a general overview of JGit respectively.
@@ -119,2 +119,2 @@
-* Doing stuff without local storage: Using org.eclipse.jgit.storage.dfs.InMemoryRepository to clone a Git repo in-memory and work from there, see http://download.eclipse.org/jgit/site/4.2.0.201601211800-r/apidocs/org/eclipse/jgit/internal/storage/dfs/InMemoryRepository.html
-* CherryPick: http://download.eclipse.org/jgit/site/4.2.0.201601211800-r/apidocs/org/eclipse/jgit/api/CherryPickCommand.html http://stackoverflow.com/questions/18300898/how-to-cherry-pick-a-commit-that-has-more-than-one-parent
+* Doing stuff without local storage: Using org.eclipse.jgit.storage.dfs.InMemoryRepository to clone a Git repo in-memory and work from there, see http://download.eclipse.org/jgit/site/4.6.1.201703071140-r/apidocs/org/eclipse/jgit/internal/storage/dfs/InMemoryRepository.html
+* CherryPick: http://download.eclipse.org/jgit/site/4.6.1.201703071140-r/apidocs/org/eclipse/jgit/api/CherryPickCommand.html http://stackoverflow.com/questions/18300898/how-to-cherry-pick-a-commit-that-has-more-than-one-parent
@@ -127 +127 @@
-* [JGit JavaDoc](http://download.eclipse.org/jgit/site/4.2.0.201601211800-r/apidocs/)
+* [JGit JavaDoc](http://download.eclipse.org/jgit/site/4.6.1.201703071140-r/apidocs/)
diff --git a/build.gradle b/build.gradle
index fac36a7..78899a8 100644
--- a/build.gradle
+++ b/build.gradle
@@ -15,2 +15,2 @@
-    compile 'org.eclipse.jgit:org.eclipse.jgit:4.6.0.201612231935-r'
-    compile 'org.eclipse.jgit:org.eclipse.jgit.archive:4.6.0.201612231935-r'
+    compile 'org.eclipse.jgit:org.eclipse.jgit:4.6.1.201703071140-r'
+    compile 'org.eclipse.jgit:org.eclipse.jgit.archive:4.6.1.201703071140-r'
diff --git a/httpserver/build.gradle b/httpserver/build.gradle
index 152f9f1..2c53138 100644
--- a/httpserver/build.gradle
+++ b/httpserver/build.gradle
@@ -13 +13 @@
-	compile 'org.eclipse.jgit:org.eclipse.jgit.http.server:4.6.0.201612231935-r'
+	compile 'org.eclipse.jgit:org.eclipse.jgit.http.server:4.6.1.201703071140-r'
diff --git a/pom.xml b/pom.xml
index fd671b5..61ede63 100644
--- a/pom.xml
+++ b/pom.xml
@@ -23 +23 @@
-      <version>4.6.0.201612231935-r</version>
+      <version>4.6.1.201703071140-r</version>
@@ -28 +28 @@
-      <version>4.6.0.201612231935-r</version>
+      <version>4.6.1.201703071140-r</version>
@@ -31,10 +31,10 @@
-	<dependency>
-		<groupId>commons-io</groupId>
-		<artifactId>commons-io</artifactId>
-		<version>2.5</version>
-	</dependency>
-	<dependency>
-		<groupId>org.slf4j</groupId>
-		<artifactId>slf4j-simple</artifactId>
-		<version>1.7.21</version>
-	</dependency>
+    <dependency>
+        <groupId>commons-io</groupId>
+        <artifactId>commons-io</artifactId>
+        <version>2.5</version>
+    </dependency>
+    <dependency>
+        <groupId>org.slf4j</groupId>
+        <artifactId>slf4j-simple</artifactId>
+        <version>1.7.21</version>
+    </dependency>
Diff Between dab33bcdca61e2e580b178ee93f039abf9a71dce 750409add9b583b5291e7d7b06ef2cb46b3ad5bfdiff --git a/build.gradle b/build.gradle
index da0c2ca..fac36a7 100644
--- a/build.gradle
+++ b/build.gradle
@@ -43 +43 @@
-    gradleVersion = '2.14.1'
+    gradleVersion = '3.4.1'
diff --git a/gradle/wrapper/gradle-wrapper.jar b/gradle/wrapper/gradle-wrapper.jar
index 3baa851..a028c4e 100644
--- a/gradle/wrapper/gradle-wrapper.jar
+++ b/gradle/wrapper/gradle-wrapper.jar
Binary files differ
diff --git a/gradle/wrapper/gradle-wrapper.properties b/gradle/wrapper/gradle-wrapper.properties
index e496c05..56e21ab 100644
--- a/gradle/wrapper/gradle-wrapper.properties
+++ b/gradle/wrapper/gradle-wrapper.properties
@@ -3 +3 @@
-distributionUrl=https\://services.gradle.org/distributions/gradle-2.14.1-bin.zip
+distributionUrl=https\://services.gradle.org/distributions/gradle-3.4.1-bin.zip
diff --git a/gradlew b/gradlew
index 27309d9..4453cce 100755
--- a/gradlew
+++ b/gradlew
@@ -1 +1 @@
-#!/usr/bin/env bash
+#!/usr/bin/env sh
@@ -157,3 +157,4 @@
-# Split up the JVM_OPTS And GRADLE_OPTS values into an array, following the shell quoting and substitution rules
-function splitJvmOpts() {
-    JVM_OPTS=("$@")
+# Escape application args
+save ( ) {
+    for i do printf %s\\n "$i" | sed "s/'/'\\\\''/g;1s/^/'/;\$s/\$/' \\\\/" ; done
+    echo " "
@@ -161,2 +162 @@
-eval splitJvmOpts $DEFAULT_JVM_OPTS $JAVA_OPTS $GRADLE_OPTS
-JVM_OPTS[${#JVM_OPTS[*]}]="-Dorg.gradle.appname=$APP_BASE_NAME"
+APP_ARGS=$(save "$@")
@@ -164 +164,9 @@
-exec "$JAVACMD" "${JVM_OPTS[@]}" -classpath "$CLASSPATH" org.gradle.wrapper.GradleWrapperMain "$@"
+# Collect all arguments for the java command, following the shell quoting and substitution rules
+eval set -- $DEFAULT_JVM_OPTS $JAVA_OPTS $GRADLE_OPTS "\"-Dorg.gradle.appname=$APP_BASE_NAME\"" -classpath "\"$CLASSPATH\"" org.gradle.wrapper.GradleWrapperMain "$APP_ARGS"
+
+# by default we should be in the correct project dir, but when run from Finder on Mac, the cwd is wrong
+if [ "$(uname)" = "Darwin" ] && [ "$HOME" = "$PWD" ]; then
+  cd "$(dirname "$0")"
+fi
+
+exec "$JAVACMD" "$@"
diff --git a/gradlew.bat b/gradlew.bat
index f6d5974..e95643d 100644
--- a/gradlew.bat
+++ b/gradlew.bat
@@ -52 +51,0 @@
-if "%@eval[2+2]" == "4" goto 4NT_args
@@ -63,5 +61,0 @@
-goto execute
-
-:4NT_args
-@rem Get arguments from the 4NT Shell from JP Software
-set CMD_LINE_ARGS=%$
diff --git a/httpserver/build.gradle b/httpserver/build.gradle
index 8ad3770..152f9f1 100644
--- a/httpserver/build.gradle
+++ b/httpserver/build.gradle
@@ -20 +20 @@
-    gradleVersion = '2.14.1'
+    gradleVersion = '3.4.1'
diff --git a/httpserver/gradle/wrapper/gradle-wrapper.jar b/httpserver/gradle/wrapper/gradle-wrapper.jar
index 5ccda13..3baa851 100644
--- a/httpserver/gradle/wrapper/gradle-wrapper.jar
+++ b/httpserver/gradle/wrapper/gradle-wrapper.jar
Binary files differ
diff --git a/httpserver/gradle/wrapper/gradle-wrapper.properties b/httpserver/gradle/wrapper/gradle-wrapper.properties
index e496c05..619ed0f 100644
--- a/httpserver/gradle/wrapper/gradle-wrapper.properties
+++ b/httpserver/gradle/wrapper/gradle-wrapper.properties
@@ -0,0 +1 @@
+#Tue Mar 14 17:18:46 CET 2017
@@ -3 +3,0 @@
-distributionUrl=https\://services.gradle.org/distributions/gradle-2.14.1-bin.zip
@@ -5,0 +6 @@
+distributionUrl=https\://services.gradle.org/distributions/gradle-3.4.1-bin.zip
diff --git a/httpserver/gradlew b/httpserver/gradlew
index 9d82f78..27309d9 100755
--- a/httpserver/gradlew
+++ b/httpserver/gradlew
@@ -9,2 +9,17 @@
-# Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
-DEFAULT_JVM_OPTS=""
+# Attempt to set APP_HOME
+# Resolve links: $0 may be a link
+PRG="$0"
+# Need this for relative symlinks.
+while [ -h "$PRG" ] ; do
+    ls=`ls -ld "$PRG"`
+    link=`expr "$ls" : '.*-> \(.*\)$'`
+    if expr "$link" : '/.*' > /dev/null; then
+        PRG="$link"
+    else
+        PRG=`dirname "$PRG"`"/$link"
+    fi
+done
+SAVED="`pwd`"
+cd "`dirname \"$PRG\"`/" >/dev/null
+APP_HOME="`pwd -P`"
+cd "$SAVED" >/dev/null
@@ -14,0 +30,3 @@
+# Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
+DEFAULT_JVM_OPTS=""
+
@@ -32,0 +51 @@
+nonstop=false
@@ -42,0 +62,3 @@
+  NONSTOP* )
+    nonstop=true
+    ;;
@@ -45,18 +66,0 @@
-# Attempt to set APP_HOME
-# Resolve links: $0 may be a link
-PRG="$0"
-# Need this for relative symlinks.
-while [ -h "$PRG" ] ; do
-    ls=`ls -ld "$PRG"`
-    link=`expr "$ls" : '.*-> \(.*\)$'`
-    if expr "$link" : '/.*' > /dev/null; then
-        PRG="$link"
-    else
-        PRG=`dirname "$PRG"`"/$link"
-    fi
-done
-SAVED="`pwd`"
-cd "`dirname \"$PRG\"`/" >/dev/null
-APP_HOME="`pwd -P`"
-cd "$SAVED" >/dev/null
-
@@ -88 +92 @@
-if [ "$cygwin" = "false" -a "$darwin" = "false" ] ; then
+if [ "$cygwin" = "false" -a "$darwin" = "false" -a "$nonstop" = "false" ] ; then
Diff Between 750409add9b583b5291e7d7b06ef2cb46b3ad5bf 7cf088de40704438fd7972fa3ef8f9f6469933b3diff --git a/httpserver/gradlew.bat b/httpserver/gradlew.bat
index 5f19212..832fdb6 100644
--- a/httpserver/gradlew.bat
+++ b/httpserver/gradlew.bat
@@ -11,3 +10,0 @@
-@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
-set DEFAULT_JVM_OPTS=
-
@@ -18,0 +16,3 @@
+@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
+set DEFAULT_JVM_OPTS=
+
Diff Between 7cf088de40704438fd7972fa3ef8f9f6469933b3 56a99537502ae5e9607ecbe4bed273c99b701aa4diff --git a/src/main/java/org/dstadler/jgit/porcelain/ShowLog.java b/src/main/java/org/dstadler/jgit/porcelain/ShowLog.java
index f461bde..7c901a6 100755
--- a/src/main/java/org/dstadler/jgit/porcelain/ShowLog.java
+++ b/src/main/java/org/dstadler/jgit/porcelain/ShowLog.java
@@ -59,0 +60,11 @@
+                        .not(repository.resolve("master"))
+                        .add(repository.resolve("remotes/origin/testbranch"))
+                        .call();
+                count = 0;
+                for (RevCommit rev : logs) {
+                    System.out.println("Commit: " + rev /* + ", name: " + rev.getName() + ", id: " + rev.getId().getName() */);
+                    count++;
+                }
+                System.out.println("Had " + count + " commits only on test-branch");
+
+                logs = git.log()
Diff Between 56a99537502ae5e9607ecbe4bed273c99b701aa4 ba38ddb95486717df6fc419843f5e497b47e74dediff --git a/README.md b/README.md
index 9304f4a..af9a278 100644
--- a/README.md
+++ b/README.md
@@ -150 +150 @@
-   Copyright 2013-2016 Dominik Stadler
+   Copyright 2013-2017 Dominik Stadler
diff --git a/build.gradle b/build.gradle
index 79e522a..da0c2ca 100644
--- a/build.gradle
+++ b/build.gradle
@@ -15,2 +15,2 @@
-    compile 'org.eclipse.jgit:org.eclipse.jgit:4.5.0.201609210915-r'
-    compile 'org.eclipse.jgit:org.eclipse.jgit.archive:4.5.0.201609210915-r'
+    compile 'org.eclipse.jgit:org.eclipse.jgit:4.6.0.201612231935-r'
+    compile 'org.eclipse.jgit:org.eclipse.jgit.archive:4.6.0.201612231935-r'
diff --git a/httpserver/build.gradle b/httpserver/build.gradle
index 37c7aea..8ad3770 100644
--- a/httpserver/build.gradle
+++ b/httpserver/build.gradle
@@ -13 +13 @@
-	compile 'org.eclipse.jgit:org.eclipse.jgit.http.server:4.5.0.201609210915-r'
+	compile 'org.eclipse.jgit:org.eclipse.jgit.http.server:4.6.0.201612231935-r'
diff --git a/pom.xml b/pom.xml
index 55f70a4..fd671b5 100644
--- a/pom.xml
+++ b/pom.xml
@@ -23 +23 @@
-      <version>4.5.0.201609210915-r</version>
+      <version>4.6.0.201612231935-r</version>
@@ -28 +28 @@
-      <version>4.5.0.201609210915-r</version>
+      <version>4.6.0.201612231935-r</version>
Diff Between ba38ddb95486717df6fc419843f5e497b47e74de 9e0719d7d773b41b49ebf04e6fd7b5c637e96063diff --git a/src/main/java/org/dstadler/jgit/porcelain/ShowBlame.java b/src/main/java/org/dstadler/jgit/porcelain/ShowBlame.java
index b76b555..c47f3bd 100644
--- a/src/main/java/org/dstadler/jgit/porcelain/ShowBlame.java
+++ b/src/main/java/org/dstadler/jgit/porcelain/ShowBlame.java
@@ -4 +4 @@
-    Copyright 2013, 2014 Dominik Stadler
+    Copyright 2013, 2014, 2017 Dominik Stadler
@@ -20,0 +21 @@
+import java.io.FileInputStream;
@@ -41 +42,7 @@
- * changed which line in a file
+ * changed which line in a file.
+ *
+ * It uses HEAD~~ to select the version of README.md two commits ago
+ * and reads the blame information for it.
+ *
+ * Then it prints out the number of lines and the actual number of lines in the
+ * latest/local version of the file.
@@ -51 +58 @@
-            ObjectId commitID = repository.resolve("HEAD");
+            ObjectId commitID = repository.resolve("HEAD~~");
@@ -56,2 +63,2 @@
-            // read the number of lines from the commit to not look at changes in the working copy
-            int lines = countFiles(repository, commitID, "README.md");
+            // read the number of lines from the given revision, this excludes changes from the last two commits due to the "~~" above
+            int lines = countLinesOfFileInCommit(repository, commitID, "README.md");
@@ -63 +70,6 @@
-            System.out.println("Displayed commits responsible for " + lines + " lines of README.md");
+            final int currentLines;
+            try (final FileInputStream input = new FileInputStream("README.md")) {
+                currentLines = IOUtils.readLines(input, "UTF-8").size();
+            }
+
+            System.out.println("Displayed commits responsible for " + lines + " lines of README.md, current version has " + currentLines + " lines");
@@ -67 +79 @@
-    private static int countFiles(Repository repository, ObjectId commitID, String name) throws IOException {
+    private static int countLinesOfFileInCommit(Repository repository, ObjectId commitID, String name) throws IOException {
@@ -84,0 +97 @@
+                // load the content of the file into a stream
@@ -86 +98,0 @@
-                // and then one can the loader to read the file
Diff Between 9e0719d7d773b41b49ebf04e6fd7b5c637e96063 b97b184b0ce11c0b6a4dcc2b57768ff155cb696bdiff --git a/README.md b/README.md
index dedf4b0..9304f4a 100644
--- a/README.md
+++ b/README.md
@@ -100,0 +101 @@
+* [Find all commits that are reachable via tags, branches, remotes, HEADs, ...](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/api/WalkAllCommits.java)
diff --git a/src/main/java/org/dstadler/jgit/api/WalkAllCommits.java b/src/main/java/org/dstadler/jgit/api/WalkAllCommits.java
new file mode 100644
index 0000000..8d6ffc3
--- /dev/null
+++ b/src/main/java/org/dstadler/jgit/api/WalkAllCommits.java
@@ -0,0 +1,57 @@
+package org.dstadler.jgit.api;
+
+/*
+   Copyright 2016 Dominik Stadler
+
+   Licensed under the Apache License, Version 2.0 (the "License");
+   you may not use this file except in compliance with the License.
+   You may obtain a copy of the License at
+
+     http://www.apache.org/licenses/LICENSE-2.0
+
+   Unless required by applicable law or agreed to in writing, software
+   distributed under the License is distributed on an "AS IS" BASIS,
+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+   See the License for the specific language governing permissions and
+   limitations under the License.
+ */
+
+import org.dstadler.jgit.helper.CookbookHelper;
+import org.eclipse.jgit.lib.Ref;
+import org.eclipse.jgit.lib.Repository;
+import org.eclipse.jgit.revwalk.RevCommit;
+import org.eclipse.jgit.revwalk.RevWalk;
+
+import java.io.IOException;
+import java.util.Collection;
+
+
+/**
+ * Simple snippet which shows how to use RevWalk to iterate over all commits
+ * across all branches/tags/remotes in the given repository
+ *
+ * See the original discussion at http://stackoverflow.com/a/40803945/411846
+ */
+public class WalkAllCommits {
+
+    public static void main(String[] args) throws IOException {
+        try (Repository repository = CookbookHelper.openJGitCookbookRepository()) {
+            // get a list of all known heads, tags, remotes, ...
+            Collection<Ref> allRefs = repository.getAllRefs().values();
+
+            // a RevWalk allows to walk over commits based on some filtering that is defined
+            try (RevWalk revWalk = new RevWalk( repository )) {
+                for( Ref ref : allRefs ) {
+                    revWalk.markStart( revWalk.parseCommit( ref.getObjectId() ));
+                }
+                System.out.println("Walking all commits starting with " + allRefs.size() + " refs: " + allRefs);
+                int count = 0;
+                for( RevCommit commit : revWalk ) {
+                    System.out.println("Commit: " + commit);
+                    count++;
+                }
+                System.out.println("Had " + count + " commits");
+            }
+        }
+    }
+}
diff --git a/src/test/java/org/dstadler/jgit/api/ApiTest.java b/src/test/java/org/dstadler/jgit/api/ApiTest.java
index cb501c2..6c58c27 100644
--- a/src/test/java/org/dstadler/jgit/api/ApiTest.java
+++ b/src/test/java/org/dstadler/jgit/api/ApiTest.java
@@ -31,0 +32 @@
+        WalkAllCommits.main(null);
Diff Between b97b184b0ce11c0b6a4dcc2b57768ff155cb696b c05cc12fe67fb7b323e804cdce7cea085adbea6ediff --git a/README.md b/README.md
index 1309b01..dedf4b0 100644
--- a/README.md
+++ b/README.md
@@ -98,0 +99,2 @@
+* [Iterate over files of a commit recursively](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/api/WalkTreeRecursive.java)
+* [Iterate over files of a commit non-recursively](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/api/WalkTreeNonRecursive.java)
diff --git a/src/main/java/org/dstadler/jgit/api/WalkTreeNonRecursive.java b/src/main/java/org/dstadler/jgit/api/WalkTreeNonRecursive.java
new file mode 100644
index 0000000..eaa2f54
--- /dev/null
+++ b/src/main/java/org/dstadler/jgit/api/WalkTreeNonRecursive.java
@@ -0,0 +1,62 @@
+package org.dstadler.jgit.api;
+
+/*
+   Copyright 2013, 2014 Dominik Stadler
+
+   Licensed under the Apache License, Version 2.0 (the "License");
+   you may not use this file except in compliance with the License.
+   You may obtain a copy of the License at
+
+     http://www.apache.org/licenses/LICENSE-2.0
+
+   Unless required by applicable law or agreed to in writing, software
+   distributed under the License is distributed on an "AS IS" BASIS,
+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+   See the License for the specific language governing permissions and
+   limitations under the License.
+ */
+
+import org.dstadler.jgit.helper.CookbookHelper;
+import org.eclipse.jgit.lib.Ref;
+import org.eclipse.jgit.lib.Repository;
+import org.eclipse.jgit.revwalk.RevCommit;
+import org.eclipse.jgit.revwalk.RevTree;
+import org.eclipse.jgit.revwalk.RevWalk;
+import org.eclipse.jgit.treewalk.TreeWalk;
+
+import java.io.IOException;
+
+/**
+ *
+ * Simple snippet which shows how to use RevWalk to iterate over items in a file-tree
+ *
+ * See {@link WalkTreeNonRecursive} for a different usage of the {@link TreeWalk} class.
+ *
+ * @author dominik.stadler at gmx.at
+ */
+public class WalkTreeNonRecursive {
+
+    public static void main(String[] args) throws IOException {
+        try (Repository repository = CookbookHelper.openJGitCookbookRepository()) {
+            Ref head = repository.findRef("HEAD");
+
+            // a RevWalk allows to walk over commits based on some filtering that is defined
+            try (RevWalk walk = new RevWalk(repository)) {
+                RevCommit commit = walk.parseCommit(head.getObjectId());
+                RevTree tree = commit.getTree();
+                System.out.println("Having tree: " + tree);
+
+                // now use a TreeWalk to iterate over all files in the Tree
+                // you can set Filters to narrow down the results if needed
+                try (TreeWalk treeWalk = new TreeWalk(repository)) {
+                    treeWalk.addTree(tree);
+                    // not walk the tree recursively so we only get the elements in the top-level directory
+                    treeWalk.setRecursive(false);
+                    while (treeWalk.next()) {
+                        System.out.println("found: " + treeWalk.getPathString());
+                    }
+                }
+            }
+        }
+    }
+}
diff --git a/src/main/java/org/dstadler/jgit/api/WalkTreeRecursive.java b/src/main/java/org/dstadler/jgit/api/WalkTreeRecursive.java
new file mode 100644
index 0000000..5f6331f
--- /dev/null
+++ b/src/main/java/org/dstadler/jgit/api/WalkTreeRecursive.java
@@ -0,0 +1,60 @@
+package org.dstadler.jgit.api;
+
+/*
+   Copyright 2013, 2014 Dominik Stadler
+
+   Licensed under the Apache License, Version 2.0 (the "License");
+   you may not use this file except in compliance with the License.
+   You may obtain a copy of the License at
+
+     http://www.apache.org/licenses/LICENSE-2.0
+
+   Unless required by applicable law or agreed to in writing, software
+   distributed under the License is distributed on an "AS IS" BASIS,
+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+   See the License for the specific language governing permissions and
+   limitations under the License.
+ */
+
+import org.dstadler.jgit.helper.CookbookHelper;
+import org.eclipse.jgit.lib.Ref;
+import org.eclipse.jgit.lib.Repository;
+import org.eclipse.jgit.revwalk.RevCommit;
+import org.eclipse.jgit.revwalk.RevTree;
+import org.eclipse.jgit.revwalk.RevWalk;
+import org.eclipse.jgit.treewalk.TreeWalk;
+
+import java.io.IOException;
+
+/**
+ * Simple snippet which shows how to use RevWalk to iterate over items in a file-tree.
+ *
+ * See {@link WalkTreeNonRecursive} for a different usage of the {@link TreeWalk} class.
+ *
+ * @author dominik.stadler at gmx.at
+ */
+public class WalkTreeRecursive {
+
+    public static void main(String[] args) throws IOException {
+        try (Repository repository = CookbookHelper.openJGitCookbookRepository()) {
+            Ref head = repository.findRef("HEAD");
+
+            // a RevWalk allows to walk over commits based on some filtering that is defined
+            try (RevWalk walk = new RevWalk(repository)) {
+                RevCommit commit = walk.parseCommit(head.getObjectId());
+                RevTree tree = commit.getTree();
+                System.out.println("Having tree: " + tree);
+
+                // now use a TreeWalk to iterate over all files in the Tree recursively
+                // you can set Filters to narrow down the results if needed
+                try (TreeWalk treeWalk = new TreeWalk(repository)) {
+                    treeWalk.addTree(tree);
+                    treeWalk.setRecursive(true);
+                    while (treeWalk.next()) {
+                        System.out.println("found: " + treeWalk.getPathString());
+                    }
+                }
+            }
+        }
+    }
+}
diff --git a/src/main/java/org/dstadler/jgit/unfinished/WalkTreeNonRecursive.java b/src/main/java/org/dstadler/jgit/unfinished/WalkTreeNonRecursive.java
deleted file mode 100644
index 83dbcb1..0000000
--- a/src/main/java/org/dstadler/jgit/unfinished/WalkTreeNonRecursive.java
+++ /dev/null
@@ -1,60 +0,0 @@
-package org.dstadler.jgit.unfinished;
-
-/*
-   Copyright 2013, 2014 Dominik Stadler
-
-   Licensed under the Apache License, Version 2.0 (the "License");
-   you may not use this file except in compliance with the License.
-   You may obtain a copy of the License at
-
-     http://www.apache.org/licenses/LICENSE-2.0
-
-   Unless required by applicable law or agreed to in writing, software
-   distributed under the License is distributed on an "AS IS" BASIS,
-   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-   See the License for the specific language governing permissions and
-   limitations under the License.
- */
-
-import org.dstadler.jgit.helper.CookbookHelper;
-import org.eclipse.jgit.lib.Ref;
-import org.eclipse.jgit.lib.Repository;
-import org.eclipse.jgit.revwalk.RevCommit;
-import org.eclipse.jgit.revwalk.RevTree;
-import org.eclipse.jgit.revwalk.RevWalk;
-import org.eclipse.jgit.treewalk.TreeWalk;
-
-import java.io.IOException;
-
-/**
- * Note: This snippet is not done and likely does not show anything useful yet
- *
- * Simple snippet which shows how to use RevWalk to iterate over items in a file-tree
- *
- * @author dominik.stadler at gmx.at
- */
-public class WalkTreeNonRecursive {
-
-    public static void main(String[] args) throws IOException {
-        try (Repository repository = CookbookHelper.openJGitCookbookRepository()) {
-            Ref head = repository.findRef("HEAD");
-
-            // a RevWalk allows to walk over commits based on some filtering that is defined
-            try (RevWalk walk = new RevWalk(repository)) {
-                RevCommit commit = walk.parseCommit(head.getObjectId());
-                RevTree tree = commit.getTree();
-                System.out.println("Having tree: " + tree);
-
-                // now use a TreeWalk to iterate over all files in the Tree recursively
-                // you can set Filters to narrow down the results if needed
-                try (TreeWalk treeWalk = new TreeWalk(repository)) {
-                    treeWalk.addTree(tree);
-                    treeWalk.setRecursive(false);
-                    while (treeWalk.next()) {
-                        System.out.println("found: " + treeWalk.getPathString());
-                    }
-                }
-            }
-        }
-    }
-}
diff --git a/src/main/java/org/dstadler/jgit/unfinished/WalkTreeRecursive.java b/src/main/java/org/dstadler/jgit/unfinished/WalkTreeRecursive.java
deleted file mode 100644
index 80ff6cf..0000000
--- a/src/main/java/org/dstadler/jgit/unfinished/WalkTreeRecursive.java
+++ /dev/null
@@ -1,60 +0,0 @@
-package org.dstadler.jgit.unfinished;
-
-/*
-   Copyright 2013, 2014 Dominik Stadler
-
-   Licensed under the Apache License, Version 2.0 (the "License");
-   you may not use this file except in compliance with the License.
-   You may obtain a copy of the License at
-
-     http://www.apache.org/licenses/LICENSE-2.0
-
-   Unless required by applicable law or agreed to in writing, software
-   distributed under the License is distributed on an "AS IS" BASIS,
-   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-   See the License for the specific language governing permissions and
-   limitations under the License.
- */
-
-import org.dstadler.jgit.helper.CookbookHelper;
-import org.eclipse.jgit.lib.Ref;
-import org.eclipse.jgit.lib.Repository;
-import org.eclipse.jgit.revwalk.RevCommit;
-import org.eclipse.jgit.revwalk.RevTree;
-import org.eclipse.jgit.revwalk.RevWalk;
-import org.eclipse.jgit.treewalk.TreeWalk;
-
-import java.io.IOException;
-
-/**
- * Note: This snippet is not done and likely does not show anything useful yet
- *
- * Simple snippet which shows how to use RevWalk to iterate over items in a file-tree
- *
- * @author dominik.stadler at gmx.at
- */
-public class WalkTreeRecursive {
-
-    public static void main(String[] args) throws IOException {
-        try (Repository repository = CookbookHelper.openJGitCookbookRepository()) {
-            Ref head = repository.findRef("HEAD");
-
-            // a RevWalk allows to walk over commits based on some filtering that is defined
-            try (RevWalk walk = new RevWalk(repository)) {
-                RevCommit commit = walk.parseCommit(head.getObjectId());
-                RevTree tree = commit.getTree();
-                System.out.println("Having tree: " + tree);
-
-                // now use a TreeWalk to iterate over all files in the Tree recursively
-                // you can set Filters to narrow down the results if needed
-                try (TreeWalk treeWalk = new TreeWalk(repository)) {
-                    treeWalk.addTree(tree);
-                    treeWalk.setRecursive(true);
-                    while (treeWalk.next()) {
-                        System.out.println("found: " + treeWalk.getPathString());
-                    }
-                }
-            }
-        }
-    }
-}
diff --git a/src/test/java/org/dstadler/jgit/api/ApiTest.java b/src/test/java/org/dstadler/jgit/api/ApiTest.java
index a52bb9e..cb501c2 100644
--- a/src/test/java/org/dstadler/jgit/api/ApiTest.java
+++ b/src/test/java/org/dstadler/jgit/api/ApiTest.java
@@ -33,0 +34,2 @@
+        WalkTreeNonRecursive.main(null);
+        WalkTreeRecursive.main(null);
Diff Between c05cc12fe67fb7b323e804cdce7cea085adbea6e 86366da272d76b88e77ccaf6ad8e602633ac3413diff --git a/build.gradle b/build.gradle
index f260da5..79e522a 100644
--- a/build.gradle
+++ b/build.gradle
@@ -15,4 +15,4 @@
-	compile 'org.eclipse.jgit:org.eclipse.jgit:4.5.0.201609210915-r'
-	compile 'org.eclipse.jgit:org.eclipse.jgit.archive:4.5.0.201609210915-r'
-	compile 'commons-io:commons-io:2.5'
-	compile 'org.slf4j:slf4j-simple:1.7.21'
+    compile 'org.eclipse.jgit:org.eclipse.jgit:4.5.0.201609210915-r'
+    compile 'org.eclipse.jgit:org.eclipse.jgit.archive:4.5.0.201609210915-r'
+    compile 'commons-io:commons-io:2.5'
+    compile 'org.slf4j:slf4j-simple:1.7.21'
@@ -20 +20 @@
-    testCompile "junit:junit:4.12"
+    testCompile 'junit:junit:4.12'
@@ -26,3 +26,3 @@
-	ant.replaceregexp(match:'^#.*', replace:'', flags:'g', byline:true) {
-		fileset(dir: project.projectDir, includes: '.settings/org.eclipse.jdt.core.prefs,.settings/com.google.gdt.eclipse.core.prefs')
-	}
+    ant.replaceregexp(match:'^#.*', replace:'', flags:'g', byline:true) {
+        fileset(dir: project.projectDir, includes: '.settings/org.eclipse.jdt.core.prefs,.settings/com.google.gdt.eclipse.core.prefs')
+    }
@@ -31,7 +31,7 @@
-	new File(project.projectDir, '.settings/org.eclipse.jdt.core.prefs').with { it.text = it.readLines().findAll { it }.sort().join('\n') }
-	new File(project.projectDir, '.classpath').with { it.text = it.readLines().findAll { it }.unique().join('\n') }
-	File file = new File(project.projectDir, '.settings/com.google.gdt.eclipse.core.prefs');
-	if(file.exists()) {
-		file.with { it.text = it.readLines().findAll { it }.sort().join('\n') }
-	}
-	ant.fixcrlf(srcDir: '.settings', eol: 'lf')
+    new File(project.projectDir, '.settings/org.eclipse.jdt.core.prefs').with { it.text = it.readLines().findAll { it }.sort().join('\n') }
+    new File(project.projectDir, '.classpath').with { it.text = it.readLines().findAll { it }.unique().join('\n') }
+    File file = new File(project.projectDir, '.settings/com.google.gdt.eclipse.core.prefs');
+    if(file.exists()) {
+        file.with { it.text = it.readLines().findAll { it }.sort().join('\n') }
+    }
+    ant.fixcrlf(srcDir: '.settings', eol: 'lf')
@@ -47,5 +47,5 @@
-	ant.replaceregexp(match:'^#.*', replace:'', flags:'g', byline:true) {
-		fileset(dir: project.projectDir, includes: 'gradle/wrapper/gradle-wrapper.properties')
-	}
-	new File(project.projectDir, 'gradle/wrapper/gradle-wrapper.properties').with { it.text = it.readLines().findAll { it }.sort().join('\n') }
-	ant.fixcrlf(file: 'gradle/wrapper/gradle-wrapper.properties', eol: 'lf')
+    ant.replaceregexp(match:'^#.*', replace:'', flags:'g', byline:true) {
+        fileset(dir: project.projectDir, includes: 'gradle/wrapper/gradle-wrapper.properties')
+    }
+    new File(project.projectDir, 'gradle/wrapper/gradle-wrapper.properties').with { it.text = it.readLines().findAll { it }.sort().join('\n') }
+    ant.fixcrlf(file: 'gradle/wrapper/gradle-wrapper.properties', eol: 'lf')
Diff Between 86366da272d76b88e77ccaf6ad8e602633ac3413 25f786563bb8b5fd06a6d7b3afc0e1ada9677301diff --git a/README.md b/README.md
index 84a5f63..1309b01 100644
--- a/README.md
+++ b/README.md
@@ -99,0 +100,7 @@
+##### GitServlet
+
+* There is a standalone sub-project in directory [httpserver](https://github.com/centic9/jgit-cookbook/blob/master/httpserver) which 
+starts up a simple HTTP Git server based on the JGit GitServlet.
+
+Just import the project in your IDE and start up the `Main` application, see the Comments in the code for more details.
+
Diff Between 25f786563bb8b5fd06a6d7b3afc0e1ada9677301 4e162abafb0895b9c875a4d334b209b8051b5c71diff --git a/httpserver/build.gradle b/httpserver/build.gradle
new file mode 100644
index 0000000..37c7aea
--- /dev/null
+++ b/httpserver/build.gradle
@@ -0,0 +1,21 @@
+apply plugin: 'java'
+
+sourceCompatibility = 1.8
+
+repositories {
+  mavenCentral()
+  maven {
+    url "https://repo.eclipse.org/content/groups/releases/"
+  }
+}
+
+dependencies {
+	compile 'org.eclipse.jgit:org.eclipse.jgit.http.server:4.5.0.201609210915-r'
+	compile 'org.eclipse.jetty:jetty-servlet:9.3.14.v20161028'
+
+	compile 'org.slf4j:slf4j-simple:1.7.21'
+}
+
+task wrapper(type: Wrapper) {
+    gradleVersion = '2.14.1'
+}
diff --git a/httpserver/gradle/wrapper/gradle-wrapper.jar b/httpserver/gradle/wrapper/gradle-wrapper.jar
new file mode 100644
index 0000000..5ccda13
--- /dev/null
+++ b/httpserver/gradle/wrapper/gradle-wrapper.jar
Binary files differ
diff --git a/httpserver/gradle/wrapper/gradle-wrapper.properties b/httpserver/gradle/wrapper/gradle-wrapper.properties
new file mode 100644
index 0000000..e496c05
--- /dev/null
+++ b/httpserver/gradle/wrapper/gradle-wrapper.properties
@@ -0,0 +1,5 @@
+distributionBase=GRADLE_USER_HOME
+distributionPath=wrapper/dists
+distributionUrl=https\://services.gradle.org/distributions/gradle-2.14.1-bin.zip
+zipStoreBase=GRADLE_USER_HOME
+zipStorePath=wrapper/dists
diff --git a/httpserver/gradlew b/httpserver/gradlew
new file mode 100755
index 0000000..9d82f78
--- /dev/null
+++ b/httpserver/gradlew
@@ -0,0 +1,160 @@
+#!/usr/bin/env bash
+
+##############################################################################
+##
+##  Gradle start up script for UN*X
+##
+##############################################################################
+
+# Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
+DEFAULT_JVM_OPTS=""
+
+APP_NAME="Gradle"
+APP_BASE_NAME=`basename "$0"`
+
+# Use the maximum available, or set MAX_FD != -1 to use that value.
+MAX_FD="maximum"
+
+warn ( ) {
+    echo "$*"
+}
+
+die ( ) {
+    echo
+    echo "$*"
+    echo
+    exit 1
+}
+
+# OS specific support (must be 'true' or 'false').
+cygwin=false
+msys=false
+darwin=false
+case "`uname`" in
+  CYGWIN* )
+    cygwin=true
+    ;;
+  Darwin* )
+    darwin=true
+    ;;
+  MINGW* )
+    msys=true
+    ;;
+esac
+
+# Attempt to set APP_HOME
+# Resolve links: $0 may be a link
+PRG="$0"
+# Need this for relative symlinks.
+while [ -h "$PRG" ] ; do
+    ls=`ls -ld "$PRG"`
+    link=`expr "$ls" : '.*-> \(.*\)$'`
+    if expr "$link" : '/.*' > /dev/null; then
+        PRG="$link"
+    else
+        PRG=`dirname "$PRG"`"/$link"
+    fi
+done
+SAVED="`pwd`"
+cd "`dirname \"$PRG\"`/" >/dev/null
+APP_HOME="`pwd -P`"
+cd "$SAVED" >/dev/null
+
+CLASSPATH=$APP_HOME/gradle/wrapper/gradle-wrapper.jar
+
+# Determine the Java command to use to start the JVM.
+if [ -n "$JAVA_HOME" ] ; then
+    if [ -x "$JAVA_HOME/jre/sh/java" ] ; then
+        # IBM's JDK on AIX uses strange locations for the executables
+        JAVACMD="$JAVA_HOME/jre/sh/java"
+    else
+        JAVACMD="$JAVA_HOME/bin/java"
+    fi
+    if [ ! -x "$JAVACMD" ] ; then
+        die "ERROR: JAVA_HOME is set to an invalid directory: $JAVA_HOME
+
+Please set the JAVA_HOME variable in your environment to match the
+location of your Java installation."
+    fi
+else
+    JAVACMD="java"
+    which java >/dev/null 2>&1 || die "ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.
+
+Please set the JAVA_HOME variable in your environment to match the
+location of your Java installation."
+fi
+
+# Increase the maximum file descriptors if we can.
+if [ "$cygwin" = "false" -a "$darwin" = "false" ] ; then
+    MAX_FD_LIMIT=`ulimit -H -n`
+    if [ $? -eq 0 ] ; then
+        if [ "$MAX_FD" = "maximum" -o "$MAX_FD" = "max" ] ; then
+            MAX_FD="$MAX_FD_LIMIT"
+        fi
+        ulimit -n $MAX_FD
+        if [ $? -ne 0 ] ; then
+            warn "Could not set maximum file descriptor limit: $MAX_FD"
+        fi
+    else
+        warn "Could not query maximum file descriptor limit: $MAX_FD_LIMIT"
+    fi
+fi
+
+# For Darwin, add options to specify how the application appears in the dock
+if $darwin; then
+    GRADLE_OPTS="$GRADLE_OPTS \"-Xdock:name=$APP_NAME\" \"-Xdock:icon=$APP_HOME/media/gradle.icns\""
+fi
+
+# For Cygwin, switch paths to Windows format before running java
+if $cygwin ; then
+    APP_HOME=`cygpath --path --mixed "$APP_HOME"`
+    CLASSPATH=`cygpath --path --mixed "$CLASSPATH"`
+    JAVACMD=`cygpath --unix "$JAVACMD"`
+
+    # We build the pattern for arguments to be converted via cygpath
+    ROOTDIRSRAW=`find -L / -maxdepth 1 -mindepth 1 -type d 2>/dev/null`
+    SEP=""
+    for dir in $ROOTDIRSRAW ; do
+        ROOTDIRS="$ROOTDIRS$SEP$dir"
+        SEP="|"
+    done
+    OURCYGPATTERN="(^($ROOTDIRS))"
+    # Add a user-defined pattern to the cygpath arguments
+    if [ "$GRADLE_CYGPATTERN" != "" ] ; then
+        OURCYGPATTERN="$OURCYGPATTERN|($GRADLE_CYGPATTERN)"
+    fi
+    # Now convert the arguments - kludge to limit ourselves to /bin/sh
+    i=0
+    for arg in "$@" ; do
+        CHECK=`echo "$arg"|egrep -c "$OURCYGPATTERN" -`
+        CHECK2=`echo "$arg"|egrep -c "^-"`                                 ### Determine if an option
+
+        if [ $CHECK -ne 0 ] && [ $CHECK2 -eq 0 ] ; then                    ### Added a condition
+            eval `echo args$i`=`cygpath --path --ignore --mixed "$arg"`
+        else
+            eval `echo args$i`="\"$arg\""
+        fi
+        i=$((i+1))
+    done
+    case $i in
+        (0) set -- ;;
+        (1) set -- "$args0" ;;
+        (2) set -- "$args0" "$args1" ;;
+        (3) set -- "$args0" "$args1" "$args2" ;;
+        (4) set -- "$args0" "$args1" "$args2" "$args3" ;;
+        (5) set -- "$args0" "$args1" "$args2" "$args3" "$args4" ;;
+        (6) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" ;;
+        (7) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" "$args6" ;;
+        (8) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" "$args6" "$args7" ;;
+        (9) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" "$args6" "$args7" "$args8" ;;
+    esac
+fi
+
+# Split up the JVM_OPTS And GRADLE_OPTS values into an array, following the shell quoting and substitution rules
+function splitJvmOpts() {
+    JVM_OPTS=("$@")
+}
+eval splitJvmOpts $DEFAULT_JVM_OPTS $JAVA_OPTS $GRADLE_OPTS
+JVM_OPTS[${#JVM_OPTS[*]}]="-Dorg.gradle.appname=$APP_BASE_NAME"
+
+exec "$JAVACMD" "${JVM_OPTS[@]}" -classpath "$CLASSPATH" org.gradle.wrapper.GradleWrapperMain "$@"
diff --git a/httpserver/gradlew.bat b/httpserver/gradlew.bat
new file mode 100644
index 0000000..5f19212
--- /dev/null
+++ b/httpserver/gradlew.bat
@@ -0,0 +1,90 @@
+@if "%DEBUG%" == "" @echo off
+@rem ##########################################################################
+@rem
+@rem  Gradle startup script for Windows
+@rem
+@rem ##########################################################################
+
+@rem Set local scope for the variables with windows NT shell
+if "%OS%"=="Windows_NT" setlocal
+
+@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
+set DEFAULT_JVM_OPTS=
+
+set DIRNAME=%~dp0
+if "%DIRNAME%" == "" set DIRNAME=.
+set APP_BASE_NAME=%~n0
+set APP_HOME=%DIRNAME%
+
+@rem Find java.exe
+if defined JAVA_HOME goto findJavaFromJavaHome
+
+set JAVA_EXE=java.exe
+%JAVA_EXE% -version >NUL 2>&1
+if "%ERRORLEVEL%" == "0" goto init
+
+echo.
+echo ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.
+echo.
+echo Please set the JAVA_HOME variable in your environment to match the
+echo location of your Java installation.
+
+goto fail
+
+:findJavaFromJavaHome
+set JAVA_HOME=%JAVA_HOME:"=%
+set JAVA_EXE=%JAVA_HOME%/bin/java.exe
+
+if exist "%JAVA_EXE%" goto init
+
+echo.
+echo ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%
+echo.
+echo Please set the JAVA_HOME variable in your environment to match the
+echo location of your Java installation.
+
+goto fail
+
+:init
+@rem Get command-line arguments, handling Windows variants
+
+if not "%OS%" == "Windows_NT" goto win9xME_args
+if "%@eval[2+2]" == "4" goto 4NT_args
+
+:win9xME_args
+@rem Slurp the command line arguments.
+set CMD_LINE_ARGS=
+set _SKIP=2
+
+:win9xME_args_slurp
+if "x%~1" == "x" goto execute
+
+set CMD_LINE_ARGS=%*
+goto execute
+
+:4NT_args
+@rem Get arguments from the 4NT Shell from JP Software
+set CMD_LINE_ARGS=%$
+
+:execute
+@rem Setup the command line
+
+set CLASSPATH=%APP_HOME%\gradle\wrapper\gradle-wrapper.jar
+
+@rem Execute Gradle
+"%JAVA_EXE%" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% "-Dorg.gradle.appname=%APP_BASE_NAME%" -classpath "%CLASSPATH%" org.gradle.wrapper.GradleWrapperMain %CMD_LINE_ARGS%
+
+:end
+@rem End local scope for the variables with windows NT shell
+if "%ERRORLEVEL%"=="0" goto mainEnd
+
+:fail
+rem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of
+rem the _cmd.exe /c_ return code!
+if  not "" == "%GRADLE_EXIT_CONSOLE%" exit 1
+exit /b 1
+
+:mainEnd
+if "%OS%"=="Windows_NT" endlocal
+
+:omega
diff --git a/httpserver/src/main/java/org/dstadler/jgit/server/Main.java b/httpserver/src/main/java/org/dstadler/jgit/server/Main.java
new file mode 100644
index 0000000..08ac525
--- /dev/null
+++ b/httpserver/src/main/java/org/dstadler/jgit/server/Main.java
@@ -0,0 +1,96 @@
+package org.dstadler.jgit.server;
+
+import org.eclipse.jetty.server.Server;
+import org.eclipse.jetty.servlet.ServletHandler;
+import org.eclipse.jetty.servlet.ServletHolder;
+import org.eclipse.jgit.api.Git;
+import org.eclipse.jgit.api.errors.GitAPIException;
+import org.eclipse.jgit.http.server.GitServlet;
+import org.eclipse.jgit.lib.Repository;
+import org.eclipse.jgit.storage.file.FileRepositoryBuilder;
+
+import java.io.File;
+import java.io.IOException;
+
+/**
+ * A very simple Git Server which allows to clone a Git repository. Currently
+ * it will return the same repository for any name that is requested, there is no
+ * logic to distinguish between different repos in this simple example.
+ *
+ * After starting this application, you can use something like
+ *
+ *      git clone http://localhost:8080/TestRepo
+ *
+ * to clone the repository from the running server.
+ *
+ *
+ * Note: Visiting http://localhost:8080/&lt;reponame&gt; in the Browser
+ * will not work and always return a HTTP Error 404.
+ */
+public class Main {
+    public static void main(String[] args) throws Exception {
+        Repository repository = createNewRepository();
+
+        populateRepository(repository);
+
+        // Create the JGit Servlet which handles the Git protocol
+        GitServlet gs = new GitServlet();
+        gs.setRepositoryResolver((req, name) -> {
+            repository.incrementOpen();
+            return repository;
+        });
+
+        // start up the Servlet and start serving requests
+        Server server = configureAndStartHttpServer(gs);
+
+        // finally wait for the Server being stopped
+        server.join();
+    }
+
+    private static Server configureAndStartHttpServer(GitServlet gs) throws Exception {
+        Server server = new Server(8080);
+
+        ServletHandler handler = new ServletHandler();
+        server.setHandler(handler);
+
+        ServletHolder holder = new ServletHolder(gs);
+
+        handler.addServletWithMapping(holder, "/*");
+
+        server.start();
+        return server;
+    }
+
+    private static void populateRepository(Repository repository) throws IOException, GitAPIException {
+        try (Git git = new Git(repository)) {
+            File myfile = new File(repository.getDirectory().getParent(), "testfile");
+            if(!myfile.createNewFile()) {
+                throw new IOException("Could not create file " + myfile);
+            }
+
+            git.add().addFilepattern("testfile").call();
+
+            System.out.println("Added file " + myfile + " to repository at " + repository.getDirectory());
+
+            git.commit().setMessage("Test-Checkin").call();
+        }
+    }
+
+    private static Repository createNewRepository() throws IOException {
+        // prepare a new folder
+        File localPath = File.createTempFile("TestGitRepository", "");
+        if(!localPath.delete()) {
+            throw new IOException("Could not delete temporary file " + localPath);
+        }
+
+        if(!localPath.mkdirs()) {
+            throw new IOException("Could not create directory " + localPath);
+        }
+
+        // create the directory
+        Repository repository = FileRepositoryBuilder.create(new File(localPath, ".git"));
+        repository.create();
+
+        return repository;
+    }
+}
Diff Between 4e162abafb0895b9c875a4d334b209b8051b5c71 58048464aebab6e635889b596892dd38608a3c5adiff --git a/src/main/java/org/dstadler/jgit/porcelain/RebaseToOriginMaster.java b/src/main/java/org/dstadler/jgit/porcelain/RebaseToOriginMaster.java
index 9c2d488..a9a8d12 100644
--- a/src/main/java/org/dstadler/jgit/porcelain/RebaseToOriginMaster.java
+++ b/src/main/java/org/dstadler/jgit/porcelain/RebaseToOriginMaster.java
@@ -23,0 +24 @@
+import org.eclipse.jgit.api.RebaseCommand;
@@ -24,0 +26 @@
+import org.eclipse.jgit.api.RebaseResult;
@@ -46,0 +49 @@
+                        // the handler receives the list of commits that are rebased, i.e. the ones on the local branch
@@ -47,0 +51,2 @@
+                            // for each step, you can decide which action should be taken
+                            // default is PICK
@@ -48,0 +54 @@
+                                // by selecting "EDIT", the rebase will stop and ask you to edit the commit-contents
@@ -62,2 +68,13 @@
-                git.rebase().setUpstream("origin/master").runInteractively(handler).call();
-                System.out.println("Rebased..");
+                RebaseResult result = git.rebase().setUpstream("origin/master").runInteractively(handler).call();
+                System.out.println("Rebase had state: " + result.getStatus() + ": " + result.getConflicts());
+
+                // because of the "EDIT" in the InteractiveHandler, the rebase was stopped in-between
+                // now you can adjust the commit and continue rebasing with setOperation(RebaseCommand.Operation.CONTINUE)
+                // to use the local changes for the commit or setOperation(RebaseCommand.Operation.SKIP) to skip this
+                // commit (i.e. remove it from the branch!)
+
+                if(!result.getStatus().isSuccessful()) {
+                    // if rebasing stopped or failed, you can get back to the original state by running it with setOperation(RebaseCommand.Operation.ABORT)
+                    result = git.rebase().setUpstream("origin/master").runInteractively(handler).setOperation(RebaseCommand.Operation.ABORT).call();
+                    System.out.println("Aborted reabse with state: " + result.getStatus() + ": " + result.getConflicts());
+                }
Diff Between 58048464aebab6e635889b596892dd38608a3c5a 33b0eaaa5ce9538aaf808a0d9aa4c389973b2cf5diff --git a/LICENSE.md b/LICENSE.md
new file mode 100644
index 0000000..8dada3e
--- /dev/null
+++ b/LICENSE.md
@@ -0,0 +1,201 @@
+                                 Apache License
+                           Version 2.0, January 2004
+                        http://www.apache.org/licenses/
+
+   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION
+
+   1. Definitions.
+
+      "License" shall mean the terms and conditions for use, reproduction,
+      and distribution as defined by Sections 1 through 9 of this document.
+
+      "Licensor" shall mean the copyright owner or entity authorized by
+      the copyright owner that is granting the License.
+
+      "Legal Entity" shall mean the union of the acting entity and all
+      other entities that control, are controlled by, or are under common
+      control with that entity. For the purposes of this definition,
+      "control" means (i) the power, direct or indirect, to cause the
+      direction or management of such entity, whether by contract or
+      otherwise, or (ii) ownership of fifty percent (50%) or more of the
+      outstanding shares, or (iii) beneficial ownership of such entity.
+
+      "You" (or "Your") shall mean an individual or Legal Entity
+      exercising permissions granted by this License.
+
+      "Source" form shall mean the preferred form for making modifications,
+      including but not limited to software source code, documentation
+      source, and configuration files.
+
+      "Object" form shall mean any form resulting from mechanical
+      transformation or translation of a Source form, including but
+      not limited to compiled object code, generated documentation,
+      and conversions to other media types.
+
+      "Work" shall mean the work of authorship, whether in Source or
+      Object form, made available under the License, as indicated by a
+      copyright notice that is included in or attached to the work
+      (an example is provided in the Appendix below).
+
+      "Derivative Works" shall mean any work, whether in Source or Object
+      form, that is based on (or derived from) the Work and for which the
+      editorial revisions, annotations, elaborations, or other modifications
+      represent, as a whole, an original work of authorship. For the purposes
+      of this License, Derivative Works shall not include works that remain
+      separable from, or merely link (or bind by name) to the interfaces of,
+      the Work and Derivative Works thereof.
+
+      "Contribution" shall mean any work of authorship, including
+      the original version of the Work and any modifications or additions
+      to that Work or Derivative Works thereof, that is intentionally
+      submitted to Licensor for inclusion in the Work by the copyright owner
+      or by an individual or Legal Entity authorized to submit on behalf of
+      the copyright owner. For the purposes of this definition, "submitted"
+      means any form of electronic, verbal, or written communication sent
+      to the Licensor or its representatives, including but not limited to
+      communication on electronic mailing lists, source code control systems,
+      and issue tracking systems that are managed by, or on behalf of, the
+      Licensor for the purpose of discussing and improving the Work, but
+      excluding communication that is conspicuously marked or otherwise
+      designated in writing by the copyright owner as "Not a Contribution."
+
+      "Contributor" shall mean Licensor and any individual or Legal Entity
+      on behalf of whom a Contribution has been received by Licensor and
+      subsequently incorporated within the Work.
+
+   2. Grant of Copyright License. Subject to the terms and conditions of
+      this License, each Contributor hereby grants to You a perpetual,
+      worldwide, non-exclusive, no-charge, royalty-free, irrevocable
+      copyright license to reproduce, prepare Derivative Works of,
+      publicly display, publicly perform, sublicense, and distribute the
+      Work and such Derivative Works in Source or Object form.
+
+   3. Grant of Patent License. Subject to the terms and conditions of
+      this License, each Contributor hereby grants to You a perpetual,
+      worldwide, non-exclusive, no-charge, royalty-free, irrevocable
+      (except as stated in this section) patent license to make, have made,
+      use, offer to sell, sell, import, and otherwise transfer the Work,
+      where such license applies only to those patent claims licensable
+      by such Contributor that are necessarily infringed by their
+      Contribution(s) alone or by combination of their Contribution(s)
+      with the Work to which such Contribution(s) was submitted. If You
+      institute patent litigation against any entity (including a
+      cross-claim or counterclaim in a lawsuit) alleging that the Work
+      or a Contribution incorporated within the Work constitutes direct
+      or contributory patent infringement, then any patent licenses
+      granted to You under this License for that Work shall terminate
+      as of the date such litigation is filed.
+
+   4. Redistribution. You may reproduce and distribute copies of the
+      Work or Derivative Works thereof in any medium, with or without
+      modifications, and in Source or Object form, provided that You
+      meet the following conditions:
+
+      (a) You must give any other recipients of the Work or
+          Derivative Works a copy of this License; and
+
+      (b) You must cause any modified files to carry prominent notices
+          stating that You changed the files; and
+
+      (c) You must retain, in the Source form of any Derivative Works
+          that You distribute, all copyright, patent, trademark, and
+          attribution notices from the Source form of the Work,
+          excluding those notices that do not pertain to any part of
+          the Derivative Works; and
+
+      (d) If the Work includes a "NOTICE" text file as part of its
+          distribution, then any Derivative Works that You distribute must
+          include a readable copy of the attribution notices contained
+          within such NOTICE file, excluding those notices that do not
+          pertain to any part of the Derivative Works, in at least one
+          of the following places: within a NOTICE text file distributed
+          as part of the Derivative Works; within the Source form or
+          documentation, if provided along with the Derivative Works; or,
+          within a display generated by the Derivative Works, if and
+          wherever such third-party notices normally appear. The contents
+          of the NOTICE file are for informational purposes only and
+          do not modify the License. You may add Your own attribution
+          notices within Derivative Works that You distribute, alongside
+          or as an addendum to the NOTICE text from the Work, provided
+          that such additional attribution notices cannot be construed
+          as modifying the License.
+
+      You may add Your own copyright statement to Your modifications and
+      may provide additional or different license terms and conditions
+      for use, reproduction, or distribution of Your modifications, or
+      for any such Derivative Works as a whole, provided Your use,
+      reproduction, and distribution of the Work otherwise complies with
+      the conditions stated in this License.
+
+   5. Submission of Contributions. Unless You explicitly state otherwise,
+      any Contribution intentionally submitted for inclusion in the Work
+      by You to the Licensor shall be under the terms and conditions of
+      this License, without any additional terms or conditions.
+      Notwithstanding the above, nothing herein shall supersede or modify
+      the terms of any separate license agreement you may have executed
+      with Licensor regarding such Contributions.
+
+   6. Trademarks. This License does not grant permission to use the trade
+      names, trademarks, service marks, or product names of the Licensor,
+      except as required for reasonable and customary use in describing the
+      origin of the Work and reproducing the content of the NOTICE file.
+
+   7. Disclaimer of Warranty. Unless required by applicable law or
+      agreed to in writing, Licensor provides the Work (and each
+      Contributor provides its Contributions) on an "AS IS" BASIS,
+      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
+      implied, including, without limitation, any warranties or conditions
+      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A
+      PARTICULAR PURPOSE. You are solely responsible for determining the
+      appropriateness of using or redistributing the Work and assume any
+      risks associated with Your exercise of permissions under this License.
+
+   8. Limitation of Liability. In no event and under no legal theory,
+      whether in tort (including negligence), contract, or otherwise,
+      unless required by applicable law (such as deliberate and grossly
+      negligent acts) or agreed to in writing, shall any Contributor be
+      liable to You for damages, including any direct, indirect, special,
+      incidental, or consequential damages of any character arising as a
+      result of this License or out of the use or inability to use the
+      Work (including but not limited to damages for loss of goodwill,
+      work stoppage, computer failure or malfunction, or any and all
+      other commercial damages or losses), even if such Contributor
+      has been advised of the possibility of such damages.
+
+   9. Accepting Warranty or Additional Liability. While redistributing
+      the Work or Derivative Works thereof, You may choose to offer,
+      and charge a fee for, acceptance of support, warranty, indemnity,
+      or other liability obligations and/or rights consistent with this
+      License. However, in accepting such obligations, You may act only
+      on Your own behalf and on Your sole responsibility, not on behalf
+      of any other Contributor, and only if You agree to indemnify,
+      defend, and hold each Contributor harmless for any liability
+      incurred by, or claims asserted against, such Contributor by reason
+      of your accepting any such warranty or additional liability.
+
+   END OF TERMS AND CONDITIONS
+
+   APPENDIX: How to apply the Apache License to your work.
+
+      To apply the Apache License to your work, attach the following
+      boilerplate notice, with the fields enclosed by brackets "{}"
+      replaced with your own identifying information. (Don't include
+      the brackets!)  The text should be enclosed in the appropriate
+      comment syntax for the file format. We also recommend that a
+      file or class name and description of purpose be included on the
+      same "printed page" as the copyright notice for easier
+      identification within third-party archives.
+
+   Copyright {yyyy} {name of copyright owner}
+
+   Licensed under the Apache License, Version 2.0 (the "License");
+   you may not use this file except in compliance with the License.
+   You may obtain a copy of the License at
+
+       http://www.apache.org/licenses/LICENSE-2.0
+
+   Unless required by applicable law or agreed to in writing, software
+   distributed under the License is distributed on an "AS IS" BASIS,
+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+   See the License for the specific language governing permissions and
+   limitations under the License.
Diff Between 33b0eaaa5ce9538aaf808a0d9aa4c389973b2cf5 f01714f1fda6cafad9850194d76c182508702907diff --git a/README.md b/README.md
index 8c27ae0..84a5f63 100644
--- a/README.md
+++ b/README.md
@@ -110,0 +111 @@
+* More authentication: http://www.lordofthejars.com/2016/09/authenticating-with-jgit.html
diff --git a/build.gradle b/build.gradle
index 83b09d1..f260da5 100644
--- a/build.gradle
+++ b/build.gradle
@@ -15,2 +15,2 @@
-	compile 'org.eclipse.jgit:org.eclipse.jgit:4.4.1.201607150455-r'
-	compile 'org.eclipse.jgit:org.eclipse.jgit.archive:4.4.1.201607150455-r'
+	compile 'org.eclipse.jgit:org.eclipse.jgit:4.5.0.201609210915-r'
+	compile 'org.eclipse.jgit:org.eclipse.jgit.archive:4.5.0.201609210915-r'
diff --git a/pom.xml b/pom.xml
index 706608a..55f70a4 100644
--- a/pom.xml
+++ b/pom.xml
@@ -23 +23 @@
-      <version>4.4.1.201607150455-r</version>
+      <version>4.5.0.201609210915-r</version>
@@ -28 +28 @@
-      <version>4.4.1.201607150455-r</version>
+      <version>4.5.0.201609210915-r</version>
diff --git a/src/main/java/org/dstadler/jgit/CreateNewRepository.java b/src/main/java/org/dstadler/jgit/CreateNewRepository.java
index 6990256..53cf1f2 100644
--- a/src/main/java/org/dstadler/jgit/CreateNewRepository.java
+++ b/src/main/java/org/dstadler/jgit/CreateNewRepository.java
@@ -36 +36,3 @@
-        localPath.delete();
+        if(!localPath.delete()) {
+            throw new IOException("Could not delete temporary file " + localPath);
+        }
diff --git a/src/main/java/org/dstadler/jgit/OpenRepository.java b/src/main/java/org/dstadler/jgit/OpenRepository.java
index 5bc6286..59f8dae 100644
--- a/src/main/java/org/dstadler/jgit/OpenRepository.java
+++ b/src/main/java/org/dstadler/jgit/OpenRepository.java
@@ -29,2 +28,0 @@
-
-
@@ -62 +60,3 @@
-            myfile.createNewFile();
+            if(!myfile.createNewFile()) {
+                throw new IOException("Could not create file " + myfile);
+            }
@@ -79,3 +79 @@
-            File dir = repository.getDirectory();
-
-            return dir;
+            return repository.getDirectory();
diff --git a/src/main/java/org/dstadler/jgit/api/GetCommitMessage.java b/src/main/java/org/dstadler/jgit/api/GetCommitMessage.java
index 380d6a4..fb5831b 100644
--- a/src/main/java/org/dstadler/jgit/api/GetCommitMessage.java
+++ b/src/main/java/org/dstadler/jgit/api/GetCommitMessage.java
@@ -34 +34 @@
-            Ref head = repository.getRef("refs/heads/master");
+            Ref head = repository.findRef("refs/heads/master");
diff --git a/src/main/java/org/dstadler/jgit/api/WalkFromToRev.java b/src/main/java/org/dstadler/jgit/api/WalkFromToRev.java
index 1ded112..883e13c 100644
--- a/src/main/java/org/dstadler/jgit/api/WalkFromToRev.java
+++ b/src/main/java/org/dstadler/jgit/api/WalkFromToRev.java
@@ -20 +19,0 @@
-import org.eclipse.jgit.lib.Ref;
diff --git a/src/main/java/org/dstadler/jgit/helper/CookbookHelper.java b/src/main/java/org/dstadler/jgit/helper/CookbookHelper.java
index 154eca6..b9649fb 100644
--- a/src/main/java/org/dstadler/jgit/helper/CookbookHelper.java
+++ b/src/main/java/org/dstadler/jgit/helper/CookbookHelper.java
@@ -30 +30 @@
-        Repository repository = builder
+        return builder
@@ -34 +33,0 @@
-        return repository;
@@ -40 +39,3 @@
-        localPath.delete();
+        if(!localPath.delete()) {
+            throw new IOException("Could not delete temporary file " + localPath);
+        }
diff --git a/src/main/java/org/dstadler/jgit/porcelain/AddFile.java b/src/main/java/org/dstadler/jgit/porcelain/AddFile.java
index bd87537..12cd3d5 100644
--- a/src/main/java/org/dstadler/jgit/porcelain/AddFile.java
+++ b/src/main/java/org/dstadler/jgit/porcelain/AddFile.java
@@ -42 +42,3 @@
-                myfile.createNewFile();
+                if(!myfile.createNewFile()) {
+                    throw new IOException("Could not create file " + myfile);
+                }
diff --git a/src/main/java/org/dstadler/jgit/porcelain/CleanUntrackedFiles.java b/src/main/java/org/dstadler/jgit/porcelain/CleanUntrackedFiles.java
index 00ba9fc..dbda3f6 100755
--- a/src/main/java/org/dstadler/jgit/porcelain/CleanUntrackedFiles.java
+++ b/src/main/java/org/dstadler/jgit/porcelain/CleanUntrackedFiles.java
@@ -43,2 +43,6 @@
-            untrackedDir.delete();
-            untrackedDir.mkdirs();
+            if(!untrackedDir.delete()) {
+                throw new IOException("Could not delete file " + untrackedDir);
+            }
+            if(!untrackedDir.mkdirs()) {
+                throw new IOException("Could not create directory " + untrackedDir);
+            }
diff --git a/src/main/java/org/dstadler/jgit/porcelain/CloneRemoteRepository.java b/src/main/java/org/dstadler/jgit/porcelain/CloneRemoteRepository.java
index b316be9..06b180e 100644
--- a/src/main/java/org/dstadler/jgit/porcelain/CloneRemoteRepository.java
+++ b/src/main/java/org/dstadler/jgit/porcelain/CloneRemoteRepository.java
@@ -24,2 +23,0 @@
-import org.eclipse.jgit.api.errors.InvalidRemoteException;
-import org.eclipse.jgit.api.errors.TransportException;
@@ -38 +36 @@
-    public static void main(String[] args) throws IOException, InvalidRemoteException, TransportException, GitAPIException {
+    public static void main(String[] args) throws IOException, GitAPIException {
@@ -41 +39,3 @@
-        localPath.delete();
+        if(!localPath.delete()) {
+            throw new IOException("Could not delete temporary file " + localPath);
+        }
diff --git a/src/main/java/org/dstadler/jgit/porcelain/CloneRemoteRepositoryWithAuthentication.java b/src/main/java/org/dstadler/jgit/porcelain/CloneRemoteRepositoryWithAuthentication.java
index b07b622..02655d1 100755
--- a/src/main/java/org/dstadler/jgit/porcelain/CloneRemoteRepositoryWithAuthentication.java
+++ b/src/main/java/org/dstadler/jgit/porcelain/CloneRemoteRepositoryWithAuthentication.java
@@ -19,3 +18,0 @@
-import java.io.File;
-import java.io.IOException;
-
@@ -24,2 +20,0 @@
-import org.eclipse.jgit.api.errors.InvalidRemoteException;
-import org.eclipse.jgit.api.errors.TransportException;
@@ -30,0 +26,3 @@
+import java.io.File;
+import java.io.IOException;
+
@@ -42 +40 @@
-    public static void main(String[] args) throws IOException, InvalidRemoteException, TransportException, GitAPIException {
+    public static void main(String[] args) throws IOException, GitAPIException {
@@ -76 +74,3 @@
-        localPath.delete();
+        if(!localPath.delete()) {
+            throw new IOException("Could not delete temporary file " + localPath);
+        }
diff --git a/src/main/java/org/dstadler/jgit/porcelain/CommitAll.java b/src/main/java/org/dstadler/jgit/porcelain/CommitAll.java
index 839a2c5..e33f6bd 100755
--- a/src/main/java/org/dstadler/jgit/porcelain/CommitAll.java
+++ b/src/main/java/org/dstadler/jgit/porcelain/CommitAll.java
@@ -27 +27,3 @@
-                myfile.createNewFile();
+                if(!myfile.createNewFile()) {
+                    throw new IOException("Could not create file " + myfile);
+                }
diff --git a/src/main/java/org/dstadler/jgit/porcelain/CommitFile.java b/src/main/java/org/dstadler/jgit/porcelain/CommitFile.java
index a9d8ae5..503d5ac 100644
--- a/src/main/java/org/dstadler/jgit/porcelain/CommitFile.java
+++ b/src/main/java/org/dstadler/jgit/porcelain/CommitFile.java
@@ -42 +42,3 @@
-                myfile.createNewFile();
+                if(!myfile.createNewFile()) {
+                    throw new IOException("Could not create file " + myfile);
+                }
diff --git a/src/main/java/org/dstadler/jgit/porcelain/CreateListApplyAndDropStash.java b/src/main/java/org/dstadler/jgit/porcelain/CreateListApplyAndDropStash.java
index 18744c0..f011873 100644
--- a/src/main/java/org/dstadler/jgit/porcelain/CreateListApplyAndDropStash.java
+++ b/src/main/java/org/dstadler/jgit/porcelain/CreateListApplyAndDropStash.java
@@ -46 +46 @@
-                FileUtils.writeStringToFile(file1, "some text");
+                FileUtils.writeStringToFile(file1, "some text", "UTF-8");
@@ -48 +48 @@
-                FileUtils.writeStringToFile(file2, "some text");
+                FileUtils.writeStringToFile(file2, "some text", "UTF-8");
@@ -62 +62 @@
-                FileUtils.writeStringToFile(file1, "some more text", true);
+                FileUtils.writeStringToFile(file1, "some more text", "UTF-8", true);
@@ -71 +71 @@
-                FileUtils.writeStringToFile(file2, "some more text", true);
+                FileUtils.writeStringToFile(file2, "some more text", "UTF-8", true);
diff --git a/src/main/java/org/dstadler/jgit/porcelain/DiffRenamedFile.java b/src/main/java/org/dstadler/jgit/porcelain/DiffRenamedFile.java
index 8b7d1f0..10d36af 100644
--- a/src/main/java/org/dstadler/jgit/porcelain/DiffRenamedFile.java
+++ b/src/main/java/org/dstadler/jgit/porcelain/DiffRenamedFile.java
@@ -3,3 +2,0 @@
-import java.io.IOException;
-import java.util.List;
-
@@ -6,0 +4 @@
+import org.eclipse.jgit.annotations.NonNull;
@@ -12,2 +9,0 @@
-import org.eclipse.jgit.errors.IncorrectObjectTypeException;
-import org.eclipse.jgit.errors.MissingObjectException;
@@ -24,0 +21,3 @@
+import java.io.IOException;
+import java.util.List;
+
@@ -28,3 +27 @@
-	private static AbstractTreeIterator prepareTreeParser(Repository repository, String objectId) throws IOException,
-			MissingObjectException,
-			IncorrectObjectTypeException {
+	private static AbstractTreeIterator prepareTreeParser(Repository repository, String objectId) throws IOException {
@@ -31,0 +29 @@
+		//noinspection Duplicates
@@ -47,2 +45,2 @@
-	private static DiffEntry diffFile(Repository repo, String oldCommit,
-		String newCommit, String path) throws IOException, GitAPIException {
+	private static @NonNull DiffEntry diffFile(Repository repo, String oldCommit,
+					   String newCommit, String path) throws IOException, GitAPIException {
@@ -80 +78,2 @@
-        		formatter.format(diff);
+				//noinspection ConstantConditions
+				formatter.format(diff);
diff --git a/src/main/java/org/dstadler/jgit/porcelain/FetchRemoteCommitsWithPrune.java b/src/main/java/org/dstadler/jgit/porcelain/FetchRemoteCommitsWithPrune.java
index 5ceaec0..a9f1524 100644
--- a/src/main/java/org/dstadler/jgit/porcelain/FetchRemoteCommitsWithPrune.java
+++ b/src/main/java/org/dstadler/jgit/porcelain/FetchRemoteCommitsWithPrune.java
@@ -44 +44,3 @@
-        localPath.delete();
+        if(!localPath.delete()) {
+            throw new IOException("Could not delete temporary file " + localPath);
+        }
diff --git a/src/main/java/org/dstadler/jgit/porcelain/ListRemoteRepository.java b/src/main/java/org/dstadler/jgit/porcelain/ListRemoteRepository.java
index 661f32e..c150ced 100644
--- a/src/main/java/org/dstadler/jgit/porcelain/ListRemoteRepository.java
+++ b/src/main/java/org/dstadler/jgit/porcelain/ListRemoteRepository.java
@@ -19,2 +18,0 @@
-import java.util.Collection;
-
@@ -23,2 +20,0 @@
-import org.eclipse.jgit.api.errors.InvalidRemoteException;
-import org.eclipse.jgit.api.errors.TransportException;
@@ -26,0 +23,2 @@
+import java.util.Collection;
+
@@ -39 +37 @@
-    public static void main(String[] args) throws InvalidRemoteException, TransportException, GitAPIException {
+    public static void main(String[] args) throws GitAPIException {
diff --git a/src/main/java/org/dstadler/jgit/porcelain/RevertChanges.java b/src/main/java/org/dstadler/jgit/porcelain/RevertChanges.java
index eb5d139..19b6216 100644
--- a/src/main/java/org/dstadler/jgit/porcelain/RevertChanges.java
+++ b/src/main/java/org/dstadler/jgit/porcelain/RevertChanges.java
@@ -33 +33,3 @@
-                tempFile.createNewFile();
+                if(!tempFile.createNewFile()) {
+                    throw new IOException("Could not create tempfile " + tempFile);
+                }
diff --git a/src/main/java/org/dstadler/jgit/porcelain/ShowBlame.java b/src/main/java/org/dstadler/jgit/porcelain/ShowBlame.java
index 473cff0..b76b555 100644
--- a/src/main/java/org/dstadler/jgit/porcelain/ShowBlame.java
+++ b/src/main/java/org/dstadler/jgit/porcelain/ShowBlame.java
@@ -91 +91 @@
-                return IOUtils.readLines(new ByteArrayInputStream(stream.toByteArray())).size();
+                return IOUtils.readLines(new ByteArrayInputStream(stream.toByteArray()), "UTF-8").size();
diff --git a/src/main/java/org/dstadler/jgit/porcelain/ShowBranchDiff.java b/src/main/java/org/dstadler/jgit/porcelain/ShowBranchDiff.java
index e2538c1..d46c134 100755
--- a/src/main/java/org/dstadler/jgit/porcelain/ShowBranchDiff.java
+++ b/src/main/java/org/dstadler/jgit/porcelain/ShowBranchDiff.java
@@ -23,2 +22,0 @@
-import org.eclipse.jgit.errors.IncorrectObjectTypeException;
-import org.eclipse.jgit.errors.MissingObjectException;
@@ -69,3 +67 @@
-    private static AbstractTreeIterator prepareTreeParser(Repository repository, String ref) throws IOException,
-            MissingObjectException,
-            IncorrectObjectTypeException {
+    private static AbstractTreeIterator prepareTreeParser(Repository repository, String ref) throws IOException {
diff --git a/src/main/java/org/dstadler/jgit/porcelain/ShowFileDiff.java b/src/main/java/org/dstadler/jgit/porcelain/ShowFileDiff.java
index 6a2849a..0069554 100644
--- a/src/main/java/org/dstadler/jgit/porcelain/ShowFileDiff.java
+++ b/src/main/java/org/dstadler/jgit/porcelain/ShowFileDiff.java
@@ -27,2 +26,0 @@
-import org.eclipse.jgit.errors.IncorrectObjectTypeException;
-import org.eclipse.jgit.errors.MissingObjectException;
@@ -72,3 +70 @@
-    private static AbstractTreeIterator prepareTreeParser(Repository repository, String objectId) throws IOException,
-            MissingObjectException,
-            IncorrectObjectTypeException {
+    private static AbstractTreeIterator prepareTreeParser(Repository repository, String objectId) throws IOException {
@@ -75,0 +72 @@
+        //noinspection Duplicates
diff --git a/src/main/java/org/dstadler/jgit/porcelain/WalkAllCommits.java b/src/main/java/org/dstadler/jgit/porcelain/WalkAllCommits.java
index 07aa4f2..563ebad 100644
--- a/src/main/java/org/dstadler/jgit/porcelain/WalkAllCommits.java
+++ b/src/main/java/org/dstadler/jgit/porcelain/WalkAllCommits.java
@@ -19,2 +18,0 @@
-import java.io.IOException;
-
@@ -24 +21,0 @@
-import org.eclipse.jgit.api.errors.InvalidRefNameException;
@@ -27,0 +25,2 @@
+import java.io.IOException;
+
@@ -36 +35 @@
-    public static void main(String[] args) throws IOException, InvalidRefNameException, GitAPIException {
+    public static void main(String[] args) throws IOException, GitAPIException {
diff --git a/src/main/java/org/dstadler/jgit/unfinished/ListRefLog.java b/src/main/java/org/dstadler/jgit/unfinished/ListRefLog.java
index e0410e1..d761e93 100755
--- a/src/main/java/org/dstadler/jgit/unfinished/ListRefLog.java
+++ b/src/main/java/org/dstadler/jgit/unfinished/ListRefLog.java
@@ -19,5 +18,0 @@
-import java.io.IOException;
-import java.util.Collection;
-import java.util.Iterator;
-import java.util.List;
-
@@ -27 +21,0 @@
-import org.eclipse.jgit.api.errors.InvalidRefNameException;
@@ -31,0 +26,4 @@
+import java.io.IOException;
+import java.util.Collection;
+import java.util.List;
+
@@ -61 +59 @@
-    private static void listReflog(Repository repository, Ref ref) throws GitAPIException, InvalidRefNameException {
+    private static void listReflog(Repository repository, Ref ref) throws GitAPIException {
@@ -70,3 +68 @@
-            Iterator<ReflogEntry> it = call.iterator();
-            while (it.hasNext()) {
-                ReflogEntry reflog = it.next();
+            for (ReflogEntry reflog : call) {
diff --git a/src/main/java/org/dstadler/jgit/unfinished/PullFromRemoteRepository.java b/src/main/java/org/dstadler/jgit/unfinished/PullFromRemoteRepository.java
index bdc7a10..8999327 100644
--- a/src/main/java/org/dstadler/jgit/unfinished/PullFromRemoteRepository.java
+++ b/src/main/java/org/dstadler/jgit/unfinished/PullFromRemoteRepository.java
@@ -19,3 +18,0 @@
-import java.io.File;
-import java.io.IOException;
-
@@ -24,2 +21,3 @@
-import org.eclipse.jgit.api.errors.InvalidRemoteException;
-import org.eclipse.jgit.api.errors.TransportException;
+
+import java.io.File;
+import java.io.IOException;
@@ -38 +36 @@
-    public static void main(String[] args) throws IOException, InvalidRemoteException, TransportException, GitAPIException {
+    public static void main(String[] args) throws IOException, GitAPIException {
@@ -41 +39,3 @@
-        localPath.delete();
+        if(!localPath.delete()) {
+            throw new IOException("Could not delete temporary file " + localPath);
+        }
diff --git a/src/main/java/org/dstadler/jgit/unfinished/PullRemoteRepository.java b/src/main/java/org/dstadler/jgit/unfinished/PullRemoteRepository.java
index fcdd59f..a9b997f 100755
--- a/src/main/java/org/dstadler/jgit/unfinished/PullRemoteRepository.java
+++ b/src/main/java/org/dstadler/jgit/unfinished/PullRemoteRepository.java
@@ -19,3 +18,0 @@
-import java.io.File;
-import java.io.IOException;
-
@@ -25,2 +21,0 @@
-import org.eclipse.jgit.api.errors.InvalidRemoteException;
-import org.eclipse.jgit.api.errors.TransportException;
@@ -29,0 +25,3 @@
+import java.io.File;
+import java.io.IOException;
+
@@ -43 +41 @@
-    public static void main(String[] args) throws IOException, InvalidRemoteException, TransportException, GitAPIException {
+    public static void main(String[] args) throws IOException, GitAPIException {
@@ -46 +44 @@
-                    repository.getRef(Constants.HEAD) + "/" + repository.resolve("HEAD") + "/" +
+                    repository.findRef(Constants.HEAD) + "/" + repository.resolve("HEAD") + "/" +
@@ -60 +58 @@
-    private static Repository cloneRepository() throws IOException, GitAPIException, InvalidRemoteException, TransportException {
+    private static Repository cloneRepository() throws IOException, GitAPIException {
@@ -63 +61,3 @@
-        localPath.delete();
+        if(!localPath.delete()) {
+            throw new IOException("Could not delete temporary file " + localPath);
+        }
diff --git a/src/main/java/org/dstadler/jgit/unfinished/PushToRemoteRepository.java b/src/main/java/org/dstadler/jgit/unfinished/PushToRemoteRepository.java
index 724b750..df0b7a4 100644
--- a/src/main/java/org/dstadler/jgit/unfinished/PushToRemoteRepository.java
+++ b/src/main/java/org/dstadler/jgit/unfinished/PushToRemoteRepository.java
@@ -19,3 +18,0 @@
-import java.io.File;
-import java.io.IOException;
-
@@ -24,2 +20,0 @@
-import org.eclipse.jgit.api.errors.InvalidRemoteException;
-import org.eclipse.jgit.api.errors.TransportException;
@@ -28,0 +24,3 @@
+import java.io.File;
+import java.io.IOException;
+
@@ -40 +38 @@
-    public static void main(String[] args) throws IOException, InvalidRemoteException, TransportException, GitAPIException {
+    public static void main(String[] args) throws IOException, GitAPIException {
@@ -43 +41,3 @@
-        localPath.delete();
+        if(!localPath.delete()) {
+            throw new IOException("Could not delete temporary file " + localPath);
+        }
@@ -53 +53,3 @@
-            localPath2.delete();
+            if(!localPath2.delete()) {
+                throw new IOException("Could not delete temporary file " + localPath2);
+            }
@@ -60,0 +63,2 @@
+                System.out.println("Result: " + result2);
+
diff --git a/src/main/java/org/dstadler/jgit/unfinished/TestSubmodules.java b/src/main/java/org/dstadler/jgit/unfinished/TestSubmodules.java
index dcc51ec..ce8f7a7 100755
--- a/src/main/java/org/dstadler/jgit/unfinished/TestSubmodules.java
+++ b/src/main/java/org/dstadler/jgit/unfinished/TestSubmodules.java
@@ -87 +87,3 @@
-        dir.delete();
+        if(!dir.delete()) {
+            throw new IOException("Could not delete temporary file " + dir);
+        }
diff --git a/src/main/java/org/dstadler/jgit/unfinished/TrackMaster.java b/src/main/java/org/dstadler/jgit/unfinished/TrackMaster.java
index f243ec4..8f46038 100644
--- a/src/main/java/org/dstadler/jgit/unfinished/TrackMaster.java
+++ b/src/main/java/org/dstadler/jgit/unfinished/TrackMaster.java
@@ -19,3 +18,0 @@
-import java.io.File;
-import java.io.IOException;
-
@@ -24,2 +20,0 @@
-import org.eclipse.jgit.api.errors.InvalidRemoteException;
-import org.eclipse.jgit.api.errors.TransportException;
@@ -28,0 +24,3 @@
+import java.io.File;
+import java.io.IOException;
+
@@ -40 +38 @@
-    public static void main(String[] args) throws IOException, InvalidRemoteException, TransportException, GitAPIException {
+    public static void main(String[] args) throws IOException, GitAPIException {
@@ -43 +41,3 @@
-        localPath.delete();
+        if(!localPath.delete()) {
+            throw new IOException("Could not delete temporary file " + localPath);
+        }
@@ -50,0 +51,2 @@
+            System.out.println("Result: " + result);
+
diff --git a/src/main/java/org/dstadler/jgit/unfinished/UpdateIndex.java b/src/main/java/org/dstadler/jgit/unfinished/UpdateIndex.java
index 98608d3..3b360f0 100644
--- a/src/main/java/org/dstadler/jgit/unfinished/UpdateIndex.java
+++ b/src/main/java/org/dstadler/jgit/unfinished/UpdateIndex.java
@@ -49 +49 @@
-    			FileUtils.write(new File(testFile), new Date().toString());
+    			FileUtils.write(new File(testFile), new Date().toString(), "UTF-8");
@@ -69 +69 @@
-	static class AssumeChangedCommand extends GitCommand<String> {
+	private static class AssumeChangedCommand extends GitCommand<String> {
Diff Between f01714f1fda6cafad9850194d76c182508702907 0857a3e9b56c4820121520d3321d51f782195302diff --git a/src/main/java/org/dstadler/jgit/porcelain/CollectGarbage.java b/src/main/java/org/dstadler/jgit/porcelain/CollectGarbage.java
index 82226b0..73d4b11 100644
--- a/src/main/java/org/dstadler/jgit/porcelain/CollectGarbage.java
+++ b/src/main/java/org/dstadler/jgit/porcelain/CollectGarbage.java
@@ -25,0 +26 @@
+import org.eclipse.jgit.lib.ProgressMonitor;
@@ -41 +42,2 @@
-                Properties ret = git.gc().call();
+                Properties ret = git.gc().
+                        setProgressMonitor(new PrintlnProgressMonitor()).call();
@@ -47,0 +50,27 @@
+
+    private static class PrintlnProgressMonitor implements ProgressMonitor {
+        @Override
+        public void start(int totalTasks) {
+            System.out.println("Starting work on " + totalTasks + " tasks");
+        }
+
+        @Override
+        public void beginTask(String title, int totalWork) {
+            System.out.println("Start " + title + ": " + totalWork);
+        }
+
+        @Override
+        public void update(int completed) {
+            System.out.print(completed);
+        }
+
+        @Override
+        public void endTask() {
+            System.out.println("Done");
+        }
+
+        @Override
+        public boolean isCancelled() {
+            return false;
+        }
+    }
Diff Between 0857a3e9b56c4820121520d3321d51f782195302 a664e3c356190304677551ae02e7a4dd9d8c5eb3diff --git a/build.gradle b/build.gradle
index a8a0196..83b09d1 100644
--- a/build.gradle
+++ b/build.gradle
@@ -43 +43 @@
-    gradleVersion = '2.14'
+    gradleVersion = '2.14.1'
diff --git a/gradle/wrapper/gradle-wrapper.jar b/gradle/wrapper/gradle-wrapper.jar
index d3b8398..3baa851 100644
--- a/gradle/wrapper/gradle-wrapper.jar
+++ b/gradle/wrapper/gradle-wrapper.jar
Binary files differ
diff --git a/gradle/wrapper/gradle-wrapper.properties b/gradle/wrapper/gradle-wrapper.properties
index 1ce295d..e496c05 100644
--- a/gradle/wrapper/gradle-wrapper.properties
+++ b/gradle/wrapper/gradle-wrapper.properties
@@ -1 +0,0 @@
-#Tue Jun 14 08:21:56 UTC 2016
@@ -3,0 +3 @@
+distributionUrl=https\://services.gradle.org/distributions/gradle-2.14.1-bin.zip
@@ -6 +5,0 @@
-distributionUrl=https\://services.gradle.org/distributions/gradle-2.14-bin.zip
Diff Between a664e3c356190304677551ae02e7a4dd9d8c5eb3 4d45bbee68eee467afef77169e271c89f4781061diff --git a/build.gradle b/build.gradle
index 8cb2c4d..a8a0196 100644
--- a/build.gradle
+++ b/build.gradle
@@ -15,2 +15,2 @@
-	compile 'org.eclipse.jgit:org.eclipse.jgit:4.4.0.201606070830-r'
-	compile 'org.eclipse.jgit:org.eclipse.jgit.archive:4.4.0.201606070830-r'
+	compile 'org.eclipse.jgit:org.eclipse.jgit:4.4.1.201607150455-r'
+	compile 'org.eclipse.jgit:org.eclipse.jgit.archive:4.4.1.201607150455-r'
diff --git a/pom.xml b/pom.xml
index ddedcaa..706608a 100644
--- a/pom.xml
+++ b/pom.xml
@@ -23 +23 @@
-      <version>4.4.0.201606070830-r</version>
+      <version>4.4.1.201607150455-r</version>
@@ -28 +28 @@
-      <version>4.4.0.201606070830-r</version>
+      <version>4.4.1.201607150455-r</version>
Diff Between 4d45bbee68eee467afef77169e271c89f4781061 8c3cb18452b3641c187dbf09e13665a7f56aa15adiff --git a/ISSUE_TEMPLATE.md b/ISSUE_TEMPLATE.md
new file mode 100644
index 0000000..06a7294
--- /dev/null
+++ b/ISSUE_TEMPLATE.md
@@ -0,0 +1 @@
+*Note: Please use sites such as http://stackoverflow.com for general questions about JGit usage, not issues in this project. Issues should be used for problems with snippets and suggestions of missing snippets. Snippets from good answers on stackoverflow can then be included here, naturally.*
diff --git a/README.md b/README.md
index 1947db7..8c27ae0 100644
--- a/README.md
+++ b/README.md
@@ -68,0 +69 @@
+* [Blame, i.e. retrieve information who last changed which line in a file](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/porcelain/BlameFile.java)
@@ -72 +73 @@
-* [Clone a remote reppository into a new local directory](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/porcelain/CloneRemoteRepository.java)
+* [Clone a remote repository into a new local directory](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/porcelain/CloneRemoteRepository.java)
@@ -77 +78 @@
-* [Clone a remote reppository via SSH protocol and username/password credentials](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/porcelain/CloneRemoteRepositoryWithAuthentication.java)
+* [Clone a remote repository via SSH protocol and username/password credentials](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/porcelain/CloneRemoteRepositoryWithAuthentication.java)
@@ -94 +95 @@
-* [Read file attributes, e.g. executeable state, file or directory, size, ...](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/api/GetFileAttributes.java)
+* [Read file attributes, e.g. executable state, file or directory, size, ...](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/api/GetFileAttributes.java)
@@ -96,0 +98 @@
+* [List files in a directory as-of a specific commit or a tag](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/api/ListFilesOfCommitAndTag.java)
@@ -104 +106 @@
-* Ammend a previous commit: http://stackoverflow.com/questions/4772142/jgit-unstaging-files-removing-files-from-the-index-and-ammending-a-commit
+* Amend a previous commit: http://stackoverflow.com/questions/4772142/jgit-unstaging-files-removing-files-from-the-index-and-ammending-a-commit
diff --git a/build.gradle b/build.gradle
index 9b6c871..8cb2c4d 100644
--- a/build.gradle
+++ b/build.gradle
@@ -15,4 +15,4 @@
-	compile 'org.eclipse.jgit:org.eclipse.jgit:4.2.0.201601211800-r'
-	compile 'org.eclipse.jgit:org.eclipse.jgit.archive:4.2.0.201601211800-r'
-	compile 'commons-io:commons-io:2.4'
-	compile 'org.slf4j:slf4j-simple:1.7.13'
+	compile 'org.eclipse.jgit:org.eclipse.jgit:4.4.0.201606070830-r'
+	compile 'org.eclipse.jgit:org.eclipse.jgit.archive:4.4.0.201606070830-r'
+	compile 'commons-io:commons-io:2.5'
+	compile 'org.slf4j:slf4j-simple:1.7.21'
@@ -20 +20 @@
-    testCompile "junit:junit:4+"
+    testCompile "junit:junit:4.12"
@@ -43 +43 @@
-    gradleVersion = '2.12'
+    gradleVersion = '2.14'
diff --git a/gradle/wrapper/gradle-wrapper.jar b/gradle/wrapper/gradle-wrapper.jar
index 3baa851..d3b8398 100644
--- a/gradle/wrapper/gradle-wrapper.jar
+++ b/gradle/wrapper/gradle-wrapper.jar
Binary files differ
diff --git a/gradle/wrapper/gradle-wrapper.properties b/gradle/wrapper/gradle-wrapper.properties
index 19cae4a..1ce295d 100644
--- a/gradle/wrapper/gradle-wrapper.properties
+++ b/gradle/wrapper/gradle-wrapper.properties
@@ -1 +1 @@
-#Tue Jul 19 07:02:14 UTC 2016
+#Tue Jun 14 08:21:56 UTC 2016
@@ -6 +6 @@
-distributionUrl=https\://services.gradle.org/distributions/gradle-2.14.1-bin.zip
+distributionUrl=https\://services.gradle.org/distributions/gradle-2.14-bin.zip
diff --git a/pom.xml b/pom.xml
index ee34668..ddedcaa 100644
--- a/pom.xml
+++ b/pom.xml
@@ -23 +23 @@
-      <version>4.2.0.201601211800-r</version>
+      <version>4.4.0.201606070830-r</version>
@@ -28 +28 @@
-      <version>4.2.0.201601211800-r</version>
+      <version>4.4.0.201606070830-r</version>
@@ -34 +34 @@
-		<version>2.4</version>
+		<version>2.5</version>
@@ -39 +39 @@
-		<version>1.7.12</version>
+		<version>1.7.21</version>
diff --git a/src/main/java/org/dstadler/jgit/api/GetFileAttributes.java b/src/main/java/org/dstadler/jgit/api/GetFileAttributes.java
index 86338c1..061e8b1 100755
--- a/src/main/java/org/dstadler/jgit/api/GetFileAttributes.java
+++ b/src/main/java/org/dstadler/jgit/api/GetFileAttributes.java
@@ -19,2 +18,0 @@
-import java.io.IOException;
-
@@ -22,9 +20 @@
-import org.eclipse.jgit.errors.AmbiguousObjectException;
-import org.eclipse.jgit.errors.CorruptObjectException;
-import org.eclipse.jgit.errors.IncorrectObjectTypeException;
-import org.eclipse.jgit.errors.MissingObjectException;
-import org.eclipse.jgit.lib.Constants;
-import org.eclipse.jgit.lib.FileMode;
-import org.eclipse.jgit.lib.ObjectId;
-import org.eclipse.jgit.lib.ObjectLoader;
-import org.eclipse.jgit.lib.Repository;
+import org.eclipse.jgit.lib.*;
@@ -36,0 +27,2 @@
+import java.io.IOException;
+
@@ -58,2 +50 @@
-    private static RevTree getTree(Repository repository) throws AmbiguousObjectException, IncorrectObjectTypeException,
-            IOException, MissingObjectException {
+    private static RevTree getTree(Repository repository) throws IOException {
@@ -75,2 +66 @@
-    private static void printFile(Repository repository, RevTree tree) throws MissingObjectException,
-            IncorrectObjectTypeException, CorruptObjectException, IOException {
+    private static void printFile(Repository repository, RevTree tree) throws IOException {
@@ -95,2 +85 @@
-    private static void printDirectory(Repository repository, RevTree tree) throws MissingObjectException,
-            IncorrectObjectTypeException, CorruptObjectException, IOException {
+    private static void printDirectory(Repository repository, RevTree tree) throws IOException {
diff --git a/src/main/java/org/dstadler/jgit/api/ListFilesOfCommitAndTag.java b/src/main/java/org/dstadler/jgit/api/ListFilesOfCommitAndTag.java
new file mode 100644
index 0000000..89dca48
--- /dev/null
+++ b/src/main/java/org/dstadler/jgit/api/ListFilesOfCommitAndTag.java
@@ -0,0 +1,108 @@
+package org.dstadler.jgit.api;
+
+/*
+   Copyright 2016 Dominik Stadler
+
+   Licensed under the Apache License, Version 2.0 (the "License");
+   you may not use this file except in compliance with the License.
+   You may obtain a copy of the License at
+
+     http://www.apache.org/licenses/LICENSE-2.0
+
+   Unless required by applicable law or agreed to in writing, software
+   distributed under the License is distributed on an "AS IS" BASIS,
+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+   See the License for the specific language governing permissions and
+   limitations under the License.
+ */
+
+import org.dstadler.jgit.helper.CookbookHelper;
+import org.eclipse.jgit.lib.FileMode;
+import org.eclipse.jgit.lib.ObjectId;
+import org.eclipse.jgit.lib.Repository;
+import org.eclipse.jgit.revwalk.RevCommit;
+import org.eclipse.jgit.revwalk.RevTree;
+import org.eclipse.jgit.revwalk.RevWalk;
+import org.eclipse.jgit.treewalk.TreeWalk;
+
+import java.io.FileNotFoundException;
+import java.io.IOException;
+import java.util.ArrayList;
+import java.util.List;
+
+/**
+ * Simple snippet which shows how to get a list of files/directories
+ * based on a specific commit or a tag.
+ */
+public class ListFilesOfCommitAndTag {
+
+    public static void main(String[] args) throws IOException {
+        try (Repository repository = CookbookHelper.openJGitCookbookRepository()) {
+            List<String> paths = readElementsAt(repository, "6409ee1597a53c6fbee31edf9cde31dc3afbe20f", "src/main/java/org/dstadler/jgit/porcelain");
+
+            System.out.println("Had paths for commit: " + paths);
+
+            final ObjectId testbranch = repository.resolve("testbranch");
+            paths = readElementsAt(repository, testbranch.getName(), "src/main/java/org/dstadler/jgit/porcelain");
+
+            System.out.println("Had paths for tag: " + paths);
+        }
+    }
+
+    private static List<String> readElementsAt(Repository repository, String commit, String path) throws IOException {
+        RevCommit revCommit = buildRevCommit(repository, commit);
+
+        // and using commit's tree find the path
+        RevTree tree = revCommit.getTree();
+        //System.out.println("Having tree: " + tree + " for commit " + commit);
+
+        List<String> items = new ArrayList<>();
+
+        // shortcut for root-path
+        if(path.isEmpty()) {
+            try (TreeWalk treeWalk = new TreeWalk(repository)) {
+                treeWalk.addTree(tree);
+                treeWalk.setRecursive(false);
+                treeWalk.setPostOrderTraversal(false);
+
+                while(treeWalk.next()) {
+                    items.add(treeWalk.getPathString());
+                }
+            }
+        } else {
+            // now try to find a specific file
+            try (TreeWalk treeWalk = buildTreeWalk(repository, tree, path)) {
+                if((treeWalk.getFileMode(0).getBits() & FileMode.TYPE_TREE) == 0) {
+                    throw new IllegalStateException("Tried to read the elements of a non-tree for commit '" + commit + "' and path '" + path + "', had filemode " + treeWalk.getFileMode(0).getBits());
+                }
+
+                try (TreeWalk dirWalk = new TreeWalk(repository)) {
+                    dirWalk.addTree(treeWalk.getObjectId(0));
+                    dirWalk.setRecursive(false);
+                    while(dirWalk.next()) {
+                        items.add(dirWalk.getPathString());
+                    }
+                }
+            }
+        }
+
+        return items;
+    }
+
+    private static RevCommit buildRevCommit(Repository repository, String commit) throws IOException {
+        // a RevWalk allows to walk over commits based on some filtering that is defined
+        try (RevWalk revWalk = new RevWalk(repository)) {
+            return revWalk.parseCommit(ObjectId.fromString(commit));
+        }
+    }
+
+    private static TreeWalk buildTreeWalk(Repository repository, RevTree tree, final String path) throws IOException {
+        TreeWalk treeWalk = TreeWalk.forPath(repository, path, tree);
+
+        if(treeWalk == null) {
+            throw new FileNotFoundException("Did not find expected file '" + path + "' in tree '" + tree.getName() + "'");
+        }
+
+        return treeWalk;
+    }
+}
diff --git a/src/main/java/org/dstadler/jgit/porcelain/BlameFile.java b/src/main/java/org/dstadler/jgit/porcelain/BlameFile.java
new file mode 100644
index 0000000..2846b34
--- /dev/null
+++ b/src/main/java/org/dstadler/jgit/porcelain/BlameFile.java
@@ -0,0 +1,43 @@
+package org.dstadler.jgit.porcelain;
+
+import org.dstadler.jgit.helper.CookbookHelper;
+import org.eclipse.jgit.api.Git;
+import org.eclipse.jgit.api.errors.GitAPIException;
+import org.eclipse.jgit.blame.BlameResult;
+import org.eclipse.jgit.diff.RawText;
+import org.eclipse.jgit.lib.PersonIdent;
+import org.eclipse.jgit.lib.Repository;
+import org.eclipse.jgit.revwalk.RevCommit;
+
+import java.io.File;
+import java.io.IOException;
+
+// Simple example that shows how to get the Blame-information for a file
+public class BlameFile {
+    public static void main(String args[])
+        throws IOException, GitAPIException {
+        try (Repository repo = CookbookHelper.openJGitCookbookRepository()) {
+            final String[] list = new File(".").list();
+            if(list == null) {
+                throw new IllegalStateException("Did not find any files at " + new File(".").getAbsolutePath());
+            }
+
+            for(String file : list) {
+                if(new File(file).isDirectory()) {
+                    continue;
+                }
+
+                System.out.println("Blaming " + file);
+                final BlameResult result = new Git(repo).blame().setFilePath(file).call();
+                final RawText rawText = result.getResultContents();
+                for (int i = 0; i < rawText.size(); i++) {
+                    final PersonIdent sourceAuthor = result.getSourceAuthor(i);
+                    final RevCommit sourceCommit = result.getSourceCommit(i);
+                    System.out.println(sourceAuthor.getName() +
+                            (sourceCommit != null ? "/" + sourceCommit.getCommitTime() + "/" + sourceCommit.getName() : "") +
+                            ": " + rawText.getString(i));
+                }
+            }
+        }
+    }
+}
diff --git a/src/test/java/org/dstadler/jgit/porcelain/PorcelainTest.java b/src/test/java/org/dstadler/jgit/porcelain/PorcelainTest.java
index 21c6298..9924254 100644
--- a/src/test/java/org/dstadler/jgit/porcelain/PorcelainTest.java
+++ b/src/test/java/org/dstadler/jgit/porcelain/PorcelainTest.java
@@ -11,0 +12 @@
+        BlameFile.main(null);
Diff Between 8c3cb18452b3641c187dbf09e13665a7f56aa15a 208ea03caa1371a44d6c668429b8dc42249ac919diff --git a/ISSUE_TEMPLATE.md b/ISSUE_TEMPLATE.md
deleted file mode 100644
index 06a7294..0000000
--- a/ISSUE_TEMPLATE.md
+++ /dev/null
@@ -1 +0,0 @@
-*Note: Please use sites such as http://stackoverflow.com for general questions about JGit usage, not issues in this project. Issues should be used for problems with snippets and suggestions of missing snippets. Snippets from good answers on stackoverflow can then be included here, naturally.*
diff --git a/README.md b/README.md
index 5356e79..1947db7 100644
--- a/README.md
+++ b/README.md
@@ -97 +96,0 @@
-* [List files in a directory as-of a specific commit or a tag](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/api/ListFilesOfCommitAndTag.java)
diff --git a/build.gradle b/build.gradle
index 8cb2c4d..9b6c871 100644
--- a/build.gradle
+++ b/build.gradle
@@ -15,4 +15,4 @@
-	compile 'org.eclipse.jgit:org.eclipse.jgit:4.4.0.201606070830-r'
-	compile 'org.eclipse.jgit:org.eclipse.jgit.archive:4.4.0.201606070830-r'
-	compile 'commons-io:commons-io:2.5'
-	compile 'org.slf4j:slf4j-simple:1.7.21'
+	compile 'org.eclipse.jgit:org.eclipse.jgit:4.2.0.201601211800-r'
+	compile 'org.eclipse.jgit:org.eclipse.jgit.archive:4.2.0.201601211800-r'
+	compile 'commons-io:commons-io:2.4'
+	compile 'org.slf4j:slf4j-simple:1.7.13'
@@ -20 +20 @@
-    testCompile "junit:junit:4.12"
+    testCompile "junit:junit:4+"
@@ -43 +43 @@
-    gradleVersion = '2.14'
+    gradleVersion = '2.12'
diff --git a/gradle/wrapper/gradle-wrapper.jar b/gradle/wrapper/gradle-wrapper.jar
index d3b8398..3baa851 100644
--- a/gradle/wrapper/gradle-wrapper.jar
+++ b/gradle/wrapper/gradle-wrapper.jar
Binary files differ
diff --git a/gradle/wrapper/gradle-wrapper.properties b/gradle/wrapper/gradle-wrapper.properties
index 1ce295d..19cae4a 100644
--- a/gradle/wrapper/gradle-wrapper.properties
+++ b/gradle/wrapper/gradle-wrapper.properties
@@ -1 +1 @@
-#Tue Jun 14 08:21:56 UTC 2016
+#Tue Jul 19 07:02:14 UTC 2016
@@ -6 +6 @@
-distributionUrl=https\://services.gradle.org/distributions/gradle-2.14-bin.zip
+distributionUrl=https\://services.gradle.org/distributions/gradle-2.14.1-bin.zip
diff --git a/pom.xml b/pom.xml
index ddedcaa..ee34668 100644
--- a/pom.xml
+++ b/pom.xml
@@ -23 +23 @@
-      <version>4.4.0.201606070830-r</version>
+      <version>4.2.0.201601211800-r</version>
@@ -28 +28 @@
-      <version>4.4.0.201606070830-r</version>
+      <version>4.2.0.201601211800-r</version>
@@ -34 +34 @@
-		<version>2.5</version>
+		<version>2.4</version>
@@ -39 +39 @@
-		<version>1.7.21</version>
+		<version>1.7.12</version>
diff --git a/src/main/java/org/dstadler/jgit/api/GetFileAttributes.java b/src/main/java/org/dstadler/jgit/api/GetFileAttributes.java
index 061e8b1..86338c1 100755
--- a/src/main/java/org/dstadler/jgit/api/GetFileAttributes.java
+++ b/src/main/java/org/dstadler/jgit/api/GetFileAttributes.java
@@ -18,0 +19,2 @@
+import java.io.IOException;
+
@@ -20 +22,9 @@
-import org.eclipse.jgit.lib.*;
+import org.eclipse.jgit.errors.AmbiguousObjectException;
+import org.eclipse.jgit.errors.CorruptObjectException;
+import org.eclipse.jgit.errors.IncorrectObjectTypeException;
+import org.eclipse.jgit.errors.MissingObjectException;
+import org.eclipse.jgit.lib.Constants;
+import org.eclipse.jgit.lib.FileMode;
+import org.eclipse.jgit.lib.ObjectId;
+import org.eclipse.jgit.lib.ObjectLoader;
+import org.eclipse.jgit.lib.Repository;
@@ -27,2 +36,0 @@
-import java.io.IOException;
-
@@ -50 +58,2 @@
-    private static RevTree getTree(Repository repository) throws IOException {
+    private static RevTree getTree(Repository repository) throws AmbiguousObjectException, IncorrectObjectTypeException,
+            IOException, MissingObjectException {
@@ -66 +75,2 @@
-    private static void printFile(Repository repository, RevTree tree) throws IOException {
+    private static void printFile(Repository repository, RevTree tree) throws MissingObjectException,
+            IncorrectObjectTypeException, CorruptObjectException, IOException {
@@ -85 +95,2 @@
-    private static void printDirectory(Repository repository, RevTree tree) throws IOException {
+    private static void printDirectory(Repository repository, RevTree tree) throws MissingObjectException,
+            IncorrectObjectTypeException, CorruptObjectException, IOException {
diff --git a/src/main/java/org/dstadler/jgit/api/ListFilesOfCommitAndTag.java b/src/main/java/org/dstadler/jgit/api/ListFilesOfCommitAndTag.java
deleted file mode 100644
index 89dca48..0000000
--- a/src/main/java/org/dstadler/jgit/api/ListFilesOfCommitAndTag.java
+++ /dev/null
@@ -1,108 +0,0 @@
-package org.dstadler.jgit.api;
-
-/*
-   Copyright 2016 Dominik Stadler
-
-   Licensed under the Apache License, Version 2.0 (the "License");
-   you may not use this file except in compliance with the License.
-   You may obtain a copy of the License at
-
-     http://www.apache.org/licenses/LICENSE-2.0
-
-   Unless required by applicable law or agreed to in writing, software
-   distributed under the License is distributed on an "AS IS" BASIS,
-   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-   See the License for the specific language governing permissions and
-   limitations under the License.
- */
-
-import org.dstadler.jgit.helper.CookbookHelper;
-import org.eclipse.jgit.lib.FileMode;
-import org.eclipse.jgit.lib.ObjectId;
-import org.eclipse.jgit.lib.Repository;
-import org.eclipse.jgit.revwalk.RevCommit;
-import org.eclipse.jgit.revwalk.RevTree;
-import org.eclipse.jgit.revwalk.RevWalk;
-import org.eclipse.jgit.treewalk.TreeWalk;
-
-import java.io.FileNotFoundException;
-import java.io.IOException;
-import java.util.ArrayList;
-import java.util.List;
-
-/**
- * Simple snippet which shows how to get a list of files/directories
- * based on a specific commit or a tag.
- */
-public class ListFilesOfCommitAndTag {
-
-    public static void main(String[] args) throws IOException {
-        try (Repository repository = CookbookHelper.openJGitCookbookRepository()) {
-            List<String> paths = readElementsAt(repository, "6409ee1597a53c6fbee31edf9cde31dc3afbe20f", "src/main/java/org/dstadler/jgit/porcelain");
-
-            System.out.println("Had paths for commit: " + paths);
-
-            final ObjectId testbranch = repository.resolve("testbranch");
-            paths = readElementsAt(repository, testbranch.getName(), "src/main/java/org/dstadler/jgit/porcelain");
-
-            System.out.println("Had paths for tag: " + paths);
-        }
-    }
-
-    private static List<String> readElementsAt(Repository repository, String commit, String path) throws IOException {
-        RevCommit revCommit = buildRevCommit(repository, commit);
-
-        // and using commit's tree find the path
-        RevTree tree = revCommit.getTree();
-        //System.out.println("Having tree: " + tree + " for commit " + commit);
-
-        List<String> items = new ArrayList<>();
-
-        // shortcut for root-path
-        if(path.isEmpty()) {
-            try (TreeWalk treeWalk = new TreeWalk(repository)) {
-                treeWalk.addTree(tree);
-                treeWalk.setRecursive(false);
-                treeWalk.setPostOrderTraversal(false);
-
-                while(treeWalk.next()) {
-                    items.add(treeWalk.getPathString());
-                }
-            }
-        } else {
-            // now try to find a specific file
-            try (TreeWalk treeWalk = buildTreeWalk(repository, tree, path)) {
-                if((treeWalk.getFileMode(0).getBits() & FileMode.TYPE_TREE) == 0) {
-                    throw new IllegalStateException("Tried to read the elements of a non-tree for commit '" + commit + "' and path '" + path + "', had filemode " + treeWalk.getFileMode(0).getBits());
-                }
-
-                try (TreeWalk dirWalk = new TreeWalk(repository)) {
-                    dirWalk.addTree(treeWalk.getObjectId(0));
-                    dirWalk.setRecursive(false);
-                    while(dirWalk.next()) {
-                        items.add(dirWalk.getPathString());
-                    }
-                }
-            }
-        }
-
-        return items;
-    }
-
-    private static RevCommit buildRevCommit(Repository repository, String commit) throws IOException {
-        // a RevWalk allows to walk over commits based on some filtering that is defined
-        try (RevWalk revWalk = new RevWalk(repository)) {
-            return revWalk.parseCommit(ObjectId.fromString(commit));
-        }
-    }
-
-    private static TreeWalk buildTreeWalk(Repository repository, RevTree tree, final String path) throws IOException {
-        TreeWalk treeWalk = TreeWalk.forPath(repository, path, tree);
-
-        if(treeWalk == null) {
-            throw new FileNotFoundException("Did not find expected file '" + path + "' in tree '" + tree.getName() + "'");
-        }
-
-        return treeWalk;
-    }
-}
Diff Between 208ea03caa1371a44d6c668429b8dc42249ac919 88f89f3b42ef11b930856cc89c56e3481826ce98diff --git a/ISSUE_TEMPLATE.md b/ISSUE_TEMPLATE.md
new file mode 100644
index 0000000..06a7294
--- /dev/null
+++ b/ISSUE_TEMPLATE.md
@@ -0,0 +1 @@
+*Note: Please use sites such as http://stackoverflow.com for general questions about JGit usage, not issues in this project. Issues should be used for problems with snippets and suggestions of missing snippets. Snippets from good answers on stackoverflow can then be included here, naturally.*
Diff Between 88f89f3b42ef11b930856cc89c56e3481826ce98 db953aa313f04742e3b9c61a1d24ea36c2a2bc5adiff --git a/README.md b/README.md
index 1947db7..5356e79 100644
--- a/README.md
+++ b/README.md
@@ -96,0 +97 @@
+* [List files in a directory as-of a specific commit or a tag](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/api/ListFilesOfCommitAndTag.java)
diff --git a/src/main/java/org/dstadler/jgit/api/ListFilesOfCommitAndTag.java b/src/main/java/org/dstadler/jgit/api/ListFilesOfCommitAndTag.java
new file mode 100644
index 0000000..89dca48
--- /dev/null
+++ b/src/main/java/org/dstadler/jgit/api/ListFilesOfCommitAndTag.java
@@ -0,0 +1,108 @@
+package org.dstadler.jgit.api;
+
+/*
+   Copyright 2016 Dominik Stadler
+
+   Licensed under the Apache License, Version 2.0 (the "License");
+   you may not use this file except in compliance with the License.
+   You may obtain a copy of the License at
+
+     http://www.apache.org/licenses/LICENSE-2.0
+
+   Unless required by applicable law or agreed to in writing, software
+   distributed under the License is distributed on an "AS IS" BASIS,
+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+   See the License for the specific language governing permissions and
+   limitations under the License.
+ */
+
+import org.dstadler.jgit.helper.CookbookHelper;
+import org.eclipse.jgit.lib.FileMode;
+import org.eclipse.jgit.lib.ObjectId;
+import org.eclipse.jgit.lib.Repository;
+import org.eclipse.jgit.revwalk.RevCommit;
+import org.eclipse.jgit.revwalk.RevTree;
+import org.eclipse.jgit.revwalk.RevWalk;
+import org.eclipse.jgit.treewalk.TreeWalk;
+
+import java.io.FileNotFoundException;
+import java.io.IOException;
+import java.util.ArrayList;
+import java.util.List;
+
+/**
+ * Simple snippet which shows how to get a list of files/directories
+ * based on a specific commit or a tag.
+ */
+public class ListFilesOfCommitAndTag {
+
+    public static void main(String[] args) throws IOException {
+        try (Repository repository = CookbookHelper.openJGitCookbookRepository()) {
+            List<String> paths = readElementsAt(repository, "6409ee1597a53c6fbee31edf9cde31dc3afbe20f", "src/main/java/org/dstadler/jgit/porcelain");
+
+            System.out.println("Had paths for commit: " + paths);
+
+            final ObjectId testbranch = repository.resolve("testbranch");
+            paths = readElementsAt(repository, testbranch.getName(), "src/main/java/org/dstadler/jgit/porcelain");
+
+            System.out.println("Had paths for tag: " + paths);
+        }
+    }
+
+    private static List<String> readElementsAt(Repository repository, String commit, String path) throws IOException {
+        RevCommit revCommit = buildRevCommit(repository, commit);
+
+        // and using commit's tree find the path
+        RevTree tree = revCommit.getTree();
+        //System.out.println("Having tree: " + tree + " for commit " + commit);
+
+        List<String> items = new ArrayList<>();
+
+        // shortcut for root-path
+        if(path.isEmpty()) {
+            try (TreeWalk treeWalk = new TreeWalk(repository)) {
+                treeWalk.addTree(tree);
+                treeWalk.setRecursive(false);
+                treeWalk.setPostOrderTraversal(false);
+
+                while(treeWalk.next()) {
+                    items.add(treeWalk.getPathString());
+                }
+            }
+        } else {
+            // now try to find a specific file
+            try (TreeWalk treeWalk = buildTreeWalk(repository, tree, path)) {
+                if((treeWalk.getFileMode(0).getBits() & FileMode.TYPE_TREE) == 0) {
+                    throw new IllegalStateException("Tried to read the elements of a non-tree for commit '" + commit + "' and path '" + path + "', had filemode " + treeWalk.getFileMode(0).getBits());
+                }
+
+                try (TreeWalk dirWalk = new TreeWalk(repository)) {
+                    dirWalk.addTree(treeWalk.getObjectId(0));
+                    dirWalk.setRecursive(false);
+                    while(dirWalk.next()) {
+                        items.add(dirWalk.getPathString());
+                    }
+                }
+            }
+        }
+
+        return items;
+    }
+
+    private static RevCommit buildRevCommit(Repository repository, String commit) throws IOException {
+        // a RevWalk allows to walk over commits based on some filtering that is defined
+        try (RevWalk revWalk = new RevWalk(repository)) {
+            return revWalk.parseCommit(ObjectId.fromString(commit));
+        }
+    }
+
+    private static TreeWalk buildTreeWalk(Repository repository, RevTree tree, final String path) throws IOException {
+        TreeWalk treeWalk = TreeWalk.forPath(repository, path, tree);
+
+        if(treeWalk == null) {
+            throw new FileNotFoundException("Did not find expected file '" + path + "' in tree '" + tree.getName() + "'");
+        }
+
+        return treeWalk;
+    }
+}
Diff Between db953aa313f04742e3b9c61a1d24ea36c2a2bc5a 38cd54de9ca911dac97b157401b6a23087cabd4adiff --git a/src/main/java/org/dstadler/jgit/api/GetFileAttributes.java b/src/main/java/org/dstadler/jgit/api/GetFileAttributes.java
index 86338c1..061e8b1 100755
--- a/src/main/java/org/dstadler/jgit/api/GetFileAttributes.java
+++ b/src/main/java/org/dstadler/jgit/api/GetFileAttributes.java
@@ -19,2 +18,0 @@
-import java.io.IOException;
-
@@ -22,9 +20 @@
-import org.eclipse.jgit.errors.AmbiguousObjectException;
-import org.eclipse.jgit.errors.CorruptObjectException;
-import org.eclipse.jgit.errors.IncorrectObjectTypeException;
-import org.eclipse.jgit.errors.MissingObjectException;
-import org.eclipse.jgit.lib.Constants;
-import org.eclipse.jgit.lib.FileMode;
-import org.eclipse.jgit.lib.ObjectId;
-import org.eclipse.jgit.lib.ObjectLoader;
-import org.eclipse.jgit.lib.Repository;
+import org.eclipse.jgit.lib.*;
@@ -36,0 +27,2 @@
+import java.io.IOException;
+
@@ -58,2 +50 @@
-    private static RevTree getTree(Repository repository) throws AmbiguousObjectException, IncorrectObjectTypeException,
-            IOException, MissingObjectException {
+    private static RevTree getTree(Repository repository) throws IOException {
@@ -75,2 +66 @@
-    private static void printFile(Repository repository, RevTree tree) throws MissingObjectException,
-            IncorrectObjectTypeException, CorruptObjectException, IOException {
+    private static void printFile(Repository repository, RevTree tree) throws IOException {
@@ -95,2 +85 @@
-    private static void printDirectory(Repository repository, RevTree tree) throws MissingObjectException,
-            IncorrectObjectTypeException, CorruptObjectException, IOException {
+    private static void printDirectory(Repository repository, RevTree tree) throws IOException {
Diff Between 38cd54de9ca911dac97b157401b6a23087cabd4a 93f9b32b71adc3f733499ea039eac78857ef761bdiff --git a/build.gradle b/build.gradle
index d23da3f..8cb2c4d 100644
--- a/build.gradle
+++ b/build.gradle
@@ -15,4 +15,4 @@
-	compile 'org.eclipse.jgit:org.eclipse.jgit:4.2.0.201601211800-r'
-	compile 'org.eclipse.jgit:org.eclipse.jgit.archive:4.2.0.201601211800-r'
-	compile 'commons-io:commons-io:2.4'
-	compile 'org.slf4j:slf4j-simple:1.7.13'
+	compile 'org.eclipse.jgit:org.eclipse.jgit:4.4.0.201606070830-r'
+	compile 'org.eclipse.jgit:org.eclipse.jgit.archive:4.4.0.201606070830-r'
+	compile 'commons-io:commons-io:2.5'
+	compile 'org.slf4j:slf4j-simple:1.7.21'
@@ -20 +20 @@
-    testCompile "junit:junit:4+"
+    testCompile "junit:junit:4.12"
diff --git a/pom.xml b/pom.xml
index ee34668..ddedcaa 100644
--- a/pom.xml
+++ b/pom.xml
@@ -23 +23 @@
-      <version>4.2.0.201601211800-r</version>
+      <version>4.4.0.201606070830-r</version>
@@ -28 +28 @@
-      <version>4.2.0.201601211800-r</version>
+      <version>4.4.0.201606070830-r</version>
@@ -34 +34 @@
-		<version>2.4</version>
+		<version>2.5</version>
@@ -39 +39 @@
-		<version>1.7.12</version>
+		<version>1.7.21</version>
Diff Between 93f9b32b71adc3f733499ea039eac78857ef761b 64025f4aee062c7fdd8c746d0fb25f9ae54158c7Diff Between 64025f4aee062c7fdd8c746d0fb25f9ae54158c7 874839b692dabb133ba15a867652cd50398446b8diff --git a/build.gradle b/build.gradle
index 9b6c871..d23da3f 100644
--- a/build.gradle
+++ b/build.gradle
@@ -43 +43 @@
-    gradleVersion = '2.12'
+    gradleVersion = '2.14'
diff --git a/gradle/wrapper/gradle-wrapper.jar b/gradle/wrapper/gradle-wrapper.jar
index 2c6137b..d3b8398 100644
--- a/gradle/wrapper/gradle-wrapper.jar
+++ b/gradle/wrapper/gradle-wrapper.jar
Binary files differ
diff --git a/gradle/wrapper/gradle-wrapper.properties b/gradle/wrapper/gradle-wrapper.properties
index a3a0e40..1ce295d 100644
--- a/gradle/wrapper/gradle-wrapper.properties
+++ b/gradle/wrapper/gradle-wrapper.properties
@@ -0,0 +1 @@
+#Tue Jun 14 08:21:56 UTC 2016
@@ -3 +3,0 @@
-distributionUrl=https\://services.gradle.org/distributions/gradle-2.12-bin.zip
@@ -5,0 +6 @@
+distributionUrl=https\://services.gradle.org/distributions/gradle-2.14-bin.zip
diff --git a/gradlew b/gradlew
index 9d82f78..27309d9 100755
--- a/gradlew
+++ b/gradlew
@@ -9,2 +9,17 @@
-# Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
-DEFAULT_JVM_OPTS=""
+# Attempt to set APP_HOME
+# Resolve links: $0 may be a link
+PRG="$0"
+# Need this for relative symlinks.
+while [ -h "$PRG" ] ; do
+    ls=`ls -ld "$PRG"`
+    link=`expr "$ls" : '.*-> \(.*\)$'`
+    if expr "$link" : '/.*' > /dev/null; then
+        PRG="$link"
+    else
+        PRG=`dirname "$PRG"`"/$link"
+    fi
+done
+SAVED="`pwd`"
+cd "`dirname \"$PRG\"`/" >/dev/null
+APP_HOME="`pwd -P`"
+cd "$SAVED" >/dev/null
@@ -14,0 +30,3 @@
+# Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
+DEFAULT_JVM_OPTS=""
+
@@ -32,0 +51 @@
+nonstop=false
@@ -42,0 +62,3 @@
+  NONSTOP* )
+    nonstop=true
+    ;;
@@ -45,18 +66,0 @@
-# Attempt to set APP_HOME
-# Resolve links: $0 may be a link
-PRG="$0"
-# Need this for relative symlinks.
-while [ -h "$PRG" ] ; do
-    ls=`ls -ld "$PRG"`
-    link=`expr "$ls" : '.*-> \(.*\)$'`
-    if expr "$link" : '/.*' > /dev/null; then
-        PRG="$link"
-    else
-        PRG=`dirname "$PRG"`"/$link"
-    fi
-done
-SAVED="`pwd`"
-cd "`dirname \"$PRG\"`/" >/dev/null
-APP_HOME="`pwd -P`"
-cd "$SAVED" >/dev/null
-
@@ -88 +92 @@
-if [ "$cygwin" = "false" -a "$darwin" = "false" ] ; then
+if [ "$cygwin" = "false" -a "$darwin" = "false" -a "$nonstop" = "false" ] ; then
diff --git a/gradlew.bat b/gradlew.bat
index 72d362d..f6d5974 100644
--- a/gradlew.bat
+++ b/gradlew.bat
@@ -11,3 +10,0 @@
-@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
-set DEFAULT_JVM_OPTS=
-
@@ -18,0 +16,3 @@
+@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
+set DEFAULT_JVM_OPTS=
+
Diff Between 874839b692dabb133ba15a867652cd50398446b8 8431c81feb13d903d66588522050e93ca26c2f1ddiff --git a/README.md b/README.md
index 882e915..1947db7 100644
--- a/README.md
+++ b/README.md
@@ -11 +11 @@
-Please make sure to also use the existing [JavaDoc](http://download.eclipse.org/jgit/site/4.2.0.201601211800-r/apidocs/) and the [User Guide](http://wiki.eclipse.org/JGit/User_Guide) as well, as they are well done and provide detailed information and a general overview of JGit respectively.
+Please make sure to take a look at the nicely written [introduction](http://www.codeaffine.com/2015/12/15/getting-started-with-jgit/) and also use the existing [JavaDoc](http://download.eclipse.org/jgit/site/4.2.0.201601211800-r/apidocs/) and the [User Guide](http://wiki.eclipse.org/JGit/User_Guide) as well, as they are well done and provide detailed information and a general overview of JGit respectively.
Diff Between 8431c81feb13d903d66588522050e93ca26c2f1d 358536aa08ba0258e505a4a1efc4e9432f255b5ddiff --git a/README.md b/README.md
index a58901f..882e915 100644
--- a/README.md
+++ b/README.md
@@ -89,0 +90 @@
+* [Iterate over a range of commits](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/api/WalkFromToRev.java)
diff --git a/src/main/java/org/dstadler/jgit/api/WalkFromToRev.java b/src/main/java/org/dstadler/jgit/api/WalkFromToRev.java
new file mode 100644
index 0000000..1ded112
--- /dev/null
+++ b/src/main/java/org/dstadler/jgit/api/WalkFromToRev.java
@@ -0,0 +1,61 @@
+package org.dstadler.jgit.api;
+
+/*
+   Copyright 2013, 2014 Dominik Stadler
+
+   Licensed under the Apache License, Version 2.0 (the "License");
+   you may not use this file except in compliance with the License.
+   You may obtain a copy of the License at
+
+     http://www.apache.org/licenses/LICENSE-2.0
+
+   Unless required by applicable law or agreed to in writing, software
+   distributed under the License is distributed on an "AS IS" BASIS,
+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+   See the License for the specific language governing permissions and
+   limitations under the License.
+ */
+
+import org.dstadler.jgit.helper.CookbookHelper;
+import org.eclipse.jgit.lib.Ref;
+import org.eclipse.jgit.lib.Repository;
+import org.eclipse.jgit.revwalk.RevCommit;
+import org.eclipse.jgit.revwalk.RevWalk;
+
+import java.io.IOException;
+
+
+/**
+ * Simple snippet which shows how to use RevWalk to iterate over objects
+ */
+public class WalkFromToRev {
+
+    public static void main(String[] args) throws IOException {
+        try (Repository repository = CookbookHelper.openJGitCookbookRepository()) {
+            String from = "3408efc41a51555d488d30d8a91ea560c5e13311";
+            String to = "7228de6ebe2a3087118562414061af4e189624c0";
+
+            // a RevWalk allows to walk over commits based on some filtering that is defined
+            try (RevWalk walk = new RevWalk(repository)) {
+                RevCommit commit = walk.parseCommit(repository.resolve(to));
+                System.out.println("Start-Commit: " + commit);
+
+                System.out.println("Walking all commits starting at " + to + " until we find " + from);
+                walk.markStart(commit);
+                int count = 0;
+                for (RevCommit rev : walk) {
+                    System.out.println("Commit: " + rev);
+                    count++;
+
+                    if(rev.getId().getName().equals(from)) {
+                        System.out.println("Found from, stopping walk");
+                        break;
+                    }
+                }
+                System.out.println(count);
+
+                walk.dispose();
+            }
+        }
+    }
+}
diff --git a/src/test/java/org/dstadler/jgit/api/ApiTest.java b/src/test/java/org/dstadler/jgit/api/ApiTest.java
index 91294cc..a52bb9e 100644
--- a/src/test/java/org/dstadler/jgit/api/ApiTest.java
+++ b/src/test/java/org/dstadler/jgit/api/ApiTest.java
@@ -32,0 +33 @@
+        WalkFromToRev.main(null);
Diff Between 358536aa08ba0258e505a4a1efc4e9432f255b5d ff33db2d7a63e51743ea97d60c6159c54f286777diff --git a/gradle/wrapper/gradle-wrapper.properties b/gradle/wrapper/gradle-wrapper.properties
index b89d5f0..a3a0e40 100644
--- a/gradle/wrapper/gradle-wrapper.properties
+++ b/gradle/wrapper/gradle-wrapper.properties
@@ -1 +0,0 @@
-#Mon Mar 14 09:21:26 UTC 2016
@@ -3,0 +3 @@
+distributionUrl=https\://services.gradle.org/distributions/gradle-2.12-bin.zip
@@ -6 +5,0 @@
-distributionUrl=https\://services.gradle.org/distributions/gradle-2.12-bin.zip
Diff Between ff33db2d7a63e51743ea97d60c6159c54f286777 b771e380a6f9a6ba114e18bf2ad61924c137b3e5Diff Between b771e380a6f9a6ba114e18bf2ad61924c137b3e5 aa40010b0ecdfc7c267aa37a94025a6dec59b8f0diff --git a/src/main/java/org/dstadler/jgit/porcelain/RevertChanges.java b/src/main/java/org/dstadler/jgit/porcelain/RevertChanges.java
index 821b37f..eb5d139 100644
--- a/src/main/java/org/dstadler/jgit/porcelain/RevertChanges.java
+++ b/src/main/java/org/dstadler/jgit/porcelain/RevertChanges.java
@@ -61 +61 @@
-                    throw new IllegalStateException("Reverted file's text should equal to its initial text");
+                    throw new IllegalStateException("Reverted file's text should equal its initial text");
Diff Between aa40010b0ecdfc7c267aa37a94025a6dec59b8f0 a9b1b62e9e521da57d54f755568d16874e86cb40diff --git a/src/main/java/org/dstadler/jgit/porcelain/RevertChanges.java b/src/main/java/org/dstadler/jgit/porcelain/RevertChanges.java
index c3da100..821b37f 100644
--- a/src/main/java/org/dstadler/jgit/porcelain/RevertChanges.java
+++ b/src/main/java/org/dstadler/jgit/porcelain/RevertChanges.java
@@ -57 +57 @@
-                git.checkout().setStartPoint("HEAD").addPath(fileName).call();
+                git.checkout().addPath(fileName).call();
Diff Between a9b1b62e9e521da57d54f755568d16874e86cb40 1eb652c47744224a65c0b9cbe567de94e2bc9315Diff Between 1eb652c47744224a65c0b9cbe567de94e2bc9315 7228de6ebe2a3087118562414061af4e189624c0diff --git a/build.gradle b/build.gradle
index 53251f1..9b6c871 100644
--- a/build.gradle
+++ b/build.gradle
@@ -43 +43 @@
-    gradleVersion = '2.11'
+    gradleVersion = '2.12'
diff --git a/gradle/wrapper/gradle-wrapper.jar b/gradle/wrapper/gradle-wrapper.jar
index 5ccda13..2c6137b 100644
--- a/gradle/wrapper/gradle-wrapper.jar
+++ b/gradle/wrapper/gradle-wrapper.jar
Binary files differ
diff --git a/gradle/wrapper/gradle-wrapper.properties b/gradle/wrapper/gradle-wrapper.properties
index ab36276..b89d5f0 100644
--- a/gradle/wrapper/gradle-wrapper.properties
+++ b/gradle/wrapper/gradle-wrapper.properties
@@ -1 +1 @@
-#Mon Feb 08 08:20:58 UTC 2016
+#Mon Mar 14 09:21:26 UTC 2016
@@ -6 +6 @@
-distributionUrl=https\://services.gradle.org/distributions/gradle-2.11-bin.zip
+distributionUrl=https\://services.gradle.org/distributions/gradle-2.12-bin.zip
Diff Between 7228de6ebe2a3087118562414061af4e189624c0 edea8f471feed59abb377a719893939dd2f797eadiff --git a/.travis.yml b/.travis.yml
index 56d6195..0a89cb3 100644
--- a/.travis.yml
+++ b/.travis.yml
@@ -12,3 +11,0 @@
-after_success:
-- ./gradlew jacocoTestReport
-
diff --git a/build.gradle b/build.gradle
index efd1cb5..53251f1 100644
--- a/build.gradle
+++ b/build.gradle
@@ -43 +43 @@
-    gradleVersion = '2.10'
+    gradleVersion = '2.11'
diff --git a/gradle/wrapper/gradle-wrapper.jar b/gradle/wrapper/gradle-wrapper.jar
index 13372ae..5ccda13 100644
--- a/gradle/wrapper/gradle-wrapper.jar
+++ b/gradle/wrapper/gradle-wrapper.jar
Binary files differ
diff --git a/gradle/wrapper/gradle-wrapper.properties b/gradle/wrapper/gradle-wrapper.properties
index f4aa24d..ab36276 100644
--- a/gradle/wrapper/gradle-wrapper.properties
+++ b/gradle/wrapper/gradle-wrapper.properties
@@ -0,0 +1 @@
+#Mon Feb 08 08:20:58 UTC 2016
@@ -3 +3,0 @@
-distributionUrl=https\://services.gradle.org/distributions/gradle-2.10-bin.zip
@@ -5,0 +6 @@
+distributionUrl=https\://services.gradle.org/distributions/gradle-2.11-bin.zip
diff --git a/gradlew.bat b/gradlew.bat
index aec9973..72d362d 100644
--- a/gradlew.bat
+++ b/gradlew.bat
@@ -49 +49 @@
-@rem Get command-line arguments, handling Windowz variants
+@rem Get command-line arguments, handling Windows variants
diff --git a/src/main/java/org/dstadler/jgit/OpenRepository.java b/src/main/java/org/dstadler/jgit/OpenRepository.java
index e9b8d00..5bc6286 100644
--- a/src/main/java/org/dstadler/jgit/OpenRepository.java
+++ b/src/main/java/org/dstadler/jgit/OpenRepository.java
@@ -19,3 +18,0 @@
-import java.io.File;
-import java.io.IOException;
-
@@ -28,0 +26,3 @@
+import java.io.File;
+import java.io.IOException;
+
@@ -51 +51 @@
-            Ref head = repository.getRef("refs/heads/master");
+            Ref head = repository.exactRef("refs/heads/master");
diff --git a/src/main/java/org/dstadler/jgit/api/GetRefFromName.java b/src/main/java/org/dstadler/jgit/api/GetRefFromName.java
index c5de3c7..6e47082 100644
--- a/src/main/java/org/dstadler/jgit/api/GetRefFromName.java
+++ b/src/main/java/org/dstadler/jgit/api/GetRefFromName.java
@@ -19,2 +18,0 @@
-import java.io.IOException;
-
@@ -24,0 +23 @@
+import java.io.IOException;
@@ -33 +32 @@
-            Ref head = repository.getRef("refs/heads/master");
+            Ref head = repository.exactRef("refs/heads/master");
diff --git a/src/main/java/org/dstadler/jgit/api/GetRevCommitFromObjectId.java b/src/main/java/org/dstadler/jgit/api/GetRevCommitFromObjectId.java
index 6b8461e..4884df0 100644
--- a/src/main/java/org/dstadler/jgit/api/GetRevCommitFromObjectId.java
+++ b/src/main/java/org/dstadler/jgit/api/GetRevCommitFromObjectId.java
@@ -19,2 +18,0 @@
-import java.io.IOException;
-
@@ -27,0 +26,2 @@
+import java.io.IOException;
+
@@ -35 +35 @@
-            Ref head = repository.getRef("refs/heads/master");
+            Ref head = repository.exactRef("refs/heads/master");
diff --git a/src/main/java/org/dstadler/jgit/api/GetRevTreeFromObjectId.java b/src/main/java/org/dstadler/jgit/api/GetRevTreeFromObjectId.java
index bf4b835..3ec77ba 100644
--- a/src/main/java/org/dstadler/jgit/api/GetRevTreeFromObjectId.java
+++ b/src/main/java/org/dstadler/jgit/api/GetRevTreeFromObjectId.java
@@ -19,2 +18,0 @@
-import java.io.IOException;
-
@@ -27,0 +26,2 @@
+import java.io.IOException;
+
@@ -36 +36 @@
-            Ref head = repository.getRef("HEAD");
+            Ref head = repository.findRef("HEAD");
diff --git a/src/main/java/org/dstadler/jgit/api/ReadBlobContents.java b/src/main/java/org/dstadler/jgit/api/ReadBlobContents.java
index 5f00cec..4eb2ba3 100644
--- a/src/main/java/org/dstadler/jgit/api/ReadBlobContents.java
+++ b/src/main/java/org/dstadler/jgit/api/ReadBlobContents.java
@@ -19,2 +18,0 @@
-import java.io.IOException;
-
@@ -28,0 +27,2 @@
+import java.io.IOException;
+
@@ -37 +37 @@
-            Ref head = repository.getRef("refs/heads/master");
+            Ref head = repository.exactRef("refs/heads/master");
diff --git a/src/main/java/org/dstadler/jgit/api/ReadTagFromName.java b/src/main/java/org/dstadler/jgit/api/ReadTagFromName.java
index dee9ae7..16d9de1 100644
--- a/src/main/java/org/dstadler/jgit/api/ReadTagFromName.java
+++ b/src/main/java/org/dstadler/jgit/api/ReadTagFromName.java
@@ -19,2 +18,0 @@
-import java.io.IOException;
-
@@ -27,0 +26,2 @@
+import java.io.IOException;
+
@@ -38 +38 @@
-                Ref simpleTag = repository.getRef("initialtag");
+                Ref simpleTag = repository.findRef("initialtag");
@@ -43 +43 @@
-                Ref annotatedTag = repository.getRef("secondtag");
+                Ref annotatedTag = repository.findRef("secondtag");
diff --git a/src/main/java/org/dstadler/jgit/api/WalkRev.java b/src/main/java/org/dstadler/jgit/api/WalkRev.java
index d3a063c..c6bc667 100644
--- a/src/main/java/org/dstadler/jgit/api/WalkRev.java
+++ b/src/main/java/org/dstadler/jgit/api/WalkRev.java
@@ -19,2 +18,0 @@
-import java.io.IOException;
-
@@ -26,0 +25,2 @@
+import java.io.IOException;
+
@@ -36 +36 @@
-            Ref head = repository.getRef("refs/heads/master");
+            Ref head = repository.exactRef("refs/heads/master");
diff --git a/src/main/java/org/dstadler/jgit/porcelain/AddAndListNoteOfCommit.java b/src/main/java/org/dstadler/jgit/porcelain/AddAndListNoteOfCommit.java
index 9ced32b..186e182 100755
--- a/src/main/java/org/dstadler/jgit/porcelain/AddAndListNoteOfCommit.java
+++ b/src/main/java/org/dstadler/jgit/porcelain/AddAndListNoteOfCommit.java
@@ -19,3 +18,0 @@
-import java.io.IOException;
-import java.util.List;
-
@@ -31,0 +29,3 @@
+import java.io.IOException;
+import java.util.List;
+
@@ -43 +43 @@
-    		Ref head = repository.getRef("refs/heads/master");
+    		Ref head = repository.exactRef("refs/heads/master");
diff --git a/src/main/java/org/dstadler/jgit/porcelain/ShowBranchDiff.java b/src/main/java/org/dstadler/jgit/porcelain/ShowBranchDiff.java
index 9e2511d..e2538c1 100755
--- a/src/main/java/org/dstadler/jgit/porcelain/ShowBranchDiff.java
+++ b/src/main/java/org/dstadler/jgit/porcelain/ShowBranchDiff.java
@@ -19,3 +18,0 @@
-import java.io.IOException;
-import java.util.List;
-
@@ -36,0 +34,3 @@
+import java.io.IOException;
+import java.util.List;
+
@@ -49 +49 @@
-                if(repository.getRef("refs/heads/testbranch") == null) {
+                if(repository.exactRef("refs/heads/testbranch") == null) {
@@ -73 +73 @@
-        Ref head = repository.getRef(ref);
+        Ref head = repository.exactRef(ref);
diff --git a/src/main/java/org/dstadler/jgit/unfinished/WalkTreeNonRecursive.java b/src/main/java/org/dstadler/jgit/unfinished/WalkTreeNonRecursive.java
index 7e80bbb..83dbcb1 100644
--- a/src/main/java/org/dstadler/jgit/unfinished/WalkTreeNonRecursive.java
+++ b/src/main/java/org/dstadler/jgit/unfinished/WalkTreeNonRecursive.java
@@ -19,2 +18,0 @@
-import java.io.IOException;
-
@@ -28,0 +27,2 @@
+import java.io.IOException;
+
@@ -40 +40 @@
-            Ref head = repository.getRef("HEAD");
+            Ref head = repository.findRef("HEAD");
diff --git a/src/main/java/org/dstadler/jgit/unfinished/WalkTreeRecursive.java b/src/main/java/org/dstadler/jgit/unfinished/WalkTreeRecursive.java
index ad13150..80ff6cf 100644
--- a/src/main/java/org/dstadler/jgit/unfinished/WalkTreeRecursive.java
+++ b/src/main/java/org/dstadler/jgit/unfinished/WalkTreeRecursive.java
@@ -19,2 +18,0 @@
-import java.io.IOException;
-
@@ -28,0 +27,2 @@
+import java.io.IOException;
+
@@ -40 +40 @@
-            Ref head = repository.getRef("HEAD");
+            Ref head = repository.findRef("HEAD");
diff --git a/src/test/java/org/dstadler/jgit/JGitBugTest.java b/src/test/java/org/dstadler/jgit/JGitBugTest.java
index c1c32a1..aaf653a 100644
--- a/src/test/java/org/dstadler/jgit/JGitBugTest.java
+++ b/src/test/java/org/dstadler/jgit/JGitBugTest.java
@@ -3,4 +2,0 @@
-import static org.junit.Assert.assertNotNull;
-
-import java.io.IOException;
-
@@ -14,0 +11,4 @@
+import java.io.IOException;
+
+import static org.junit.Assert.assertNotNull;
+
@@ -26 +26 @@
-                    Ref head = repo.getRef("refs/heads/master");
+                    Ref head = repo.exactRef("refs/heads/master");
Diff Between edea8f471feed59abb377a719893939dd2f797ea d43340cb20966f8965fe14e6ccec3b824d5e3f32diff --git a/src/main/java/org/dstadler/jgit/porcelain/RevertChanges.java b/src/main/java/org/dstadler/jgit/porcelain/RevertChanges.java
index f3cd43c..c3da100 100644
--- a/src/main/java/org/dstadler/jgit/porcelain/RevertChanges.java
+++ b/src/main/java/org/dstadler/jgit/porcelain/RevertChanges.java
@@ -49,2 +49,3 @@
-                if (initialText.equals(readFile(tempFilePath))) {
-                    throw new IllegalStateException("Modified file should not equal its original state after modification");
+                if (initialText.equals(getTextFromFilePath(tempFilePath))) {
+                    throw new IllegalStateException("Modified file's text should not equal " +
+                            "its original state after modification");
@@ -53 +54 @@
-                System.out.println("File now has text [" + readFile(tempFilePath) + "]");
+                System.out.println("File now has text [" + getTextFromFilePath(tempFilePath) + "]");
@@ -59,2 +60,2 @@
-                if (!initialText.equals(readFile(tempFilePath))) {
-                    throw new IllegalStateException("Reverted file's text should equal its initial text");
+                if (!initialText.equals(getTextFromFilePath(tempFilePath))) {
+                    throw new IllegalStateException("Reverted file's text should equal to its initial text");
@@ -64 +65 @@
-                        "File now has text [" + readFile(tempFilePath) + "]");
+                        "File now has text [" + getTextFromFilePath(tempFilePath) + "]");
@@ -70 +71 @@
-    private static String readFile(Path file) throws IOException {
+    private static String getTextFromFilePath(Path file) throws IOException {
Diff Between d43340cb20966f8965fe14e6ccec3b824d5e3f32 92f9220d2da3d9ca65043c0164e52317b592a53adiff --git a/README.md b/README.md
index ef97604..a58901f 100644
--- a/README.md
+++ b/README.md
@@ -54,0 +55 @@
+* [Revert a modified tracked file back to its original state in most recent commit](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/porcelain/RevertChanges.java)
Diff Between 92f9220d2da3d9ca65043c0164e52317b592a53a 5015a4cb24ae6dfd0e65bd92f4841a19a0ce12eadiff --git a/.travis.yml b/.travis.yml
index 0a89cb3..56d6195 100644
--- a/.travis.yml
+++ b/.travis.yml
@@ -11,0 +12,3 @@
+after_success:
+- ./gradlew jacocoTestReport
+
diff --git a/build.gradle b/build.gradle
index 53251f1..efd1cb5 100644
--- a/build.gradle
+++ b/build.gradle
@@ -43 +43 @@
-    gradleVersion = '2.11'
+    gradleVersion = '2.10'
diff --git a/gradle/wrapper/gradle-wrapper.jar b/gradle/wrapper/gradle-wrapper.jar
index 5ccda13..13372ae 100644
--- a/gradle/wrapper/gradle-wrapper.jar
+++ b/gradle/wrapper/gradle-wrapper.jar
Binary files differ
diff --git a/gradle/wrapper/gradle-wrapper.properties b/gradle/wrapper/gradle-wrapper.properties
index ab36276..f4aa24d 100644
--- a/gradle/wrapper/gradle-wrapper.properties
+++ b/gradle/wrapper/gradle-wrapper.properties
@@ -1 +0,0 @@
-#Mon Feb 08 08:20:58 UTC 2016
@@ -3,0 +3 @@
+distributionUrl=https\://services.gradle.org/distributions/gradle-2.10-bin.zip
@@ -6 +5,0 @@
-distributionUrl=https\://services.gradle.org/distributions/gradle-2.11-bin.zip
diff --git a/gradlew.bat b/gradlew.bat
index 72d362d..aec9973 100644
--- a/gradlew.bat
+++ b/gradlew.bat
@@ -49 +49 @@
-@rem Get command-line arguments, handling Windows variants
+@rem Get command-line arguments, handling Windowz variants
diff --git a/src/main/java/org/dstadler/jgit/OpenRepository.java b/src/main/java/org/dstadler/jgit/OpenRepository.java
index 5bc6286..e9b8d00 100644
--- a/src/main/java/org/dstadler/jgit/OpenRepository.java
+++ b/src/main/java/org/dstadler/jgit/OpenRepository.java
@@ -18,0 +19,3 @@
+import java.io.File;
+import java.io.IOException;
+
@@ -26,3 +28,0 @@
-import java.io.File;
-import java.io.IOException;
-
@@ -51 +51 @@
-            Ref head = repository.exactRef("refs/heads/master");
+            Ref head = repository.getRef("refs/heads/master");
diff --git a/src/main/java/org/dstadler/jgit/api/GetRefFromName.java b/src/main/java/org/dstadler/jgit/api/GetRefFromName.java
index 6e47082..c5de3c7 100644
--- a/src/main/java/org/dstadler/jgit/api/GetRefFromName.java
+++ b/src/main/java/org/dstadler/jgit/api/GetRefFromName.java
@@ -18,0 +19,2 @@
+import java.io.IOException;
+
@@ -23 +24,0 @@
-import java.io.IOException;
@@ -32 +33 @@
-            Ref head = repository.exactRef("refs/heads/master");
+            Ref head = repository.getRef("refs/heads/master");
diff --git a/src/main/java/org/dstadler/jgit/api/GetRevCommitFromObjectId.java b/src/main/java/org/dstadler/jgit/api/GetRevCommitFromObjectId.java
index 4884df0..6b8461e 100644
--- a/src/main/java/org/dstadler/jgit/api/GetRevCommitFromObjectId.java
+++ b/src/main/java/org/dstadler/jgit/api/GetRevCommitFromObjectId.java
@@ -18,0 +19,2 @@
+import java.io.IOException;
+
@@ -26,2 +27,0 @@
-import java.io.IOException;
-
@@ -35 +35 @@
-            Ref head = repository.exactRef("refs/heads/master");
+            Ref head = repository.getRef("refs/heads/master");
diff --git a/src/main/java/org/dstadler/jgit/api/GetRevTreeFromObjectId.java b/src/main/java/org/dstadler/jgit/api/GetRevTreeFromObjectId.java
index 3ec77ba..bf4b835 100644
--- a/src/main/java/org/dstadler/jgit/api/GetRevTreeFromObjectId.java
+++ b/src/main/java/org/dstadler/jgit/api/GetRevTreeFromObjectId.java
@@ -18,0 +19,2 @@
+import java.io.IOException;
+
@@ -26,2 +27,0 @@
-import java.io.IOException;
-
@@ -36 +36 @@
-            Ref head = repository.findRef("HEAD");
+            Ref head = repository.getRef("HEAD");
diff --git a/src/main/java/org/dstadler/jgit/api/ReadBlobContents.java b/src/main/java/org/dstadler/jgit/api/ReadBlobContents.java
index 4eb2ba3..5f00cec 100644
--- a/src/main/java/org/dstadler/jgit/api/ReadBlobContents.java
+++ b/src/main/java/org/dstadler/jgit/api/ReadBlobContents.java
@@ -18,0 +19,2 @@
+import java.io.IOException;
+
@@ -27,2 +28,0 @@
-import java.io.IOException;
-
@@ -37 +37 @@
-            Ref head = repository.exactRef("refs/heads/master");
+            Ref head = repository.getRef("refs/heads/master");
diff --git a/src/main/java/org/dstadler/jgit/api/ReadTagFromName.java b/src/main/java/org/dstadler/jgit/api/ReadTagFromName.java
index 16d9de1..dee9ae7 100644
--- a/src/main/java/org/dstadler/jgit/api/ReadTagFromName.java
+++ b/src/main/java/org/dstadler/jgit/api/ReadTagFromName.java
@@ -18,0 +19,2 @@
+import java.io.IOException;
+
@@ -26,2 +27,0 @@
-import java.io.IOException;
-
@@ -38 +38 @@
-                Ref simpleTag = repository.findRef("initialtag");
+                Ref simpleTag = repository.getRef("initialtag");
@@ -43 +43 @@
-                Ref annotatedTag = repository.findRef("secondtag");
+                Ref annotatedTag = repository.getRef("secondtag");
diff --git a/src/main/java/org/dstadler/jgit/api/WalkRev.java b/src/main/java/org/dstadler/jgit/api/WalkRev.java
index c6bc667..d3a063c 100644
--- a/src/main/java/org/dstadler/jgit/api/WalkRev.java
+++ b/src/main/java/org/dstadler/jgit/api/WalkRev.java
@@ -18,0 +19,2 @@
+import java.io.IOException;
+
@@ -25,2 +26,0 @@
-import java.io.IOException;
-
@@ -36 +36 @@
-            Ref head = repository.exactRef("refs/heads/master");
+            Ref head = repository.getRef("refs/heads/master");
diff --git a/src/main/java/org/dstadler/jgit/porcelain/AddAndListNoteOfCommit.java b/src/main/java/org/dstadler/jgit/porcelain/AddAndListNoteOfCommit.java
index 186e182..9ced32b 100755
--- a/src/main/java/org/dstadler/jgit/porcelain/AddAndListNoteOfCommit.java
+++ b/src/main/java/org/dstadler/jgit/porcelain/AddAndListNoteOfCommit.java
@@ -18,0 +19,3 @@
+import java.io.IOException;
+import java.util.List;
+
@@ -29,3 +31,0 @@
-import java.io.IOException;
-import java.util.List;
-
@@ -43 +43 @@
-    		Ref head = repository.exactRef("refs/heads/master");
+    		Ref head = repository.getRef("refs/heads/master");
diff --git a/src/main/java/org/dstadler/jgit/porcelain/RevertChanges.java b/src/main/java/org/dstadler/jgit/porcelain/RevertChanges.java
new file mode 100644
index 0000000..f3cd43c
--- /dev/null
+++ b/src/main/java/org/dstadler/jgit/porcelain/RevertChanges.java
@@ -0,0 +1,75 @@
+package org.dstadler.jgit.porcelain;
+
+import org.dstadler.jgit.helper.CookbookHelper;
+import org.eclipse.jgit.api.Git;
+import org.eclipse.jgit.api.errors.GitAPIException;
+import org.eclipse.jgit.lib.Repository;
+
+import java.io.File;
+import java.io.IOException;
+import java.nio.ByteBuffer;
+import java.nio.CharBuffer;
+import java.nio.charset.Charset;
+import java.nio.file.Files;
+import java.nio.file.Path;
+import java.nio.file.StandardOpenOption;
+
+/**
+ * Simple snippet which shows how to set a modified tracked file back to its state
+ * in the most recent commit. This does not make a new commit that reverts a previous commit;
+ * this reverts a modified file back to its unmodified state (according to most recent commit)
+ *
+ * @author JordanMartinez
+ */
+public class RevertChanges {
+
+    public static void main(String[] args) throws IOException, GitAPIException {
+        try (Repository repository = CookbookHelper.createNewRepository()) {
+            System.out.println("Listing local branches:");
+            try (Git git = new Git(repository)) {
+                // set up a file
+                String fileName = "temptFile.txt";
+                File tempFile = new File(repository.getDirectory().getParentFile(), fileName);
+                tempFile.createNewFile();
+                Path tempFilePath = tempFile.toPath();
+
+                // write some initial text to it
+                String initialText = "Initial Text";
+                System.out.println("Writing text [" + initialText + "] to file [" + tempFile.toString() + "]");
+                Files.write(tempFilePath, initialText.getBytes());
+
+                // add the file and commit it
+                git.add().addFilepattern(fileName).call();
+                git.commit().setMessage("Added untracked file " + fileName + "to repo").call();
+
+                // modify the file
+                Files.write(tempFilePath, "Some modifications".getBytes(), StandardOpenOption.APPEND);
+
+                // assert that file's text does not equal initialText
+                if (initialText.equals(readFile(tempFilePath))) {
+                    throw new IllegalStateException("Modified file should not equal its original state after modification");
+                }
+
+                System.out.println("File now has text [" + readFile(tempFilePath) + "]");
+
+                // revert the changes
+                git.checkout().setStartPoint("HEAD").addPath(fileName).call();
+
+                // text should no longer have modifications
+                if (!initialText.equals(readFile(tempFilePath))) {
+                    throw new IllegalStateException("Reverted file's text should equal its initial text");
+                }
+
+                System.out.println("File modifications were reverted. " +
+                        "File now has text [" + readFile(tempFilePath) + "]");
+            }
+        }
+
+    }
+
+    private static String readFile(Path file) throws IOException {
+        byte[] bytes = Files.readAllBytes(file);
+        CharBuffer chars = Charset.defaultCharset().decode(ByteBuffer.wrap(bytes));
+        return chars.toString();
+    }
+}
diff --git a/src/main/java/org/dstadler/jgit/porcelain/ShowBranchDiff.java b/src/main/java/org/dstadler/jgit/porcelain/ShowBranchDiff.java
index e2538c1..9e2511d 100755
--- a/src/main/java/org/dstadler/jgit/porcelain/ShowBranchDiff.java
+++ b/src/main/java/org/dstadler/jgit/porcelain/ShowBranchDiff.java
@@ -18,0 +19,3 @@
+import java.io.IOException;
+import java.util.List;
+
@@ -34,3 +36,0 @@
-import java.io.IOException;
-import java.util.List;
-
@@ -49 +49 @@
-                if(repository.exactRef("refs/heads/testbranch") == null) {
+                if(repository.getRef("refs/heads/testbranch") == null) {
@@ -73 +73 @@
-        Ref head = repository.exactRef(ref);
+        Ref head = repository.getRef(ref);
diff --git a/src/main/java/org/dstadler/jgit/unfinished/WalkTreeNonRecursive.java b/src/main/java/org/dstadler/jgit/unfinished/WalkTreeNonRecursive.java
index 83dbcb1..7e80bbb 100644
--- a/src/main/java/org/dstadler/jgit/unfinished/WalkTreeNonRecursive.java
+++ b/src/main/java/org/dstadler/jgit/unfinished/WalkTreeNonRecursive.java
@@ -18,0 +19,2 @@
+import java.io.IOException;
+
@@ -27,2 +28,0 @@
-import java.io.IOException;
-
@@ -40 +40 @@
-            Ref head = repository.findRef("HEAD");
+            Ref head = repository.getRef("HEAD");
diff --git a/src/main/java/org/dstadler/jgit/unfinished/WalkTreeRecursive.java b/src/main/java/org/dstadler/jgit/unfinished/WalkTreeRecursive.java
index 80ff6cf..ad13150 100644
--- a/src/main/java/org/dstadler/jgit/unfinished/WalkTreeRecursive.java
+++ b/src/main/java/org/dstadler/jgit/unfinished/WalkTreeRecursive.java
@@ -18,0 +19,2 @@
+import java.io.IOException;
+
@@ -27,2 +28,0 @@
-import java.io.IOException;
-
@@ -40 +40 @@
-            Ref head = repository.findRef("HEAD");
+            Ref head = repository.getRef("HEAD");
diff --git a/src/test/java/org/dstadler/jgit/JGitBugTest.java b/src/test/java/org/dstadler/jgit/JGitBugTest.java
index aaf653a..c1c32a1 100644
--- a/src/test/java/org/dstadler/jgit/JGitBugTest.java
+++ b/src/test/java/org/dstadler/jgit/JGitBugTest.java
@@ -2,0 +3,4 @@
+import static org.junit.Assert.assertNotNull;
+
+import java.io.IOException;
+
@@ -11,4 +14,0 @@
-import java.io.IOException;
-
-import static org.junit.Assert.assertNotNull;
-
@@ -26 +26 @@
-                    Ref head = repo.exactRef("refs/heads/master");
+                    Ref head = repo.getRef("refs/heads/master");
diff --git a/src/test/java/org/dstadler/jgit/porcelain/PorcelainTest.java b/src/test/java/org/dstadler/jgit/porcelain/PorcelainTest.java
index de1e615..21c6298 100644
--- a/src/test/java/org/dstadler/jgit/porcelain/PorcelainTest.java
+++ b/src/test/java/org/dstadler/jgit/porcelain/PorcelainTest.java
@@ -33,0 +34 @@
+        RevertChanges.main(null);
Diff Between 5015a4cb24ae6dfd0e65bd92f4841a19a0ce12ea 7ea0d0d7f9db1cf2bd643756a1da3ab23465f891diff --git a/build.gradle b/build.gradle
index efd1cb5..53251f1 100644
--- a/build.gradle
+++ b/build.gradle
@@ -43 +43 @@
-    gradleVersion = '2.10'
+    gradleVersion = '2.11'
diff --git a/gradle/wrapper/gradle-wrapper.jar b/gradle/wrapper/gradle-wrapper.jar
index 13372ae..5ccda13 100644
--- a/gradle/wrapper/gradle-wrapper.jar
+++ b/gradle/wrapper/gradle-wrapper.jar
Binary files differ
diff --git a/gradle/wrapper/gradle-wrapper.properties b/gradle/wrapper/gradle-wrapper.properties
index f4aa24d..ab36276 100644
--- a/gradle/wrapper/gradle-wrapper.properties
+++ b/gradle/wrapper/gradle-wrapper.properties
@@ -0,0 +1 @@
+#Mon Feb 08 08:20:58 UTC 2016
@@ -3 +3,0 @@
-distributionUrl=https\://services.gradle.org/distributions/gradle-2.10-bin.zip
@@ -5,0 +6 @@
+distributionUrl=https\://services.gradle.org/distributions/gradle-2.11-bin.zip
diff --git a/gradlew.bat b/gradlew.bat
index aec9973..72d362d 100644
--- a/gradlew.bat
+++ b/gradlew.bat
@@ -49 +49 @@
-@rem Get command-line arguments, handling Windowz variants
+@rem Get command-line arguments, handling Windows variants
Diff Between 7ea0d0d7f9db1cf2bd643756a1da3ab23465f891 70e906478d516732960f5861341e6e17b09044badiff --git a/.travis.yml b/.travis.yml
index 56d6195..0a89cb3 100644
--- a/.travis.yml
+++ b/.travis.yml
@@ -12,3 +11,0 @@
-after_success:
-- ./gradlew jacocoTestReport
-
Diff Between 70e906478d516732960f5861341e6e17b09044ba 974b462c98f850febdf0b48c26f5eac0019aedf8Diff Between 974b462c98f850febdf0b48c26f5eac0019aedf8 b2178d74bdc7ca220411631218c9b16b1acd0050diff --git a/src/main/java/org/dstadler/jgit/OpenRepository.java b/src/main/java/org/dstadler/jgit/OpenRepository.java
index e9b8d00..5bc6286 100644
--- a/src/main/java/org/dstadler/jgit/OpenRepository.java
+++ b/src/main/java/org/dstadler/jgit/OpenRepository.java
@@ -19,3 +18,0 @@
-import java.io.File;
-import java.io.IOException;
-
@@ -28,0 +26,3 @@
+import java.io.File;
+import java.io.IOException;
+
@@ -51 +51 @@
-            Ref head = repository.getRef("refs/heads/master");
+            Ref head = repository.exactRef("refs/heads/master");
diff --git a/src/main/java/org/dstadler/jgit/api/GetRefFromName.java b/src/main/java/org/dstadler/jgit/api/GetRefFromName.java
index c5de3c7..6e47082 100644
--- a/src/main/java/org/dstadler/jgit/api/GetRefFromName.java
+++ b/src/main/java/org/dstadler/jgit/api/GetRefFromName.java
@@ -19,2 +18,0 @@
-import java.io.IOException;
-
@@ -24,0 +23 @@
+import java.io.IOException;
@@ -33 +32 @@
-            Ref head = repository.getRef("refs/heads/master");
+            Ref head = repository.exactRef("refs/heads/master");
diff --git a/src/main/java/org/dstadler/jgit/api/GetRevCommitFromObjectId.java b/src/main/java/org/dstadler/jgit/api/GetRevCommitFromObjectId.java
index 6b8461e..4884df0 100644
--- a/src/main/java/org/dstadler/jgit/api/GetRevCommitFromObjectId.java
+++ b/src/main/java/org/dstadler/jgit/api/GetRevCommitFromObjectId.java
@@ -19,2 +18,0 @@
-import java.io.IOException;
-
@@ -27,0 +26,2 @@
+import java.io.IOException;
+
@@ -35 +35 @@
-            Ref head = repository.getRef("refs/heads/master");
+            Ref head = repository.exactRef("refs/heads/master");
diff --git a/src/main/java/org/dstadler/jgit/api/GetRevTreeFromObjectId.java b/src/main/java/org/dstadler/jgit/api/GetRevTreeFromObjectId.java
index bf4b835..3ec77ba 100644
--- a/src/main/java/org/dstadler/jgit/api/GetRevTreeFromObjectId.java
+++ b/src/main/java/org/dstadler/jgit/api/GetRevTreeFromObjectId.java
@@ -19,2 +18,0 @@
-import java.io.IOException;
-
@@ -27,0 +26,2 @@
+import java.io.IOException;
+
@@ -36 +36 @@
-            Ref head = repository.getRef("HEAD");
+            Ref head = repository.findRef("HEAD");
diff --git a/src/main/java/org/dstadler/jgit/api/ReadBlobContents.java b/src/main/java/org/dstadler/jgit/api/ReadBlobContents.java
index 5f00cec..4eb2ba3 100644
--- a/src/main/java/org/dstadler/jgit/api/ReadBlobContents.java
+++ b/src/main/java/org/dstadler/jgit/api/ReadBlobContents.java
@@ -19,2 +18,0 @@
-import java.io.IOException;
-
@@ -28,0 +27,2 @@
+import java.io.IOException;
+
@@ -37 +37 @@
-            Ref head = repository.getRef("refs/heads/master");
+            Ref head = repository.exactRef("refs/heads/master");
diff --git a/src/main/java/org/dstadler/jgit/api/ReadTagFromName.java b/src/main/java/org/dstadler/jgit/api/ReadTagFromName.java
index dee9ae7..16d9de1 100644
--- a/src/main/java/org/dstadler/jgit/api/ReadTagFromName.java
+++ b/src/main/java/org/dstadler/jgit/api/ReadTagFromName.java
@@ -19,2 +18,0 @@
-import java.io.IOException;
-
@@ -27,0 +26,2 @@
+import java.io.IOException;
+
@@ -38 +38 @@
-                Ref simpleTag = repository.getRef("initialtag");
+                Ref simpleTag = repository.findRef("initialtag");
@@ -43 +43 @@
-                Ref annotatedTag = repository.getRef("secondtag");
+                Ref annotatedTag = repository.findRef("secondtag");
diff --git a/src/main/java/org/dstadler/jgit/api/WalkRev.java b/src/main/java/org/dstadler/jgit/api/WalkRev.java
index d3a063c..c6bc667 100644
--- a/src/main/java/org/dstadler/jgit/api/WalkRev.java
+++ b/src/main/java/org/dstadler/jgit/api/WalkRev.java
@@ -19,2 +18,0 @@
-import java.io.IOException;
-
@@ -26,0 +25,2 @@
+import java.io.IOException;
+
@@ -36 +36 @@
-            Ref head = repository.getRef("refs/heads/master");
+            Ref head = repository.exactRef("refs/heads/master");
diff --git a/src/main/java/org/dstadler/jgit/porcelain/AddAndListNoteOfCommit.java b/src/main/java/org/dstadler/jgit/porcelain/AddAndListNoteOfCommit.java
index 9ced32b..186e182 100755
--- a/src/main/java/org/dstadler/jgit/porcelain/AddAndListNoteOfCommit.java
+++ b/src/main/java/org/dstadler/jgit/porcelain/AddAndListNoteOfCommit.java
@@ -19,3 +18,0 @@
-import java.io.IOException;
-import java.util.List;
-
@@ -31,0 +29,3 @@
+import java.io.IOException;
+import java.util.List;
+
@@ -43 +43 @@
-    		Ref head = repository.getRef("refs/heads/master");
+    		Ref head = repository.exactRef("refs/heads/master");
diff --git a/src/main/java/org/dstadler/jgit/porcelain/RevertChanges.java b/src/main/java/org/dstadler/jgit/porcelain/RevertChanges.java
deleted file mode 100644
index 7433f46..0000000
--- a/src/main/java/org/dstadler/jgit/porcelain/RevertChanges.java
+++ /dev/null
@@ -1,71 +0,0 @@
-package org.dstadler.jgit.porcelain;
-
-import org.dstadler.jgit.helper.CookbookHelper;
-import org.eclipse.jgit.api.Git;
-import org.eclipse.jgit.api.errors.GitAPIException;
-import org.eclipse.jgit.lib.Repository;
-
-import java.io.File;
-import java.io.IOException;
-import java.nio.ByteBuffer;
-import java.nio.CharBuffer;
-import java.nio.charset.Charset;
-import java.nio.file.Files;
-import java.nio.file.Path;
-import java.nio.file.StandardOpenOption;
-
-/**
- * Simple snippet which shows how to set a modified tracked file back to its state
- * in the most recent commit. This does not make a new commit that reverts a previous commit;
- * this reverts a modified file back to its unmodified state (according to most recent commit)
- *
- * @author JordanMartinez
- */
-public class RevertChanges {
-
-    public static void main(String[] args) throws IOException, GitAPIException {
-        try (Repository repository = CookbookHelper.createNewRepository()) {
-            System.out.println("Listing local branches:");
-            try (Git git = new Git(repository)) {
-                // set up a file
-                String fileName = "temptFile.txt";
-                File tempFile = new File(repository.getDirectory().getParentFile(), fileName);
-                tempFile.createNewFile();
-                Path tempFilePath = tempFile.toPath();
-
-                // write some initial text to it
-                String initialText = "Initial Text";
-                System.out.println("Writing text [" + initialText + "] to file [" + tempFile.toString() + "]");
-                Files.write(tempFilePath, initialText.getBytes());
-
-                // add the file and commit it
-                git.add().addFilepattern(fileName).call();
-                git.commit().setMessage("Added untracked file " + fileName + "to repo").call();
-
-                // modify the file
-                Files.write(tempFilePath, "Some modifications".getBytes(), StandardOpenOption.APPEND);
-
-                // assert that file's text does not equal initialText
-                assert !initialText.equals(readFile(tempFilePath));
-
-                System.out.println("File now has text [" + readFile(tempFilePath) + "]");
-
-                // revert the changes
-                git.checkout().setStartPoint("HEAD").addPath(fileName).call();
-
-                // text should no longer have modifications
-                assert initialText.equals(readFile(tempFilePath));
-
-                System.out.println("File modifications were reverted. " +
-                        "File now has text [" + readFile(tempFilePath) + "]");
-            }
-        }
-
-    }
-
-    private static String readFile(Path file) throws IOException {
-        byte[] bytes = Files.readAllBytes(file);
-        CharBuffer chars = Charset.defaultCharset().decode(ByteBuffer.wrap(bytes));
-        return chars.toString();
-    }
-}
diff --git a/src/main/java/org/dstadler/jgit/porcelain/ShowBranchDiff.java b/src/main/java/org/dstadler/jgit/porcelain/ShowBranchDiff.java
index 9e2511d..e2538c1 100755
--- a/src/main/java/org/dstadler/jgit/porcelain/ShowBranchDiff.java
+++ b/src/main/java/org/dstadler/jgit/porcelain/ShowBranchDiff.java
@@ -19,3 +18,0 @@
-import java.io.IOException;
-import java.util.List;
-
@@ -36,0 +34,3 @@
+import java.io.IOException;
+import java.util.List;
+
@@ -49 +49 @@
-                if(repository.getRef("refs/heads/testbranch") == null) {
+                if(repository.exactRef("refs/heads/testbranch") == null) {
@@ -73 +73 @@
-        Ref head = repository.getRef(ref);
+        Ref head = repository.exactRef(ref);
diff --git a/src/main/java/org/dstadler/jgit/unfinished/WalkTreeNonRecursive.java b/src/main/java/org/dstadler/jgit/unfinished/WalkTreeNonRecursive.java
index 7e80bbb..83dbcb1 100644
--- a/src/main/java/org/dstadler/jgit/unfinished/WalkTreeNonRecursive.java
+++ b/src/main/java/org/dstadler/jgit/unfinished/WalkTreeNonRecursive.java
@@ -19,2 +18,0 @@
-import java.io.IOException;
-
@@ -28,0 +27,2 @@
+import java.io.IOException;
+
@@ -40 +40 @@
-            Ref head = repository.getRef("HEAD");
+            Ref head = repository.findRef("HEAD");
diff --git a/src/main/java/org/dstadler/jgit/unfinished/WalkTreeRecursive.java b/src/main/java/org/dstadler/jgit/unfinished/WalkTreeRecursive.java
index ad13150..80ff6cf 100644
--- a/src/main/java/org/dstadler/jgit/unfinished/WalkTreeRecursive.java
+++ b/src/main/java/org/dstadler/jgit/unfinished/WalkTreeRecursive.java
@@ -19,2 +18,0 @@
-import java.io.IOException;
-
@@ -28,0 +27,2 @@
+import java.io.IOException;
+
@@ -40 +40 @@
-            Ref head = repository.getRef("HEAD");
+            Ref head = repository.findRef("HEAD");
diff --git a/src/test/java/org/dstadler/jgit/JGitBugTest.java b/src/test/java/org/dstadler/jgit/JGitBugTest.java
index c1c32a1..aaf653a 100644
--- a/src/test/java/org/dstadler/jgit/JGitBugTest.java
+++ b/src/test/java/org/dstadler/jgit/JGitBugTest.java
@@ -3,4 +2,0 @@
-import static org.junit.Assert.assertNotNull;
-
-import java.io.IOException;
-
@@ -14,0 +11,4 @@
+import java.io.IOException;
+
+import static org.junit.Assert.assertNotNull;
+
@@ -26 +26 @@
-                    Ref head = repo.getRef("refs/heads/master");
+                    Ref head = repo.exactRef("refs/heads/master");
diff --git a/src/test/java/org/dstadler/jgit/porcelain/PorcelainTest.java b/src/test/java/org/dstadler/jgit/porcelain/PorcelainTest.java
index 21c6298..de1e615 100644
--- a/src/test/java/org/dstadler/jgit/porcelain/PorcelainTest.java
+++ b/src/test/java/org/dstadler/jgit/porcelain/PorcelainTest.java
@@ -34 +33,0 @@
-        RevertChanges.main(null);
Diff Between b2178d74bdc7ca220411631218c9b16b1acd0050 6d1f9f00d9ed1a16bce1b9a626d389db6ab2b6f2diff --git a/src/main/java/org/dstadler/jgit/porcelain/RevertChanges.java b/src/main/java/org/dstadler/jgit/porcelain/RevertChanges.java
index 9250881..7433f46 100644
--- a/src/main/java/org/dstadler/jgit/porcelain/RevertChanges.java
+++ b/src/main/java/org/dstadler/jgit/porcelain/RevertChanges.java
@@ -37,0 +38 @@
+                System.out.println("Writing text [" + initialText + "] to file [" + tempFile.toString() + "]");
@@ -47,2 +48,4 @@
-                // assert that file does not equal initialText
-                assert !initialText.equals(readFile(tempFilePath, Charset.defaultCharset()));
+                // assert that file's text does not equal initialText
+                assert !initialText.equals(readFile(tempFilePath));
+
+                System.out.println("File now has text [" + readFile(tempFilePath) + "]");
@@ -53 +56,2 @@
-                assert initialText.equals(readFile(tempFilePath, Charset.defaultCharset()));
+                // text should no longer have modifications
+                assert initialText.equals(readFile(tempFilePath));
@@ -55 +59,2 @@
-
+                System.out.println("File modifications were reverted. " +
+                        "File now has text [" + readFile(tempFilePath) + "]");
@@ -61 +66 @@
-    private static String readFile(Path file, Charset charset) throws IOException {
+    private static String readFile(Path file) throws IOException {
@@ -63 +68 @@
-        CharBuffer chars = charset.decode(ByteBuffer.wrap(bytes));
+        CharBuffer chars = Charset.defaultCharset().decode(ByteBuffer.wrap(bytes));
Diff Between 6d1f9f00d9ed1a16bce1b9a626d389db6ab2b6f2 e04a75bf7129c3045096f262cc98090e3a30c0cadiff --git a/src/main/java/org/dstadler/jgit/porcelain/RevertChanges.java b/src/main/java/org/dstadler/jgit/porcelain/RevertChanges.java
new file mode 100644
index 0000000..9250881
--- /dev/null
+++ b/src/main/java/org/dstadler/jgit/porcelain/RevertChanges.java
@@ -0,0 +1,66 @@
+package org.dstadler.jgit.porcelain;
+
+import org.dstadler.jgit.helper.CookbookHelper;
+import org.eclipse.jgit.api.Git;
+import org.eclipse.jgit.api.errors.GitAPIException;
+import org.eclipse.jgit.lib.Repository;
+
+import java.io.File;
+import java.io.IOException;
+import java.nio.ByteBuffer;
+import java.nio.CharBuffer;
+import java.nio.charset.Charset;
+import java.nio.file.Files;
+import java.nio.file.Path;
+import java.nio.file.StandardOpenOption;
+
+/**
+ * Simple snippet which shows how to set a modified tracked file back to its state
+ * in the most recent commit. This does not make a new commit that reverts a previous commit;
+ * this reverts a modified file back to its unmodified state (according to most recent commit)
+ *
+ * @author JordanMartinez
+ */
+public class RevertChanges {
+
+    public static void main(String[] args) throws IOException, GitAPIException {
+        try (Repository repository = CookbookHelper.createNewRepository()) {
+            System.out.println("Listing local branches:");
+            try (Git git = new Git(repository)) {
+                // set up a file
+                String fileName = "temptFile.txt";
+                File tempFile = new File(repository.getDirectory().getParentFile(), fileName);
+                tempFile.createNewFile();
+                Path tempFilePath = tempFile.toPath();
+
+                // write some initial text to it
+                String initialText = "Initial Text";
+                Files.write(tempFilePath, initialText.getBytes());
+
+                // add the file and commit it
+                git.add().addFilepattern(fileName).call();
+                git.commit().setMessage("Added untracked file " + fileName + "to repo").call();
+
+                // modify the file
+                Files.write(tempFilePath, "Some modifications".getBytes(), StandardOpenOption.APPEND);
+
+                // assert that file does not equal initialText
+                assert !initialText.equals(readFile(tempFilePath, Charset.defaultCharset()));
+
+                // revert the changes
+                git.checkout().setStartPoint("HEAD").addPath(fileName).call();
+
+                assert initialText.equals(readFile(tempFilePath, Charset.defaultCharset()));
+
+
+            }
+        }
+
+    }
+
+    private static String readFile(Path file, Charset charset) throws IOException {
+        byte[] bytes = Files.readAllBytes(file);
+        CharBuffer chars = charset.decode(ByteBuffer.wrap(bytes));
+        return chars.toString();
+    }
+}
diff --git a/src/test/java/org/dstadler/jgit/porcelain/PorcelainTest.java b/src/test/java/org/dstadler/jgit/porcelain/PorcelainTest.java
index de1e615..21c6298 100644
--- a/src/test/java/org/dstadler/jgit/porcelain/PorcelainTest.java
+++ b/src/test/java/org/dstadler/jgit/porcelain/PorcelainTest.java
@@ -33,0 +34 @@
+        RevertChanges.main(null);
Diff Between e04a75bf7129c3045096f262cc98090e3a30c0ca 3408efc41a51555d488d30d8a91ea560c5e13311diff --git a/README.md b/README.md
index 08ca520..ef97604 100644
--- a/README.md
+++ b/README.md
@@ -125,0 +126,2 @@
+* git-to-solr - Index git history into a Solr repository - https://github.com/arafalov/git-to-solr
+* Elegit - GUI client for people who want to learn Git - https://github.com/dmusican/Elegit
Diff Between 3408efc41a51555d488d30d8a91ea560c5e13311 61aaebee5215a17bf75166be3479708455ac2fc8diff --git a/README.md b/README.md
index d590e6f..08ca520 100644
--- a/README.md
+++ b/README.md
@@ -124,0 +125 @@
+* JGitFX - Easy Git integration for JavaFX applications - https://github.com/JordanMartinez/JGitFX
Diff Between 61aaebee5215a17bf75166be3479708455ac2fc8 311478e1fad71f727527cf513ddc68f04809bbbediff --git a/src/main/java/org/dstadler/jgit/unfinished/ListChildrenOfCommit.java b/src/main/java/org/dstadler/jgit/unfinished/ListChildrenOfCommit.java
index 5e4f06e..e2b4aa9 100755
--- a/src/main/java/org/dstadler/jgit/unfinished/ListChildrenOfCommit.java
+++ b/src/main/java/org/dstadler/jgit/unfinished/ListChildrenOfCommit.java
@@ -29,0 +30,2 @@
+ * Note: This snippet is not done and likely does not show anything useful yet
+ *
diff --git a/src/main/java/org/dstadler/jgit/unfinished/ListRefLog.java b/src/main/java/org/dstadler/jgit/unfinished/ListRefLog.java
index 5c9a1cd..e0410e1 100755
--- a/src/main/java/org/dstadler/jgit/unfinished/ListRefLog.java
+++ b/src/main/java/org/dstadler/jgit/unfinished/ListRefLog.java
@@ -35 +35 @@
- * Simple snippet which shows how to list all Tags
+ * Note: This snippet is not done and likely does not show anything useful yet
diff --git a/src/main/java/org/dstadler/jgit/unfinished/PullFromRemoteRepository.java b/src/main/java/org/dstadler/jgit/unfinished/PullFromRemoteRepository.java
index 59ff3b9..bdc7a10 100644
--- a/src/main/java/org/dstadler/jgit/unfinished/PullFromRemoteRepository.java
+++ b/src/main/java/org/dstadler/jgit/unfinished/PullFromRemoteRepository.java
@@ -30 +30 @@
- * Simple snippet which shows how to clone a repository from a remote source
+ * Note: This snippet is not done and likely does not show anything useful yet
diff --git a/src/main/java/org/dstadler/jgit/unfinished/PullRemoteRepository.java b/src/main/java/org/dstadler/jgit/unfinished/PullRemoteRepository.java
index 14756c1..fcdd59f 100755
--- a/src/main/java/org/dstadler/jgit/unfinished/PullRemoteRepository.java
+++ b/src/main/java/org/dstadler/jgit/unfinished/PullRemoteRepository.java
@@ -33 +33,3 @@
- * Simple snippet which shows how to poull from a remote repository from a remote source
+ * Note: This snippet is not done and likely does not show anything useful yet
+ *
+ * Simple snippet which shows how to pull from a remote repository from a remote source
diff --git a/src/main/java/org/dstadler/jgit/unfinished/PushToRemoteRepository.java b/src/main/java/org/dstadler/jgit/unfinished/PushToRemoteRepository.java
index 1b2bd09..724b750 100644
--- a/src/main/java/org/dstadler/jgit/unfinished/PushToRemoteRepository.java
+++ b/src/main/java/org/dstadler/jgit/unfinished/PushToRemoteRepository.java
@@ -32 +32 @@
- * Simple snippet which shows how to clone a repository from a remote source
+ * Note: This snippet is not done and likely does not show anything useful yet
diff --git a/src/main/java/org/dstadler/jgit/unfinished/TestSubmodules.java b/src/main/java/org/dstadler/jgit/unfinished/TestSubmodules.java
index 82ed393..dcc51ec 100755
--- a/src/main/java/org/dstadler/jgit/unfinished/TestSubmodules.java
+++ b/src/main/java/org/dstadler/jgit/unfinished/TestSubmodules.java
@@ -30 +30 @@
- * Simple snippet which shows how to initialize a new repository
+ * Note: This snippet is not done and likely does not show anything useful yet
diff --git a/src/main/java/org/dstadler/jgit/unfinished/TrackMaster.java b/src/main/java/org/dstadler/jgit/unfinished/TrackMaster.java
index 0544139..f243ec4 100644
--- a/src/main/java/org/dstadler/jgit/unfinished/TrackMaster.java
+++ b/src/main/java/org/dstadler/jgit/unfinished/TrackMaster.java
@@ -32 +32 @@
- * Simple snippet which shows how to clone a repository from a remote source
+ * Note: This snippet is not done and likely does not show anything useful yet
diff --git a/src/main/java/org/dstadler/jgit/unfinished/UpdateIndex.java b/src/main/java/org/dstadler/jgit/unfinished/UpdateIndex.java
index 719dc9a..98608d3 100644
--- a/src/main/java/org/dstadler/jgit/unfinished/UpdateIndex.java
+++ b/src/main/java/org/dstadler/jgit/unfinished/UpdateIndex.java
@@ -36,0 +37,2 @@
+ * Note: This snippet is not done and likely does not show anything useful yet
+ *
diff --git a/src/main/java/org/dstadler/jgit/unfinished/WalkTreeNonRecursive.java b/src/main/java/org/dstadler/jgit/unfinished/WalkTreeNonRecursive.java
index 2210d8b..7e80bbb 100644
--- a/src/main/java/org/dstadler/jgit/unfinished/WalkTreeNonRecursive.java
+++ b/src/main/java/org/dstadler/jgit/unfinished/WalkTreeNonRecursive.java
@@ -29,0 +30,2 @@
+ * Note: This snippet is not done and likely does not show anything useful yet
+ *
diff --git a/src/main/java/org/dstadler/jgit/unfinished/WalkTreeRecursive.java b/src/main/java/org/dstadler/jgit/unfinished/WalkTreeRecursive.java
index 85f7679..ad13150 100644
--- a/src/main/java/org/dstadler/jgit/unfinished/WalkTreeRecursive.java
+++ b/src/main/java/org/dstadler/jgit/unfinished/WalkTreeRecursive.java
@@ -29,0 +30,2 @@
+ * Note: This snippet is not done and likely does not show anything useful yet
+ *
Diff Between 311478e1fad71f727527cf513ddc68f04809bbbe 7ef0ddbb40101728c94aa3d05911caa8af150865diff --git a/src/main/java/org/dstadler/jgit/porcelain/InitRepository.java b/src/main/java/org/dstadler/jgit/porcelain/InitRepository.java
index 8c85674..ae892dc 100755
--- a/src/main/java/org/dstadler/jgit/porcelain/InitRepository.java
+++ b/src/main/java/org/dstadler/jgit/porcelain/InitRepository.java
@@ -39 +39,3 @@
-        dir.delete();
+        if(!dir.delete()) {
+            throw new IOException("Could not delete file " + dir);
+        }
@@ -41 +43,2 @@
-        Git.init()
+        // The Git-object has a static method to initialize a new repository
+        try (Git git = Git.init()
@@ -43 +46,3 @@
-                .call();
+                .call()) {
+            System.out.println("Created a new repository at " + git.getRepository().getDirectory());
+        }
@@ -44,0 +50,6 @@
+        dir = File.createTempFile("repoinit", ".test");
+        if(!dir.delete()) {
+            throw new IOException("Could not delete file " + dir);
+        }
+
+        // you can also create a Repository-object directly from the
Diff Between 7ef0ddbb40101728c94aa3d05911caa8af150865 6dc63bbc77625795ef9aa4956549c9a8c6f96c5adiff --git a/README.md b/README.md
index 8db5919..d590e6f 100644
--- a/README.md
+++ b/README.md
@@ -11 +11 @@
-Please make sure to also use the existing [JavaDoc](http://download.eclipse.org/jgit/site/4.1.1.201511131810-r/apidocs/) and the [User Guide](http://wiki.eclipse.org/JGit/User_Guide) as well, as they are well done and provide detailed information and a general overview of JGit respectively.
+Please make sure to also use the existing [JavaDoc](http://download.eclipse.org/jgit/site/4.2.0.201601211800-r/apidocs/) and the [User Guide](http://wiki.eclipse.org/JGit/User_Guide) as well, as they are well done and provide detailed information and a general overview of JGit respectively.
@@ -105,2 +105,2 @@
-* Doing stuff without local storage: Using org.eclipse.jgit.storage.dfs.InMemoryRepository to clone a Git repo in-memory and work from there, see http://download.eclipse.org/jgit/site/4.1.1.201511131810-r/apidocs/org/eclipse/jgit/internal/storage/dfs/InMemoryRepository.html
-* CherryPick: http://download.eclipse.org/jgit/site/4.1.1.201511131810-r/apidocs/org/eclipse/jgit/api/CherryPickCommand.html http://stackoverflow.com/questions/18300898/how-to-cherry-pick-a-commit-that-has-more-than-one-parent
+* Doing stuff without local storage: Using org.eclipse.jgit.storage.dfs.InMemoryRepository to clone a Git repo in-memory and work from there, see http://download.eclipse.org/jgit/site/4.2.0.201601211800-r/apidocs/org/eclipse/jgit/internal/storage/dfs/InMemoryRepository.html
+* CherryPick: http://download.eclipse.org/jgit/site/4.2.0.201601211800-r/apidocs/org/eclipse/jgit/api/CherryPickCommand.html http://stackoverflow.com/questions/18300898/how-to-cherry-pick-a-commit-that-has-more-than-one-parent
@@ -112 +112 @@
-* [JGit JavaDoc](http://download.eclipse.org/jgit/site/4.1.1.201511131810-r/apidocs/)
+* [JGit JavaDoc](http://download.eclipse.org/jgit/site/4.2.0.201601211800-r/apidocs/)
@@ -132 +132 @@
-   Copyright 2013, 2014, 2015 Dominik Stadler
+   Copyright 2013-2016 Dominik Stadler
diff --git a/build.gradle b/build.gradle
index 53251f1..efd1cb5 100644
--- a/build.gradle
+++ b/build.gradle
@@ -43 +43 @@
-    gradleVersion = '2.11'
+    gradleVersion = '2.10'
diff --git a/gradle/wrapper/gradle-wrapper.jar b/gradle/wrapper/gradle-wrapper.jar
index 5ccda13..13372ae 100644
--- a/gradle/wrapper/gradle-wrapper.jar
+++ b/gradle/wrapper/gradle-wrapper.jar
Binary files differ
diff --git a/gradle/wrapper/gradle-wrapper.properties b/gradle/wrapper/gradle-wrapper.properties
index ab36276..f4aa24d 100644
--- a/gradle/wrapper/gradle-wrapper.properties
+++ b/gradle/wrapper/gradle-wrapper.properties
@@ -1 +0,0 @@
-#Mon Feb 08 08:20:58 UTC 2016
@@ -3,0 +3 @@
+distributionUrl=https\://services.gradle.org/distributions/gradle-2.10-bin.zip
@@ -6 +5,0 @@
-distributionUrl=https\://services.gradle.org/distributions/gradle-2.11-bin.zip
diff --git a/gradlew.bat b/gradlew.bat
index 72d362d..aec9973 100644
--- a/gradlew.bat
+++ b/gradlew.bat
@@ -49 +49 @@
-@rem Get command-line arguments, handling Windows variants
+@rem Get command-line arguments, handling Windowz variants
Diff Between 6dc63bbc77625795ef9aa4956549c9a8c6f96c5a 96de94b78549e991872007700ad099a4a344744fdiff --git a/build.gradle b/build.gradle
index efd1cb5..53251f1 100644
--- a/build.gradle
+++ b/build.gradle
@@ -43 +43 @@
-    gradleVersion = '2.10'
+    gradleVersion = '2.11'
diff --git a/gradle/wrapper/gradle-wrapper.jar b/gradle/wrapper/gradle-wrapper.jar
index 13372ae..5ccda13 100644
--- a/gradle/wrapper/gradle-wrapper.jar
+++ b/gradle/wrapper/gradle-wrapper.jar
Binary files differ
diff --git a/gradle/wrapper/gradle-wrapper.properties b/gradle/wrapper/gradle-wrapper.properties
index f4aa24d..ab36276 100644
--- a/gradle/wrapper/gradle-wrapper.properties
+++ b/gradle/wrapper/gradle-wrapper.properties
@@ -0,0 +1 @@
+#Mon Feb 08 08:20:58 UTC 2016
@@ -3 +3,0 @@
-distributionUrl=https\://services.gradle.org/distributions/gradle-2.10-bin.zip
@@ -5,0 +6 @@
+distributionUrl=https\://services.gradle.org/distributions/gradle-2.11-bin.zip
diff --git a/gradlew.bat b/gradlew.bat
index aec9973..72d362d 100644
--- a/gradlew.bat
+++ b/gradlew.bat
@@ -49 +49 @@
-@rem Get command-line arguments, handling Windowz variants
+@rem Get command-line arguments, handling Windows variants
Diff Between 96de94b78549e991872007700ad099a4a344744f 0db10c13fc8f869664739e4d51ef823b8e8601c5diff --git a/README.md b/README.md
index a64802a..8db5919 100644
--- a/README.md
+++ b/README.md
@@ -120,0 +121 @@
+* Gerrit - A web-based team code collaboration tool - https://www.gerritcodereview.com
@@ -122,0 +124 @@
+* jgitstats - displays repository stats - https://github.com/selesse/jgitstats
Diff Between 0db10c13fc8f869664739e4d51ef823b8e8601c5 fcc5652618b8c69b92a12c3d1278d4cd30f21fd6diff --git a/README.md b/README.md
index 6cffe51..a64802a 100644
--- a/README.md
+++ b/README.md
@@ -105,2 +105,2 @@
-* Doing stuff without local storage: Using org.eclipse.jgit.storage.dfs.InMemoryRepository to clone a Git repo in-memory and work from there
-* CherryPick: http://download.eclipse.org/jgit/site/4.1.1.201511131810/apidocs/org/eclipse/jgit/api/CherryPickCommand.html http://stackoverflow.com/questions/18300898/how-to-cherry-pick-a-commit-that-has-more-than-one-parent
+* Doing stuff without local storage: Using org.eclipse.jgit.storage.dfs.InMemoryRepository to clone a Git repo in-memory and work from there, see http://download.eclipse.org/jgit/site/4.1.1.201511131810-r/apidocs/org/eclipse/jgit/internal/storage/dfs/InMemoryRepository.html
+* CherryPick: http://download.eclipse.org/jgit/site/4.1.1.201511131810-r/apidocs/org/eclipse/jgit/api/CherryPickCommand.html http://stackoverflow.com/questions/18300898/how-to-cherry-pick-a-commit-that-has-more-than-one-parent
@@ -117,0 +118,6 @@
+#### Other applications using JGit
+
+* EGit - Git plugin for Eclipse - https://www.eclipse.org/egit/
+* Gitiles - A simple Git repository browser - http://code.google.com/p/gitiles/ and https://android.googlesource.com
+* JGitFS - A userfs implementation which allows to browse branches, tags, committs as a directory structure - https://github.com/centic9/JGitFS
+
Diff Between fcc5652618b8c69b92a12c3d1278d4cd30f21fd6 2414e7d4be79495a341300746ab7d34bf8f94219diff --git a/build.gradle b/build.gradle
index b6d9fe0..efd1cb5 100644
--- a/build.gradle
+++ b/build.gradle
@@ -15,2 +15,2 @@
-	compile 'org.eclipse.jgit:org.eclipse.jgit:4.1.1.201511131810-r'
-	compile 'org.eclipse.jgit:org.eclipse.jgit.archive:4.1.1.201511131810-r'
+	compile 'org.eclipse.jgit:org.eclipse.jgit:4.2.0.201601211800-r'
+	compile 'org.eclipse.jgit:org.eclipse.jgit.archive:4.2.0.201601211800-r'
diff --git a/pom.xml b/pom.xml
index 8851e68..ee34668 100644
--- a/pom.xml
+++ b/pom.xml
@@ -23 +23 @@
-      <version>4.1.1.201511131810-r</version>
+      <version>4.2.0.201601211800-r</version>
@@ -28 +28 @@
-      <version>4.1.1.201511131810-r</version>
+      <version>4.2.0.201601211800-r</version>
Diff Between 2414e7d4be79495a341300746ab7d34bf8f94219 276ad0fecb4f1c616ef459ed8b7feb6d503724ebdiff --git a/README.md b/README.md
index e21599d..6cffe51 100644
--- a/README.md
+++ b/README.md
@@ -33 +33 @@
-    Import the project into an Eclipse workspace and execute the snippets there.
+    Import the project into your favourite IDE and execute the snippets there.
@@ -100,2 +100 @@
-* Add/Remove/Read Notes
-* SubModules: http://stackoverflow.com/questions/13426798/jgit-read-gitmodules
+* SubModules: http://stackoverflow.com/questions/13426798/jgit-read-gitmodules http://www.codeaffine.com/2014/04/16/how-to-manage-git-submodules-with-jgit/
@@ -107,2 +106 @@
-* CherryPick
-* Submodules - http://www.codeaffine.com/2014/04/16/how-to-manage-git-submodules-with-jgit/
+* CherryPick: http://download.eclipse.org/jgit/site/4.1.1.201511131810/apidocs/org/eclipse/jgit/api/CherryPickCommand.html http://stackoverflow.com/questions/18300898/how-to-cherry-pick-a-commit-that-has-more-than-one-parent
Diff Between 276ad0fecb4f1c616ef459ed8b7feb6d503724eb f3457c19bfbe70e43451ac412e7a5561c83c8c25diff --git a/src/main/java/org/dstadler/jgit/OpenRepository.java b/src/main/java/org/dstadler/jgit/OpenRepository.java
index 7d99d4b..e9b8d00 100644
--- a/src/main/java/org/dstadler/jgit/OpenRepository.java
+++ b/src/main/java/org/dstadler/jgit/OpenRepository.java
@@ -33 +33 @@
- * 
+ *
@@ -41 +41 @@
-        
+
@@ -49 +49 @@
-    
+
@@ -59 +59 @@
-    
+
@@ -63 +63 @@
-    
+
@@ -69,2 +69,2 @@
-        
-        
+
+
@@ -76 +76 @@
-            
+
@@ -78 +78 @@
-            
+
@@ -80 +80 @@
-            
+
diff --git a/src/main/java/org/dstadler/jgit/api/CheckMergeStatusOfCommit.java b/src/main/java/org/dstadler/jgit/api/CheckMergeStatusOfCommit.java
index 5550c00..d76dbf0 100644
--- a/src/main/java/org/dstadler/jgit/api/CheckMergeStatusOfCommit.java
+++ b/src/main/java/org/dstadler/jgit/api/CheckMergeStatusOfCommit.java
@@ -29,2 +29,2 @@
- * given branch. 
- * 
+ * given branch.
+ *
@@ -39 +39 @@
-                
+
@@ -44 +44 @@
-                
+
@@ -50,2 +50,2 @@
-        
-                
+
+
@@ -56 +56 @@
-                
+
@@ -62 +62 @@
-        
+
@@ -67 +67 @@
-                
+
@@ -73 +73 @@
-        
+
diff --git a/src/main/java/org/dstadler/jgit/api/GetCommitMessage.java b/src/main/java/org/dstadler/jgit/api/GetCommitMessage.java
index bb06ca7..380d6a4 100644
--- a/src/main/java/org/dstadler/jgit/api/GetCommitMessage.java
+++ b/src/main/java/org/dstadler/jgit/api/GetCommitMessage.java
@@ -36 +36 @@
-    
+
@@ -40 +40 @@
-                
+
@@ -42 +42 @@
-                
+
diff --git a/src/main/java/org/dstadler/jgit/api/GetFileAttributes.java b/src/main/java/org/dstadler/jgit/api/GetFileAttributes.java
index 5c0e1ee..86338c1 100755
--- a/src/main/java/org/dstadler/jgit/api/GetFileAttributes.java
+++ b/src/main/java/org/dstadler/jgit/api/GetFileAttributes.java
@@ -40 +40 @@
- * 
+ *
@@ -49 +49 @@
-    
+
@@ -51 +51 @@
-    
+
@@ -53 +53 @@
-    
+
@@ -65 +65 @@
-    
+
@@ -67 +67 @@
-    
+
@@ -85 +85 @@
-    
+
@@ -105 +105 @@
-    
+
diff --git a/src/main/java/org/dstadler/jgit/api/GetRevCommitFromObjectId.java b/src/main/java/org/dstadler/jgit/api/GetRevCommitFromObjectId.java
index 240f00a..6b8461e 100644
--- a/src/main/java/org/dstadler/jgit/api/GetRevCommitFromObjectId.java
+++ b/src/main/java/org/dstadler/jgit/api/GetRevCommitFromObjectId.java
@@ -37 +37 @@
-    
+
@@ -42 +42 @@
-        
+
@@ -48 +48 @@
-        
+
diff --git a/src/main/java/org/dstadler/jgit/api/PrintRemotes.java b/src/main/java/org/dstadler/jgit/api/PrintRemotes.java
index 831ee4b..45f3fe6 100755
--- a/src/main/java/org/dstadler/jgit/api/PrintRemotes.java
+++ b/src/main/java/org/dstadler/jgit/api/PrintRemotes.java
@@ -35 +35 @@
-    
+
diff --git a/src/main/java/org/dstadler/jgit/api/ReadBlobContents.java b/src/main/java/org/dstadler/jgit/api/ReadBlobContents.java
index e30863b..5f00cec 100644
--- a/src/main/java/org/dstadler/jgit/api/ReadBlobContents.java
+++ b/src/main/java/org/dstadler/jgit/api/ReadBlobContents.java
@@ -39 +39 @@
-    
+
@@ -43 +43 @@
-    
+
@@ -45 +45 @@
-    
+
@@ -53 +53 @@
-        
+
diff --git a/src/main/java/org/dstadler/jgit/api/ReadFileFromCommit.java b/src/main/java/org/dstadler/jgit/api/ReadFileFromCommit.java
index e38e0c1..9153bcf 100644
--- a/src/main/java/org/dstadler/jgit/api/ReadFileFromCommit.java
+++ b/src/main/java/org/dstadler/jgit/api/ReadFileFromCommit.java
@@ -35 +35 @@
- * 
+ *
@@ -44 +44 @@
-    
+
@@ -51 +51 @@
-        
+
@@ -60 +60 @@
-            
+
@@ -63 +63 @@
-            
+
@@ -67 +67 @@
-        
+
diff --git a/src/main/java/org/dstadler/jgit/api/WalkRev.java b/src/main/java/org/dstadler/jgit/api/WalkRev.java
index d43cde5..d3a063c 100644
--- a/src/main/java/org/dstadler/jgit/api/WalkRev.java
+++ b/src/main/java/org/dstadler/jgit/api/WalkRev.java
@@ -37 +37 @@
-    
+
@@ -42 +42 @@
-        
+
@@ -51 +51 @@
-        
+
diff --git a/src/main/java/org/dstadler/jgit/porcelain/AddAndListNoteOfCommit.java b/src/main/java/org/dstadler/jgit/porcelain/AddAndListNoteOfCommit.java
index 043510a..9ced32b 100755
--- a/src/main/java/org/dstadler/jgit/porcelain/AddAndListNoteOfCommit.java
+++ b/src/main/java/org/dstadler/jgit/porcelain/AddAndListNoteOfCommit.java
@@ -45 +45 @@
-    
+
@@ -49 +49 @@
-        
+
@@ -53 +53 @@
-            
+
@@ -63 +63 @@
-            
+
@@ -69 +69 @@
-        
+
diff --git a/src/main/java/org/dstadler/jgit/porcelain/AddFile.java b/src/main/java/org/dstadler/jgit/porcelain/AddFile.java
index 17960ef..bd87537 100644
--- a/src/main/java/org/dstadler/jgit/porcelain/AddFile.java
+++ b/src/main/java/org/dstadler/jgit/porcelain/AddFile.java
@@ -31 +31 @@
- * 
+ *
@@ -43 +43 @@
-        
+
@@ -48 +48 @@
-        
+
diff --git a/src/main/java/org/dstadler/jgit/porcelain/CleanUntrackedFiles.java b/src/main/java/org/dstadler/jgit/porcelain/CleanUntrackedFiles.java
index 1cca979..00ba9fc 100755
--- a/src/main/java/org/dstadler/jgit/porcelain/CleanUntrackedFiles.java
+++ b/src/main/java/org/dstadler/jgit/porcelain/CleanUntrackedFiles.java
@@ -40 +40 @@
-    
+
@@ -45 +45 @@
-    
+
@@ -47 +47 @@
-    
+
diff --git a/src/main/java/org/dstadler/jgit/porcelain/CollectGarbage.java b/src/main/java/org/dstadler/jgit/porcelain/CollectGarbage.java
index b5d5a31..82226b0 100644
--- a/src/main/java/org/dstadler/jgit/porcelain/CollectGarbage.java
+++ b/src/main/java/org/dstadler/jgit/porcelain/CollectGarbage.java
@@ -31 +31 @@
- * Simple snippet which shows how to execute the "gc" command to remove unused 
+ * Simple snippet which shows how to execute the "gc" command to remove unused
@@ -33 +33 @@
- * 
+ *
diff --git a/src/main/java/org/dstadler/jgit/porcelain/CommitAll.java b/src/main/java/org/dstadler/jgit/porcelain/CommitAll.java
index f831a92..839a2c5 100755
--- a/src/main/java/org/dstadler/jgit/porcelain/CommitAll.java
+++ b/src/main/java/org/dstadler/jgit/porcelain/CommitAll.java
@@ -31 +31 @@
-        
+
@@ -47 +47 @@
-        
+
diff --git a/src/main/java/org/dstadler/jgit/porcelain/CommitFile.java b/src/main/java/org/dstadler/jgit/porcelain/CommitFile.java
index 4904ca5..a9d8ae5 100644
--- a/src/main/java/org/dstadler/jgit/porcelain/CommitFile.java
+++ b/src/main/java/org/dstadler/jgit/porcelain/CommitFile.java
@@ -31 +31 @@
- * 
+ *
@@ -43 +43 @@
-        
+
@@ -48 +48 @@
-        
+
@@ -53 +53 @@
-        
+
diff --git a/src/main/java/org/dstadler/jgit/porcelain/CreateAndDeleteBranch.java b/src/main/java/org/dstadler/jgit/porcelain/CreateAndDeleteBranch.java
index ee877bb..3d48a94 100755
--- a/src/main/java/org/dstadler/jgit/porcelain/CreateAndDeleteBranch.java
+++ b/src/main/java/org/dstadler/jgit/porcelain/CreateAndDeleteBranch.java
@@ -32 +32 @@
- * 
+ *
@@ -45 +45 @@
-        
+
@@ -56 +56 @@
-                        
+
@@ -60 +60 @@
-                
+
@@ -65 +65 @@
-        
+
@@ -70 +70 @@
-        
+
@@ -75 +75 @@
-        
+
diff --git a/src/main/java/org/dstadler/jgit/porcelain/CreateAndDeleteTag.java b/src/main/java/org/dstadler/jgit/porcelain/CreateAndDeleteTag.java
index 5465385..4b3c010 100755
--- a/src/main/java/org/dstadler/jgit/porcelain/CreateAndDeleteTag.java
+++ b/src/main/java/org/dstadler/jgit/porcelain/CreateAndDeleteTag.java
@@ -34 +34 @@
- * 
+ *
@@ -45 +45 @@
-        
+
@@ -49 +49 @@
-        
+
@@ -52 +52 @@
-        
+
@@ -59 +59 @@
-            
+
@@ -62 +62 @@
-            
+
@@ -66 +66 @@
-            
+
@@ -69 +69 @@
-            
+
diff --git a/src/main/java/org/dstadler/jgit/porcelain/CreateArchive.java b/src/main/java/org/dstadler/jgit/porcelain/CreateArchive.java
index 4b29e96..2aa33cd 100644
--- a/src/main/java/org/dstadler/jgit/porcelain/CreateArchive.java
+++ b/src/main/java/org/dstadler/jgit/porcelain/CreateArchive.java
@@ -5 +5 @@
- * 
+ *
@@ -9 +9 @@
- * 
+ *
@@ -11 +11 @@
- * 
+ *
@@ -35 +35 @@
- * 
+ *
diff --git a/src/main/java/org/dstadler/jgit/porcelain/CreateCustomFormatArchive.java b/src/main/java/org/dstadler/jgit/porcelain/CreateCustomFormatArchive.java
index 3344d2f..b1ca3cf 100644
--- a/src/main/java/org/dstadler/jgit/porcelain/CreateCustomFormatArchive.java
+++ b/src/main/java/org/dstadler/jgit/porcelain/CreateCustomFormatArchive.java
@@ -99 +99 @@
-    
+
diff --git a/src/main/java/org/dstadler/jgit/porcelain/CreateListApplyAndDropStash.java b/src/main/java/org/dstadler/jgit/porcelain/CreateListApplyAndDropStash.java
index 24eff81..18744c0 100644
--- a/src/main/java/org/dstadler/jgit/porcelain/CreateListApplyAndDropStash.java
+++ b/src/main/java/org/dstadler/jgit/porcelain/CreateListApplyAndDropStash.java
@@ -49 +49 @@
-        
+
@@ -60 +60 @@
-        
+
@@ -63 +63 @@
-        
+
@@ -67 +67 @@
-        
+
@@ -69 +69 @@
-        
+
@@ -72 +72 @@
-        
+
@@ -76 +76 @@
-        
+
@@ -78 +78 @@
-        
+
@@ -84 +84 @@
-        
+
@@ -88 +88 @@
-        
+
diff --git a/src/main/java/org/dstadler/jgit/porcelain/InitRepository.java b/src/main/java/org/dstadler/jgit/porcelain/InitRepository.java
index 4594574..8c85674 100755
--- a/src/main/java/org/dstadler/jgit/porcelain/InitRepository.java
+++ b/src/main/java/org/dstadler/jgit/porcelain/InitRepository.java
@@ -31 +31 @@
- * 
+ *
diff --git a/src/main/java/org/dstadler/jgit/porcelain/ListBranches.java b/src/main/java/org/dstadler/jgit/porcelain/ListBranches.java
index 4dfc1de..39bd6ea 100644
--- a/src/main/java/org/dstadler/jgit/porcelain/ListBranches.java
+++ b/src/main/java/org/dstadler/jgit/porcelain/ListBranches.java
@@ -33 +33 @@
- * 
+ *
@@ -46 +46 @@
-        
+
@@ -53 +53 @@
-        }        
+        }
diff --git a/src/main/java/org/dstadler/jgit/porcelain/ListNotes.java b/src/main/java/org/dstadler/jgit/porcelain/ListNotes.java
index dc7cda7..9bf34b0 100644
--- a/src/main/java/org/dstadler/jgit/porcelain/ListNotes.java
+++ b/src/main/java/org/dstadler/jgit/porcelain/ListNotes.java
@@ -33 +33 @@
- * 
+ *
@@ -45 +45 @@
-        
+
diff --git a/src/main/java/org/dstadler/jgit/porcelain/ListRemoteRepository.java b/src/main/java/org/dstadler/jgit/porcelain/ListRemoteRepository.java
index 90dfae2..661f32e 100644
--- a/src/main/java/org/dstadler/jgit/porcelain/ListRemoteRepository.java
+++ b/src/main/java/org/dstadler/jgit/porcelain/ListRemoteRepository.java
@@ -32 +32 @@
- * 
+ *
diff --git a/src/main/java/org/dstadler/jgit/porcelain/ListRemotes.java b/src/main/java/org/dstadler/jgit/porcelain/ListRemotes.java
index dd0218a..2a008fc 100755
--- a/src/main/java/org/dstadler/jgit/porcelain/ListRemotes.java
+++ b/src/main/java/org/dstadler/jgit/porcelain/ListRemotes.java
@@ -30 +30 @@
- * 
+ *
@@ -43 +43 @@
-        
+
@@ -49 +49 @@
-        
+
diff --git a/src/main/java/org/dstadler/jgit/porcelain/ListTags.java b/src/main/java/org/dstadler/jgit/porcelain/ListTags.java
index 0d673fc..862dbe1 100644
--- a/src/main/java/org/dstadler/jgit/porcelain/ListTags.java
+++ b/src/main/java/org/dstadler/jgit/porcelain/ListTags.java
@@ -45 +45 @@
-        
+
@@ -48 +48 @@
-        
+
@@ -55 +55 @@
-        
+
diff --git a/src/main/java/org/dstadler/jgit/porcelain/ShowBlame.java b/src/main/java/org/dstadler/jgit/porcelain/ShowBlame.java
index 0c4bb0b..473cff0 100644
--- a/src/main/java/org/dstadler/jgit/porcelain/ShowBlame.java
+++ b/src/main/java/org/dstadler/jgit/porcelain/ShowBlame.java
@@ -5 +5 @@
-    
+
@@ -9 +9 @@
-    
+
@@ -11 +11 @@
-    
+
@@ -42 +42 @@
- * 
+ *
@@ -55 +55 @@
-    
+
@@ -62 +62 @@
-    
+
@@ -72 +72 @@
-    
+
@@ -81 +81 @@
-        
+
@@ -84 +84 @@
-        
+
@@ -88 +88 @@
-                
+
@@ -90 +90 @@
-                
+
diff --git a/src/main/java/org/dstadler/jgit/porcelain/ShowChangedFilesBetweenCommits.java b/src/main/java/org/dstadler/jgit/porcelain/ShowChangedFilesBetweenCommits.java
index 64f2288..0733499 100755
--- a/src/main/java/org/dstadler/jgit/porcelain/ShowChangedFilesBetweenCommits.java
+++ b/src/main/java/org/dstadler/jgit/porcelain/ShowChangedFilesBetweenCommits.java
@@ -48 +48 @@
-    
+
@@ -50 +50 @@
-    
+
@@ -57 +57 @@
-        
+
@@ -70 +70 @@
-    	
+
diff --git a/src/main/java/org/dstadler/jgit/porcelain/ShowFileDiff.java b/src/main/java/org/dstadler/jgit/porcelain/ShowFileDiff.java
index f41f42d..6a2849a 100644
--- a/src/main/java/org/dstadler/jgit/porcelain/ShowFileDiff.java
+++ b/src/main/java/org/dstadler/jgit/porcelain/ShowFileDiff.java
@@ -43 +43 @@
- * 
+ *
@@ -53 +53 @@
-    
+
@@ -79 +79 @@
-    
+
@@ -84 +84 @@
-            
+
@@ -86 +86 @@
-    
+
diff --git a/src/main/java/org/dstadler/jgit/porcelain/ShowLog.java b/src/main/java/org/dstadler/jgit/porcelain/ShowLog.java
index dfb7ccf..f461bde 100755
--- a/src/main/java/org/dstadler/jgit/porcelain/ShowLog.java
+++ b/src/main/java/org/dstadler/jgit/porcelain/ShowLog.java
@@ -48 +48 @@
-        
+
@@ -58 +58 @@
-        
+
@@ -68 +68 @@
-        
+
@@ -79 +79 @@
-        
+
diff --git a/src/main/java/org/dstadler/jgit/porcelain/ShowStatus.java b/src/main/java/org/dstadler/jgit/porcelain/ShowStatus.java
index 595d9a9..b2c74a4 100644
--- a/src/main/java/org/dstadler/jgit/porcelain/ShowStatus.java
+++ b/src/main/java/org/dstadler/jgit/porcelain/ShowStatus.java
@@ -32 +32 @@
- * 
+ *
diff --git a/src/main/java/org/dstadler/jgit/unfinished/BrowseTree.java b/src/main/java/org/dstadler/jgit/unfinished/BrowseTree.java
index 4d30b08..57df094 100644
--- a/src/main/java/org/dstadler/jgit/unfinished/BrowseTree.java
+++ b/src/main/java/org/dstadler/jgit/unfinished/BrowseTree.java
@@ -31 +31 @@
- * 
+ *
@@ -42 +42 @@
-            
+
@@ -48 +48 @@
-            
+
@@ -50 +50 @@
-            
+
diff --git a/src/main/java/org/dstadler/jgit/unfinished/ListChildrenOfCommit.java b/src/main/java/org/dstadler/jgit/unfinished/ListChildrenOfCommit.java
index d86f793..5e4f06e 100755
--- a/src/main/java/org/dstadler/jgit/unfinished/ListChildrenOfCommit.java
+++ b/src/main/java/org/dstadler/jgit/unfinished/ListChildrenOfCommit.java
@@ -45 +45 @@
-        
+
@@ -50 +50 @@
-        
+
diff --git a/src/main/java/org/dstadler/jgit/unfinished/ListIndex.java b/src/main/java/org/dstadler/jgit/unfinished/ListIndex.java
index f5cfb76..21440e4 100755
--- a/src/main/java/org/dstadler/jgit/unfinished/ListIndex.java
+++ b/src/main/java/org/dstadler/jgit/unfinished/ListIndex.java
@@ -28 +28 @@
- * 
+ *
@@ -42 +42 @@
-    
+
diff --git a/src/main/java/org/dstadler/jgit/unfinished/ListRefLog.java b/src/main/java/org/dstadler/jgit/unfinished/ListRefLog.java
index f24236a..5c9a1cd 100755
--- a/src/main/java/org/dstadler/jgit/unfinished/ListRefLog.java
+++ b/src/main/java/org/dstadler/jgit/unfinished/ListRefLog.java
@@ -36 +36 @@
- * 
+ *
@@ -47 +47 @@
-        
+
@@ -50 +50 @@
-        
+
@@ -54 +54 @@
-        
+
diff --git a/src/main/java/org/dstadler/jgit/unfinished/PullRemoteRepository.java b/src/main/java/org/dstadler/jgit/unfinished/PullRemoteRepository.java
index feb6ead..14756c1 100755
--- a/src/main/java/org/dstadler/jgit/unfinished/PullRemoteRepository.java
+++ b/src/main/java/org/dstadler/jgit/unfinished/PullRemoteRepository.java
@@ -46 +46 @@
-    
+
@@ -49 +49 @@
-    
+
@@ -52 +52 @@
-        
+
diff --git a/src/main/java/org/dstadler/jgit/unfinished/PushToRemoteRepository.java b/src/main/java/org/dstadler/jgit/unfinished/PushToRemoteRepository.java
index c45ed29..1b2bd09 100644
--- a/src/main/java/org/dstadler/jgit/unfinished/PushToRemoteRepository.java
+++ b/src/main/java/org/dstadler/jgit/unfinished/PushToRemoteRepository.java
@@ -54 +54 @@
-    
+
@@ -71 +71 @@
-            
+
diff --git a/src/main/java/org/dstadler/jgit/unfinished/TestSubmodules.java b/src/main/java/org/dstadler/jgit/unfinished/TestSubmodules.java
index 337db85..82ed393 100755
--- a/src/main/java/org/dstadler/jgit/unfinished/TestSubmodules.java
+++ b/src/main/java/org/dstadler/jgit/unfinished/TestSubmodules.java
@@ -31 +31 @@
- * 
+ *
@@ -38 +38 @@
-        
+
@@ -41 +41 @@
-            
+
@@ -43 +43 @@
-    
+
@@ -96 +96 @@
-        
+
diff --git a/src/main/java/org/dstadler/jgit/unfinished/TrackMaster.java b/src/main/java/org/dstadler/jgit/unfinished/TrackMaster.java
index eb54c3f..0544139 100644
--- a/src/main/java/org/dstadler/jgit/unfinished/TrackMaster.java
+++ b/src/main/java/org/dstadler/jgit/unfinished/TrackMaster.java
@@ -65 +65 @@
-        
+
diff --git a/src/main/java/org/dstadler/jgit/unfinished/UpdateIndex.java b/src/main/java/org/dstadler/jgit/unfinished/UpdateIndex.java
index 0a84826..719dc9a 100644
--- a/src/main/java/org/dstadler/jgit/unfinished/UpdateIndex.java
+++ b/src/main/java/org/dstadler/jgit/unfinished/UpdateIndex.java
@@ -45 +45 @@
-    		
+
@@ -47 +47 @@
-    			FileUtils.write(new File(testFile), new Date().toString());			
+    			FileUtils.write(new File(testFile), new Date().toString());
@@ -49 +49 @@
-    			
+
@@ -52 +52 @@
-    
+
@@ -55 +55 @@
-    
+
diff --git a/src/main/java/org/dstadler/jgit/unfinished/WalkTreeNonRecursive.java b/src/main/java/org/dstadler/jgit/unfinished/WalkTreeNonRecursive.java
index 4941260..2210d8b 100644
--- a/src/main/java/org/dstadler/jgit/unfinished/WalkTreeNonRecursive.java
+++ b/src/main/java/org/dstadler/jgit/unfinished/WalkTreeNonRecursive.java
@@ -31 +31 @@
- * 
+ *
@@ -39 +39 @@
-    
+
@@ -45 +45 @@
-        
+
diff --git a/src/main/java/org/dstadler/jgit/unfinished/WalkTreeRecursive.java b/src/main/java/org/dstadler/jgit/unfinished/WalkTreeRecursive.java
index d240f4c..85f7679 100644
--- a/src/main/java/org/dstadler/jgit/unfinished/WalkTreeRecursive.java
+++ b/src/main/java/org/dstadler/jgit/unfinished/WalkTreeRecursive.java
@@ -31 +31 @@
- * 
+ *
@@ -39 +39 @@
-    
+
@@ -45 +45 @@
-        
+
Diff Between f3457c19bfbe70e43451ac412e7a5561c83c8c25 00a4768513cee79296679e21d96a97f2efcb6d32diff --git a/.gitignore b/.gitignore
index 33b28f5..4743ece 100644
--- a/.gitignore
+++ b/.gitignore
@@ -7,0 +8,18 @@
+
+### JetBrains template
+# Covers JetBrains IDEs: IntelliJ, RubyMine, PhpStorm, AppCode, PyCharm, CLion, Android Studio
+
+*.iml
+
+## Directory-based project format:
+.idea/
+# if you remove the above rule, at least ignore the following:
+
+## File-based project format:
+*.ipr
+*.iws
+
+## Plugin-specific files:
+
+# IntelliJ
+/out/
Diff Between 00a4768513cee79296679e21d96a97f2efcb6d32 6409ee1597a53c6fbee31edf9cde31dc3afbe20fdiff --git a/README.md b/README.md
index f345458..e21599d 100644
--- a/README.md
+++ b/README.md
@@ -9 +9,3 @@
-This project tries to provide a collection of ready-to-run snippets which try to provide a quick start into building functionality using JGit. Please make sure to also use the existing [JavaDoc](http://download.eclipse.org/jgit/site/3.7.1.201504261725-r/apidocs/) and the [User Guide](http://wiki.eclipse.org/JGit/User_Guide) as well, as they are well done and provide detailed information and a general overview of JGit respectively.
+This project tries to provide a collection of ready-to-run snippets which provide a quick start for building functionality using JGit. 
+
+Please make sure to also use the existing [JavaDoc](http://download.eclipse.org/jgit/site/4.1.1.201511131810-r/apidocs/) and the [User Guide](http://wiki.eclipse.org/JGit/User_Guide) as well, as they are well done and provide detailed information and a general overview of JGit respectively.
@@ -112 +114 @@
-* [JGit JavaDoc](http://download.eclipse.org/jgit/site/4.1.0.201509280440-r/apidocs/)
+* [JGit JavaDoc](http://download.eclipse.org/jgit/site/4.1.1.201511131810-r/apidocs/)
Diff Between 6409ee1597a53c6fbee31edf9cde31dc3afbe20f cb64400e38b22a7bd1271d04ec73575b2e67549bdiff --git a/README.md b/README.md
index dd9415d..f345458 100644
--- a/README.md
+++ b/README.md
@@ -72,0 +73 @@
+* [Fetch from remote repositories and use 'prune' to remove outdated remote branches/tags](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/porcelain/FetchRemoteCommitsWithPrune.java)
diff --git a/src/main/java/org/dstadler/jgit/porcelain/FetchRemoteCommitsWithPrune.java b/src/main/java/org/dstadler/jgit/porcelain/FetchRemoteCommitsWithPrune.java
new file mode 100644
index 0000000..5ceaec0
--- /dev/null
+++ b/src/main/java/org/dstadler/jgit/porcelain/FetchRemoteCommitsWithPrune.java
@@ -0,0 +1,73 @@
+package org.dstadler.jgit.porcelain;
+
+import java.io.File;
+
+/*
+   Copyright 2013, 2014 Dominik Stadler
+
+   Licensed under the Apache License, Version 2.0 (the "License");
+   you may not use this file except in compliance with the License.
+   You may obtain a copy of the License at
+
+     http://www.apache.org/licenses/LICENSE-2.0
+
+   Unless required by applicable law or agreed to in writing, software
+   distributed under the License is distributed on an "AS IS" BASIS,
+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+   See the License for the specific language governing permissions and
+   limitations under the License.
+ */
+
+import java.io.IOException;
+import java.util.List;
+
+import org.eclipse.jgit.api.Git;
+import org.eclipse.jgit.api.ListBranchCommand.ListMode;
+import org.eclipse.jgit.api.errors.GitAPIException;
+import org.eclipse.jgit.lib.Ref;
+import org.eclipse.jgit.transport.FetchResult;
+
+
+
+/**
+ * Simple snippet which shows how to fetch commits from a remote Git repository
+ *
+ * @author dominik.stadler at gmx.at
+ */
+public class FetchRemoteCommitsWithPrune {
+
+    private static final String REMOTE_URL = "https://github.com/github/testrepo.git";
+
+    public static void main(String[] args) throws IOException, GitAPIException {
+        // prepare a new folder for the cloned repository
+        File localPath = File.createTempFile("TestGitRepository", "");
+        localPath.delete();
+
+        // then clone
+        System.out.println("Cloning from " + REMOTE_URL + " to " + localPath);
+        try (Git git = Git.cloneRepository()
+                .setURI(REMOTE_URL)
+                .setDirectory(localPath)
+                .call()) {
+            // Note: the call() returns an opened repository already which needs to be closed to avoid file handle leaks!
+            System.out.println("Having repository: " + git.getRepository().getDirectory());
+
+            System.out.println("Starting fetch");
+            FetchResult result = git.fetch().setCheckFetchedObjects(true).call();
+            System.out.println("Messages: " + result.getMessages());
+
+            // ensure master/HEAD are still there
+            System.out.println("Listing local branches:");
+            List<Ref> call = git.branchList().call();
+            for (Ref ref : call) {
+                System.out.println("Branch: " + ref + " " + ref.getName() + " " + ref.getObjectId().getName());
+            }
+
+            System.out.println("Now including remote branches:");
+            call = git.branchList().setListMode(ListMode.ALL).call();
+            for (Ref ref : call) {
+                System.out.println("Branch: " + ref + " " + ref.getName() + " " + ref.getObjectId().getName());
+            }
+        }
+    }
+}
diff --git a/src/test/java/org/dstadler/jgit/porcelain/PorcelainTest.java b/src/test/java/org/dstadler/jgit/porcelain/PorcelainTest.java
index 5d210b4..de1e615 100644
--- a/src/test/java/org/dstadler/jgit/porcelain/PorcelainTest.java
+++ b/src/test/java/org/dstadler/jgit/porcelain/PorcelainTest.java
@@ -24,0 +25 @@
+        FetchRemoteCommitsWithPrune.main(null);
Diff Between cb64400e38b22a7bd1271d04ec73575b2e67549b 2a4ff4be7d80ca8e5491b144e5a2475eddeccdfadiff --git a/src/main/java/org/dstadler/jgit/porcelain/CloneRemoteRepository.java b/src/main/java/org/dstadler/jgit/porcelain/CloneRemoteRepository.java
index 33d1bb4..b316be9 100644
--- a/src/main/java/org/dstadler/jgit/porcelain/CloneRemoteRepository.java
+++ b/src/main/java/org/dstadler/jgit/porcelain/CloneRemoteRepository.java
@@ -51,3 +50,0 @@
-
-            // workaround for https://bugs.eclipse.org/bugs/show_bug.cgi?id=474093
-	        result.getRepository().close();
diff --git a/src/main/java/org/dstadler/jgit/porcelain/CloneRemoteRepositoryWithAuthentication.java b/src/main/java/org/dstadler/jgit/porcelain/CloneRemoteRepositoryWithAuthentication.java
index 7966242..b07b622 100755
--- a/src/main/java/org/dstadler/jgit/porcelain/CloneRemoteRepositoryWithAuthentication.java
+++ b/src/main/java/org/dstadler/jgit/porcelain/CloneRemoteRepositoryWithAuthentication.java
@@ -87,3 +86,0 @@
-
-            // workaround for https://bugs.eclipse.org/bugs/show_bug.cgi?id=474093
-            result.getRepository().close();
diff --git a/src/main/java/org/dstadler/jgit/unfinished/PullFromRemoteRepository.java b/src/main/java/org/dstadler/jgit/unfinished/PullFromRemoteRepository.java
index 0d15f20..59ff3b9 100644
--- a/src/main/java/org/dstadler/jgit/unfinished/PullFromRemoteRepository.java
+++ b/src/main/java/org/dstadler/jgit/unfinished/PullFromRemoteRepository.java
@@ -57,3 +56,0 @@
-
-            // workaround for https://bugs.eclipse.org/bugs/show_bug.cgi?id=474093
-            result.getRepository().close();
Diff Between 2a4ff4be7d80ca8e5491b144e5a2475eddeccdfa abf13df7e9f8f29341f3a591237c89d8dcec2e6ddiff --git a/.travis.yml b/.travis.yml
index 289098c..56d6195 100644
--- a/.travis.yml
+++ b/.travis.yml
@@ -6,0 +7,2 @@
+ - git config --unset-all remote.origin.fetch
+ - git config --add remote.origin.fetch '+refs/heads/*:refs/remotes/origin/*'
Diff Between abf13df7e9f8f29341f3a591237c89d8dcec2e6d a70f55fdfce8e34b212c04f52b05c329cc6ee82ddiff --git a/.travis.yml b/.travis.yml
index bbb62e3..289098c 100644
--- a/.travis.yml
+++ b/.travis.yml
@@ -8 +8 @@
- - git fetch origin testbranch
+ - git fetch origin testbranch:testbranch
Diff Between a70f55fdfce8e34b212c04f52b05c329cc6ee82d 0f5453ac2dbf37437196892a245b5f3f612fe93cdiff --git a/.travis.yml b/.travis.yml
index b4c7c9b..bbb62e3 100644
--- a/.travis.yml
+++ b/.travis.yml
@@ -7,0 +8 @@
+ - git fetch origin testbranch
Diff Between 0f5453ac2dbf37437196892a245b5f3f612fe93c 150eded4c58506e954e875262c5264e801c53db5diff --git a/.travis.yml b/.travis.yml
index 4ce312f..b4c7c9b 100644
--- a/.travis.yml
+++ b/.travis.yml
@@ -7 +7,2 @@
-  
+ - git fetch --unshallow
+
Diff Between 150eded4c58506e954e875262c5264e801c53db5 cfe51aeaed2a779c4ee2a7c94c96c3d2de9715e2diff --git a/.travis.yml b/.travis.yml
index 1955137..4ce312f 100644
--- a/.travis.yml
+++ b/.travis.yml
@@ -12 +12 @@
-- cat build/test-result/*.xml
+- cat build/test-results/*.xml
Diff Between cfe51aeaed2a779c4ee2a7c94c96c3d2de9715e2 19c24f6cdeb31f2b757225baf1c16001531a7e8fdiff --git a/.travis.yml b/.travis.yml
index a661506..1955137 100644
--- a/.travis.yml
+++ b/.travis.yml
@@ -9,0 +10,3 @@
+
+after_failure:
+- cat build/test-result/*.xml
Diff Between 19c24f6cdeb31f2b757225baf1c16001531a7e8f e197536ddf36d20eb709b2a399cabad78cbe6886diff --git a/gradle/wrapper/gradle-wrapper.properties b/gradle/wrapper/gradle-wrapper.properties
index a5e0845..f4aa24d 100644
--- a/gradle/wrapper/gradle-wrapper.properties
+++ b/gradle/wrapper/gradle-wrapper.properties
@@ -1 +0,0 @@
-#Mon Dec 21 22:20:31 UTC 2015
@@ -3,0 +3 @@
+distributionUrl=https\://services.gradle.org/distributions/gradle-2.10-bin.zip
@@ -6 +5,0 @@
-distributionUrl=https\://services.gradle.org/distributions/gradle-2.10-bin.zip
Diff Between e197536ddf36d20eb709b2a399cabad78cbe6886 1803da9f16fdf6dae355f2268db42a133c4c4492diff --git a/src/test/java/org/dstadler/jgit/api/ApiTest.java b/src/test/java/org/dstadler/jgit/api/ApiTest.java
index 660102c..91294cc 100644
--- a/src/test/java/org/dstadler/jgit/api/ApiTest.java
+++ b/src/test/java/org/dstadler/jgit/api/ApiTest.java
@@ -2,0 +3,9 @@
+import static org.junit.Assert.assertNotNull;
+
+import java.io.IOException;
+
+import org.dstadler.jgit.helper.CookbookHelper;
+import org.eclipse.jgit.lib.ObjectId;
+import org.eclipse.jgit.lib.Repository;
+import org.eclipse.jgit.revwalk.RevCommit;
+import org.eclipse.jgit.revwalk.RevWalk;
@@ -17,0 +27,2 @@
+        ReadFileFromCommit.main(null);
+        ReadTagFromName.main(null);
@@ -22,0 +34,25 @@
+
+    @Test
+    public void testFailure() throws IOException {
+        // perform a specific check for things that seem to fail in github/travis checking
+        try (Repository repository = CookbookHelper.openJGitCookbookRepository()) {
+            try (RevWalk revWalk = new RevWalk( repository )) {
+                ObjectId resolve = repository.resolve( "refs/heads/master" );
+                assertNotNull("Did not find refs/heads/master", resolve);
+
+                RevCommit masterHead = revWalk.parseCommit( resolve);
+
+                // first a commit that was merged
+                ObjectId id = repository.resolve("05d18a76875716fbdbd2c200091b40caa06c713d");
+                System.out.println("Had id: " + id);
+                assertNotNull("Did not find specific commit", resolve);
+
+                RevCommit otherHead = revWalk.parseCommit( id );
+                if( revWalk.isMergedInto( otherHead, masterHead ) ) {
+                    System.out.println("Commit " + otherHead + " is merged into master");
+                } else {
+                    System.out.println("Commit " + otherHead + " is NOT merged into master");
+                }
+            }
+        }
+    }
diff --git a/src/test/java/org/dstadler/jgit/porcelain/PorcelainTest.java b/src/test/java/org/dstadler/jgit/porcelain/PorcelainTest.java
index 6df9bbc..5d210b4 100644
--- a/src/test/java/org/dstadler/jgit/porcelain/PorcelainTest.java
+++ b/src/test/java/org/dstadler/jgit/porcelain/PorcelainTest.java
@@ -30,0 +31,2 @@
+        ListUncommittedChanges.main(null);
+        RebaseToOriginMaster.main(null);
@@ -38 +39,0 @@
-        ListUncommittedChanges.main(null);
Diff Between 1803da9f16fdf6dae355f2268db42a133c4c4492 fe779f7faee65f1ae6b1d292db174d97f6821cb4diff --git a/build.gradle b/build.gradle
index fb791c9..b6d9fe0 100644
--- a/build.gradle
+++ b/build.gradle
@@ -43 +43 @@
-    gradleVersion = '2.9'
+    gradleVersion = '2.10'
diff --git a/gradle/wrapper/gradle-wrapper.jar b/gradle/wrapper/gradle-wrapper.jar
index 9411448..13372ae 100644
--- a/gradle/wrapper/gradle-wrapper.jar
+++ b/gradle/wrapper/gradle-wrapper.jar
Binary files differ
diff --git a/gradle/wrapper/gradle-wrapper.properties b/gradle/wrapper/gradle-wrapper.properties
index 39de670..a5e0845 100644
--- a/gradle/wrapper/gradle-wrapper.properties
+++ b/gradle/wrapper/gradle-wrapper.properties
@@ -0,0 +1 @@
+#Mon Dec 21 22:20:31 UTC 2015
@@ -3 +3,0 @@
-distributionUrl=https\://services.gradle.org/distributions/gradle-2.9-bin.zip
@@ -5,0 +6 @@
+distributionUrl=https\://services.gradle.org/distributions/gradle-2.10-bin.zip
Diff Between fe779f7faee65f1ae6b1d292db174d97f6821cb4 b4eb8a750adb5a8df1bc5f80976f439a4b399f44diff --git a/README.md b/README.md
index cbf9caa..dd9415d 100644
--- a/README.md
+++ b/README.md
@@ -3 +3 @@
-[![Build Status](https://buildhive.cloudbees.com/job/centic9/job/jgit-cookbook/badge/icon)](https://buildhive.cloudbees.com/job/centic9/job/jgit-cookbook/) [![Gradle Status](https://gradleupdate.appspot.com/centic9/jgit-cookbook/status.svg?branch=master)](https://gradleupdate.appspot.com/centic9/jgit-cookbook/status)
+[![Build Status](https://travis-ci.org/centic9/jgit-cookbook.svg)](https://travis-ci.org/centic9/jgit-cookbook) [![Gradle Status](https://gradleupdate.appspot.com/centic9/jgit-cookbook/status.svg?branch=master)](https://gradleupdate.appspot.com/centic9/jgit-cookbook/status)
Diff Between b4eb8a750adb5a8df1bc5f80976f439a4b399f44 8e4db00d31c2f47739ef3d52fe7d7882d7f1b3b8diff --git a/.travis.yml b/.travis.yml
new file mode 100644
index 0000000..a661506
--- /dev/null
+++ b/.travis.yml
@@ -0,0 +1,9 @@
+language: java
+jdk:
+  - oraclejdk8
+ 
+before_install:
+ - chmod +x gradlew
+  
+after_success:
+- ./gradlew jacocoTestReport
diff --git a/build.gradle b/build.gradle
index b6d9fe0..fb791c9 100644
--- a/build.gradle
+++ b/build.gradle
@@ -43 +43 @@
-    gradleVersion = '2.10'
+    gradleVersion = '2.9'
diff --git a/gradle/wrapper/gradle-wrapper.jar b/gradle/wrapper/gradle-wrapper.jar
index 13372ae..9411448 100644
--- a/gradle/wrapper/gradle-wrapper.jar
+++ b/gradle/wrapper/gradle-wrapper.jar
Binary files differ
diff --git a/gradle/wrapper/gradle-wrapper.properties b/gradle/wrapper/gradle-wrapper.properties
index a5e0845..39de670 100644
--- a/gradle/wrapper/gradle-wrapper.properties
+++ b/gradle/wrapper/gradle-wrapper.properties
@@ -1 +0,0 @@
-#Mon Dec 21 22:20:31 UTC 2015
@@ -3,0 +3 @@
+distributionUrl=https\://services.gradle.org/distributions/gradle-2.9-bin.zip
@@ -6 +5,0 @@
-distributionUrl=https\://services.gradle.org/distributions/gradle-2.10-bin.zip
Diff Between 8e4db00d31c2f47739ef3d52fe7d7882d7f1b3b8 a635b29ef05124115328ff92554d86c673d528a4diff --git a/build.gradle b/build.gradle
index fb791c9..b6d9fe0 100644
--- a/build.gradle
+++ b/build.gradle
@@ -43 +43 @@
-    gradleVersion = '2.9'
+    gradleVersion = '2.10'
diff --git a/gradle/wrapper/gradle-wrapper.jar b/gradle/wrapper/gradle-wrapper.jar
index 9411448..13372ae 100644
--- a/gradle/wrapper/gradle-wrapper.jar
+++ b/gradle/wrapper/gradle-wrapper.jar
Binary files differ
diff --git a/gradle/wrapper/gradle-wrapper.properties b/gradle/wrapper/gradle-wrapper.properties
index 39de670..a5e0845 100644
--- a/gradle/wrapper/gradle-wrapper.properties
+++ b/gradle/wrapper/gradle-wrapper.properties
@@ -0,0 +1 @@
+#Mon Dec 21 22:20:31 UTC 2015
@@ -3 +3,0 @@
-distributionUrl=https\://services.gradle.org/distributions/gradle-2.9-bin.zip
@@ -5,0 +6 @@
+distributionUrl=https\://services.gradle.org/distributions/gradle-2.10-bin.zip
Diff Between a635b29ef05124115328ff92554d86c673d528a4 75de87304a78aef34148af76ad2cdaf76546a3badiff --git a/.settings/org.eclipse.jdt.core.prefs b/.settings/org.eclipse.jdt.core.prefs
index e017ecf..8785330 100644
--- a/.settings/org.eclipse.jdt.core.prefs
+++ b/.settings/org.eclipse.jdt.core.prefs
@@ -381 +381 @@
-org.eclipse.jdt.core.formatter.wrap_outer_expressions_when_nested=true
\ No newline at end of file
+org.eclipse.jdt.core.formatter.wrap_outer_expressions_when_nested=true
diff --git a/build.gradle b/build.gradle
index 3fa687f..fb791c9 100644
--- a/build.gradle
+++ b/build.gradle
@@ -26,4 +26,3 @@
-   ant.replaceregexp(match:'^#.*', replace:'', flags:'g', byline:true) {
-      fileset(dir: project.projectDir, includes: '.settings/org.eclipse.jdt.core.prefs,.settings/com.google.gdt.eclipse.core.prefs')
-   }
-   ant.fixcrlf(srcDir: '.settings', eol: 'lf')
+	ant.replaceregexp(match:'^#.*', replace:'', flags:'g', byline:true) {
+		fileset(dir: project.projectDir, includes: '.settings/org.eclipse.jdt.core.prefs,.settings/com.google.gdt.eclipse.core.prefs')
+	}
@@ -37,0 +37 @@
+	ant.fixcrlf(srcDir: '.settings', eol: 'lf')
@@ -43 +43 @@
-	gradleVersion = '2.9'
+    gradleVersion = '2.9'
@@ -50 +49,0 @@
-	ant.fixcrlf(srcDir: '.settings', eol: 'lf')
@@ -51,0 +51 @@
+	ant.fixcrlf(file: 'gradle/wrapper/gradle-wrapper.properties', eol: 'lf')
diff --git a/gradle/wrapper/gradle-wrapper.properties b/gradle/wrapper/gradle-wrapper.properties
index 79031d1..39de670 100644
--- a/gradle/wrapper/gradle-wrapper.properties
+++ b/gradle/wrapper/gradle-wrapper.properties
@@ -1 +0,0 @@
-#Tue Nov 17 07:13:26 UTC 2015
@@ -3,0 +3 @@
+distributionUrl=https\://services.gradle.org/distributions/gradle-2.9-bin.zip
@@ -6 +5,0 @@
-distributionUrl=https\://services.gradle.org/distributions/gradle-2.9-bin.zip
Diff Between 75de87304a78aef34148af76ad2cdaf76546a3ba ff7b1b7dcd2e694cc812479e13a1fd0446e9b05fDiff Between ff7b1b7dcd2e694cc812479e13a1fd0446e9b05f 8cf0bcf773e1d5bfea88ca340bf643610e1723dfdiff --git a/src/main/java/org/dstadler/jgit/porcelain/CommitAll.java b/src/main/java/org/dstadler/jgit/porcelain/CommitAll.java
index 3b1466b..f831a92 100755
--- a/src/main/java/org/dstadler/jgit/porcelain/CommitAll.java
+++ b/src/main/java/org/dstadler/jgit/porcelain/CommitAll.java
@@ -4,0 +5 @@
+import java.io.PrintWriter;
@@ -26,0 +28,3 @@
+
+                // Stage all files in the repo including new files
+                git.add().addFilepattern(".").call();
@@ -28 +32 @@
-                // and then commit the changes
+                // and then commit the changes.
@@ -30,2 +34 @@
-                		.setAll(true)
-                        .setMessage("Commit all")
+                        .setMessage("Commit all changes including additions")
@@ -32,0 +36,11 @@
+
+                try(PrintWriter writer = new PrintWriter(myfile)) {
+                    writer.append("Hello, world!");
+                }
+
+                // Stage all changed files, omitting new files, and commit with one command
+                git.commit()
+                        .setAll(true)
+                        .setMessage("Commit changes to all files")
+                        .call();
+
Diff Between 8cf0bcf773e1d5bfea88ca340bf643610e1723df 271b5d36a2a61dd1171a6a9aa22dc2408852da6fdiff --git a/.settings/org.eclipse.core.resources.prefs b/.settings/org.eclipse.core.resources.prefs
old mode 100755
new mode 100644
index 4824b80..99f26c0
--- a/.settings/org.eclipse.core.resources.prefs
+++ b/.settings/org.eclipse.core.resources.prefs
@@ -1,2 +1,2 @@
-eclipse.preferences.version=1
-encoding/<project>=UTF-8
+eclipse.preferences.version=1
+encoding/<project>=UTF-8
diff --git a/.settings/org.eclipse.core.runtime.prefs b/.settings/org.eclipse.core.runtime.prefs
old mode 100755
new mode 100644
index c522e1f..5a0ad22
--- a/.settings/org.eclipse.core.runtime.prefs
+++ b/.settings/org.eclipse.core.runtime.prefs
@@ -1,2 +1,2 @@
-eclipse.preferences.version=1
-line.separator=\n
+eclipse.preferences.version=1
+line.separator=\n
diff --git a/.settings/org.eclipse.jdt.core.prefs b/.settings/org.eclipse.jdt.core.prefs
index 8785330..e017ecf 100644
--- a/.settings/org.eclipse.jdt.core.prefs
+++ b/.settings/org.eclipse.jdt.core.prefs
@@ -381 +381 @@
-org.eclipse.jdt.core.formatter.wrap_outer_expressions_when_nested=true
+org.eclipse.jdt.core.formatter.wrap_outer_expressions_when_nested=true
\ No newline at end of file
diff --git a/build.gradle b/build.gradle
index 8423c3f..3fa687f 100644
--- a/build.gradle
+++ b/build.gradle
@@ -18 +18 @@
-	compile 'org.slf4j:slf4j-simple:1.7.12'
+	compile 'org.slf4j:slf4j-simple:1.7.13'
@@ -27 +27 @@
-      fileset(dir: project.projectDir, includes: '.settings/org.eclipse.jdt.core.prefs')
+      fileset(dir: project.projectDir, includes: '.settings/org.eclipse.jdt.core.prefs,.settings/com.google.gdt.eclipse.core.prefs')
@@ -28,0 +29 @@
+   ant.fixcrlf(srcDir: '.settings', eol: 'lf')
@@ -31,2 +32,6 @@
-   new File(project.projectDir, '.settings/org.eclipse.jdt.core.prefs').with { it.text = it.readLines().findAll { it }.sort().join('\n') }
-   new File(project.projectDir, '.classpath').with { it.text = it.readLines().findAll { it }.unique().join('\n') }
+	new File(project.projectDir, '.settings/org.eclipse.jdt.core.prefs').with { it.text = it.readLines().findAll { it }.sort().join('\n') }
+	new File(project.projectDir, '.classpath').with { it.text = it.readLines().findAll { it }.unique().join('\n') }
+	File file = new File(project.projectDir, '.settings/com.google.gdt.eclipse.core.prefs');
+	if(file.exists()) {
+		file.with { it.text = it.readLines().findAll { it }.sort().join('\n') }
+	}
@@ -39,0 +45,9 @@
+
+task adjustWrapperPropertiesFile << {
+	ant.replaceregexp(match:'^#.*', replace:'', flags:'g', byline:true) {
+		fileset(dir: project.projectDir, includes: 'gradle/wrapper/gradle-wrapper.properties')
+	}
+	ant.fixcrlf(srcDir: '.settings', eol: 'lf')
+	new File(project.projectDir, 'gradle/wrapper/gradle-wrapper.properties').with { it.text = it.readLines().findAll { it }.sort().join('\n') }
+}
+wrapper.finalizedBy adjustWrapperPropertiesFile
Diff Between 271b5d36a2a61dd1171a6a9aa22dc2408852da6f 71f36b80bef8ad39fc2685c85998ab6696cfbe0adiff --git a/build.gradle b/build.gradle
index 590c1f1..8423c3f 100644
--- a/build.gradle
+++ b/build.gradle
@@ -38 +38 @@
-	gradleVersion = '2.8'
+	gradleVersion = '2.9'
diff --git a/gradle/wrapper/gradle-wrapper.jar b/gradle/wrapper/gradle-wrapper.jar
index 05ef575..9411448 100644
--- a/gradle/wrapper/gradle-wrapper.jar
+++ b/gradle/wrapper/gradle-wrapper.jar
Binary files differ
diff --git a/gradle/wrapper/gradle-wrapper.properties b/gradle/wrapper/gradle-wrapper.properties
index 8ed5010..79031d1 100644
--- a/gradle/wrapper/gradle-wrapper.properties
+++ b/gradle/wrapper/gradle-wrapper.properties
@@ -1 +1 @@
-#Tue Oct 20 04:13:37 UTC 2015
+#Tue Nov 17 07:13:26 UTC 2015
@@ -6 +6 @@
-distributionUrl=https\://services.gradle.org/distributions/gradle-2.8-bin.zip
+distributionUrl=https\://services.gradle.org/distributions/gradle-2.9-bin.zip
Diff Between 71f36b80bef8ad39fc2685c85998ab6696cfbe0a 34b69e9b19df9554391e09c4986d1bf3ecd96c44diff --git a/.settings/org.eclipse.jdt.core.prefs b/.settings/org.eclipse.jdt.core.prefs
index 92849b0..8785330 100644
--- a/.settings/org.eclipse.jdt.core.prefs
+++ b/.settings/org.eclipse.jdt.core.prefs
@@ -10 +10 @@
-org.eclipse.jdt.core.compiler.codegen.targetPlatform=1.7
+org.eclipse.jdt.core.compiler.codegen.targetPlatform=1.8
@@ -12 +12 @@
-org.eclipse.jdt.core.compiler.compliance=1.7
+org.eclipse.jdt.core.compiler.compliance=1.8
@@ -30 +30 @@
-org.eclipse.jdt.core.compiler.problem.fieldHiding=ignore
+org.eclipse.jdt.core.compiler.problem.fieldHiding=warning
@@ -39 +39 @@
-org.eclipse.jdt.core.compiler.problem.localVariableHiding=ignore
+org.eclipse.jdt.core.compiler.problem.localVariableHiding=warning
@@ -88 +88 @@
-org.eclipse.jdt.core.compiler.problem.unusedExceptionParameter=ignore
+org.eclipse.jdt.core.compiler.problem.unusedExceptionParameter=warning
@@ -101 +101 @@
-org.eclipse.jdt.core.compiler.source=1.7
+org.eclipse.jdt.core.compiler.source=1.8
@@ -381 +381 @@
-org.eclipse.jdt.core.formatter.wrap_outer_expressions_when_nested=true
\ No newline at end of file
+org.eclipse.jdt.core.formatter.wrap_outer_expressions_when_nested=true
diff --git a/build.gradle b/build.gradle
index 4890dff..590c1f1 100644
--- a/build.gradle
+++ b/build.gradle
@@ -5 +5 @@
-sourceCompatibility = '1.7'
+sourceCompatibility = 1.8
@@ -15,2 +15,2 @@
-	compile 'org.eclipse.jgit:org.eclipse.jgit:4.1.0.201509280440-r'
-	compile 'org.eclipse.jgit:org.eclipse.jgit.archive:4.1.0.201509280440-r'
+	compile 'org.eclipse.jgit:org.eclipse.jgit:4.1.1.201511131810-r'
+	compile 'org.eclipse.jgit:org.eclipse.jgit.archive:4.1.1.201511131810-r'
@@ -38 +38 @@
-	gradleVersion = '2.9'
+	gradleVersion = '2.8'
diff --git a/gradle/wrapper/gradle-wrapper.jar b/gradle/wrapper/gradle-wrapper.jar
index 9411448..05ef575 100644
--- a/gradle/wrapper/gradle-wrapper.jar
+++ b/gradle/wrapper/gradle-wrapper.jar
Binary files differ
diff --git a/gradle/wrapper/gradle-wrapper.properties b/gradle/wrapper/gradle-wrapper.properties
index 79031d1..8ed5010 100644
--- a/gradle/wrapper/gradle-wrapper.properties
+++ b/gradle/wrapper/gradle-wrapper.properties
@@ -1 +1 @@
-#Tue Nov 17 07:13:26 UTC 2015
+#Tue Oct 20 04:13:37 UTC 2015
@@ -6 +6 @@
-distributionUrl=https\://services.gradle.org/distributions/gradle-2.9-bin.zip
+distributionUrl=https\://services.gradle.org/distributions/gradle-2.8-bin.zip
diff --git a/pom.xml b/pom.xml
index af4def9..8851e68 100644
--- a/pom.xml
+++ b/pom.xml
@@ -23 +23 @@
-      <version>4.1.0.201509280440-r</version>
+      <version>4.1.1.201511131810-r</version>
@@ -28 +28 @@
-      <version>4.1.0.201509280440-r</version>
+      <version>4.1.1.201511131810-r</version>
Diff Between 34b69e9b19df9554391e09c4986d1bf3ecd96c44 4d56c753233f64534b83a7adbefeb2afa98fc6fadiff --git a/build.gradle b/build.gradle
index 6c6f334..4890dff 100644
--- a/build.gradle
+++ b/build.gradle
@@ -38 +38 @@
-	gradleVersion = '2.8'
+	gradleVersion = '2.9'
diff --git a/gradle/wrapper/gradle-wrapper.jar b/gradle/wrapper/gradle-wrapper.jar
index 05ef575..9411448 100644
--- a/gradle/wrapper/gradle-wrapper.jar
+++ b/gradle/wrapper/gradle-wrapper.jar
Binary files differ
diff --git a/gradle/wrapper/gradle-wrapper.properties b/gradle/wrapper/gradle-wrapper.properties
index 8ed5010..79031d1 100644
--- a/gradle/wrapper/gradle-wrapper.properties
+++ b/gradle/wrapper/gradle-wrapper.properties
@@ -1 +1 @@
-#Tue Oct 20 04:13:37 UTC 2015
+#Tue Nov 17 07:13:26 UTC 2015
@@ -6 +6 @@
-distributionUrl=https\://services.gradle.org/distributions/gradle-2.8-bin.zip
+distributionUrl=https\://services.gradle.org/distributions/gradle-2.9-bin.zip
Diff Between 4d56c753233f64534b83a7adbefeb2afa98fc6fa 25d6cfa03c85a48f6e1d617006c6613528ee7ebediff --git a/README.md b/README.md
index 4bf2eb8..cbf9caa 100644
--- a/README.md
+++ b/README.md
@@ -73,0 +74 @@
+* [Rebase onto an upstream branch](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/porcelain/RebaseToOriginMaster.java)
@@ -104 +104,0 @@
-* Rebase - http://stackoverflow.com/questions/22945257/jgit-how-to-squash-commits
diff --git a/src/main/java/org/dstadler/jgit/porcelain/RebaseToOriginMaster.java b/src/main/java/org/dstadler/jgit/porcelain/RebaseToOriginMaster.java
new file mode 100644
index 0000000..9c2d488
--- /dev/null
+++ b/src/main/java/org/dstadler/jgit/porcelain/RebaseToOriginMaster.java
@@ -0,0 +1,67 @@
+package org.dstadler.jgit.porcelain;
+
+/*
+   Copyright 2013, 2014 Dominik Stadler
+
+   Licensed under the Apache License, Version 2.0 (the "License");
+   you may not use this file except in compliance with the License.
+   You may obtain a copy of the License at
+
+     http://www.apache.org/licenses/LICENSE-2.0
+
+   Unless required by applicable law or agreed to in writing, software
+   distributed under the License is distributed on an "AS IS" BASIS,
+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+   See the License for the specific language governing permissions and
+   limitations under the License.
+ */
+
+import java.io.IOException;
+import java.util.List;
+
+import org.dstadler.jgit.helper.CookbookHelper;
+import org.eclipse.jgit.api.Git;
+import org.eclipse.jgit.api.RebaseCommand.InteractiveHandler;
+import org.eclipse.jgit.api.errors.GitAPIException;
+import org.eclipse.jgit.errors.IllegalTodoFileModification;
+import org.eclipse.jgit.lib.RebaseTodoLine;
+import org.eclipse.jgit.lib.RebaseTodoLine.Action;
+import org.eclipse.jgit.lib.Repository;
+
+/**
+ * Snippet which shows how to rebase local changes onto a remote branch.
+ *
+ * See also http://stackoverflow.com/questions/22945257/jgit-how-to-squash-commits
+ *
+ * @author dominik.stadler at gmx.at
+ */
+public class RebaseToOriginMaster {
+
+    public static void main(String[] args) throws IOException, GitAPIException {
+        try (Repository repository = CookbookHelper.openJGitCookbookRepository()) {
+            // all refs
+            try (Git git = new Git(repository)) {
+                InteractiveHandler handler = new InteractiveHandler() {
+                    @Override
+                    public void prepareSteps(List<RebaseTodoLine> steps) {
+                        for(RebaseTodoLine step : steps) {
+                            try {
+                                step.setAction(Action.EDIT);
+                            } catch (IllegalTodoFileModification e) {
+                                throw new IllegalStateException(e);
+                            }
+                        }
+                    }
+
+                    @Override
+                    public String modifyCommitMessage(String oldMessage) {
+                        return oldMessage;
+                    }
+                };
+
+                git.rebase().setUpstream("origin/master").runInteractively(handler).call();
+                System.out.println("Rebased..");
+            }
+        }
+    }
+}
Diff Between 25d6cfa03c85a48f6e1d617006c6613528ee7ebe bce6e5917b0066a5839766eab914d4a4a19975f5diff --git a/README.md b/README.md
index f06d02d..4bf2eb8 100644
--- a/README.md
+++ b/README.md
@@ -49,0 +50 @@
+* [List uncommitted changes of a repository](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/porcelain/ListUncommittedChanges.java)
diff --git a/src/main/java/org/dstadler/jgit/porcelain/ListUncommittedChanges.java b/src/main/java/org/dstadler/jgit/porcelain/ListUncommittedChanges.java
new file mode 100644
index 0000000..b1bd832
--- /dev/null
+++ b/src/main/java/org/dstadler/jgit/porcelain/ListUncommittedChanges.java
@@ -0,0 +1,97 @@
+package org.dstadler.jgit.porcelain;
+
+/*
+   Copyright 2013, 2014 Dominik Stadler
+
+   Licensed under the Apache License, Version 2.0 (the "License");
+   you may not use this file except in compliance with the License.
+   You may obtain a copy of the License at
+
+     http://www.apache.org/licenses/LICENSE-2.0
+
+   Unless required by applicable law or agreed to in writing, software
+   distributed under the License is distributed on an "AS IS" BASIS,
+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+   See the License for the specific language governing permissions and
+   limitations under the License.
+ */
+
+import java.io.IOException;
+import java.util.Map;
+import java.util.Set;
+
+import org.dstadler.jgit.helper.CookbookHelper;
+import org.eclipse.jgit.api.Git;
+import org.eclipse.jgit.api.Status;
+import org.eclipse.jgit.api.errors.GitAPIException;
+import org.eclipse.jgit.lib.IndexDiff.StageState;
+import org.eclipse.jgit.lib.Repository;
+
+
+
+/**
+ * Simple snippet which shows how to list various types of uncommitted changes
+ * of a Git repository
+ *
+ * @author dominik.stadler at gmx.at
+ */
+public class ListUncommittedChanges {
+
+    public static void main(String[] args) throws IOException, GitAPIException {
+        try (Repository repository = CookbookHelper.openJGitCookbookRepository()) {
+            System.out.println("Listing uncommitted changes:");
+            try (Git git = new Git(repository)) {
+                Status status = git.status().call();
+                Set<String> conflicting = status.getConflicting();
+                for(String conflict : conflicting) {
+                    System.out.println("Conflicting: " + conflict);
+                }
+
+                Set<String> added = status.getAdded();
+                for(String add : added) {
+                    System.out.println("Added: " + add);
+                }
+
+                Set<String> changed = status.getChanged();
+                for(String change : changed) {
+                    System.out.println("Change: " + change);
+                }
+
+                Set<String> missing = status.getMissing();
+                for(String miss : missing) {
+                    System.out.println("Missing: " + miss);
+                }
+
+                Set<String> modified = status.getModified();
+                for(String modify : modified) {
+                    System.out.println("Modification: " + modify);
+                }
+
+                Set<String> removed = status.getRemoved();
+                for(String remove : removed) {
+                    System.out.println("Removed: " + remove);
+                }
+
+                Set<String> uncommittedChanges = status.getUncommittedChanges();
+                for(String uncommitted : uncommittedChanges) {
+                    System.out.println("Uncommitted: " + uncommitted);
+                }
+
+                Set<String> untracked = status.getUntracked();
+                for(String untrack : untracked) {
+                    System.out.println("Untracked: " + untrack);
+                }
+
+                Set<String> untrackedFolders = status.getUntrackedFolders();
+                for(String untrack : untrackedFolders) {
+                    System.out.println("Untracked Folder: " + untrack);
+                }
+
+                Map<String, StageState> conflictingStageState = status.getConflictingStageState();
+                for(Map.Entry<String, StageState> entry : conflictingStageState.entrySet()) {
+                    System.out.println("ConflictingState: " + entry);
+                }
+            }
+        }
+    }
+}
diff --git a/src/test/java/org/dstadler/jgit/porcelain/PorcelainTest.java b/src/test/java/org/dstadler/jgit/porcelain/PorcelainTest.java
index 609d21f..6df9bbc 100644
--- a/src/test/java/org/dstadler/jgit/porcelain/PorcelainTest.java
+++ b/src/test/java/org/dstadler/jgit/porcelain/PorcelainTest.java
@@ -37,0 +38 @@
+        ListUncommittedChanges.main(null);
Diff Between bce6e5917b0066a5839766eab914d4a4a19975f5 4bc05abb10b4496f671994067826901aa6325f57diff --git a/.gitignore b/.gitignore
index fd46575..33b28f5 100644
--- a/.gitignore
+++ b/.gitignore
@@ -6,0 +7 @@
+/build/
Diff Between 4bc05abb10b4496f671994067826901aa6325f57 216afe993cc8c493a8d0e67f1fb1ee41c0a16741Diff Between 216afe993cc8c493a8d0e67f1fb1ee41c0a16741 dc965736a1a31bad5655546dc22091457af8c484diff --git a/build.gradle b/build.gradle
index 081f52a..6c6f334 100644
--- a/build.gradle
+++ b/build.gradle
@@ -38 +38 @@
-	gradleVersion = '2.7'
+	gradleVersion = '2.8'
diff --git a/gradle/wrapper/gradle-wrapper.jar b/gradle/wrapper/gradle-wrapper.jar
index e8c6bf7..05ef575 100644
--- a/gradle/wrapper/gradle-wrapper.jar
+++ b/gradle/wrapper/gradle-wrapper.jar
Binary files differ
diff --git a/gradle/wrapper/gradle-wrapper.properties b/gradle/wrapper/gradle-wrapper.properties
index 8126aa4..8ed5010 100644
--- a/gradle/wrapper/gradle-wrapper.properties
+++ b/gradle/wrapper/gradle-wrapper.properties
@@ -1 +1 @@
-#Sun Sep 20 14:44:43 CEST 2015
+#Tue Oct 20 04:13:37 UTC 2015
@@ -6 +6 @@
-distributionUrl=https\://services.gradle.org/distributions/gradle-2.7-bin.zip
+distributionUrl=https\://services.gradle.org/distributions/gradle-2.8-bin.zip
diff --git a/gradlew b/gradlew
index 97fac78..9d82f78 100755
--- a/gradlew
+++ b/gradlew
@@ -59 +59 @@
-cd "`dirname \"$PRG\"`/" >&-
+cd "`dirname \"$PRG\"`/" >/dev/null
@@ -61 +61 @@
-cd "$SAVED" >&-
+cd "$SAVED" >/dev/null
diff --git a/gradlew.bat b/gradlew.bat
old mode 100755
new mode 100644
Diff Between dc965736a1a31bad5655546dc22091457af8c484 f37549b02d33486714d81c753a0bf2142eddba16diff --git a/src/main/java/org/dstadler/jgit/api/GetRefFromName.java b/src/main/java/org/dstadler/jgit/api/GetRefFromName.java
index eb9c509..c5de3c7 100644
--- a/src/main/java/org/dstadler/jgit/api/GetRefFromName.java
+++ b/src/main/java/org/dstadler/jgit/api/GetRefFromName.java
@@ -34 +34 @@
-            System.out.println("Ref of refs/heads/master: " + head);
+            System.out.println("Ref of refs/heads/master: " + head + ": " + head.getName() + " - " + head.getObjectId().getName());
diff --git a/src/main/java/org/dstadler/jgit/api/GetRevTreeFromObjectId.java b/src/main/java/org/dstadler/jgit/api/GetRevTreeFromObjectId.java
index 118b1a9..bf4b835 100644
--- a/src/main/java/org/dstadler/jgit/api/GetRevTreeFromObjectId.java
+++ b/src/main/java/org/dstadler/jgit/api/GetRevTreeFromObjectId.java
@@ -37 +37,2 @@
-    
+            System.out.println("Ref of HEAD: " + head + ": " + head.getName() + " - " + head.getObjectId().getName());
+
@@ -42 +43 @@
-        
+
@@ -46 +47 @@
-        
+
Diff Between f37549b02d33486714d81c753a0bf2142eddba16 be8850c9e379359f5c9133f23e1f361155aeba8bdiff --git a/README.md b/README.md
index a56ee15..f06d02d 100644
--- a/README.md
+++ b/README.md
@@ -3 +3 @@
-[![Build Status](https://buildhive.cloudbees.com/job/centic9/job/jgit-cookbook/badge/icon)](https://buildhive.cloudbees.com/job/centic9/job/jgit-cookbook/)
+[![Build Status](https://buildhive.cloudbees.com/job/centic9/job/jgit-cookbook/badge/icon)](https://buildhive.cloudbees.com/job/centic9/job/jgit-cookbook/) [![Gradle Status](https://gradleupdate.appspot.com/centic9/jgit-cookbook/status.svg?branch=master)](https://gradleupdate.appspot.com/centic9/jgit-cookbook/status)
@@ -108 +108 @@
-The following sources were used to build the snippets
+The following sources were used to build the snippets:
@@ -110 +110 @@
-* [JGit JavaDoc](http://download.eclipse.org/jgit/site/3.7.1.201504261725-r/apidocs/)
+* [JGit JavaDoc](http://download.eclipse.org/jgit/site/4.1.0.201509280440-r/apidocs/)
Diff Between be8850c9e379359f5c9133f23e1f361155aeba8b 83548c524a6f065db533dcdd2a7041e656fcd60bdiff --git a/src/main/java/org/dstadler/jgit/OpenRepository.java b/src/main/java/org/dstadler/jgit/OpenRepository.java
index 3c7c1b9..7d99d4b 100644
--- a/src/main/java/org/dstadler/jgit/OpenRepository.java
+++ b/src/main/java/org/dstadler/jgit/OpenRepository.java
@@ -44 +44 @@
-        Repository repository = builder.setGitDir(repoDir)
+        try (Repository repository = builder.setGitDir(repoDir)
@@ -47,9 +47,7 @@
-                .build();
-
-        System.out.println("Having repository: " + repository.getDirectory());
-
-        // the Ref holds an ObjectId for any type of object (tree, commit, blob, tree)
-        Ref head = repository.getRef("refs/heads/master");
-        System.out.println("Ref of refs/heads/master: " + head);
-
-        repository.close();
+                .build()) {
+            System.out.println("Having repository: " + repository.getDirectory());
+    
+            // the Ref holds an ObjectId for any type of object (tree, commit, blob, tree)
+            Ref head = repository.getRef("refs/heads/master");
+            System.out.println("Ref of refs/heads/master: " + head);
+        }
@@ -59 +57,12 @@
-        Repository repository = CookbookHelper.createNewRepository();
+        try (Repository repository = CookbookHelper.createNewRepository()) {
+            System.out.println("Temporary repository at " + repository.getDirectory());
+    
+            // create the file
+            File myfile = new File(repository.getDirectory().getParent(), "testfile");
+            myfile.createNewFile();
+    
+            // run the add-call
+            try (Git git = new Git(repository)) {
+                git.add()
+                        .addFilepattern("testfile")
+                        .call();
@@ -61,16 +69,0 @@
-        System.out.println("Temporary repository at " + repository.getDirectory());
-
-        // create the file
-        File myfile = new File(repository.getDirectory().getParent(), "testfile");
-        myfile.createNewFile();
-
-        // run the add-call
-        new Git(repository).add()
-                .addFilepattern("testfile")
-                .call();
-
-
-        // and then commit the changes
-        new Git(repository).commit()
-                .setMessage("Added testfile")
-                .call();
@@ -78,7 +71,12 @@
-        System.out.println("Added file " + myfile + " to repository at " + repository.getDirectory());
-        
-        File dir = repository.getDirectory();
-        
-        repository.close();
-        
-        return dir;
+                // and then commit the changes
+                git.commit()
+                        .setMessage("Added testfile")
+                        .call();
+            }
+            
+            System.out.println("Added file " + myfile + " to repository at " + repository.getDirectory());
+            
+            File dir = repository.getDirectory();
+            
+            return dir;
+        }
diff --git a/src/main/java/org/dstadler/jgit/api/CheckMergeStatusOfCommit.java b/src/main/java/org/dstadler/jgit/api/CheckMergeStatusOfCommit.java
index c3686c9..5550c00 100644
--- a/src/main/java/org/dstadler/jgit/api/CheckMergeStatusOfCommit.java
+++ b/src/main/java/org/dstadler/jgit/api/CheckMergeStatusOfCommit.java
@@ -36,4 +36,14 @@
-        Repository repository = CookbookHelper.openJGitCookbookRepository();
-
-        RevWalk revWalk = new RevWalk( repository );
-        RevCommit masterHead = revWalk.parseCommit( repository.resolve( "refs/heads/master" ));
+        try (Repository repository = CookbookHelper.openJGitCookbookRepository()) {
+            try (RevWalk revWalk = new RevWalk( repository )) {
+                RevCommit masterHead = revWalk.parseCommit( repository.resolve( "refs/heads/master" ));
+                
+                // first a commit that was merged
+                ObjectId id = repository.resolve("05d18a76875716fbdbd2c200091b40caa06c713d");
+                System.out.println("Had id: " + id);
+                RevCommit otherHead = revWalk.parseCommit( id );
+                
+                if( revWalk.isMergedInto( otherHead, masterHead ) ) {
+                    System.out.println("Commit " + otherHead + " is merged into master");
+                } else {
+                    System.out.println("Commit " + otherHead + " is NOT merged into master");
+                }
@@ -41,4 +51,11 @@
-        // first a commit that was merged
-        ObjectId id = repository.resolve("05d18a76875716fbdbd2c200091b40caa06c713d");
-        System.out.println("Had id: " + id);
-        RevCommit otherHead = revWalk.parseCommit( id );
+                
+                // then a commit on a test-branch which is not merged
+                id = repository.resolve("ae70dd60a7423eb07893d833600f096617f450d2");
+                System.out.println("Had id: " + id);
+                otherHead = revWalk.parseCommit( id );
+                
+                if( revWalk.isMergedInto( otherHead, masterHead ) ) {
+                    System.out.println("Commit " + otherHead + " is merged into master");
+                } else {
+                    System.out.println("Commit " + otherHead + " is NOT merged into master");
+                }
@@ -46,4 +63,13 @@
-        if( revWalk.isMergedInto( otherHead, masterHead ) ) {
-            System.out.println("Commit " + otherHead + " is merged into master");
-        } else {
-            System.out.println("Commit " + otherHead + " is NOT merged into master");
+                // and finally master-HEAD itself
+                id = repository.resolve("HEAD");
+                System.out.println("Had id: " + id);
+                otherHead = revWalk.parseCommit( id );
+                
+                if( revWalk.isMergedInto( otherHead, masterHead ) ) {
+                    System.out.println("Commit " + otherHead + " is merged into master");
+                } else {
+                    System.out.println("Commit " + otherHead + " is NOT merged into master");
+                }
+        
+                revWalk.dispose();
+            }
@@ -51,28 +76,0 @@
-
-        
-        // then a commit on a test-branch which is not merged
-        id = repository.resolve("ae70dd60a7423eb07893d833600f096617f450d2");
-        System.out.println("Had id: " + id);
-        otherHead = revWalk.parseCommit( id );
-        
-        if( revWalk.isMergedInto( otherHead, masterHead ) ) {
-            System.out.println("Commit " + otherHead + " is merged into master");
-        } else {
-            System.out.println("Commit " + otherHead + " is NOT merged into master");
-        }
-
-        // and finally master-HEAD itself
-        id = repository.resolve("HEAD");
-        System.out.println("Had id: " + id);
-        otherHead = revWalk.parseCommit( id );
-        
-        if( revWalk.isMergedInto( otherHead, masterHead ) ) {
-            System.out.println("Commit " + otherHead + " is merged into master");
-        } else {
-            System.out.println("Commit " + otherHead + " is NOT merged into master");
-        }
-
-        
-        revWalk.dispose();
-
-        repository.close();
diff --git a/src/main/java/org/dstadler/jgit/api/GetCommitMessage.java b/src/main/java/org/dstadler/jgit/api/GetCommitMessage.java
index 4a526e9..bb06ca7 100644
--- a/src/main/java/org/dstadler/jgit/api/GetCommitMessage.java
+++ b/src/main/java/org/dstadler/jgit/api/GetCommitMessage.java
@@ -33,14 +33,13 @@
-        Repository repository = CookbookHelper.openJGitCookbookRepository();
-
-        Ref head = repository.getRef("refs/heads/master");
-        System.out.println("Found head: " + head);
-
-        // a RevWalk allows to walk over commits based on some filtering that is defined
-        RevWalk walk = new RevWalk(repository);
-        RevCommit commit = walk.parseCommit(head.getObjectId());
-        
-        System.out.println("\nCommit-Message: " + commit.getFullMessage());
-        
-        walk.dispose();
-
-        repository.close();
+        try (Repository repository = CookbookHelper.openJGitCookbookRepository()) {
+            Ref head = repository.getRef("refs/heads/master");
+            System.out.println("Found head: " + head);
+    
+            // a RevWalk allows to walk over commits based on some filtering that is defined
+            try (RevWalk walk = new RevWalk(repository)) {
+                RevCommit commit = walk.parseCommit(head.getObjectId());
+                
+                System.out.println("\nCommit-Message: " + commit.getFullMessage());
+                
+                walk.dispose();
+            }
+        }
diff --git a/src/main/java/org/dstadler/jgit/api/GetFileAttributes.java b/src/main/java/org/dstadler/jgit/api/GetFileAttributes.java
index f9afc9d..5c0e1ee 100755
--- a/src/main/java/org/dstadler/jgit/api/GetFileAttributes.java
+++ b/src/main/java/org/dstadler/jgit/api/GetFileAttributes.java
@@ -46,12 +46,10 @@
-        Repository repository = CookbookHelper.openJGitCookbookRepository();
-
-        // find the Tree for current HEAD
-        RevTree tree = getTree(repository);
-
-        printFile(repository, tree);
-
-        printDirectory(repository, tree);
-
-        // there is also FileMode.SYMLINK for symbolic links, but this is not handled here yet
-
-        repository.close();
+        try (Repository repository = CookbookHelper.openJGitCookbookRepository()) {
+            // find the Tree for current HEAD
+            RevTree tree = getTree(repository);
+    
+            printFile(repository, tree);
+    
+            printDirectory(repository, tree);
+    
+            // there is also FileMode.SYMLINK for symbolic links, but this is not handled here yet
+        }
@@ -65,9 +63,10 @@
-        RevWalk revWalk = new RevWalk(repository);
-        RevCommit commit = revWalk.parseCommit(lastCommitId);
-
-        System.out.println("Time of commit (seconds since epoch): " + commit.getCommitTime());
-
-        // and using commit's tree find the path
-        RevTree tree = commit.getTree();
-        System.out.println("Having tree: " + tree);
-        return tree;
+        try (RevWalk revWalk = new RevWalk(repository)) {
+            RevCommit commit = revWalk.parseCommit(lastCommitId);
+    
+            System.out.println("Time of commit (seconds since epoch): " + commit.getCommitTime());
+    
+            // and using commit's tree find the path
+            RevTree tree = commit.getTree();
+            System.out.println("Having tree: " + tree);
+            return tree;
+        }
@@ -79,6 +78,14 @@
-        TreeWalk treeWalk = new TreeWalk(repository);
-        treeWalk.addTree(tree);
-        treeWalk.setRecursive(false);
-        treeWalk.setFilter(PathFilter.create("README.md"));
-        if (!treeWalk.next()) {
-            throw new IllegalStateException("Did not find expected file 'README.md'");
+        try (TreeWalk treeWalk = new TreeWalk(repository)) {
+            treeWalk.addTree(tree);
+            treeWalk.setRecursive(false);
+            treeWalk.setFilter(PathFilter.create("README.md"));
+            if (!treeWalk.next()) {
+                throw new IllegalStateException("Did not find expected file 'README.md'");
+            }
+    
+            // FileMode specifies the type of file, FileMode.REGULAR_FILE for normal file, FileMode.EXECUTABLE_FILE for executable bit
+    // set
+            FileMode fileMode = treeWalk.getFileMode(0);
+            ObjectLoader loader = repository.open(treeWalk.getObjectId(0));
+            System.out.println("README.md: " + getFileMode(fileMode) + ", type: " + fileMode.getObjectType() + ", mode: " + fileMode +
+                    " size: " + loader.getSize());
@@ -86,7 +92,0 @@
-
-        // FileMode specifies the type of file, FileMode.REGULAR_FILE for normal file, FileMode.EXECUTABLE_FILE for executable bit
-// set
-        FileMode fileMode = treeWalk.getFileMode(0);
-        ObjectLoader loader = repository.open(treeWalk.getObjectId(0));
-        System.out.println("README.md: " + getFileMode(fileMode) + ", type: " + fileMode.getObjectType() + ", mode: " + fileMode +
-                " size: " + loader.getSize());
@@ -98,6 +98,11 @@
-        TreeWalk treeWalk = new TreeWalk(repository);
-        treeWalk.addTree(tree);
-        treeWalk.setRecursive(false);
-        treeWalk.setFilter(PathFilter.create("src"));
-        if (!treeWalk.next()) {
-            throw new IllegalStateException("Did not find expected file 'README.md'");
+        try (TreeWalk treeWalk = new TreeWalk(repository)) {
+            treeWalk.addTree(tree);
+            treeWalk.setRecursive(false);
+            treeWalk.setFilter(PathFilter.create("src"));
+            if (!treeWalk.next()) {
+                throw new IllegalStateException("Did not find expected file 'README.md'");
+            }
+    
+            // FileMode now indicates that this is a directory, i.e. FileMode.TREE.equals(fileMode) holds true
+            FileMode fileMode = treeWalk.getFileMode(0);
+            System.out.println("src: " + getFileMode(fileMode) + ", type: " + fileMode.getObjectType() + ", mode: " + fileMode);
@@ -105,4 +109,0 @@
-
-        // FileMode now indicates that this is a directory, i.e. FileMode.TREE.equals(fileMode) holds true
-        FileMode fileMode = treeWalk.getFileMode(0);
-        System.out.println("src: " + getFileMode(fileMode) + ", type: " + fileMode.getObjectType() + ", mode: " + fileMode);
diff --git a/src/main/java/org/dstadler/jgit/api/GetRefFromName.java b/src/main/java/org/dstadler/jgit/api/GetRefFromName.java
index befddf6..eb9c509 100644
--- a/src/main/java/org/dstadler/jgit/api/GetRefFromName.java
+++ b/src/main/java/org/dstadler/jgit/api/GetRefFromName.java
@@ -31,7 +31,5 @@
-        Repository repository = CookbookHelper.openJGitCookbookRepository();
-
-        // the Ref holds an ObjectId for any type of object (tree, commit, blob, tree)
-        Ref head = repository.getRef("refs/heads/master");
-        System.out.println("Ref of refs/heads/master: " + head);
-
-        repository.close();
+        try (Repository repository = CookbookHelper.openJGitCookbookRepository()) {
+            // the Ref holds an ObjectId for any type of object (tree, commit, blob, tree)
+            Ref head = repository.getRef("refs/heads/master");
+            System.out.println("Ref of refs/heads/master: " + head);
+        }
diff --git a/src/main/java/org/dstadler/jgit/api/GetRevCommitFromObjectId.java b/src/main/java/org/dstadler/jgit/api/GetRevCommitFromObjectId.java
index 8d5dfb7..240f00a 100644
--- a/src/main/java/org/dstadler/jgit/api/GetRevCommitFromObjectId.java
+++ b/src/main/java/org/dstadler/jgit/api/GetRevCommitFromObjectId.java
@@ -34,19 +34,18 @@
-        Repository repository = CookbookHelper.openJGitCookbookRepository();
-
-        Ref head = repository.getRef("refs/heads/master");
-        System.out.println("Found head: " + head);
-
-        // a RevWalk allows to walk over commits based on some filtering that is defined
-        RevWalk walk = new RevWalk(repository);
-        RevCommit commit = walk.parseCommit(head.getObjectId());
-        System.out.println("Found Commit: " + commit);
-
-        // You can also get the commit for an (abbreviated) SHA
-        walk.reset();
-        ObjectId id = repository.resolve("38d51408bd");
-        RevCommit commitAgain = walk.parseCommit(id);
-        System.out.println("Found Commit again: " + commitAgain);
-
-        walk.dispose();
-
-        repository.close();
+        try (Repository repository = CookbookHelper.openJGitCookbookRepository()) {
+            Ref head = repository.getRef("refs/heads/master");
+            System.out.println("Found head: " + head);
+    
+            // a RevWalk allows to walk over commits based on some filtering that is defined
+            try (RevWalk walk = new RevWalk(repository)) {
+                RevCommit commit = walk.parseCommit(head.getObjectId());
+                System.out.println("Found Commit: " + commit);
+        
+                // You can also get the commit for an (abbreviated) SHA
+                walk.reset();
+                ObjectId id = repository.resolve("38d51408bd");
+                RevCommit commitAgain = walk.parseCommit(id);
+                System.out.println("Found Commit again: " + commitAgain);
+        
+                walk.dispose();
+            }
+        }
diff --git a/src/main/java/org/dstadler/jgit/api/GetRevTreeFromObjectId.java b/src/main/java/org/dstadler/jgit/api/GetRevTreeFromObjectId.java
index b5547cb..118b1a9 100644
--- a/src/main/java/org/dstadler/jgit/api/GetRevTreeFromObjectId.java
+++ b/src/main/java/org/dstadler/jgit/api/GetRevTreeFromObjectId.java
@@ -34,18 +34,16 @@
-        Repository repository = CookbookHelper.openJGitCookbookRepository();
-
-        // See e.g. GetRevCommitFromObjectId for how to use a SHA-1 directly
-        Ref head = repository.getRef("HEAD");
-
-        // a RevWalk allows to walk over commits based on some filtering that is defined
-        RevWalk walk = new RevWalk(repository);
-
-        RevCommit commit = walk.parseCommit(head.getObjectId());
-        System.out.println("Commit: " + commit);
-
-        // a commit points to a tree
-        RevTree tree = walk.parseTree(commit.getTree().getId());
-        System.out.println("Found Tree: " + tree);
-
-        walk.dispose();
-
-        repository.close();
+        try (Repository repository = CookbookHelper.openJGitCookbookRepository()) {
+            // See e.g. GetRevCommitFromObjectId for how to use a SHA-1 directly
+            Ref head = repository.getRef("HEAD");
+    
+            // a RevWalk allows to walk over commits based on some filtering that is defined
+            try (RevWalk walk = new RevWalk(repository)) {
+                RevCommit commit = walk.parseCommit(head.getObjectId());
+                System.out.println("Commit: " + commit);
+        
+                // a commit points to a tree
+                RevTree tree = walk.parseTree(commit.getTree().getId());
+                System.out.println("Found Tree: " + tree);
+        
+                walk.dispose();
+            }
+        }
diff --git a/src/main/java/org/dstadler/jgit/api/PrintRemotes.java b/src/main/java/org/dstadler/jgit/api/PrintRemotes.java
index c333d78..831ee4b 100755
--- a/src/main/java/org/dstadler/jgit/api/PrintRemotes.java
+++ b/src/main/java/org/dstadler/jgit/api/PrintRemotes.java
@@ -32,8 +32,8 @@
-        Repository repository = CookbookHelper.openJGitCookbookRepository();
-
-        Config storedConfig = repository.getConfig();
-        Set<String> remotes = storedConfig.getSubsections("remote");
-
-        for (String remoteName : remotes) {
-            String url = storedConfig.getString("remote", remoteName, "url");
-            System.out.println(remoteName + " " + url);
+        try (Repository repository = CookbookHelper.openJGitCookbookRepository()) {
+            Config storedConfig = repository.getConfig();
+            Set<String> remotes = storedConfig.getSubsections("remote");
+    
+            for (String remoteName : remotes) {
+                String url = storedConfig.getString("remote", remoteName, "url");
+                System.out.println(remoteName + " " + url);
+            }
@@ -41,2 +40,0 @@
-
-        repository.close();
diff --git a/src/main/java/org/dstadler/jgit/api/ReadBlobContents.java b/src/main/java/org/dstadler/jgit/api/ReadBlobContents.java
index c422b4a..e30863b 100644
--- a/src/main/java/org/dstadler/jgit/api/ReadBlobContents.java
+++ b/src/main/java/org/dstadler/jgit/api/ReadBlobContents.java
@@ -35,23 +35,22 @@
-        Repository repository = CookbookHelper.openJGitCookbookRepository();
-
-        // the Ref holds an ObjectId for any type of object (tree, commit, blob, tree)
-        Ref head = repository.getRef("refs/heads/master");
-        System.out.println("Ref of refs/heads/master: " + head);
-
-        System.out.println("\nPrint contents of head of master branch, i.e. the latest commit information");
-        ObjectLoader loader = repository.open(head.getObjectId());
-        loader.copyTo(System.out);
-
-        System.out.println("\nPrint contents of tree of head of master branch, i.e. the latest binary tree information");
-
-        // a commit points to a tree
-        RevWalk walk = new RevWalk(repository);
-        RevCommit commit = walk.parseCommit(head.getObjectId());
-        RevTree tree = walk.parseTree(commit.getTree().getId());
-        System.out.println("Found Tree: " + tree);
-        loader = repository.open(tree.getId());
-        loader.copyTo(System.out);
-
-        walk.dispose();
-
-        repository.close();
+        try (Repository repository = CookbookHelper.openJGitCookbookRepository()) {
+            // the Ref holds an ObjectId for any type of object (tree, commit, blob, tree)
+            Ref head = repository.getRef("refs/heads/master");
+            System.out.println("Ref of refs/heads/master: " + head);
+    
+            System.out.println("\nPrint contents of head of master branch, i.e. the latest commit information");
+            ObjectLoader loader = repository.open(head.getObjectId());
+            loader.copyTo(System.out);
+    
+            System.out.println("\nPrint contents of tree of head of master branch, i.e. the latest binary tree information");
+    
+            // a commit points to a tree
+            try (RevWalk walk = new RevWalk(repository)) {
+                RevCommit commit = walk.parseCommit(head.getObjectId());
+                RevTree tree = walk.parseTree(commit.getTree().getId());
+                System.out.println("Found Tree: " + tree);
+                loader = repository.open(tree.getId());
+                loader.copyTo(System.out);
+        
+                walk.dispose();
+            }
+        }
diff --git a/src/main/java/org/dstadler/jgit/api/ReadFileFromCommit.java b/src/main/java/org/dstadler/jgit/api/ReadFileFromCommit.java
index 5275c09..e38e0c1 100644
--- a/src/main/java/org/dstadler/jgit/api/ReadFileFromCommit.java
+++ b/src/main/java/org/dstadler/jgit/api/ReadFileFromCommit.java
@@ -41,19 +41,29 @@
-        Repository repository = CookbookHelper.openJGitCookbookRepository();
-
-        // find the HEAD
-        ObjectId lastCommitId = repository.resolve(Constants.HEAD);
-
-        // a RevWalk allows to walk over commits based on some filtering that is defined
-        RevWalk revWalk = new RevWalk(repository);
-        RevCommit commit = revWalk.parseCommit(lastCommitId);
-        // and using commit's tree find the path
-        RevTree tree = commit.getTree();
-        System.out.println("Having tree: " + tree);
-
-        // now try to find a specific file
-        TreeWalk treeWalk = new TreeWalk(repository);
-        treeWalk.addTree(tree);
-        treeWalk.setRecursive(true);
-        treeWalk.setFilter(PathFilter.create("README.md"));
-        if (!treeWalk.next()) {
-            throw new IllegalStateException("Did not find expected file 'README.md'");
+        try (Repository repository = CookbookHelper.openJGitCookbookRepository()) {
+            // find the HEAD
+            ObjectId lastCommitId = repository.resolve(Constants.HEAD);
+    
+            // a RevWalk allows to walk over commits based on some filtering that is defined
+            try (RevWalk revWalk = new RevWalk(repository)) {
+                RevCommit commit = revWalk.parseCommit(lastCommitId);
+                // and using commit's tree find the path
+                RevTree tree = commit.getTree();
+                System.out.println("Having tree: " + tree);
+        
+                // now try to find a specific file
+                try (TreeWalk treeWalk = new TreeWalk(repository)) {
+                    treeWalk.addTree(tree);
+                    treeWalk.setRecursive(true);
+                    treeWalk.setFilter(PathFilter.create("README.md"));
+                    if (!treeWalk.next()) {
+                        throw new IllegalStateException("Did not find expected file 'README.md'");
+                    }
+            
+                    ObjectId objectId = treeWalk.getObjectId(0);
+                    ObjectLoader loader = repository.open(objectId);
+            
+                    // and then one can the loader to read the file
+                    loader.copyTo(System.out);
+                }
+        
+                revWalk.dispose();
+            }
@@ -61,10 +70,0 @@
-
-        ObjectId objectId = treeWalk.getObjectId(0);
-        ObjectLoader loader = repository.open(objectId);
-
-        // and then one can the loader to read the file
-        loader.copyTo(System.out);
-
-        revWalk.dispose();
-
-        repository.close();
diff --git a/src/main/java/org/dstadler/jgit/porcelain/AddAndListNoteOfCommit.java b/src/main/java/org/dstadler/jgit/porcelain/AddAndListNoteOfCommit.java
index 3873974..043510a 100755
--- a/src/main/java/org/dstadler/jgit/porcelain/AddAndListNoteOfCommit.java
+++ b/src/main/java/org/dstadler/jgit/porcelain/AddAndListNoteOfCommit.java
@@ -42,25 +42,30 @@
-		Repository repository = CookbookHelper.openJGitCookbookRepository();
-
-		Ref head = repository.getRef("refs/heads/master");
-		System.out.println("Found head: " + head);
-
-        RevWalk walk = new RevWalk(repository);
-        RevCommit commit = walk.parseCommit(head.getObjectId());
-        System.out.println("Found Commit: " + commit);
-
-        new Git(repository).notesAdd().setMessage("some note message").setObjectId(commit).call();
-        System.out.println("Added Note to commit " + commit);
-
-		List<Note> call = new Git(repository).notesList().call();
-		System.out.println("Listing " + call.size() + " notes");
-		for(Note note : call) {
-			// check if we found the note for this commit
-			if(!note.getName().equals(head.getObjectId().getName())) {
-				System.out.println("Note " + note + " did not match commit " + head);
-				continue;
-			}
-			System.out.println("Found note: " + note + " for commit " + head);
-
-			// displaying the contents of the note is done via a simple blob-read
-			ObjectLoader loader = repository.open(note.getData());
-			loader.copyTo(System.out);
+		try (Repository repository = CookbookHelper.openJGitCookbookRepository()) {
+    		Ref head = repository.getRef("refs/heads/master");
+    		System.out.println("Found head: " + head);
+    
+            try (RevWalk walk = new RevWalk(repository)) {
+                RevCommit commit = walk.parseCommit(head.getObjectId());
+                System.out.println("Found Commit: " + commit);
+        
+                try (Git git = new Git(repository)) {
+                    git.notesAdd().setMessage("some note message").setObjectId(commit).call();
+                    System.out.println("Added Note to commit " + commit);
+            
+            		List<Note> call = git.notesList().call();
+            		System.out.println("Listing " + call.size() + " notes");
+            		for(Note note : call) {
+            			// check if we found the note for this commit
+            			if(!note.getName().equals(head.getObjectId().getName())) {
+            				System.out.println("Note " + note + " did not match commit " + head);
+            				continue;
+            			}
+            			System.out.println("Found note: " + note + " for commit " + head);
+            
+            			// displaying the contents of the note is done via a simple blob-read
+            			ObjectLoader loader = repository.open(note.getData());
+            			loader.copyTo(System.out);
+            		}
+                }
+        
+                walk.dispose();
+            }
@@ -68,4 +72,0 @@
-
-        walk.dispose();
-
-		repository.close();
diff --git a/src/main/java/org/dstadler/jgit/porcelain/AddFile.java b/src/main/java/org/dstadler/jgit/porcelain/AddFile.java
index c4ccddb..17960ef 100644
--- a/src/main/java/org/dstadler/jgit/porcelain/AddFile.java
+++ b/src/main/java/org/dstadler/jgit/porcelain/AddFile.java
@@ -38,15 +38,14 @@
-        Repository repository = CookbookHelper.createNewRepository();
-        Git git = new Git(repository);
-
-        // create the file
-        File myfile = new File(repository.getDirectory().getParent(), "testfile");
-        myfile.createNewFile();
-
-        // run the add-call
-        git.add()
-                .addFilepattern("testfile")
-                .call();
-
-        System.out.println("Added file " + myfile + " to repository at " + repository.getDirectory());
-
-        repository.close();
+        try (Repository repository = CookbookHelper.createNewRepository()) {
+            try (Git git = new Git(repository)) {
+                // create the file
+                File myfile = new File(repository.getDirectory().getParent(), "testfile");
+                myfile.createNewFile();
+        
+                // run the add-call
+                git.add()
+                        .addFilepattern("testfile")
+                        .call();
+        
+                System.out.println("Added file " + myfile + " to repository at " + repository.getDirectory());
+            }
+        }
diff --git a/src/main/java/org/dstadler/jgit/porcelain/CleanUntrackedFiles.java b/src/main/java/org/dstadler/jgit/porcelain/CleanUntrackedFiles.java
index fef582f..1cca979 100755
--- a/src/main/java/org/dstadler/jgit/porcelain/CleanUntrackedFiles.java
+++ b/src/main/java/org/dstadler/jgit/porcelain/CleanUntrackedFiles.java
@@ -38 +38,17 @@
-        Repository repository = CookbookHelper.createNewRepository();
+        try (Repository repository = CookbookHelper.createNewRepository()) {
+            System.out.println("Repository at " + repository.getWorkTree());
+    
+            File untrackedFile = File.createTempFile("untracked", ".txt", repository.getWorkTree());
+            File untrackedDir = File.createTempFile("untrackedDir", "", repository.getWorkTree());
+            untrackedDir.delete();
+            untrackedDir.mkdirs();
+    
+            System.out.println("Untracked exists: " + untrackedFile.exists() + " Dir: " + untrackedDir.exists() + "/" + untrackedDir.isDirectory());
+    
+            try (Git git = new Git(repository)) {
+                Set<String> removed = git.clean().setCleanDirectories(true).call();
+                for(String item : removed) {
+                	System.out.println("Removed: " + item);
+                }
+                System.out.println("Removed " + removed.size() + " items");
+            }
@@ -40,12 +56 @@
-        System.out.println("Repository at " + repository.getWorkTree());
-
-        File untrackedFile = File.createTempFile("untracked", ".txt", repository.getWorkTree());
-        File untrackedDir = File.createTempFile("untrackedDir", "", repository.getWorkTree());
-        untrackedDir.delete();
-        untrackedDir.mkdirs();
-
-        System.out.println("Untracked exists: " + untrackedFile.exists() + " Dir: " + untrackedDir.exists() + "/" + untrackedDir.isDirectory());
-
-        Set<String> removed = new Git(repository).clean().setCleanDirectories(true).call();
-        for(String item : removed) {
-        	System.out.println("Removed: " + item);
+            System.out.println("Untracked after: " + untrackedFile.exists() + " Dir: " + untrackedDir.exists() + "/" + untrackedDir.isDirectory());
@@ -53,5 +57,0 @@
-        System.out.println("Removed " + removed.size() + " items");
-
-        System.out.println("Untracked after: " + untrackedFile.exists() + " Dir: " + untrackedDir.exists() + "/" + untrackedDir.isDirectory());
-
-        repository.close();
diff --git a/src/main/java/org/dstadler/jgit/porcelain/CollectGarbage.java b/src/main/java/org/dstadler/jgit/porcelain/CollectGarbage.java
index eb1c10c..b5d5a31 100644
--- a/src/main/java/org/dstadler/jgit/porcelain/CollectGarbage.java
+++ b/src/main/java/org/dstadler/jgit/porcelain/CollectGarbage.java
@@ -39,5 +39,7 @@
-        Repository repository = CookbookHelper.openJGitCookbookRepository();
-
-        Properties ret = new Git(repository).gc().call();
-        for(Map.Entry<Object, Object> entry : ret.entrySet()) {
-            System.out.println("Ret: " + entry.getKey() + ": " + entry.getValue());
+        try (Repository repository = CookbookHelper.openJGitCookbookRepository()) {
+            try (Git git = new Git(repository)) {
+                Properties ret = git.gc().call();
+                for(Map.Entry<Object, Object> entry : ret.entrySet()) {
+                    System.out.println("Ret: " + entry.getKey() + ": " + entry.getValue());
+                }
+            }
@@ -45,2 +46,0 @@
-
-        repository.close();
diff --git a/src/main/java/org/dstadler/jgit/porcelain/CommitAll.java b/src/main/java/org/dstadler/jgit/porcelain/CommitAll.java
index 7c84129..3b1466b 100755
--- a/src/main/java/org/dstadler/jgit/porcelain/CommitAll.java
+++ b/src/main/java/org/dstadler/jgit/porcelain/CommitAll.java
@@ -22,16 +22,15 @@
-        Repository repository = CookbookHelper.createNewRepository();
-        Git git = new Git(repository);
-
-        // create the file
-        File myfile = new File(repository.getDirectory().getParent(), "testfile");
-        myfile.createNewFile();
-
-        // and then commit the changes
-        git.commit()
-        		.setAll(true)
-                .setMessage("Commit all")
-                .call();
-
-        System.out.println("Committed all changes to repository at " + repository.getDirectory());
-
-        repository.close();
+        try (Repository repository = CookbookHelper.createNewRepository()) {
+            try (Git git = new Git(repository)) {
+                // create the file
+                File myfile = new File(repository.getDirectory().getParent(), "testfile");
+                myfile.createNewFile();
+        
+                // and then commit the changes
+                git.commit()
+                		.setAll(true)
+                        .setMessage("Commit all")
+                        .call();
+        
+                System.out.println("Committed all changes to repository at " + repository.getDirectory());
+            }
+        }
diff --git a/src/main/java/org/dstadler/jgit/porcelain/CommitFile.java b/src/main/java/org/dstadler/jgit/porcelain/CommitFile.java
index 9ab7f1b..4904ca5 100644
--- a/src/main/java/org/dstadler/jgit/porcelain/CommitFile.java
+++ b/src/main/java/org/dstadler/jgit/porcelain/CommitFile.java
@@ -38,20 +38,19 @@
-        Repository repository = CookbookHelper.createNewRepository();
-        Git git = new Git(repository);
-
-        // create the file
-        File myfile = new File(repository.getDirectory().getParent(), "testfile");
-        myfile.createNewFile();
-
-        // run the add
-        git.add()
-                .addFilepattern("testfile")
-                .call();
-
-        // and then commit the changes
-        git.commit()
-                .setMessage("Added testfile")
-                .call();
-
-        System.out.println("Committed file " + myfile + " to repository at " + repository.getDirectory());
-
-        repository.close();
+        try (Repository repository = CookbookHelper.createNewRepository()) {
+            try (Git git = new Git(repository)) {
+                // create the file
+                File myfile = new File(repository.getDirectory().getParent(), "testfile");
+                myfile.createNewFile();
+        
+                // run the add
+                git.add()
+                        .addFilepattern("testfile")
+                        .call();
+        
+                // and then commit the changes
+                git.commit()
+                        .setMessage("Added testfile")
+                        .call();
+        
+                System.out.println("Committed file " + myfile + " to repository at " + repository.getDirectory());
+            }
+        }
diff --git a/src/main/java/org/dstadler/jgit/porcelain/CreateAndDeleteBranch.java b/src/main/java/org/dstadler/jgit/porcelain/CreateAndDeleteBranch.java
index dd0a132..ee877bb 100755
--- a/src/main/java/org/dstadler/jgit/porcelain/CreateAndDeleteBranch.java
+++ b/src/main/java/org/dstadler/jgit/porcelain/CreateAndDeleteBranch.java
@@ -39,18 +39,21 @@
-        Repository repository = CookbookHelper.openJGitCookbookRepository();
-        Git git = new Git(repository);
-
-        List<Ref> call = new Git(repository).branchList().call();
-        for (Ref ref : call) {
-            System.out.println("Branch-Before: " + ref + " " + ref.getName() + " " + ref.getObjectId().getName());
-        }
-
-        // make sure the branch is not there
-        List<Ref> refs = git.branchList().call();
-        for(Ref ref : refs) {
-            System.out.println("Had branch: " + ref.getName());
-            if(ref.getName().equals("refs/heads/testbranch")) {
-                System.out.println("Removing branch before");
-                git.branchDelete()
-                .setBranchNames("testbranch")
-                .setForce(true)
-                .call();
+        try (Repository repository = CookbookHelper.openJGitCookbookRepository()) {
+            try (Git git = new Git(repository)) {
+                List<Ref> call = git.branchList().call();
+                for (Ref ref : call) {
+                    System.out.println("Branch-Before: " + ref + " " + ref.getName() + " " + ref.getObjectId().getName());
+                }
+        
+                // make sure the branch is not there
+                List<Ref> refs = git.branchList().call();
+                for(Ref ref : refs) {
+                    System.out.println("Had branch: " + ref.getName());
+                    if(ref.getName().equals("refs/heads/testbranch")) {
+                        System.out.println("Removing branch before");
+                        git.branchDelete()
+                        .setBranchNames("testbranch")
+                        .setForce(true)
+                        .call();
+                        
+                        break;
+                    }
+                }
@@ -58 +61,19 @@
-                break;
+                // run the add-call
+                git.branchCreate()
+                        .setName("testbranch")
+                        .call();
+        
+                call = git.branchList().call();
+                for (Ref ref : call) {
+                    System.out.println("Branch-Created: " + ref + " " + ref.getName() + " " + ref.getObjectId().getName());
+                }
+        
+                // run the delete-call
+                git.branchDelete()
+                        .setBranchNames("testbranch")
+                        .call();
+        
+                call = git.branchList().call();
+                for (Ref ref : call) {
+                    System.out.println("Branch-After: " + ref + " " + ref.getName() + " " + ref.getObjectId().getName());
+                }
@@ -61,22 +81,0 @@
-        
-        // run the add-call
-        git.branchCreate()
-                .setName("testbranch")
-                .call();
-
-        call = new Git(repository).branchList().call();
-        for (Ref ref : call) {
-            System.out.println("Branch-Created: " + ref + " " + ref.getName() + " " + ref.getObjectId().getName());
-        }
-
-        // run the delete-call
-        git.branchDelete()
-                .setBranchNames("testbranch")
-                .call();
-
-        call = new Git(repository).branchList().call();
-        for (Ref ref : call) {
-            System.out.println("Branch-After: " + ref + " " + ref.getName() + " " + ref.getObjectId().getName());
-        }
-
-        repository.close();
diff --git a/src/main/java/org/dstadler/jgit/porcelain/CreateAndDeleteTag.java b/src/main/java/org/dstadler/jgit/porcelain/CreateAndDeleteTag.java
index f83f2de..5465385 100755
--- a/src/main/java/org/dstadler/jgit/porcelain/CreateAndDeleteTag.java
+++ b/src/main/java/org/dstadler/jgit/porcelain/CreateAndDeleteTag.java
@@ -41,33 +41,33 @@
-        Repository repository = CookbookHelper.openJGitCookbookRepository();
-        Git git = new Git(repository);
-
-        // remove the tag before creating it
-        git.tagDelete().setTags("tag_for_testing").call();
-
-        // set it on the current HEAD
-        Ref tag = git.tag().setName("tag_for_testing").call();
-        System.out.println("Created/moved tag " + tag + " to repository at " + repository.getDirectory());
-
-        // remove the tag again
-        git.tagDelete().setTags("tag_for_testing").call();
-
-        // read some other commit and set the tag on it
-        ObjectId id = repository.resolve("HEAD^");
-        RevWalk walk = new RevWalk(repository);
-        RevCommit commit = walk.parseCommit(id);
-        tag = git.tag().setObjectId(commit).setName("tag_for_testing").call();
-        System.out.println("Created/moved tag " + tag + " to repository at " + repository.getDirectory());
-
-        // remove the tag again
-        git.tagDelete().setTags("tag_for_testing").call();
-
-        // create an annotated tag
-        tag = git.tag().setName("tag_for_testing").setAnnotated(true).call();
-        System.out.println("Created/moved tag " + tag + " to repository at " + repository.getDirectory());
-
-        // remove the tag again
-        git.tagDelete().setTags("tag_for_testing").call();
-
-        walk.dispose();
-
-        repository.close();
+        try (Repository repository = CookbookHelper.openJGitCookbookRepository()) {
+            try (Git git = new Git(repository)) {
+                // remove the tag before creating it
+                git.tagDelete().setTags("tag_for_testing").call();
+        
+                // set it on the current HEAD
+                Ref tag = git.tag().setName("tag_for_testing").call();
+                System.out.println("Created/moved tag " + tag + " to repository at " + repository.getDirectory());
+        
+                // remove the tag again
+                git.tagDelete().setTags("tag_for_testing").call();
+        
+                // read some other commit and set the tag on it
+                ObjectId id = repository.resolve("HEAD^");
+                try (RevWalk walk = new RevWalk(repository)) {
+                    RevCommit commit = walk.parseCommit(id);
+                    tag = git.tag().setObjectId(commit).setName("tag_for_testing").call();
+                    System.out.println("Created/moved tag " + tag + " to repository at " + repository.getDirectory());
+            
+                    // remove the tag again
+                    git.tagDelete().setTags("tag_for_testing").call();
+            
+                    // create an annotated tag
+                    tag = git.tag().setName("tag_for_testing").setAnnotated(true).call();
+                    System.out.println("Created/moved tag " + tag + " to repository at " + repository.getDirectory());
+            
+                    // remove the tag again
+                    git.tagDelete().setTags("tag_for_testing").call();
+            
+                    walk.dispose();
+                }
+            }
+        }
diff --git a/src/main/java/org/dstadler/jgit/porcelain/CreateArchive.java b/src/main/java/org/dstadler/jgit/porcelain/CreateArchive.java
index 05466a7..4b29e96 100644
--- a/src/main/java/org/dstadler/jgit/porcelain/CreateArchive.java
+++ b/src/main/java/org/dstadler/jgit/porcelain/CreateArchive.java
@@ -40,12 +40,11 @@
-        Repository repository = CookbookHelper.openJGitCookbookRepository();
-
-
-        // make the included archive formats known
-        ArchiveFormats.registerAll();
-        try {
-            write(repository, ".zip", "zip");
-            write(repository, ".tar.gz", "tgz");
-            write(repository, ".tar.bz2", "tbz2");
-            write(repository, ".tar.xz", "txz");
-        } finally {
-            ArchiveFormats.unregisterAll();
+        try (Repository repository = CookbookHelper.openJGitCookbookRepository()) {
+            // make the included archive formats known
+            ArchiveFormats.registerAll();
+            try {
+                write(repository, ".zip", "zip");
+                write(repository, ".tar.gz", "tgz");
+                write(repository, ".tar.bz2", "tbz2");
+                write(repository, ".tar.xz", "txz");
+            } finally {
+                ArchiveFormats.unregisterAll();
+            }
@@ -53,2 +51,0 @@
-
-        repository.close();
@@ -62,5 +59,7 @@
-            new Git(repository).archive()
-                    .setTree(repository.resolve("master"))
-                    .setFormat(format)
-                    .setOutputStream(out)
-                    .call();
+            try (Git git = new Git(repository)) {
+                git.archive()
+                        .setTree(repository.resolve("master"))
+                        .setFormat(format)
+                        .setOutputStream(out)
+                        .call();
+            }
diff --git a/src/main/java/org/dstadler/jgit/porcelain/CreateCustomFormatArchive.java b/src/main/java/org/dstadler/jgit/porcelain/CreateCustomFormatArchive.java
index e51f824..3344d2f 100644
--- a/src/main/java/org/dstadler/jgit/porcelain/CreateCustomFormatArchive.java
+++ b/src/main/java/org/dstadler/jgit/porcelain/CreateCustomFormatArchive.java
@@ -88,5 +88,7 @@
-                    new Git(repository).archive()
-                            .setTree(repository.resolve("master"))
-                            .setFormat("myzip")
-                            .setOutputStream(out)
-                            .call();
+                    try (Git git = new Git(repository)) {
+                        git.archive()
+                                .setTree(repository.resolve("master"))
+                                .setFormat("myzip")
+                                .setOutputStream(out)
+                                .call();
+                    }
diff --git a/src/main/java/org/dstadler/jgit/porcelain/CreateListApplyAndDropStash.java b/src/main/java/org/dstadler/jgit/porcelain/CreateListApplyAndDropStash.java
index afb1333..24eff81 100644
--- a/src/main/java/org/dstadler/jgit/porcelain/CreateListApplyAndDropStash.java
+++ b/src/main/java/org/dstadler/jgit/porcelain/CreateListApplyAndDropStash.java
@@ -42,42 +42,50 @@
-        Repository repository = CookbookHelper.createNewRepository();
-        Git git = new Git(repository);
-
-        // create a file
-        File file1 = new File(repository.getDirectory().getParent(), "testfile");
-        FileUtils.writeStringToFile(file1, "some text");
-        File file2 = new File(repository.getDirectory().getParent(), "testfile2");
-        FileUtils.writeStringToFile(file2, "some text");
-
-        // add and commit the file
-        git.add()
-                .addFilepattern("testfile")
-                .call();
-        git.add()
-                .addFilepattern("testfile2")
-                .call();
-        git.commit()
-                .setMessage("Added testfiles")
-                .call();
-
-        // then modify the file
-        FileUtils.writeStringToFile(file1, "some more text", true);
-
-        // push the changes to a new stash
-        RevCommit stash = git.stashCreate()
-                .call();
-
-        System.out.println("Created stash " + stash);
-
-        // then modify the 2nd file
-        FileUtils.writeStringToFile(file2, "some more text", true);
-
-        // push the changes to a new stash
-        stash = git.stashCreate()
-                .call();
-
-        System.out.println("Created stash " + stash);
-
-        // list the stashes
-        Collection<RevCommit> stashes = git.stashList().call();
-        for(RevCommit rev : stashes) {
-            System.out.println("Found stash: " + rev + ": " + rev.getFullMessage());
+        try (Repository repository = CookbookHelper.createNewRepository()) {
+            try (Git git = new Git(repository)) {
+                // create a file
+                File file1 = new File(repository.getDirectory().getParent(), "testfile");
+                FileUtils.writeStringToFile(file1, "some text");
+                File file2 = new File(repository.getDirectory().getParent(), "testfile2");
+                FileUtils.writeStringToFile(file2, "some text");
+        
+                // add and commit the file
+                git.add()
+                        .addFilepattern("testfile")
+                        .call();
+                git.add()
+                        .addFilepattern("testfile2")
+                        .call();
+                git.commit()
+                        .setMessage("Added testfiles")
+                        .call();
+        
+                // then modify the file
+                FileUtils.writeStringToFile(file1, "some more text", true);
+        
+                // push the changes to a new stash
+                RevCommit stash = git.stashCreate()
+                        .call();
+        
+                System.out.println("Created stash " + stash);
+        
+                // then modify the 2nd file
+                FileUtils.writeStringToFile(file2, "some more text", true);
+        
+                // push the changes to a new stash
+                stash = git.stashCreate()
+                        .call();
+        
+                System.out.println("Created stash " + stash);
+        
+                // list the stashes
+                Collection<RevCommit> stashes = git.stashList().call();
+                for(RevCommit rev : stashes) {
+                    System.out.println("Found stash: " + rev + ": " + rev.getFullMessage());
+                }
+        
+                // drop the 1st stash without applying it
+                ObjectId call = git.stashDrop().setStashRef(0).call();
+                System.out.println("StashDrop returned: " + call);
+        
+                ObjectId applied = git.stashApply().setStashRef(stash.getName()).call();
+                System.out.println("Applied 2nd stash as: " + applied);
+            }
@@ -85,9 +92,0 @@
-
-        // drop the 1st stash without applying it
-        ObjectId call = git.stashDrop().setStashRef(0).call();
-        System.out.println("StashDrop returned: " + call);
-
-        ObjectId applied = git.stashApply().setStashRef(stash.getName()).call();
-        System.out.println("Applied 2nd stash as: " + applied);
-
-        repository.close();
diff --git a/src/main/java/org/dstadler/jgit/porcelain/InitRepository.java b/src/main/java/org/dstadler/jgit/porcelain/InitRepository.java
index e090fc1..4594574 100755
--- a/src/main/java/org/dstadler/jgit/porcelain/InitRepository.java
+++ b/src/main/java/org/dstadler/jgit/porcelain/InitRepository.java
@@ -45,5 +45,3 @@
-        Repository repository = FileRepositoryBuilder.create(new File(dir.getAbsolutePath(), ".git"));
-
-        System.out.println("Created a new repository at " + repository.getDirectory());
-
-        repository.close();
+        try (Repository repository = FileRepositoryBuilder.create(new File(dir.getAbsolutePath(), ".git"))) {
+            System.out.println("Created a new repository at " + repository.getDirectory());
+        }
diff --git a/src/main/java/org/dstadler/jgit/porcelain/ListBranches.java b/src/main/java/org/dstadler/jgit/porcelain/ListBranches.java
index eb8b370..4dfc1de 100644
--- a/src/main/java/org/dstadler/jgit/porcelain/ListBranches.java
+++ b/src/main/java/org/dstadler/jgit/porcelain/ListBranches.java
@@ -39,13 +39,7 @@
-        Repository repository = CookbookHelper.openJGitCookbookRepository();
-
-        System.out.println("Listing local branches:");
-        List<Ref> call = new Git(repository).branchList().call();
-        for (Ref ref : call) {
-            System.out.println("Branch: " + ref + " " + ref.getName() + " " + ref.getObjectId().getName());
-        }
-
-        System.out.println("Now including remote branches:");
-        call = new Git(repository).branchList().setListMode(ListMode.ALL).call();
-        for (Ref ref : call) {
-            System.out.println("Branch: " + ref + " " + ref.getName() + " " + ref.getObjectId().getName());
-        }
+        try (Repository repository = CookbookHelper.openJGitCookbookRepository()) {
+            System.out.println("Listing local branches:");
+            try (Git git = new Git(repository)) {
+                List<Ref> call = git.branchList().call();
+                for (Ref ref : call) {
+                    System.out.println("Branch: " + ref + " " + ref.getName() + " " + ref.getObjectId().getName());
+                }
@@ -53 +47,7 @@
-        repository.close();
+                System.out.println("Now including remote branches:");
+                call = git.branchList().setListMode(ListMode.ALL).call();
+                for (Ref ref : call) {
+                    System.out.println("Branch: " + ref + " " + ref.getName() + " " + ref.getObjectId().getName());
+                }
+            }
+        }        
diff --git a/src/main/java/org/dstadler/jgit/porcelain/ListNotes.java b/src/main/java/org/dstadler/jgit/porcelain/ListNotes.java
index a4788dd..dc7cda7 100644
--- a/src/main/java/org/dstadler/jgit/porcelain/ListNotes.java
+++ b/src/main/java/org/dstadler/jgit/porcelain/ListNotes.java
@@ -39,10 +39,12 @@
-        Repository repository = CookbookHelper.openJGitCookbookRepository();
-
-        List<Note> call = new Git(repository).notesList().call();
-        System.out.println("Listing " + call.size() + " notes");
-        for (Note note : call) {
-            System.out.println("Note: " + note + " " + note.getName() + " " + note.getData().getName() + "\nContent: ");
-
-            // displaying the contents of the note is done via a simple blob-read
-            ObjectLoader loader = repository.open(note.getData());
-            loader.copyTo(System.out);
+        try (Repository repository = CookbookHelper.openJGitCookbookRepository()) {
+            try (Git git = new Git(repository)) {
+                List<Note> call = git.notesList().call();
+                System.out.println("Listing " + call.size() + " notes");
+                for (Note note : call) {
+                    System.out.println("Note: " + note + " " + note.getName() + " " + note.getData().getName() + "\nContent: ");
+        
+                    // displaying the contents of the note is done via a simple blob-read
+                    ObjectLoader loader = repository.open(note.getData());
+                    loader.copyTo(System.out);
+                }
+            }
@@ -50,2 +51,0 @@
-
-        repository.close();
diff --git a/src/main/java/org/dstadler/jgit/porcelain/ListRemotes.java b/src/main/java/org/dstadler/jgit/porcelain/ListRemotes.java
index 1b8ff78..dd0218a 100755
--- a/src/main/java/org/dstadler/jgit/porcelain/ListRemotes.java
+++ b/src/main/java/org/dstadler/jgit/porcelain/ListRemotes.java
@@ -36,6 +36,20 @@
-        Repository repository = CookbookHelper.openJGitCookbookRepository();
-
-        // all refs
-        Collection<Ref> refs = new Git(repository).lsRemote().call();
-        for (Ref ref : refs) {
-            System.out.println("Ref: " + ref);
+        try (Repository repository = CookbookHelper.openJGitCookbookRepository()) {
+            // all refs
+            try (Git git = new Git(repository)) {
+                Collection<Ref> refs = git.lsRemote().call();
+                for (Ref ref : refs) {
+                    System.out.println("Ref: " + ref);
+                }
+        
+                // heads only
+                refs = git.lsRemote().setHeads(true).call();
+                for (Ref ref : refs) {
+                    System.out.println("Head: " + ref);
+                }
+        
+                // tags only
+                refs = git.lsRemote().setTags(true).call();
+                for (Ref ref : refs) {
+                    System.out.println("Remote tag: " + ref);
+                }
+            }
@@ -43,14 +56,0 @@
-
-        // heads only
-        refs = new Git(repository).lsRemote().setHeads(true).call();
-        for (Ref ref : refs) {
-            System.out.println("Head: " + ref);
-        }
-
-        // tags only
-        refs = new Git(repository).lsRemote().setTags(true).call();
-        for (Ref ref : refs) {
-            System.out.println("Remote tag: " + ref);
-        }
-
-        repository.close();
diff --git a/src/main/java/org/dstadler/jgit/porcelain/ListTags.java b/src/main/java/org/dstadler/jgit/porcelain/ListTags.java
index 3949403..0d673fc 100644
--- a/src/main/java/org/dstadler/jgit/porcelain/ListTags.java
+++ b/src/main/java/org/dstadler/jgit/porcelain/ListTags.java
@@ -40,14 +40,21 @@
-        Repository repository = CookbookHelper.openJGitCookbookRepository();
-
-        List<Ref> call = new Git(repository).tagList().call();
-        for (Ref ref : call) {
-            System.out.println("Tag: " + ref + " " + ref.getName() + " " + ref.getObjectId().getName());
-
-            // fetch all commits for this tag
-            LogCommand log = new Git(repository).log();
-
-            Ref peeledRef = repository.peel(ref);
-            if(peeledRef.getPeeledObjectId() != null) {
-            	log.add(peeledRef.getPeeledObjectId());
-            } else {
-            	log.add(ref.getObjectId());
+        try (Repository repository = CookbookHelper.openJGitCookbookRepository()) {
+            try (Git git = new Git(repository)) {
+                List<Ref> call = git.tagList().call();
+                for (Ref ref : call) {
+                    System.out.println("Tag: " + ref + " " + ref.getName() + " " + ref.getObjectId().getName());
+        
+                    // fetch all commits for this tag
+                    LogCommand log = git.log();
+        
+                    Ref peeledRef = repository.peel(ref);
+                    if(peeledRef.getPeeledObjectId() != null) {
+                    	log.add(peeledRef.getPeeledObjectId());
+                    } else {
+                    	log.add(ref.getObjectId());
+                    }
+        
+        			Iterable<RevCommit> logs = log.call();
+        			for (RevCommit rev : logs) {
+        				System.out.println("Commit: " + rev /* + ", name: " + rev.getName() + ", id: " + rev.getId().getName() */);
+        			}
+                }
@@ -55,5 +61,0 @@
-
-			Iterable<RevCommit> logs = log.call();
-			for (RevCommit rev : logs) {
-				System.out.println("Commit: " + rev /* + ", name: " + rev.getName() + ", id: " + rev.getId().getName() */);
-			}
@@ -61,2 +62,0 @@
-
-        repository.close();
diff --git a/src/main/java/org/dstadler/jgit/porcelain/ShowBlame.java b/src/main/java/org/dstadler/jgit/porcelain/ShowBlame.java
index aefd982..0c4bb0b 100644
--- a/src/main/java/org/dstadler/jgit/porcelain/ShowBlame.java
+++ b/src/main/java/org/dstadler/jgit/porcelain/ShowBlame.java
@@ -49,13 +49,15 @@
-        Repository repository = CookbookHelper.openJGitCookbookRepository();
-
-        BlameCommand blamer = new BlameCommand(repository);
-        ObjectId commitID = repository.resolve("HEAD");
-        blamer.setStartCommit(commitID);
-        blamer.setFilePath("README.md");
-        BlameResult blame = blamer.call();
-
-        // read the number of lines from the commit to not look at changes in the working copy
-        int lines = countFiles(repository, commitID, "README.md");
-        for (int i = 0; i < lines; i++) {
-            RevCommit commit = blame.getSourceCommit(i);
-            System.out.println("Line: " + i + ": " + commit);
+        try (Repository repository = CookbookHelper.openJGitCookbookRepository()) {
+            BlameCommand blamer = new BlameCommand(repository);
+            ObjectId commitID = repository.resolve("HEAD");
+            blamer.setStartCommit(commitID);
+            blamer.setFilePath("README.md");
+            BlameResult blame = blamer.call();
+    
+            // read the number of lines from the commit to not look at changes in the working copy
+            int lines = countFiles(repository, commitID, "README.md");
+            for (int i = 0; i < lines; i++) {
+                RevCommit commit = blame.getSourceCommit(i);
+                System.out.println("Line: " + i + ": " + commit);
+            }
+    
+            System.out.println("Displayed commits responsible for " + lines + " lines of README.md");
@@ -63,4 +64,0 @@
-
-        System.out.println("Displayed commits responsible for " + lines + " lines of README.md");
-
-        repository.close();
@@ -70,12 +68,25 @@
-        RevWalk revWalk = new RevWalk(repository);
-        RevCommit commit = revWalk.parseCommit(commitID);
-        RevTree tree = commit.getTree();
-        System.out.println("Having tree: " + tree);
-
-        // now try to find a specific file
-        TreeWalk treeWalk = new TreeWalk(repository);
-        treeWalk.addTree(tree);
-        treeWalk.setRecursive(true);
-        treeWalk.setFilter(PathFilter.create(name));
-        if (!treeWalk.next()) {
-            throw new IllegalStateException("Did not find expected file 'README.md'");
+        try (RevWalk revWalk = new RevWalk(repository)) {
+            RevCommit commit = revWalk.parseCommit(commitID);
+            RevTree tree = commit.getTree();
+            System.out.println("Having tree: " + tree);
+    
+            // now try to find a specific file
+            try (TreeWalk treeWalk = new TreeWalk(repository)) {
+                treeWalk.addTree(tree);
+                treeWalk.setRecursive(true);
+                treeWalk.setFilter(PathFilter.create(name));
+                if (!treeWalk.next()) {
+                    throw new IllegalStateException("Did not find expected file 'README.md'");
+                }
+        
+                ObjectId objectId = treeWalk.getObjectId(0);
+                ObjectLoader loader = repository.open(objectId);
+        
+                ByteArrayOutputStream stream = new ByteArrayOutputStream();
+                // and then one can the loader to read the file
+                loader.copyTo(stream);
+                
+                revWalk.dispose();
+                
+                return IOUtils.readLines(new ByteArrayInputStream(stream.toByteArray())).size();
+            }
@@ -83,11 +93,0 @@
-
-        ObjectId objectId = treeWalk.getObjectId(0);
-        ObjectLoader loader = repository.open(objectId);
-
-        ByteArrayOutputStream stream = new ByteArrayOutputStream();
-        // and then one can the loader to read the file
-        loader.copyTo(stream);
-
-        revWalk.dispose();
-
-        return IOUtils.readLines(new ByteArrayInputStream(stream.toByteArray())).size();
diff --git a/src/main/java/org/dstadler/jgit/porcelain/ShowChangedFilesBetweenCommits.java b/src/main/java/org/dstadler/jgit/porcelain/ShowChangedFilesBetweenCommits.java
index db8db05..64f2288 100755
--- a/src/main/java/org/dstadler/jgit/porcelain/ShowChangedFilesBetweenCommits.java
+++ b/src/main/java/org/dstadler/jgit/porcelain/ShowChangedFilesBetweenCommits.java
@@ -41,25 +41,28 @@
-        Repository repository = CookbookHelper.openJGitCookbookRepository();
-
-        // The {tree} will return the underlying tree-id instead of the commit-id itself!
-        // For a description of what the carets do see e.g. http://www.paulboxley.com/blog/2011/06/git-caret-and-tilde
-        // This means we are selecting the parent of the parent of the parent of the parent of current HEAD and
-        // take the tree-ish of it
-        ObjectId oldHead = repository.resolve("HEAD^^^^{tree}");
-        ObjectId head = repository.resolve("HEAD^{tree}");
-
-        System.out.println("Printing diff between tree: " + oldHead + " and " + head);
-
-        // prepare the two iterators to compute the diff between
-		ObjectReader reader = repository.newObjectReader();
-		CanonicalTreeParser oldTreeIter = new CanonicalTreeParser();
-		oldTreeIter.reset(reader, oldHead);
-		CanonicalTreeParser newTreeIter = new CanonicalTreeParser();
-		newTreeIter.reset(reader, head);
-
-		// finally get the list of changed files
-		List<DiffEntry> diffs= new Git(repository).diff()
-		                    .setNewTree(newTreeIter)
-		                    .setOldTree(oldTreeIter)
-		                    .call();
-        for (DiffEntry entry : diffs) {
-            System.out.println("Entry: " + entry);
+        try (Repository repository = CookbookHelper.openJGitCookbookRepository()) {
+            // The {tree} will return the underlying tree-id instead of the commit-id itself!
+            // For a description of what the carets do see e.g. http://www.paulboxley.com/blog/2011/06/git-caret-and-tilde
+            // This means we are selecting the parent of the parent of the parent of the parent of current HEAD and
+            // take the tree-ish of it
+            ObjectId oldHead = repository.resolve("HEAD^^^^{tree}");
+            ObjectId head = repository.resolve("HEAD^{tree}");
+    
+            System.out.println("Printing diff between tree: " + oldHead + " and " + head);
+    
+            // prepare the two iterators to compute the diff between
+    		try (ObjectReader reader = repository.newObjectReader()) {
+        		CanonicalTreeParser oldTreeIter = new CanonicalTreeParser();
+        		oldTreeIter.reset(reader, oldHead);
+        		CanonicalTreeParser newTreeIter = new CanonicalTreeParser();
+        		newTreeIter.reset(reader, head);
+        
+        		// finally get the list of changed files
+        		try (Git git = new Git(repository)) {
+                    List<DiffEntry> diffs= git.diff()
+            		                    .setNewTree(newTreeIter)
+            		                    .setOldTree(oldTreeIter)
+            		                    .call();
+                    for (DiffEntry entry : diffs) {
+                        System.out.println("Entry: " + entry);
+                    }
+        		}
+    		}
@@ -66,0 +70 @@
+    	
@@ -68,2 +71,0 @@
-
-        repository.close();
diff --git a/src/main/java/org/dstadler/jgit/porcelain/ShowFileDiff.java b/src/main/java/org/dstadler/jgit/porcelain/ShowFileDiff.java
index 400ccf6..f41f42d 100644
--- a/src/main/java/org/dstadler/jgit/porcelain/ShowFileDiff.java
+++ b/src/main/java/org/dstadler/jgit/porcelain/ShowFileDiff.java
@@ -49,17 +49,20 @@
-        Repository repository = CookbookHelper.openJGitCookbookRepository();
-
-        // the diff works on TreeIterators, we prepare two for the two branches
-        AbstractTreeIterator oldTreeParser = prepareTreeParser(repository, "09c65401f3730eb3e619c33bf31e2376fb393727");
-        AbstractTreeIterator newTreeParser = prepareTreeParser(repository, "aa31703b65774e4a06010824601e56375a70078c");
-
-        // then the procelain diff-command returns a list of diff entries
-        List<DiffEntry> diff = new Git(repository).diff().
-                setOldTree(oldTreeParser).
-                setNewTree(newTreeParser).
-                setPathFilter(PathFilter.create("README.md")).
-                call();
-        for (DiffEntry entry : diff) {
-            System.out.println("Entry: " + entry + ", from: " + entry.getOldId() + ", to: " + entry.getNewId());
-            DiffFormatter formatter = new DiffFormatter(System.out);
-            formatter.setRepository(repository);
-            formatter.format(entry);
+        try (Repository repository = CookbookHelper.openJGitCookbookRepository()) {
+            // the diff works on TreeIterators, we prepare two for the two branches
+            AbstractTreeIterator oldTreeParser = prepareTreeParser(repository, "09c65401f3730eb3e619c33bf31e2376fb393727");
+            AbstractTreeIterator newTreeParser = prepareTreeParser(repository, "aa31703b65774e4a06010824601e56375a70078c");
+    
+            // then the procelain diff-command returns a list of diff entries
+            try (Git git = new Git(repository)) {
+                List<DiffEntry> diff = git.diff().
+                        setOldTree(oldTreeParser).
+                        setNewTree(newTreeParser).
+                        setPathFilter(PathFilter.create("README.md")).
+                        call();
+                for (DiffEntry entry : diff) {
+                    System.out.println("Entry: " + entry + ", from: " + entry.getOldId() + ", to: " + entry.getNewId());
+                    try (DiffFormatter formatter = new DiffFormatter(System.out)) {
+                        formatter.setRepository(repository);
+                        formatter.format(entry);
+                    }
+                }
+            }
@@ -67,2 +69,0 @@
-
-        repository.close();
@@ -75,7 +76,12 @@
-        RevWalk walk = new RevWalk(repository);
-        RevCommit commit = walk.parseCommit(ObjectId.fromString(objectId));
-        RevTree tree = walk.parseTree(commit.getTree().getId());
-
-        CanonicalTreeParser oldTreeParser = new CanonicalTreeParser();
-        try (ObjectReader oldReader = repository.newObjectReader()) {
-            oldTreeParser.reset(oldReader, tree.getId());
+        try (RevWalk walk = new RevWalk(repository)) {
+            RevCommit commit = walk.parseCommit(ObjectId.fromString(objectId));
+            RevTree tree = walk.parseTree(commit.getTree().getId());
+    
+            CanonicalTreeParser oldTreeParser = new CanonicalTreeParser();
+            try (ObjectReader oldReader = repository.newObjectReader()) {
+                oldTreeParser.reset(oldReader, tree.getId());
+            }
+            
+            walk.dispose();
+    
+            return oldTreeParser;
@@ -83,4 +88,0 @@
-        
-        walk.dispose();
-
-        return oldTreeParser;
diff --git a/src/main/java/org/dstadler/jgit/porcelain/ShowLog.java b/src/main/java/org/dstadler/jgit/porcelain/ShowLog.java
index 8dc582d..dfb7ccf 100755
--- a/src/main/java/org/dstadler/jgit/porcelain/ShowLog.java
+++ b/src/main/java/org/dstadler/jgit/porcelain/ShowLog.java
@@ -38,8 +38,53 @@
-        Repository repository = CookbookHelper.openJGitCookbookRepository();
-
-        Iterable<RevCommit> logs = new Git(repository).log()
-                .call();
-        int count = 0;
-        for (RevCommit rev : logs) {
-            //System.out.println("Commit: " + rev /* + ", name: " + rev.getName() + ", id: " + rev.getId().getName() */);
-            count++;
+        try (Repository repository = CookbookHelper.openJGitCookbookRepository()) {
+            try (Git git = new Git(repository)) {
+                Iterable<RevCommit> logs = git.log()
+                        .call();
+                int count = 0;
+                for (RevCommit rev : logs) {
+                    //System.out.println("Commit: " + rev /* + ", name: " + rev.getName() + ", id: " + rev.getId().getName() */);
+                    count++;
+                }
+                System.out.println("Had " + count + " commits overall on current branch");
+        
+                logs = git.log()
+                        .add(repository.resolve("remotes/origin/testbranch"))
+                        .call();
+                count = 0;
+                for (RevCommit rev : logs) {
+                    System.out.println("Commit: " + rev /* + ", name: " + rev.getName() + ", id: " + rev.getId().getName() */);
+                    count++;
+                }
+                System.out.println("Had " + count + " commits overall on test-branch");
+        
+                logs = git.log()
+                        .all()
+                        .call();
+                count = 0;
+                for (RevCommit rev : logs) {
+                    //System.out.println("Commit: " + rev /* + ", name: " + rev.getName() + ", id: " + rev.getId().getName() */);
+                    count++;
+                }
+                System.out.println("Had " + count + " commits overall in repository");
+        
+                logs = git.log()
+                        // for all log.all()
+                        .addPath("README.md")
+                        .call();
+                count = 0;
+                for (RevCommit rev : logs) {
+                    //System.out.println("Commit: " + rev /* + ", name: " + rev.getName() + ", id: " + rev.getId().getName() */);
+                    count++;
+                }
+                System.out.println("Had " + count + " commits on README.md");
+        
+                logs = git.log()
+                        // for all log.all()
+                        .addPath("pom.xml")
+                        .call();
+                count = 0;
+                for (RevCommit rev : logs) {
+                    //System.out.println("Commit: " + rev /* + ", name: " + rev.getName() + ", id: " + rev.getId().getName() */);
+                    count++;
+                }
+                System.out.println("Had " + count + " commits on pom.xml");
+            }
@@ -47,45 +91,0 @@
-        System.out.println("Had " + count + " commits overall on current branch");
-
-        logs = new Git(repository).log()
-                .add(repository.resolve("remotes/origin/testbranch"))
-                .call();
-        count = 0;
-        for (RevCommit rev : logs) {
-            System.out.println("Commit: " + rev /* + ", name: " + rev.getName() + ", id: " + rev.getId().getName() */);
-            count++;
-        }
-        System.out.println("Had " + count + " commits overall on test-branch");
-
-        logs = new Git(repository).log()
-                .all()
-                .call();
-        count = 0;
-        for (RevCommit rev : logs) {
-            //System.out.println("Commit: " + rev /* + ", name: " + rev.getName() + ", id: " + rev.getId().getName() */);
-            count++;
-        }
-        System.out.println("Had " + count + " commits overall in repository");
-
-        logs = new Git(repository).log()
-                // for all log.all()
-                .addPath("README.md")
-                .call();
-        count = 0;
-        for (RevCommit rev : logs) {
-            //System.out.println("Commit: " + rev /* + ", name: " + rev.getName() + ", id: " + rev.getId().getName() */);
-            count++;
-        }
-        System.out.println("Had " + count + " commits on README.md");
-
-        logs = new Git(repository).log()
-                // for all log.all()
-                .addPath("pom.xml")
-                .call();
-        count = 0;
-        for (RevCommit rev : logs) {
-            //System.out.println("Commit: " + rev /* + ", name: " + rev.getName() + ", id: " + rev.getId().getName() */);
-            count++;
-        }
-        System.out.println("Had " + count + " commits on pom.xml");
-
-        repository.close();
diff --git a/src/main/java/org/dstadler/jgit/porcelain/ShowStatus.java b/src/main/java/org/dstadler/jgit/porcelain/ShowStatus.java
index aa2735c..595d9a9 100644
--- a/src/main/java/org/dstadler/jgit/porcelain/ShowStatus.java
+++ b/src/main/java/org/dstadler/jgit/porcelain/ShowStatus.java
@@ -38,15 +38,15 @@
-        Repository repository = CookbookHelper.openJGitCookbookRepository();
-
-        Status status = new Git(repository).status().call();
-        System.out.println("Added: " + status.getAdded());
-        System.out.println("Changed: " + status.getChanged());
-        System.out.println("Conflicting: " + status.getConflicting());
-        System.out.println("ConflictingStageState: " + status.getConflictingStageState());
-        System.out.println("IgnoredNotInIndex: " + status.getIgnoredNotInIndex());
-        System.out.println("Missing: " + status.getMissing());
-        System.out.println("Modified: " + status.getModified());
-        System.out.println("Removed: " + status.getRemoved());
-        System.out.println("Untracked: " + status.getUntracked());
-        System.out.println("UntrackedFolders: " + status.getUntrackedFolders());
-
-        repository.close();
+        try (Repository repository = CookbookHelper.openJGitCookbookRepository()) {
+            try (Git git = new Git(repository)) {
+                Status status = git.status().call();
+                System.out.println("Added: " + status.getAdded());
+                System.out.println("Changed: " + status.getChanged());
+                System.out.println("Conflicting: " + status.getConflicting());
+                System.out.println("ConflictingStageState: " + status.getConflictingStageState());
+                System.out.println("IgnoredNotInIndex: " + status.getIgnoredNotInIndex());
+                System.out.println("Missing: " + status.getMissing());
+                System.out.println("Modified: " + status.getModified());
+                System.out.println("Removed: " + status.getRemoved());
+                System.out.println("Untracked: " + status.getUntracked());
+                System.out.println("UntrackedFolders: " + status.getUntrackedFolders());
+            }
+        }
diff --git a/src/main/java/org/dstadler/jgit/porcelain/WalkAllCommits.java b/src/main/java/org/dstadler/jgit/porcelain/WalkAllCommits.java
index be06a4a..07aa4f2 100644
--- a/src/main/java/org/dstadler/jgit/porcelain/WalkAllCommits.java
+++ b/src/main/java/org/dstadler/jgit/porcelain/WalkAllCommits.java
@@ -37,8 +37,10 @@
-        Repository repository = CookbookHelper.openJGitCookbookRepository();
-
-        Git git = new Git(repository);
-        Iterable<RevCommit> commits = git.log().all().call();
-        int count = 0;
-        for (RevCommit commit : commits) {
-            System.out.println("LogCommit: " + commit);
-            count++;
+        try (Repository repository = CookbookHelper.openJGitCookbookRepository()) {
+            try (Git git = new Git(repository)) {
+                Iterable<RevCommit> commits = git.log().all().call();
+                int count = 0;
+                for (RevCommit commit : commits) {
+                    System.out.println("LogCommit: " + commit);
+                    count++;
+                }
+                System.out.println(count);
+            }
@@ -46,3 +47,0 @@
-        System.out.println(count);
-
-        repository.close();
diff --git a/src/main/java/org/dstadler/jgit/unfinished/BrowseTree.java b/src/main/java/org/dstadler/jgit/unfinished/BrowseTree.java
index be58653..4d30b08 100644
--- a/src/main/java/org/dstadler/jgit/unfinished/BrowseTree.java
+++ b/src/main/java/org/dstadler/jgit/unfinished/BrowseTree.java
@@ -37,18 +37,20 @@
-        Repository repository = CookbookHelper.openJGitCookbookRepository();
-
-        ObjectId revId = repository.resolve(Constants.HEAD);
-        TreeWalk treeWalk = new TreeWalk(repository);
-
-        treeWalk.addTree(new RevWalk(repository).parseTree(revId));
-
-        while (treeWalk.next())
-        {
-            System.out.println("---------------------------");
-            System.out.append("name: ").println(treeWalk.getNameString());
-            System.out.append("path: ").println(treeWalk.getPathString());
-
-            ObjectLoader loader = repository.open(treeWalk.getObjectId(0));
-
-            System.out.append("directory: ").println(loader.getType()
-                    == Constants.OBJ_TREE);
-            System.out.append("size: ").println(loader.getSize());
+        try (Repository repository = CookbookHelper.openJGitCookbookRepository()) {
+            ObjectId revId = repository.resolve(Constants.HEAD);
+            try (TreeWalk treeWalk = new TreeWalk(repository)) {
+                try (RevWalk revWalk = new RevWalk(repository)) {
+                    treeWalk.addTree(revWalk.parseTree(revId));
+            
+                    while (treeWalk.next())
+                    {
+                        System.out.println("---------------------------");
+                        System.out.append("name: ").println(treeWalk.getNameString());
+                        System.out.append("path: ").println(treeWalk.getPathString());
+            
+                        ObjectLoader loader = repository.open(treeWalk.getObjectId(0));
+            
+                        System.out.append("directory: ").println(loader.getType()
+                                == Constants.OBJ_TREE);
+                        System.out.append("size: ").println(loader.getSize());
+                    }
+                }
+            }
@@ -56,2 +57,0 @@
-
-        repository.close();
diff --git a/src/main/java/org/dstadler/jgit/unfinished/ListChildrenOfCommit.java b/src/main/java/org/dstadler/jgit/unfinished/ListChildrenOfCommit.java
index 577890b..d86f793 100755
--- a/src/main/java/org/dstadler/jgit/unfinished/ListChildrenOfCommit.java
+++ b/src/main/java/org/dstadler/jgit/unfinished/ListChildrenOfCommit.java
@@ -37,13 +37,17 @@
-        Repository repository = CookbookHelper.openJGitCookbookRepository();
-
-        PlotWalk revWalk = new PlotWalk(repository);
-        ObjectId rootId = repository.resolve("refs/heads/master");
-        RevCommit root = revWalk.parseCommit(rootId);
-        revWalk.markStart(root);
-        PlotCommitList<PlotLane> plotCommitList = new PlotCommitList<>();
-        plotCommitList.source(revWalk);
-        plotCommitList.fillTo(Integer.MAX_VALUE);
-
-        System.out.println("Printing children of commit " + root);
-        for (RevCommit com : revWalk) {
-            System.out.println("Child: " + com);
+        try (Repository repository = CookbookHelper.openJGitCookbookRepository()) {
+            try (PlotWalk revWalk = new PlotWalk(repository)) {
+                ObjectId rootId = repository.resolve("refs/heads/master");
+                RevCommit root = revWalk.parseCommit(rootId);
+                revWalk.markStart(root);
+                PlotCommitList<PlotLane> plotCommitList = new PlotCommitList<>();
+                plotCommitList.source(revWalk);
+                plotCommitList.fillTo(Integer.MAX_VALUE);
+        
+                System.out.println("Printing children of commit " + root);
+                for (RevCommit com : revWalk) {
+                    System.out.println("Child: " + com);
+                }
+        
+                System.out.println("Printing with next()");
+                System.out.println("next: " + revWalk.next());
+            }
@@ -51,5 +54,0 @@
-
-        System.out.println("Printing with next()");
-        System.out.println("next: " + revWalk.next());
-
-        repository.close();
diff --git a/src/main/java/org/dstadler/jgit/unfinished/ListIndex.java b/src/main/java/org/dstadler/jgit/unfinished/ListIndex.java
index a5c39fb..f5cfb76 100755
--- a/src/main/java/org/dstadler/jgit/unfinished/ListIndex.java
+++ b/src/main/java/org/dstadler/jgit/unfinished/ListIndex.java
@@ -34,16 +34,16 @@
-        Repository repository = CookbookHelper.openJGitCookbookRepository();
-
-        // DirCache contains all files of the repository
-        DirCache index = DirCache.read(repository);
-        System.out.println("DirCache has " + index.getEntryCount() + " items");
-        for (int i = 0; i < index.getEntryCount(); i++) {
-            // the number after the AnyObjectId is the "stage", see the constants in DirCacheEntry
-            System.out.println("Item " + i + ": " + index.getEntry(i));
-        }
-
-        //
-        System.out.println("Now printing staged items...");
-        for (int i = 0; i < index.getEntryCount(); i++) {
-            DirCacheEntry entry = index.getEntry(i);
-            if (entry.getStage() != DirCacheEntry.STAGE_0) {
-                System.out.println("Item " + i + ": " + entry);
+        try (Repository repository = CookbookHelper.openJGitCookbookRepository()) {
+            // DirCache contains all files of the repository
+            DirCache index = DirCache.read(repository);
+            System.out.println("DirCache has " + index.getEntryCount() + " items");
+            for (int i = 0; i < index.getEntryCount(); i++) {
+                // the number after the AnyObjectId is the "stage", see the constants in DirCacheEntry
+                System.out.println("Item " + i + ": " + index.getEntry(i));
+            }
+    
+            //
+            System.out.println("Now printing staged items...");
+            for (int i = 0; i < index.getEntryCount(); i++) {
+                DirCacheEntry entry = index.getEntry(i);
+                if (entry.getStage() != DirCacheEntry.STAGE_0) {
+                    System.out.println("Item " + i + ": " + entry);
+                }
@@ -52,2 +51,0 @@
-
-        repository.close();
diff --git a/src/main/java/org/dstadler/jgit/unfinished/ListRefLog.java b/src/main/java/org/dstadler/jgit/unfinished/ListRefLog.java
index c451d61..f24236a 100755
--- a/src/main/java/org/dstadler/jgit/unfinished/ListRefLog.java
+++ b/src/main/java/org/dstadler/jgit/unfinished/ListRefLog.java
@@ -42,7 +42,16 @@
-        Repository repository = CookbookHelper.openJGitCookbookRepository();
-
-        List<Ref> refs = new Git(repository).branchList().call();
-        for (Ref ref : refs) {
-            System.out.println("Branch: " + ref + " " + ref.getName() + " " + ref.getObjectId().getName());
-
-            listReflog(repository, ref);
+        try (Repository repository = CookbookHelper.openJGitCookbookRepository()) {
+            try (Git git = new Git(repository)) {
+                List<Ref> refs = git.branchList().call();
+                for (Ref ref : refs) {
+                    System.out.println("Branch: " + ref + " " + ref.getName() + " " + ref.getObjectId().getName());
+        
+                    listReflog(repository, ref);
+                }
+        
+                List<Ref> call = git.tagList().call();
+                for (Ref ref : call) {
+                    System.out.println("Tag: " + ref + " " + ref.getName() + " " + ref.getObjectId().getName());
+        
+                    listReflog(repository, ref);
+                }
+            }
@@ -50,9 +58,0 @@
-
-        List<Ref> call = new Git(repository).tagList().call();
-        for (Ref ref : call) {
-            System.out.println("Tag: " + ref + " " + ref.getName() + " " + ref.getObjectId().getName());
-
-            listReflog(repository, ref);
-        }
-
-        repository.close();
@@ -68,5 +68,7 @@
-        Collection<ReflogEntry> call = new Git(repository).reflog().setRef(ref.getName()).call();
-        Iterator<ReflogEntry> it = call.iterator();
-        while (it.hasNext()) {
-            ReflogEntry reflog = it.next();
-            System.out.println("Reflog: " + reflog);
+        try (Git git = new Git(repository)) {
+            Collection<ReflogEntry> call = git.reflog().setRef(ref.getName()).call();
+            Iterator<ReflogEntry> it = call.iterator();
+            while (it.hasNext()) {
+                ReflogEntry reflog = it.next();
+                System.out.println("Reflog: " + reflog);
+            }
diff --git a/src/main/java/org/dstadler/jgit/unfinished/PullRemoteRepository.java b/src/main/java/org/dstadler/jgit/unfinished/PullRemoteRepository.java
index 35669be..feb6ead 100755
--- a/src/main/java/org/dstadler/jgit/unfinished/PullRemoteRepository.java
+++ b/src/main/java/org/dstadler/jgit/unfinished/PullRemoteRepository.java
@@ -42,14 +42,14 @@
-        Repository repository = cloneRepository();
-
-        System.out.println("Having repository: " + repository.getDirectory() + " with head: " +
-                repository.getRef(Constants.HEAD) + "/" + repository.resolve("HEAD") + "/" +
-                repository.resolve("refs/heads/master"));
-
-        // TODO: why do we get null here for HEAD?!? See also
-// http://stackoverflow.com/questions/17979660/jgit-pull-noheadexception
-
-        PullResult call = new Git(repository).pull().call();
-
-        System.out.println("Pulled from the remote repository: " + call);
-
-        repository.close();
+        try (Repository repository = cloneRepository()) {
+            System.out.println("Having repository: " + repository.getDirectory() + " with head: " +
+                    repository.getRef(Constants.HEAD) + "/" + repository.resolve("HEAD") + "/" +
+                    repository.resolve("refs/heads/master"));
+    
+            // TODO: why do we get null here for HEAD?!? See also
+    // http://stackoverflow.com/questions/17979660/jgit-pull-noheadexception
+    
+            try (Git git = new Git(repository)) {
+                PullResult call = git.pull().call();
+        
+                System.out.println("Pulled from the remote repository: " + call);
+            }
+        }
@@ -65 +65 @@
-        Git result = Git.cloneRepository()
+        try (Git result = Git.cloneRepository()
@@ -68,4 +68,4 @@
-                .call();
-
-        // Note: the call() returns an opened repository already which needs to be closed to avoid file handle leaks!
-        return result.getRepository();
+                .call()) {
+            // Note: the call() returns an opened repository already which needs to be closed to avoid file handle leaks!
+            return result.getRepository();
+        }
diff --git a/src/main/java/org/dstadler/jgit/unfinished/PushToRemoteRepository.java b/src/main/java/org/dstadler/jgit/unfinished/PushToRemoteRepository.java
index 39e644c..c45ed29 100644
--- a/src/main/java/org/dstadler/jgit/unfinished/PushToRemoteRepository.java
+++ b/src/main/java/org/dstadler/jgit/unfinished/PushToRemoteRepository.java
@@ -47 +47 @@
-        Git result = Git.cloneRepository()
+        try (Git result = Git.cloneRepository()
@@ -50,30 +50,26 @@
-                .call();
-
-        // prepare a second folder for the 2nd clone
-        File localPath2 = File.createTempFile("TestGitRepository", "");
-        localPath2.delete();
-
-        // then clone again
-        System.out.println("Cloning from file://" + localPath + " to " + localPath2);
-        Git result2 = Git.cloneRepository()
-                .setURI("file://" + localPath)
-                .setDirectory(localPath2)
-                .call();
-
-        // now open the created repository
-        FileRepositoryBuilder builder = new FileRepositoryBuilder();
-        Repository repository = builder.setGitDir(localPath2)
-                .readEnvironment() // scan environment GIT_* variables
-                .findGitDir() // scan up the file system tree
-                .build();
-
-        Git git = new Git(repository);
-        git.push()
-                .call();
-
-        System.out.println("Pushed from repository: " + repository.getDirectory() + " to remote repository at " + REMOTE_URL);
-
-        repository.close();
-
-        result.close();
-        result2.close();
+                .call()) {
+            // prepare a second folder for the 2nd clone
+            File localPath2 = File.createTempFile("TestGitRepository", "");
+            localPath2.delete();
+    
+            // then clone again
+            System.out.println("Cloning from file://" + localPath + " to " + localPath2);
+            try (Git result2 = Git.cloneRepository()
+                    .setURI("file://" + localPath)
+                    .setDirectory(localPath2)
+                    .call()) {
+                // now open the created repository
+                FileRepositoryBuilder builder = new FileRepositoryBuilder();
+                try (Repository repository = builder.setGitDir(localPath2)
+                        .readEnvironment() // scan environment GIT_* variables
+                        .findGitDir() // scan up the file system tree
+                        .build()) {
+                    try (Git git = new Git(repository)) {
+                        git.push()
+                                .call();
+                    }
+            
+                    System.out.println("Pushed from repository: " + repository.getDirectory() + " to remote repository at " + REMOTE_URL);
+                }
+            }
+        }
diff --git a/src/main/java/org/dstadler/jgit/unfinished/TestSubmodules.java b/src/main/java/org/dstadler/jgit/unfinished/TestSubmodules.java
index 4646745..337db85 100755
--- a/src/main/java/org/dstadler/jgit/unfinished/TestSubmodules.java
+++ b/src/main/java/org/dstadler/jgit/unfinished/TestSubmodules.java
@@ -39,13 +39,13 @@
-        Repository mainRepo = openMainRepo(mainRepoDir);
-        
-        addSubmodule(mainRepo);
-        
-        FileRepositoryBuilder builder = new FileRepositoryBuilder();
-
-        Repository subRepo = builder.setGitDir(new File("testrepo/.git"))
-          .readEnvironment() // scan environment GIT_* variables
-          .findGitDir() // scan up the file system tree
-          .build();
-
-        if(subRepo.isBare()) {
-            throw new IllegalStateException("Repository at " + subRepo.getDirectory() + " should not be bare");
+        try (Repository mainRepo = openMainRepo(mainRepoDir)) {
+            addSubmodule(mainRepo);
+            
+            FileRepositoryBuilder builder = new FileRepositoryBuilder();
+    
+            try (Repository subRepo = builder.setGitDir(new File("testrepo/.git"))
+              .readEnvironment() // scan environment GIT_* variables
+              .findGitDir() // scan up the file system tree
+              .build()) {
+                if(subRepo.isBare()) {
+                    throw new IllegalStateException("Repository at " + subRepo.getDirectory() + " should not be bare");
+                }
+            }
@@ -59,6 +59,9 @@
-        Repository subRepoInit = new Git(mainRepo).submoduleAdd().
-                setURI("https://github.com/github/testrepo.git").
-                setPath("testrepo").
-                call();
-        if(subRepoInit.isBare()) {
-            throw new IllegalStateException("Repository at " + subRepoInit.getDirectory() + " should not be bare");
+        try (Git git = new Git(mainRepo)) {
+            try (Repository subRepoInit = git.submoduleAdd().
+                    setURI("https://github.com/github/testrepo.git").
+                    setPath("testrepo").
+                    call()) {
+                if(subRepoInit.isBare()) {
+                    throw new IllegalStateException("Repository at " + subRepoInit.getDirectory() + " should not be bare");
+                }
+            }
@@ -90,5 +93,3 @@
-        Repository repository = FileRepositoryBuilder.create(new File(dir.getAbsolutePath(), ".git"));
-
-        System.out.println("Created a new repository at " + repository.getDirectory());
-
-        repository.close();
+        try (Repository repository = FileRepositoryBuilder.create(new File(dir.getAbsolutePath(), ".git"))) {
+            System.out.println("Created a new repository at " + repository.getDirectory());
+        }
diff --git a/src/main/java/org/dstadler/jgit/unfinished/TrackMaster.java b/src/main/java/org/dstadler/jgit/unfinished/TrackMaster.java
index 8a61cea..eb54c3f 100644
--- a/src/main/java/org/dstadler/jgit/unfinished/TrackMaster.java
+++ b/src/main/java/org/dstadler/jgit/unfinished/TrackMaster.java
@@ -47 +47 @@
-        Git result = Git.cloneRepository()
+        try (Git result = Git.cloneRepository()
@@ -50,24 +50,20 @@
-                .call();
-
-        // now open the created repository
-        FileRepositoryBuilder builder = new FileRepositoryBuilder();
-        Repository repository = builder.setGitDir(localPath)
-                .readEnvironment() // scan environment GIT_* variables
-                .findGitDir() // scan up the file system tree
-                .build();
-
-        Git git = new Git(repository);
-
-        git.branchCreate()
-                .setName("master")
-                // ?!? .setUpstreamMode(SetupUpstreamMode.SET_UPSTREAM)
-                .setStartPoint("origin/master")
-                .setForce(true)
-                .call();
-
-        System.out.println("Now tracking master in repository at " + repository.getDirectory() + " from origin/master at " +
-                REMOTE_URL);
-
-        repository.close();
-
-        result.close();
+                .call()) {
+            // now open the created repository
+            FileRepositoryBuilder builder = new FileRepositoryBuilder();
+            try (Repository repository = builder.setGitDir(localPath)
+                    .readEnvironment() // scan environment GIT_* variables
+                    .findGitDir() // scan up the file system tree
+                    .build()) {
+                try (Git git = new Git(repository)) {
+                    git.branchCreate()
+                            .setName("master")
+                            // ?!? .setUpstreamMode(SetupUpstreamMode.SET_UPSTREAM)
+                            .setStartPoint("origin/master")
+                            .setForce(true)
+                            .call();
+                }
+        
+                System.out.println("Now tracking master in repository at " + repository.getDirectory() + " from origin/master at " +
+                        REMOTE_URL);
+            }
+        }
diff --git a/src/main/java/org/dstadler/jgit/unfinished/UpdateIndex.java b/src/main/java/org/dstadler/jgit/unfinished/UpdateIndex.java
index c9b259e..0a84826 100644
--- a/src/main/java/org/dstadler/jgit/unfinished/UpdateIndex.java
+++ b/src/main/java/org/dstadler/jgit/unfinished/UpdateIndex.java
@@ -42,19 +42,17 @@
-		final Repository repo = CookbookHelper.openJGitCookbookRepository();
-		final Git git = new Git(repo);
-		final String testFile = "README.md";
-		
-		try {
-			// Modify the file
-			FileUtils.write(new File(testFile), new Date().toString());			
-			System.out.println("Modified files: " + getModifiedFiles(git));
-			
-			new AssumeChangedCommand(repo, testFile, true).call();
-			System.out.println("Modified files after assume-changed: " + getModifiedFiles(git));
-
-			new AssumeChangedCommand(repo, testFile, false).call();
-			System.out.println("Modified files after no-assume-changed: " + getModifiedFiles(git));
-
-			git.checkout().addPath(testFile).call();
-			System.out.println("Modified files after reset: " + getModifiedFiles(git));
-		} finally {
-			repo.close();
+		try (final Repository repo = CookbookHelper.openJGitCookbookRepository()) {
+    		try (final Git git = new Git(repo)) {
+    		    final String testFile = "README.md";
+    		
+    			// Modify the file
+    			FileUtils.write(new File(testFile), new Date().toString());			
+    			System.out.println("Modified files: " + getModifiedFiles(git));
+    			
+    			new AssumeChangedCommand(repo, testFile, true).call();
+    			System.out.println("Modified files after assume-changed: " + getModifiedFiles(git));
+    
+    			new AssumeChangedCommand(repo, testFile, false).call();
+    			System.out.println("Modified files after no-assume-changed: " + getModifiedFiles(git));
+    
+    			git.checkout().addPath(testFile).call();
+    			System.out.println("Modified files after reset: " + getModifiedFiles(git));
+    		}
diff --git a/src/main/java/org/dstadler/jgit/unfinished/WalkTreeNonRecursive.java b/src/main/java/org/dstadler/jgit/unfinished/WalkTreeNonRecursive.java
index d6854f5..4941260 100644
--- a/src/main/java/org/dstadler/jgit/unfinished/WalkTreeNonRecursive.java
+++ b/src/main/java/org/dstadler/jgit/unfinished/WalkTreeNonRecursive.java
@@ -37,18 +37,19 @@
-        Repository repository = CookbookHelper.openJGitCookbookRepository();
-
-        Ref head = repository.getRef("HEAD");
-
-        // a RevWalk allows to walk over commits based on some filtering that is defined
-        RevWalk walk = new RevWalk(repository);
-
-        RevCommit commit = walk.parseCommit(head.getObjectId());
-        RevTree tree = commit.getTree();
-        System.out.println("Having tree: " + tree);
-
-        // now use a TreeWalk to iterate over all files in the Tree recursively
-        // you can set Filters to narrow down the results if needed
-        TreeWalk treeWalk = new TreeWalk(repository);
-        treeWalk.addTree(tree);
-        treeWalk.setRecursive(false);
-        while (treeWalk.next()) {
-            System.out.println("found: " + treeWalk.getPathString());
+        try (Repository repository = CookbookHelper.openJGitCookbookRepository()) {
+            Ref head = repository.getRef("HEAD");
+    
+            // a RevWalk allows to walk over commits based on some filtering that is defined
+            try (RevWalk walk = new RevWalk(repository)) {
+                RevCommit commit = walk.parseCommit(head.getObjectId());
+                RevTree tree = commit.getTree();
+                System.out.println("Having tree: " + tree);
+        
+                // now use a TreeWalk to iterate over all files in the Tree recursively
+                // you can set Filters to narrow down the results if needed
+                try (TreeWalk treeWalk = new TreeWalk(repository)) {
+                    treeWalk.addTree(tree);
+                    treeWalk.setRecursive(false);
+                    while (treeWalk.next()) {
+                        System.out.println("found: " + treeWalk.getPathString());
+                    }
+                }
+            }
@@ -56,4 +56,0 @@
-
-
-
-        repository.close();
diff --git a/src/main/java/org/dstadler/jgit/unfinished/WalkTreeRecursive.java b/src/main/java/org/dstadler/jgit/unfinished/WalkTreeRecursive.java
index 2c1dbf0..d240f4c 100644
--- a/src/main/java/org/dstadler/jgit/unfinished/WalkTreeRecursive.java
+++ b/src/main/java/org/dstadler/jgit/unfinished/WalkTreeRecursive.java
@@ -37,18 +37,19 @@
-        Repository repository = CookbookHelper.openJGitCookbookRepository();
-
-        Ref head = repository.getRef("HEAD");
-
-        // a RevWalk allows to walk over commits based on some filtering that is defined
-        RevWalk walk = new RevWalk(repository);
-
-        RevCommit commit = walk.parseCommit(head.getObjectId());
-        RevTree tree = commit.getTree();
-        System.out.println("Having tree: " + tree);
-
-        // now use a TreeWalk to iterate over all files in the Tree recursively
-        // you can set Filters to narrow down the results if needed
-        TreeWalk treeWalk = new TreeWalk(repository);
-        treeWalk.addTree(tree);
-        treeWalk.setRecursive(true);
-        while (treeWalk.next()) {
-            System.out.println("found: " + treeWalk.getPathString());
+        try (Repository repository = CookbookHelper.openJGitCookbookRepository()) {
+            Ref head = repository.getRef("HEAD");
+    
+            // a RevWalk allows to walk over commits based on some filtering that is defined
+            try (RevWalk walk = new RevWalk(repository)) {
+                RevCommit commit = walk.parseCommit(head.getObjectId());
+                RevTree tree = commit.getTree();
+                System.out.println("Having tree: " + tree);
+        
+                // now use a TreeWalk to iterate over all files in the Tree recursively
+                // you can set Filters to narrow down the results if needed
+                try (TreeWalk treeWalk = new TreeWalk(repository)) {
+                    treeWalk.addTree(tree);
+                    treeWalk.setRecursive(true);
+                    while (treeWalk.next()) {
+                        System.out.println("found: " + treeWalk.getPathString());
+                    }
+                }
+            }
@@ -56,2 +56,0 @@
-
-        repository.close();
Diff Between 83548c524a6f065db533dcdd2a7041e656fcd60b a51ba8b290f2acb81edb665dc33d75f582791026diff --git a/pom.xml b/pom.xml
index 40ea43a..af4def9 100644
--- a/pom.xml
+++ b/pom.xml
@@ -40,0 +41,7 @@
+
+    <dependency>
+      <groupId>junit</groupId>
+      <artifactId>junit</artifactId>
+      <version>4.12</version>
+      <scope>test</scope>
+    </dependency>
Diff Between a51ba8b290f2acb81edb665dc33d75f582791026 f0d1bf162930d050b77b814ffdd7e211833ab5e1diff --git a/src/main/java/org/dstadler/jgit/api/ReadTagFromName.java b/src/main/java/org/dstadler/jgit/api/ReadTagFromName.java
index dad0ebf..dee9ae7 100644
--- a/src/main/java/org/dstadler/jgit/api/ReadTagFromName.java
+++ b/src/main/java/org/dstadler/jgit/api/ReadTagFromName.java
@@ -34 +34,7 @@
-        Repository repository = CookbookHelper.openJGitCookbookRepository();
+        try (Repository repository = CookbookHelper.openJGitCookbookRepository()) {
+            // a RevWalk allows to retrieve information from the repository
+            try (RevWalk walk = new RevWalk(repository)) {
+                // a simple tag that is not annotated
+                Ref simpleTag = repository.getRef("initialtag");
+                RevObject any = walk.parseAny(simpleTag.getObjectId());
+                System.out.println("Commit: " + any);
@@ -36,2 +42,4 @@
-        // a RevWalk allows to retrieve information from the repository
-        RevWalk walk = new RevWalk(repository);
+                // an annotated tag
+                Ref annotatedTag = repository.getRef("secondtag");
+                any = walk.parseAny(annotatedTag.getObjectId());
+                System.out.println("Tag: " + any);
@@ -39,4 +47,4 @@
-        // a simple tag that is not annotated
-        Ref simpleTag = repository.getRef("initialtag");
-        RevObject any = walk.parseAny(simpleTag.getObjectId());
-        System.out.println("Commit: " + any);
+                // finally try to print out the tag-content
+                System.out.println("\nTag-Content: \n");
+                ObjectLoader loader = repository.open(annotatedTag.getObjectId());
+                loader.copyTo(System.out);
@@ -44,13 +52,3 @@
-        // an annotated tag
-        Ref annotatedTag = repository.getRef("secondtag");
-        any = walk.parseAny(annotatedTag.getObjectId());
-        System.out.println("Tag: " + any);
-
-        // finally try to print out the tag-content
-        System.out.println("\nTag-Content: \n");
-        ObjectLoader loader = repository.open(annotatedTag.getObjectId());
-        loader.copyTo(System.out);
-
-        walk.dispose();
-
-        repository.close();
+                walk.dispose();
+            }
+        }
diff --git a/src/main/java/org/dstadler/jgit/api/ReadUserConfig.java b/src/main/java/org/dstadler/jgit/api/ReadUserConfig.java
index 618d57b..67a0bea 100755
--- a/src/main/java/org/dstadler/jgit/api/ReadUserConfig.java
+++ b/src/main/java/org/dstadler/jgit/api/ReadUserConfig.java
@@ -31 +31,9 @@
-        Repository repository = CookbookHelper.openJGitCookbookRepository();
+        try (Repository repository = CookbookHelper.openJGitCookbookRepository()) {
+            Config config = repository.getConfig();
+            String name = config.getString("user", null, "name");
+            String email = config.getString("user", null, "email");
+            if (name == null || email == null) {
+                System.out.println("User identity is unknown!");
+            } else {
+                System.out.println("User identity is " + name + " <" + email + ">");
+            }
@@ -33,7 +41,4 @@
-        Config config = repository.getConfig();
-        String name = config.getString("user", null, "name");
-        String email = config.getString("user", null, "email");
-        if (name == null || email == null) {
-            System.out.println("User identity is unknown!");
-        } else {
-            System.out.println("User identity is " + name + " <" + email + ">");
+            String url = config.getString("remote", "origin", "url");
+            if (url != null) {
+                    System.out.println("Origin comes from " + url);
+            }
@@ -41,7 +45,0 @@
-        
-        String url = config.getString("remote", "origin", "url");
-        if (url != null) {
-                System.out.println("Origin comes from " + url);
-        }
-        
-        repository.close();
diff --git a/src/main/java/org/dstadler/jgit/api/ResolveRef.java b/src/main/java/org/dstadler/jgit/api/ResolveRef.java
index 40648fd..ea80776 100644
--- a/src/main/java/org/dstadler/jgit/api/ResolveRef.java
+++ b/src/main/java/org/dstadler/jgit/api/ResolveRef.java
@@ -33 +33,4 @@
-        Repository repository = CookbookHelper.openJGitCookbookRepository();
+        try (Repository repository = CookbookHelper.openJGitCookbookRepository()) {
+            // basic syntax is similar to getRef()
+            ObjectId id = repository.resolve("HEAD");
+            System.out.println("ObjectId of HEAD: " + id);
@@ -35,3 +38,3 @@
-        // basic syntax is similar to getRef()
-        ObjectId id = repository.resolve("HEAD");
-        System.out.println("ObjectId of HEAD: " + id);
+            // however resolve() supports almost all of the git-syntax, where getRef() only works on names
+            id = repository.resolve("HEAD^1");
+            System.out.println("ObjectId of HEAD: " + id);
@@ -39,3 +42,2 @@
-        // however resolve() supports almost all of the git-syntax, where getRef() only works on names
-        id = repository.resolve("HEAD^1");
-        System.out.println("ObjectId of HEAD: " + id);
+            id = repository.resolve("b419522521af553ae2752fd1b609f2aa11062243");
+            System.out.println("ObjectId of specific commit: " + id);
@@ -43,7 +45,3 @@
-        id = repository.resolve("b419522521af553ae2752fd1b609f2aa11062243");
-        System.out.println("ObjectId of specific commit: " + id);
-        
-        id = repository.resolve("05d18a76875716fbdbd2c200091b40caa06c713d");
-        System.out.println("ObjectId of merged commit: " + id);
-
-        repository.close();
+            id = repository.resolve("05d18a76875716fbdbd2c200091b40caa06c713d");
+            System.out.println("ObjectId of merged commit: " + id);
+        }
diff --git a/src/main/java/org/dstadler/jgit/api/ShowBranchTrackingStatus.java b/src/main/java/org/dstadler/jgit/api/ShowBranchTrackingStatus.java
index 90f0920..b428cd6 100644
--- a/src/main/java/org/dstadler/jgit/api/ShowBranchTrackingStatus.java
+++ b/src/main/java/org/dstadler/jgit/api/ShowBranchTrackingStatus.java
@@ -40,9 +40,11 @@
-        Repository repository = CookbookHelper.openJGitCookbookRepository();
-
-        List<Ref> call = new Git(repository).branchList().call();
-        for (Ref ref : call) {
-            List<Integer> counts = getCounts(repository, ref.getName());
-            System.out.println("For branch: " + ref.getName());
-            System.out.println("Commits ahead : " + counts.get(0));
-            System.out.println("Commits behind : " + counts.get(1));
-            System.out.println();
+        try (Repository repository = CookbookHelper.openJGitCookbookRepository()) {
+            try (Git git = new Git(repository)) {
+                List<Ref> call = git.branchList().call();
+                for (Ref ref : call) {
+                    List<Integer> counts = getCounts(repository, ref.getName());
+                    System.out.println("For branch: " + ref.getName());
+                    System.out.println("Commits ahead : " + counts.get(0));
+                    System.out.println("Commits behind : " + counts.get(1));
+                    System.out.println();
+                }
+            }
@@ -50,2 +51,0 @@
-
-        repository.close();
diff --git a/src/main/java/org/dstadler/jgit/porcelain/FetchRemoteCommits.java b/src/main/java/org/dstadler/jgit/porcelain/FetchRemoteCommits.java
index cb7c394..11e1415 100644
--- a/src/main/java/org/dstadler/jgit/porcelain/FetchRemoteCommits.java
+++ b/src/main/java/org/dstadler/jgit/porcelain/FetchRemoteCommits.java
@@ -31 +31 @@
- * 
+ *
@@ -37,7 +37,7 @@
-        Repository repository = CookbookHelper.openJGitCookbookRepository();
-
-        System.out.println("Starting fetch");
-        FetchResult result = new Git(repository).fetch().setCheckFetchedObjects(true).call();
-        System.out.println("Messages: " + result.getMessages());
-
-        repository.close();
+        try (Repository repository = CookbookHelper.openJGitCookbookRepository()) {
+            System.out.println("Starting fetch");
+            try (Git git = new Git(repository)) {
+                FetchResult result = git.fetch().setCheckFetchedObjects(true).call();
+                System.out.println("Messages: " + result.getMessages());
+            }
+        }
Diff Between f0d1bf162930d050b77b814ffdd7e211833ab5e1 360ee9b676611cb24d41692d2ae8461abcd7ae19diff --git a/src/test/java/org/dstadler/jgit/JGitBugTest.java b/src/test/java/org/dstadler/jgit/JGitBugTest.java
new file mode 100644
index 0000000..c1c32a1
--- /dev/null
+++ b/src/test/java/org/dstadler/jgit/JGitBugTest.java
@@ -0,0 +1,35 @@
+package org.dstadler.jgit;
+
+import static org.junit.Assert.assertNotNull;
+
+import java.io.IOException;
+
+import org.dstadler.jgit.helper.CookbookHelper;
+import org.eclipse.jgit.lib.ObjectLoader;
+import org.eclipse.jgit.lib.ObjectReader;
+import org.eclipse.jgit.lib.Ref;
+import org.eclipse.jgit.lib.Repository;
+import org.eclipse.jgit.revwalk.RevWalk;
+import org.junit.Test;
+
+/**
+ * Tests which show issues with JGit that we reported upstream.
+ */
+public class JGitBugTest {
+    @Test
+    public void testRevWalkDisposeClosesReader() throws IOException {
+        try (Repository repo = CookbookHelper.openJGitCookbookRepository()) {
+            try (ObjectReader reader = repo.newObjectReader()) {
+                try (RevWalk walk = new RevWalk(reader)) {
+                    walk.dispose();
+
+                    Ref head = repo.getRef("refs/heads/master");
+                    System.out.println("Found head: " + head);
+
+                    ObjectLoader loader = reader.open(head.getObjectId());
+                    assertNotNull(loader);
+                }
+            }
+        }
+    }
+}
diff --git a/src/test/java/org/dstadler/jgit/porcelain/PorcelainTest.java b/src/test/java/org/dstadler/jgit/porcelain/PorcelainTest.java
new file mode 100644
index 0000000..609d21f
--- /dev/null
+++ b/src/test/java/org/dstadler/jgit/porcelain/PorcelainTest.java
@@ -0,0 +1,39 @@
+package org.dstadler.jgit.porcelain;
+
+import org.junit.Test;
+
+
+public class PorcelainTest {
+    @Test
+    public void runSamples() throws Exception {
+        // simply call all the samples to see any severe problems with the samples
+        AddAndListNoteOfCommit.main(null);
+        AddFile.main(null);
+        CleanUntrackedFiles.main(null);
+        CloneRemoteRepository.main(null);
+        // does not run without changes: CloneRemoteRepositoryWithAuthentication.main(null);
+        // TODO: sometimes fails because there are still files open?!: CollectGarbage.main(null);
+        CommitAll.main(null);
+        CommitFile.main(null);
+        CreateAndDeleteBranch.main(null);
+        CreateAndDeleteTag.main(null);
+        CreateArchive.main(null);
+        CreateCustomFormatArchive.main(null);
+        CreateListApplyAndDropStash.main(null);
+        DiffRenamedFile.main(null);
+        FetchRemoteCommits.main(null);
+        InitRepository.main(null);
+        ListBranches.main(null);
+        ListNotes.main(null);
+        ListRemoteRepository.main(null);
+        ListRemotes.main(null);
+        ListTags.main(null);
+        ShowBlame.main(null);
+        ShowBranchDiff.main(null);
+        ShowChangedFilesBetweenCommits.main(null);
+        ShowFileDiff.main(null);
+        ShowLog.main(null);
+        ShowStatus.main(null);
+        WalkAllCommits.main(null);
+    }
+}
Diff Between 360ee9b676611cb24d41692d2ae8461abcd7ae19 98d1eaa267bc78d2c603ce58ef298b7b986df907diff --git a/src/main/java/org/dstadler/jgit/porcelain/ShowBranchDiff.java b/src/main/java/org/dstadler/jgit/porcelain/ShowBranchDiff.java
index 61df9c5..9e2511d 100755
--- a/src/main/java/org/dstadler/jgit/porcelain/ShowBranchDiff.java
+++ b/src/main/java/org/dstadler/jgit/porcelain/ShowBranchDiff.java
@@ -41 +41 @@
- * 
+ *
@@ -47 +47,5 @@
-        Repository repository = CookbookHelper.openJGitCookbookRepository();
+        try (Repository repository = CookbookHelper.openJGitCookbookRepository()) {
+            try (Git git = new Git(repository)) {
+                if(repository.getRef("refs/heads/testbranch") == null) {
+                    // first we need to ensure that the remote branch is visible locally
+                    Ref ref = git.branchCreate().setName("testbranch").setStartPoint("origin/testbranch").call();
@@ -49,3 +53,2 @@
-        // the diff works on TreeIterators, we prepare two for the two branches
-        AbstractTreeIterator oldTreeParser = prepareTreeParser(repository, "refs/heads/testbranch");
-        AbstractTreeIterator newTreeParser = prepareTreeParser(repository, "refs/heads/master");
+                    System.out.println("Created local testbranch with ref: " + ref);
+                }
@@ -53,4 +56,10 @@
-        // then the procelain diff-command returns a list of diff entries
-        List<DiffEntry> diff = new Git(repository).diff().setOldTree(oldTreeParser).setNewTree(newTreeParser).call();
-        for (DiffEntry entry : diff) {
-            System.out.println("Entry: " + entry);
+                // the diff works on TreeIterators, we prepare two for the two branches
+                AbstractTreeIterator oldTreeParser = prepareTreeParser(repository, "refs/heads/testbranch");
+                AbstractTreeIterator newTreeParser = prepareTreeParser(repository, "refs/heads/master");
+
+                // then the procelain diff-command returns a list of diff entries
+                List<DiffEntry> diff = git.diff().setOldTree(oldTreeParser).setNewTree(newTreeParser).call();
+                for (DiffEntry entry : diff) {
+                    System.out.println("Entry: " + entry);
+                }
+            }
@@ -58,2 +66,0 @@
-
-        repository.close();
@@ -67,3 +74,3 @@
-        RevWalk walk = new RevWalk(repository);
-        RevCommit commit = walk.parseCommit(head.getObjectId());
-        RevTree tree = walk.parseTree(commit.getTree().getId());
+        try (RevWalk walk = new RevWalk(repository)) {
+            RevCommit commit = walk.parseCommit(head.getObjectId());
+            RevTree tree = walk.parseTree(commit.getTree().getId());
@@ -71,3 +78,8 @@
-        CanonicalTreeParser oldTreeParser = new CanonicalTreeParser();
-        try (ObjectReader oldReader = repository.newObjectReader()) {
-            oldTreeParser.reset(oldReader, tree.getId());
+            CanonicalTreeParser oldTreeParser = new CanonicalTreeParser();
+            try (ObjectReader oldReader = repository.newObjectReader()) {
+                oldTreeParser.reset(oldReader, tree.getId());
+            }
+
+            walk.dispose();
+
+            return oldTreeParser;
@@ -75,4 +86,0 @@
-
-        walk.dispose();
-
-        return oldTreeParser;
Diff Between 98d1eaa267bc78d2c603ce58ef298b7b986df907 cf00333b00c4e835b0d17a5b96b093a41429c983diff --git a/src/main/java/org/dstadler/jgit/porcelain/DiffRenamedFile.java b/src/main/java/org/dstadler/jgit/porcelain/DiffRenamedFile.java
index 1e64de1..8b7d1f0 100644
--- a/src/main/java/org/dstadler/jgit/porcelain/DiffRenamedFile.java
+++ b/src/main/java/org/dstadler/jgit/porcelain/DiffRenamedFile.java
@@ -32,3 +32,3 @@
-		RevWalk walk = new RevWalk(repository);
-		RevCommit commit = walk.parseCommit(ObjectId.fromString(objectId));
-		RevTree tree = walk.parseTree(commit.getTree().getId());
+		try (RevWalk walk = new RevWalk(repository)) {
+    		RevCommit commit = walk.parseCommit(ObjectId.fromString(objectId));
+    		RevTree tree = walk.parseTree(commit.getTree().getId());
@@ -36,3 +36,8 @@
-		CanonicalTreeParser oldTreeParser = new CanonicalTreeParser();
-		try (ObjectReader oldReader = repository.newObjectReader()) {
-			oldTreeParser.reset(oldReader, tree.getId());
+    		CanonicalTreeParser oldTreeParser = new CanonicalTreeParser();
+    		try (ObjectReader oldReader = repository.newObjectReader()) {
+    			oldTreeParser.reset(oldReader, tree.getId());
+    		}
+
+    		walk.dispose();
+
+    		return oldTreeParser;
@@ -40,4 +44,0 @@
-
-		walk.dispose();
-
-		return oldTreeParser;
@@ -51,10 +52,12 @@
-		List<DiffEntry> diffList = new Git(repo).diff().
-			setOldTree(prepareTreeParser(repo, oldCommit)).
-			setNewTree(prepareTreeParser(repo, newCommit)).
-			setPathFilter(FollowFilter.create(path, diffConfig)).
-			call();
-		if (diffList.size() == 0)
-			return null;
-		if (diffList.size() > 1)
-			throw new RuntimeException("invalid diff");
-		return diffList.get(0);
+		try (Git git = new Git(repo)) {
+            List<DiffEntry> diffList = git.diff().
+    			setOldTree(prepareTreeParser(repo, oldCommit)).
+    			setNewTree(prepareTreeParser(repo, newCommit)).
+    			setPathFilter(FollowFilter.create(path, diffConfig)).
+    			call();
+    		if (diffList.size() == 0)
+    			return null;
+    		if (diffList.size() > 1)
+    			throw new RuntimeException("invalid diff");
+    		return diffList.get(0);
+		}
@@ -65 +68,8 @@
-		Repository repo = CookbookHelper.openJGitCookbookRepository();
+		try (Repository repo = CookbookHelper.openJGitCookbookRepository()) {
+    		// Diff README.md between two commits. The file is named README.md in
+    		// the new commit (5a10bd6e), but was named "jgit-cookbook README.md" in
+    		// the old commit (2e1d65e4).
+    		DiffEntry diff = diffFile(repo,
+    			"2e1d65e4cf6c5e267e109aa20fd68ae119fa5ec9",
+    			"5a10bd6ee431e362facb03cfe763b9a3d9dfd02d",
+    			"README.md");
@@ -67,12 +77,6 @@
-		// Diff README.md between two commits. The file is named README.md in
-		// the new commit (5a10bd6e), but was named "jgit-cookbook README.md" in
-		// the old commit (2e1d65e4).
-		DiffEntry diff = diffFile(repo,
-			"2e1d65e4cf6c5e267e109aa20fd68ae119fa5ec9",
-			"5a10bd6ee431e362facb03cfe763b9a3d9dfd02d",
-			"README.md");
-
-		// Display the diff.
-		DiffFormatter formatter = new DiffFormatter(System.out);
-		formatter.setRepository(repo);
-		formatter.format(diff);
+    		// Display the diff.
+    		try (DiffFormatter formatter = new DiffFormatter(System.out)) {
+        		formatter.setRepository(repo);
+        		formatter.format(diff);
+    		}
+		}
Diff Between cf00333b00c4e835b0d17a5b96b093a41429c983 b0ad2e4e4ab901f0b391c1427a604b4eab8cbe22diff --git a/.settings/org.eclipse.jdt.core.prefs b/.settings/org.eclipse.jdt.core.prefs
index 8867e29..92849b0 100644
--- a/.settings/org.eclipse.jdt.core.prefs
+++ b/.settings/org.eclipse.jdt.core.prefs
@@ -87,0 +88 @@
+org.eclipse.jdt.core.compiler.problem.unusedExceptionParameter=ignore
diff --git a/.settings/org.moreunit.prefs b/.settings/org.moreunit.prefs
new file mode 100644
index 0000000..206cf3d
--- /dev/null
+++ b/.settings/org.moreunit.prefs
@@ -0,0 +1,4 @@
+eclipse.preferences.version=1
+org.moreunit.preferences.version=2
+org.moreunit.unitsourcefolder=jgit-cookbook\:src/main/java\:jgit-cookbook\:src/test/java
+org.moreunit.useprojectsettings=true
Diff Between b0ad2e4e4ab901f0b391c1427a604b4eab8cbe22 d9b0ae0e1608f7c62e703b99bd912ea1487aada1diff --git a/build.gradle b/build.gradle
index a221537..081f52a 100644
--- a/build.gradle
+++ b/build.gradle
@@ -18,0 +19,2 @@
+
+    testCompile "junit:junit:4+"
diff --git a/src/test/java/org/dstadler/jgit/api/ApiTest.java b/src/test/java/org/dstadler/jgit/api/ApiTest.java
new file mode 100644
index 0000000..660102c
--- /dev/null
+++ b/src/test/java/org/dstadler/jgit/api/ApiTest.java
@@ -0,0 +1,23 @@
+package org.dstadler.jgit.api;
+
+import org.junit.Test;
+
+
+public class ApiTest {
+    @Test
+    public void runSamples() throws Exception {
+        // simply call all the samples to see any severe problems with the samples
+        CheckMergeStatusOfCommit.main(null);
+        GetCommitMessage.main(null);
+        GetFileAttributes.main(null);
+        GetRefFromName.main(null);
+        GetRevCommitFromObjectId.main(null);
+        GetRevTreeFromObjectId.main(null);
+        PrintRemotes.main(null);
+        ReadBlobContents.main(null);
+        ReadUserConfig.main(null);
+        ResolveRef.main(null);
+        ShowBranchTrackingStatus.main(null);
+        WalkRev.main(null);
+    }
+}
Diff Between d9b0ae0e1608f7c62e703b99bd912ea1487aada1 a87569a9377986e633f1b362d2d328cb55805718diff --git a/README.md b/README.md
index 75da612..a56ee15 100644
--- a/README.md
+++ b/README.md
@@ -126,3 +126 @@
-   You may obtain a copy of the License at
-
-     http://www.apache.org/licenses/LICENSE-2.0
+   You may obtain a copy of the License at [http://www.apache.org/licenses/LICENSE-2.0](http://www.apache.org/licenses/LICENSE-2.0)
Diff Between a87569a9377986e633f1b362d2d328cb55805718 c9dbf35527101c8d0a3b43c57dc4ae2a892f6905diff --git a/README.md b/README.md
index 404a518..75da612 100644
--- a/README.md
+++ b/README.md
@@ -135 +134,0 @@
-some more text
Diff Between c9dbf35527101c8d0a3b43c57dc4ae2a892f6905 d32a7246123bc848b8801076f9c742a54c16cef9diff --git a/build.gradle b/build.gradle
index f4dbb73..a221537 100644
--- a/build.gradle
+++ b/build.gradle
@@ -15,2 +15,2 @@
-	compile 'org.eclipse.jgit:org.eclipse.jgit:4.0.2.201509141540-r'
-	compile 'org.eclipse.jgit:org.eclipse.jgit.archive:4.0.2.201509141540-r'
+	compile 'org.eclipse.jgit:org.eclipse.jgit:4.1.0.201509280440-r'
+	compile 'org.eclipse.jgit:org.eclipse.jgit.archive:4.1.0.201509280440-r'
diff --git a/pom.xml b/pom.xml
index cd290f5..40ea43a 100644
--- a/pom.xml
+++ b/pom.xml
@@ -23 +23 @@
-      <version>4.0.1.201506240215-r</version>
+      <version>4.1.0.201509280440-r</version>
@@ -28 +28 @@
-      <version>4.0.1.201506240215-r</version>
+      <version>4.1.0.201509280440-r</version>
Diff Between d32a7246123bc848b8801076f9c742a54c16cef9 aadec18ad448b9bc3357ec5e9327a39da992c2f7diff --git a/build.gradle b/build.gradle
index 5b274fb..f4dbb73 100644
--- a/build.gradle
+++ b/build.gradle
@@ -15,2 +15,2 @@
-	compile 'org.eclipse.jgit:org.eclipse.jgit:4.0.1.201506240215-r'
-	compile 'org.eclipse.jgit:org.eclipse.jgit.archive:4.0.1.201506240215-r'
+	compile 'org.eclipse.jgit:org.eclipse.jgit:4.0.2.201509141540-r'
+	compile 'org.eclipse.jgit:org.eclipse.jgit.archive:4.0.2.201509141540-r'
Diff Between aadec18ad448b9bc3357ec5e9327a39da992c2f7 4390251e7cd02ca1a9b4c4b912951c2779791de1diff --git a/build.gradle b/build.gradle
index 8c53bb7..5b274fb 100644
--- a/build.gradle
+++ b/build.gradle
@@ -29,0 +30 @@
+   new File(project.projectDir, '.classpath').with { it.text = it.readLines().findAll { it }.unique().join('\n') }
@@ -35 +36 @@
-	gradleVersion = '2.5'
+	gradleVersion = '2.7'
diff --git a/gradle/wrapper/gradle-wrapper.jar b/gradle/wrapper/gradle-wrapper.jar
index b5166da..e8c6bf7 100644
--- a/gradle/wrapper/gradle-wrapper.jar
+++ b/gradle/wrapper/gradle-wrapper.jar
Binary files differ
diff --git a/gradle/wrapper/gradle-wrapper.properties b/gradle/wrapper/gradle-wrapper.properties
index 3f70722..8126aa4 100644
--- a/gradle/wrapper/gradle-wrapper.properties
+++ b/gradle/wrapper/gradle-wrapper.properties
@@ -1 +1 @@
-#Mon Aug 10 07:49:07 CEST 2015
+#Sun Sep 20 14:44:43 CEST 2015
@@ -6 +6 @@
-distributionUrl=https\://services.gradle.org/distributions/gradle-2.5-bin.zip
+distributionUrl=https\://services.gradle.org/distributions/gradle-2.7-bin.zip
diff --git a/gradlew b/gradlew
index 91a7e26..97fac78 100755
--- a/gradlew
+++ b/gradlew
@@ -45,5 +44,0 @@
-# For Cygwin, ensure paths are in UNIX format before anything is touched.
-if $cygwin ; then
-    [ -n "$JAVA_HOME" ] && JAVA_HOME=`cygpath --unix "$JAVA_HOME"`
-fi
-
@@ -116,0 +112 @@
+    JAVACMD=`cygpath --unix "$JAVACMD"`
Diff Between 4390251e7cd02ca1a9b4c4b912951c2779791de1 b51658199fb6921e8d359af0e7fa06c50049c3c4diff --git a/src/main/java/org/dstadler/jgit/porcelain/CloneRemoteRepository.java b/src/main/java/org/dstadler/jgit/porcelain/CloneRemoteRepository.java
index d1ce016..33d1bb4 100644
--- a/src/main/java/org/dstadler/jgit/porcelain/CloneRemoteRepository.java
+++ b/src/main/java/org/dstadler/jgit/porcelain/CloneRemoteRepository.java
@@ -45 +45 @@
-        Git result = Git.cloneRepository()
+        try (Git result = Git.cloneRepository()
@@ -48,3 +48 @@
-                .call();
-
-        try {
+                .call()) {
@@ -53,3 +51,3 @@
-        } finally {
-        	result.getRepository().close();
-        	result.close();
+
+            // workaround for https://bugs.eclipse.org/bugs/show_bug.cgi?id=474093
+	        result.getRepository().close();
diff --git a/src/main/java/org/dstadler/jgit/porcelain/CloneRemoteRepositoryWithAuthentication.java b/src/main/java/org/dstadler/jgit/porcelain/CloneRemoteRepositoryWithAuthentication.java
index b07b622..7966242 100755
--- a/src/main/java/org/dstadler/jgit/porcelain/CloneRemoteRepositoryWithAuthentication.java
+++ b/src/main/java/org/dstadler/jgit/porcelain/CloneRemoteRepositoryWithAuthentication.java
@@ -86,0 +87,3 @@
+
+            // workaround for https://bugs.eclipse.org/bugs/show_bug.cgi?id=474093
+            result.getRepository().close();
diff --git a/src/main/java/org/dstadler/jgit/unfinished/PullFromRemoteRepository.java b/src/main/java/org/dstadler/jgit/unfinished/PullFromRemoteRepository.java
index 2f2f187..0d15f20 100644
--- a/src/main/java/org/dstadler/jgit/unfinished/PullFromRemoteRepository.java
+++ b/src/main/java/org/dstadler/jgit/unfinished/PullFromRemoteRepository.java
@@ -45 +45 @@
-        Git result = Git.cloneRepository()
+        try (Git result = Git.cloneRepository()
@@ -48,3 +48 @@
-                .call();
-
-        try {
+                .call()) {
@@ -53,3 +51,4 @@
-	        Git git = new Git(result.getRepository());
-	        git.pull()
-	        .call();
+	        try (Git git = new Git(result.getRepository())) {
+                git.pull()
+                .call();
+	        }
@@ -58,2 +57,3 @@
-        } finally {
-        	result.close();
+
+            // workaround for https://bugs.eclipse.org/bugs/show_bug.cgi?id=474093
+            result.getRepository().close();
Diff Between b51658199fb6921e8d359af0e7fa06c50049c3c4 2c11ab452269e5c27290548cdf403df53fea2620diff --git a/gradle/wrapper/gradle-wrapper.properties b/gradle/wrapper/gradle-wrapper.properties
index 101f5ac..3f70722 100644
--- a/gradle/wrapper/gradle-wrapper.properties
+++ b/gradle/wrapper/gradle-wrapper.properties
@@ -1,6 +1,6 @@
-#Mon May 11 12:45:46 CEST 2015
-distributionBase=GRADLE_USER_HOME
-distributionPath=wrapper/dists
-zipStoreBase=GRADLE_USER_HOME
-zipStorePath=wrapper/dists
-distributionUrl=https\://services.gradle.org/distributions/gradle-2.4-bin.zip
+#Mon Aug 10 07:49:07 CEST 2015
+distributionBase=GRADLE_USER_HOME
+distributionPath=wrapper/dists
+zipStoreBase=GRADLE_USER_HOME
+zipStorePath=wrapper/dists
+distributionUrl=https\://services.gradle.org/distributions/gradle-2.5-bin.zip
Diff Between 2c11ab452269e5c27290548cdf403df53fea2620 766869389980f912ec17d27884fc79325260eb97diff --git a/build.gradle b/build.gradle
index 19e2587..8c53bb7 100644
--- a/build.gradle
+++ b/build.gradle
@@ -35 +35 @@
-	gradleVersion = '2.4'
+	gradleVersion = '2.5'
Diff Between 766869389980f912ec17d27884fc79325260eb97 d25358cde70cdaa511c0fa6674c3164a0f590b4ediff --git a/README.md b/README.md
index 5329442..404a518 100644
--- a/README.md
+++ b/README.md
@@ -71,0 +72 @@
+* [Clone a remote reppository via SSH protocol and username/password credentials](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/porcelain/CloneRemoteRepositoryWithAuthentication.java)
diff --git a/src/main/java/org/dstadler/jgit/porcelain/CloneRemoteRepositoryWithAuthentication.java b/src/main/java/org/dstadler/jgit/porcelain/CloneRemoteRepositoryWithAuthentication.java
new file mode 100755
index 0000000..b07b622
--- /dev/null
+++ b/src/main/java/org/dstadler/jgit/porcelain/CloneRemoteRepositoryWithAuthentication.java
@@ -0,0 +1,89 @@
+package org.dstadler.jgit.porcelain;
+
+/*
+   Copyright 2015 Dominik Stadler
+
+   Licensed under the Apache License, Version 2.0 (the "License");
+   you may not use this file except in compliance with the License.
+   You may obtain a copy of the License at
+
+     http://www.apache.org/licenses/LICENSE-2.0
+
+   Unless required by applicable law or agreed to in writing, software
+   distributed under the License is distributed on an "AS IS" BASIS,
+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+   See the License for the specific language governing permissions and
+   limitations under the License.
+ */
+
+import java.io.File;
+import java.io.IOException;
+
+import org.eclipse.jgit.api.Git;
+import org.eclipse.jgit.api.errors.GitAPIException;
+import org.eclipse.jgit.api.errors.InvalidRemoteException;
+import org.eclipse.jgit.api.errors.TransportException;
+import org.eclipse.jgit.errors.UnsupportedCredentialItem;
+import org.eclipse.jgit.transport.CredentialItem;
+import org.eclipse.jgit.transport.CredentialsProvider;
+import org.eclipse.jgit.transport.URIish;
+
+
+
+/**
+ * Simple snippet which shows how to clone a repository from a remote source
+ * via ssh protocol and username/password authentication.
+ *
+ * @author dominik.stadler at gmx.at
+ */
+public class CloneRemoteRepositoryWithAuthentication {
+    private static final String REMOTE_URL = "ssh://<user>:<pwd>@<host>:22/<path-to-remote-repo>/";
+
+    public static void main(String[] args) throws IOException, InvalidRemoteException, TransportException, GitAPIException {
+        // this is necessary when the remote host does not have a valid certificate, ideally we would install the certificate in the JVM
+        // instead of this unsecure workaround!
+        CredentialsProvider allowHosts = new CredentialsProvider() {
+
+            @Override
+            public boolean supports(CredentialItem... items) {
+                for(CredentialItem item : items) {
+                    if((item instanceof CredentialItem.YesNoType)) {
+                        return true;
+                    }
+                }
+                return false;
+            }
+
+            @Override
+            public boolean get(URIish uri, CredentialItem... items) throws UnsupportedCredentialItem {
+                for(CredentialItem item : items) {
+                    if(item instanceof CredentialItem.YesNoType) {
+                        ((CredentialItem.YesNoType)item).setValue(true);
+                        return true;
+                    }
+                }
+                return false;
+            }
+
+            @Override
+            public boolean isInteractive() {
+                return false;
+            }
+        };
+
+        // prepare a new folder for the cloned repository
+        File localPath = File.createTempFile("TestGitRepository", "");
+        localPath.delete();
+
+        // then clone
+        System.out.println("Cloning from " + REMOTE_URL + " to " + localPath);
+        try (Git result = Git.cloneRepository()
+                .setURI(REMOTE_URL)
+                .setDirectory(localPath)
+                .setCredentialsProvider(allowHosts)
+                .call()) {
+	        // Note: the call() returns an opened repository already which needs to be closed to avoid file handle leaks!
+	        System.out.println("Having repository: " + result.getRepository().getDirectory());
+        }
+    }
+}
Diff Between d25358cde70cdaa511c0fa6674c3164a0f590b4e a6586bfdd433c5470dcc489503a7829e9d0aa0cediff --git a/README.md b/README.md
index 404a518..5329442 100644
--- a/README.md
+++ b/README.md
@@ -72 +71,0 @@
-* [Clone a remote reppository via SSH protocol and username/password credentials](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/porcelain/CloneRemoteRepositoryWithAuthentication.java)
diff --git a/src/main/java/org/dstadler/jgit/porcelain/CloneRemoteRepository.java b/src/main/java/org/dstadler/jgit/porcelain/CloneRemoteRepository.java
index 89e5aac..d1ce016 100644
--- a/src/main/java/org/dstadler/jgit/porcelain/CloneRemoteRepository.java
+++ b/src/main/java/org/dstadler/jgit/porcelain/CloneRemoteRepository.java
@@ -53,0 +54 @@
+        	result.getRepository().close();
diff --git a/src/main/java/org/dstadler/jgit/porcelain/CloneRemoteRepositoryWithAuthentication.java b/src/main/java/org/dstadler/jgit/porcelain/CloneRemoteRepositoryWithAuthentication.java
deleted file mode 100755
index b07b622..0000000
--- a/src/main/java/org/dstadler/jgit/porcelain/CloneRemoteRepositoryWithAuthentication.java
+++ /dev/null
@@ -1,89 +0,0 @@
-package org.dstadler.jgit.porcelain;
-
-/*
-   Copyright 2015 Dominik Stadler
-
-   Licensed under the Apache License, Version 2.0 (the "License");
-   you may not use this file except in compliance with the License.
-   You may obtain a copy of the License at
-
-     http://www.apache.org/licenses/LICENSE-2.0
-
-   Unless required by applicable law or agreed to in writing, software
-   distributed under the License is distributed on an "AS IS" BASIS,
-   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-   See the License for the specific language governing permissions and
-   limitations under the License.
- */
-
-import java.io.File;
-import java.io.IOException;
-
-import org.eclipse.jgit.api.Git;
-import org.eclipse.jgit.api.errors.GitAPIException;
-import org.eclipse.jgit.api.errors.InvalidRemoteException;
-import org.eclipse.jgit.api.errors.TransportException;
-import org.eclipse.jgit.errors.UnsupportedCredentialItem;
-import org.eclipse.jgit.transport.CredentialItem;
-import org.eclipse.jgit.transport.CredentialsProvider;
-import org.eclipse.jgit.transport.URIish;
-
-
-
-/**
- * Simple snippet which shows how to clone a repository from a remote source
- * via ssh protocol and username/password authentication.
- *
- * @author dominik.stadler at gmx.at
- */
-public class CloneRemoteRepositoryWithAuthentication {
-    private static final String REMOTE_URL = "ssh://<user>:<pwd>@<host>:22/<path-to-remote-repo>/";
-
-    public static void main(String[] args) throws IOException, InvalidRemoteException, TransportException, GitAPIException {
-        // this is necessary when the remote host does not have a valid certificate, ideally we would install the certificate in the JVM
-        // instead of this unsecure workaround!
-        CredentialsProvider allowHosts = new CredentialsProvider() {
-
-            @Override
-            public boolean supports(CredentialItem... items) {
-                for(CredentialItem item : items) {
-                    if((item instanceof CredentialItem.YesNoType)) {
-                        return true;
-                    }
-                }
-                return false;
-            }
-
-            @Override
-            public boolean get(URIish uri, CredentialItem... items) throws UnsupportedCredentialItem {
-                for(CredentialItem item : items) {
-                    if(item instanceof CredentialItem.YesNoType) {
-                        ((CredentialItem.YesNoType)item).setValue(true);
-                        return true;
-                    }
-                }
-                return false;
-            }
-
-            @Override
-            public boolean isInteractive() {
-                return false;
-            }
-        };
-
-        // prepare a new folder for the cloned repository
-        File localPath = File.createTempFile("TestGitRepository", "");
-        localPath.delete();
-
-        // then clone
-        System.out.println("Cloning from " + REMOTE_URL + " to " + localPath);
-        try (Git result = Git.cloneRepository()
-                .setURI(REMOTE_URL)
-                .setDirectory(localPath)
-                .setCredentialsProvider(allowHosts)
-                .call()) {
-	        // Note: the call() returns an opened repository already which needs to be closed to avoid file handle leaks!
-	        System.out.println("Having repository: " + result.getRepository().getDirectory());
-        }
-    }
-}
Diff Between a6586bfdd433c5470dcc489503a7829e9d0aa0ce 7f71d0d00d237e903c60fb0774760e4fdf1f0058diff --git a/README.md b/README.md
index 5329442..404a518 100644
--- a/README.md
+++ b/README.md
@@ -71,0 +72 @@
+* [Clone a remote reppository via SSH protocol and username/password credentials](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/porcelain/CloneRemoteRepositoryWithAuthentication.java)
diff --git a/src/main/java/org/dstadler/jgit/porcelain/CloneRemoteRepositoryWithAuthentication.java b/src/main/java/org/dstadler/jgit/porcelain/CloneRemoteRepositoryWithAuthentication.java
new file mode 100755
index 0000000..b07b622
--- /dev/null
+++ b/src/main/java/org/dstadler/jgit/porcelain/CloneRemoteRepositoryWithAuthentication.java
@@ -0,0 +1,89 @@
+package org.dstadler.jgit.porcelain;
+
+/*
+   Copyright 2015 Dominik Stadler
+
+   Licensed under the Apache License, Version 2.0 (the "License");
+   you may not use this file except in compliance with the License.
+   You may obtain a copy of the License at
+
+     http://www.apache.org/licenses/LICENSE-2.0
+
+   Unless required by applicable law or agreed to in writing, software
+   distributed under the License is distributed on an "AS IS" BASIS,
+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+   See the License for the specific language governing permissions and
+   limitations under the License.
+ */
+
+import java.io.File;
+import java.io.IOException;
+
+import org.eclipse.jgit.api.Git;
+import org.eclipse.jgit.api.errors.GitAPIException;
+import org.eclipse.jgit.api.errors.InvalidRemoteException;
+import org.eclipse.jgit.api.errors.TransportException;
+import org.eclipse.jgit.errors.UnsupportedCredentialItem;
+import org.eclipse.jgit.transport.CredentialItem;
+import org.eclipse.jgit.transport.CredentialsProvider;
+import org.eclipse.jgit.transport.URIish;
+
+
+
+/**
+ * Simple snippet which shows how to clone a repository from a remote source
+ * via ssh protocol and username/password authentication.
+ *
+ * @author dominik.stadler at gmx.at
+ */
+public class CloneRemoteRepositoryWithAuthentication {
+    private static final String REMOTE_URL = "ssh://<user>:<pwd>@<host>:22/<path-to-remote-repo>/";
+
+    public static void main(String[] args) throws IOException, InvalidRemoteException, TransportException, GitAPIException {
+        // this is necessary when the remote host does not have a valid certificate, ideally we would install the certificate in the JVM
+        // instead of this unsecure workaround!
+        CredentialsProvider allowHosts = new CredentialsProvider() {
+
+            @Override
+            public boolean supports(CredentialItem... items) {
+                for(CredentialItem item : items) {
+                    if((item instanceof CredentialItem.YesNoType)) {
+                        return true;
+                    }
+                }
+                return false;
+            }
+
+            @Override
+            public boolean get(URIish uri, CredentialItem... items) throws UnsupportedCredentialItem {
+                for(CredentialItem item : items) {
+                    if(item instanceof CredentialItem.YesNoType) {
+                        ((CredentialItem.YesNoType)item).setValue(true);
+                        return true;
+                    }
+                }
+                return false;
+            }
+
+            @Override
+            public boolean isInteractive() {
+                return false;
+            }
+        };
+
+        // prepare a new folder for the cloned repository
+        File localPath = File.createTempFile("TestGitRepository", "");
+        localPath.delete();
+
+        // then clone
+        System.out.println("Cloning from " + REMOTE_URL + " to " + localPath);
+        try (Git result = Git.cloneRepository()
+                .setURI(REMOTE_URL)
+                .setDirectory(localPath)
+                .setCredentialsProvider(allowHosts)
+                .call()) {
+	        // Note: the call() returns an opened repository already which needs to be closed to avoid file handle leaks!
+	        System.out.println("Having repository: " + result.getRepository().getDirectory());
+        }
+    }
+}
Diff Between 7f71d0d00d237e903c60fb0774760e4fdf1f0058 eb0216916865c23f02e1cf77c6857fe6e067a902diff --git a/build.gradle b/build.gradle
index 3b904b7..19e2587 100644
--- a/build.gradle
+++ b/build.gradle
@@ -15,2 +15,2 @@
-	compile 'org.eclipse.jgit:org.eclipse.jgit:3.7.1.201504261725-r'
-	compile 'org.eclipse.jgit:org.eclipse.jgit.archive:3.7.1.201504261725-r'
+	compile 'org.eclipse.jgit:org.eclipse.jgit:4.0.1.201506240215-r'
+	compile 'org.eclipse.jgit:org.eclipse.jgit.archive:4.0.1.201506240215-r'
diff --git a/pom.xml b/pom.xml
index 00e2503..cd290f5 100644
--- a/pom.xml
+++ b/pom.xml
@@ -23 +23 @@
-      <version>3.7.1.201504261725-r</version>
+      <version>4.0.1.201506240215-r</version>
@@ -28 +28 @@
-      <version>3.7.1.201504261725-r</version>
+      <version>4.0.1.201506240215-r</version>
diff --git a/src/main/java/org/dstadler/jgit/CreateNewRepository.java b/src/main/java/org/dstadler/jgit/CreateNewRepository.java
index d930761..6990256 100644
--- a/src/main/java/org/dstadler/jgit/CreateNewRepository.java
+++ b/src/main/java/org/dstadler/jgit/CreateNewRepository.java
@@ -39,5 +39,3 @@
-        Git git = Git.init().setDirectory(localPath).call();
-
-        System.out.println("Having repository: " + git.getRepository().getDirectory());
-
-        git.close();
+        try (Git git = Git.init().setDirectory(localPath).call()) {
+            System.out.println("Having repository: " + git.getRepository().getDirectory());
+        }
diff --git a/src/main/java/org/dstadler/jgit/api/WalkRev.java b/src/main/java/org/dstadler/jgit/api/WalkRev.java
index c5e959b..d43cde5 100644
--- a/src/main/java/org/dstadler/jgit/api/WalkRev.java
+++ b/src/main/java/org/dstadler/jgit/api/WalkRev.java
@@ -35,16 +35,19 @@
-        Repository repository = CookbookHelper.openJGitCookbookRepository();
-
-        Ref head = repository.getRef("refs/heads/master");
-
-        // a RevWalk allows to walk over commits based on some filtering that is defined
-        RevWalk walk = new RevWalk(repository);
-
-        RevCommit commit = walk.parseCommit(head.getObjectId());
-        System.out.println("Start-Commit: " + commit);
-
-        System.out.println("Walking all commits starting at HEAD");
-        walk.markStart(commit);
-        int count = 0;
-        for (RevCommit rev : walk) {
-            System.out.println("Commit: " + rev);
-            count++;
+        try (Repository repository = CookbookHelper.openJGitCookbookRepository()) {
+            Ref head = repository.getRef("refs/heads/master");
+    
+            // a RevWalk allows to walk over commits based on some filtering that is defined
+            try (RevWalk walk = new RevWalk(repository)) {
+                RevCommit commit = walk.parseCommit(head.getObjectId());
+                System.out.println("Start-Commit: " + commit);
+        
+                System.out.println("Walking all commits starting at HEAD");
+                walk.markStart(commit);
+                int count = 0;
+                for (RevCommit rev : walk) {
+                    System.out.println("Commit: " + rev);
+                    count++;
+                }
+                System.out.println(count);
+        
+                walk.dispose();
+            }
@@ -52,5 +54,0 @@
-        System.out.println(count);
-
-        walk.dispose();
-
-        repository.close();
diff --git a/src/main/java/org/dstadler/jgit/porcelain/CreateAndDeleteBranch.java b/src/main/java/org/dstadler/jgit/porcelain/CreateAndDeleteBranch.java
index a877932..dd0a132 100755
--- a/src/main/java/org/dstadler/jgit/porcelain/CreateAndDeleteBranch.java
+++ b/src/main/java/org/dstadler/jgit/porcelain/CreateAndDeleteBranch.java
@@ -46,0 +47,15 @@
+        // make sure the branch is not there
+        List<Ref> refs = git.branchList().call();
+        for(Ref ref : refs) {
+            System.out.println("Had branch: " + ref.getName());
+            if(ref.getName().equals("refs/heads/testbranch")) {
+                System.out.println("Removing branch before");
+                git.branchDelete()
+                .setBranchNames("testbranch")
+                .setForce(true)
+                .call();
+                
+                break;
+            }
+        }
+        
diff --git a/src/main/java/org/dstadler/jgit/porcelain/CreateCustomFormatArchive.java b/src/main/java/org/dstadler/jgit/porcelain/CreateCustomFormatArchive.java
index c268287..e51f824 100644
--- a/src/main/java/org/dstadler/jgit/porcelain/CreateCustomFormatArchive.java
+++ b/src/main/java/org/dstadler/jgit/porcelain/CreateCustomFormatArchive.java
@@ -23,0 +24 @@
+import java.util.Map;
@@ -70,0 +72,5 @@
+
+        @Override
+        public ZipOutputStream createArchiveOutputStream(OutputStream s, Map<String, Object> o) throws IOException {
+            return new ZipOutputStream(s);
+        }
@@ -74,15 +80,16 @@
-        Repository repository = CookbookHelper.openJGitCookbookRepository();
-
-
-        File file = File.createTempFile("test", ".mzip");
-        // make the archive format known
-        ArchiveCommand.registerFormat("myzip", new ZipArchiveFormat());
-        try {
-            // this is the file that we write the archive to
-            try (OutputStream out = new FileOutputStream(file)) {
-                // finally call the ArchiveCommand to write out using the given format
-                new Git(repository).archive()
-                        .setTree(repository.resolve("master"))
-                        .setFormat("myzip")
-                        .setOutputStream(out)
-                        .call();
+        try (Repository repository = CookbookHelper.openJGitCookbookRepository()) {
+            File file = File.createTempFile("test", ".mzip");
+            // make the archive format known
+            ArchiveCommand.registerFormat("myzip", new ZipArchiveFormat());
+            try {
+                // this is the file that we write the archive to
+                try (OutputStream out = new FileOutputStream(file)) {
+                    // finally call the ArchiveCommand to write out using the given format
+                    new Git(repository).archive()
+                            .setTree(repository.resolve("master"))
+                            .setFormat("myzip")
+                            .setOutputStream(out)
+                            .call();
+                }
+            } finally {
+                ArchiveCommand.unregisterFormat("myzip");
@@ -90,2 +97,2 @@
-        } finally {
-            ArchiveCommand.unregisterFormat("myzip");
+    
+            System.out.println("Wrote " + file.length() + " bytes to " + file);
@@ -93,4 +99,0 @@
-
-        System.out.println("Wrote " + file.length() + " bytes to " + file);
-
-        repository.close();
diff --git a/src/main/java/org/dstadler/jgit/porcelain/DiffRenamedFile.java b/src/main/java/org/dstadler/jgit/porcelain/DiffRenamedFile.java
index 4dddf63..1e64de1 100644
--- a/src/main/java/org/dstadler/jgit/porcelain/DiffRenamedFile.java
+++ b/src/main/java/org/dstadler/jgit/porcelain/DiffRenamedFile.java
@@ -37,2 +37 @@
-		ObjectReader oldReader = repository.newObjectReader();
-		try {
+		try (ObjectReader oldReader = repository.newObjectReader()) {
@@ -40,2 +38,0 @@
-		} finally {
-			oldReader.release();
diff --git a/src/main/java/org/dstadler/jgit/porcelain/ShowBranchDiff.java b/src/main/java/org/dstadler/jgit/porcelain/ShowBranchDiff.java
index 4ba96cf..61df9c5 100755
--- a/src/main/java/org/dstadler/jgit/porcelain/ShowBranchDiff.java
+++ b/src/main/java/org/dstadler/jgit/porcelain/ShowBranchDiff.java
@@ -72,2 +72 @@
-        ObjectReader oldReader = repository.newObjectReader();
-        try {
+        try (ObjectReader oldReader = repository.newObjectReader()) {
@@ -75,2 +73,0 @@
-        } finally {
-            oldReader.release();
diff --git a/src/main/java/org/dstadler/jgit/porcelain/ShowFileDiff.java b/src/main/java/org/dstadler/jgit/porcelain/ShowFileDiff.java
index 6d520e7..400ccf6 100644
--- a/src/main/java/org/dstadler/jgit/porcelain/ShowFileDiff.java
+++ b/src/main/java/org/dstadler/jgit/porcelain/ShowFileDiff.java
@@ -80,2 +80 @@
-        ObjectReader oldReader = repository.newObjectReader();
-        try {
+        try (ObjectReader oldReader = repository.newObjectReader()) {
@@ -83,2 +81,0 @@
-        } finally {
-            oldReader.release();
Diff Between eb0216916865c23f02e1cf77c6857fe6e067a902 7380fcab6a482d92106f8129fd087857e9876f95diff --git a/README.md b/README.md
index 1b01190..5329442 100644
--- a/README.md
+++ b/README.md
@@ -121 +121 @@
-   Copyright 2013, 2014 Dominik Stadler
+   Copyright 2013, 2014, 2015 Dominik Stadler
Diff Between 7380fcab6a482d92106f8129fd087857e9876f95 fc27cf1bb938c2afc7c00d5178a52dc4fdc4564cdiff --git a/README.md b/README.md
index 09a784d..1b01190 100644
--- a/README.md
+++ b/README.md
@@ -5 +5 @@
-Provides examples and code snippets for the [JGit](http://wiki.eclipse.org/JGit/) Java Git implementation. 
+Provides examples and code snippets for the [JGit](https://eclipse.org/jgit/) Java Git implementation. 
@@ -9 +9 @@
-This project tries to provide a collection of ready-to-run snippets which try to provide a quick start into building functionality using JGit. Please make sure to also use the existing [JavaDoc](http://download.eclipse.org/jgit/docs/latest/apidocs/) and the [User Guide](http://wiki.eclipse.org/JGit/User_Guide) as well, as they are well done and provide detailed information and a general overview of JGit respectively.
+This project tries to provide a collection of ready-to-run snippets which try to provide a quick start into building functionality using JGit. Please make sure to also use the existing [JavaDoc](http://download.eclipse.org/jgit/site/3.7.1.201504261725-r/apidocs/) and the [User Guide](http://wiki.eclipse.org/JGit/User_Guide) as well, as they are well done and provide detailed information and a general overview of JGit respectively.
@@ -109 +109 @@
-* [JGit JavaDoc](http://download.eclipse.org/jgit/docs/latest/apidocs/)
+* [JGit JavaDoc](http://download.eclipse.org/jgit/site/3.7.1.201504261725-r/apidocs/)
Diff Between fc27cf1bb938c2afc7c00d5178a52dc4fdc4564c 1bf1b54ec4bb8dc033a6db743653261cc3685a1cdiff --git a/build.gradle b/build.gradle
index 51dc62a..3b904b7 100644
--- a/build.gradle
+++ b/build.gradle
@@ -15,2 +15,2 @@
-	compile 'org.eclipse.jgit:org.eclipse.jgit:3.7.0.201502260915-r'
-	compile 'org.eclipse.jgit:org.eclipse.jgit.archive:3.7.0.201502260915-r'
+	compile 'org.eclipse.jgit:org.eclipse.jgit:3.7.1.201504261725-r'
+	compile 'org.eclipse.jgit:org.eclipse.jgit.archive:3.7.1.201504261725-r'
diff --git a/pom.xml b/pom.xml
index 8092f37..00e2503 100644
--- a/pom.xml
+++ b/pom.xml
@@ -23 +23 @@
-      <version>3.7.0.201502260915-r</version>
+      <version>3.7.1.201504261725-r</version>
@@ -28 +28 @@
-      <version>3.7.0.201502260915-r</version>
+      <version>3.7.1.201504261725-r</version>
Diff Between 1bf1b54ec4bb8dc033a6db743653261cc3685a1c e4879bc2faf00f796e81a1af20d87e7344633ce5diff --git a/src/main/java/org/dstadler/jgit/porcelain/CreateListApplyAndDropStash.java b/src/main/java/org/dstadler/jgit/porcelain/CreateListApplyAndDropStash.java
index 492e81b..afb1333 100644
--- a/src/main/java/org/dstadler/jgit/porcelain/CreateListApplyAndDropStash.java
+++ b/src/main/java/org/dstadler/jgit/porcelain/CreateListApplyAndDropStash.java
@@ -35 +35 @@
- * 
+ *
@@ -50 +50 @@
-        
+
@@ -64 +64 @@
-        
+
@@ -73 +73 @@
-        
+
@@ -83 +83 @@
-            System.out.println("Found stash: " + rev);
+            System.out.println("Found stash: " + rev + ": " + rev.getFullMessage());
@@ -85 +85 @@
-        
+
@@ -89 +89 @@
-        
+
Diff Between e4879bc2faf00f796e81a1af20d87e7344633ce5 d8cdb7596fe6c2c40c7166007ff66e6725b4782ddiff --git a/.settings/org.eclipse.jdt.core.prefs b/.settings/org.eclipse.jdt.core.prefs
index 970b79f..8867e29 100644
--- a/.settings/org.eclipse.jdt.core.prefs
+++ b/.settings/org.eclipse.jdt.core.prefs
@@ -1,374 +0,0 @@
-#
-#Sun Dec 21 21:43:45 CET 2014
-org.eclipse.jdt.core.compiler.problem.unavoidableGenericTypeProblems=enabled
-org.eclipse.jdt.core.compiler.annotation.missingNonNullByDefaultAnnotation=ignore
-org.eclipse.jdt.core.formatter.insert_space_before_comma_in_for_inits=do not insert
-org.eclipse.jdt.core.formatter.brace_position_for_block=end_of_line
-org.eclipse.jdt.core.formatter.insert_space_after_at_in_annotation_type_declaration=do not insert
-org.eclipse.jdt.core.formatter.insert_space_before_semicolon_in_try_resources=do not insert
-org.eclipse.jdt.core.formatter.insert_space_before_comma_in_method_declaration_throws=do not insert
-org.eclipse.jdt.core.compiler.annotation.nullanalysis=disabled
-org.eclipse.jdt.core.formatter.brace_position_for_annotation_type_declaration=end_of_line
-org.eclipse.jdt.core.formatter.insert_space_after_colon_in_conditional=insert
-org.eclipse.jdt.core.compiler.problem.localVariableHiding=ignore
-org.eclipse.jdt.core.formatter.alignment_for_assignment=0
-org.eclipse.jdt.core.formatter.insert_space_before_comma_in_allocation_expression=do not insert
-org.eclipse.jdt.core.compiler.problem.staticAccessReceiver=warning
-org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_if=do not insert
-org.eclipse.jdt.core.formatter.insert_space_before_opening_brace_in_block=insert
-org.eclipse.jdt.core.formatter.insert_space_after_semicolon_in_try_resources=insert
-org.eclipse.jdt.core.compiler.codegen.targetPlatform=1.7
-org.eclipse.jdt.core.formatter.insert_space_before_closing_angle_bracket_in_type_parameters=do not insert
-org.eclipse.jdt.core.compiler.problem.unusedPrivateMember=warning
-org.eclipse.jdt.core.formatter.comment.clear_blank_lines_in_javadoc_comment=false
-org.eclipse.jdt.core.formatter.never_indent_line_comments_on_first_column=true
-org.eclipse.jdt.core.formatter.insert_new_line_before_closing_brace_in_array_initializer=do not insert
-org.eclipse.jdt.core.formatter.indent_statements_compare_to_body=true
-org.eclipse.jdt.core.formatter.insert_space_after_comma_in_superinterfaces=insert
-org.eclipse.jdt.core.compiler.problem.emptyStatement=warning
-org.eclipse.jdt.core.compiler.problem.reportMethodCanBePotentiallyStatic=ignore
-org.eclipse.jdt.core.formatter.insert_new_line_before_catch_in_try_statement=do not insert
-org.eclipse.jdt.core.compiler.problem.indirectStaticAccess=ignore
-org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_method_invocation=do not insert
-org.eclipse.jdt.core.formatter.insert_space_before_parenthesized_expression_in_throw=insert
-org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_method_declaration=do not insert
-org.eclipse.jdt.core.formatter.insert_space_before_opening_angle_bracket_in_type_parameters=do not insert
-org.eclipse.jdt.core.formatter.insert_space_between_empty_parens_in_enum_constant=do not insert
-org.eclipse.jdt.core.compiler.problem.fieldHiding=ignore
-org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_while=do not insert
-org.eclipse.jdt.core.compiler.problem.annotationSuperInterface=warning
-org.eclipse.jdt.core.compiler.problem.nonExternalizedStringLiteral=ignore
-org.eclipse.jdt.core.formatter.insert_space_after_unary_operator=do not insert
-org.eclipse.jdt.core.formatter.blank_lines_after_imports=1
-org.eclipse.jdt.core.formatter.alignment_for_arguments_in_annotation=48
-org.eclipse.jdt.core.formatter.insert_space_after_opening_bracket_in_array_reference=do not insert
-org.eclipse.jdt.core.compiler.problem.finallyBlockNotCompletingNormally=warning
-org.eclipse.jdt.core.compiler.problem.noImplicitStringConversion=warning
-org.eclipse.jdt.core.compiler.problem.parameterAssignment=ignore
-org.eclipse.jdt.core.formatter.comment.format_source_code=true
-org.eclipse.jdt.core.formatter.insert_space_after_comma_in_method_declaration_parameters=insert
-org.eclipse.jdt.core.compiler.debug.localVariable=generate
-org.eclipse.jdt.core.formatter.indent_body_declarations_compare_to_annotation_declaration_header=true
-org.eclipse.jdt.core.formatter.insert_space_before_closing_bracket_in_array_allocation_expression=do not insert
-org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_constructor_declaration=do not insert
-org.eclipse.jdt.core.formatter.insert_new_line_after_annotation_on_package=insert
-org.eclipse.jdt.core.formatter.blank_lines_before_member_type=1
-org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_enum_constant=do not insert
-org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_try=insert
-org.eclipse.jdt.core.compiler.problem.undocumentedEmptyBlock=ignore
-org.eclipse.jdt.core.formatter.insert_new_line_after_annotation_on_local_variable=insert
-org.eclipse.jdt.core.formatter.keep_then_statement_on_same_line=false
-org.eclipse.jdt.core.compiler.problem.syntheticAccessEmulation=ignore
-org.eclipse.jdt.core.formatter.insert_space_after_comma_in_method_invocation_arguments=insert
-org.eclipse.jdt.core.formatter.format_line_comment_starting_on_first_column=false
-org.eclipse.jdt.core.formatter.insert_space_after_comma_in_multiple_local_declarations=insert
-org.eclipse.jdt.core.formatter.blank_lines_before_new_chunk=0
-org.eclipse.jdt.core.formatter.alignment_for_arguments_in_explicit_constructor_call=16
-org.eclipse.jdt.core.formatter.number_of_empty_lines_to_preserve=3
-org.eclipse.jdt.core.compiler.problem.nullUncheckedConversion=warning
-org.eclipse.jdt.core.formatter.insert_space_before_opening_brace_in_type_declaration=insert
-org.eclipse.jdt.core.compiler.codegen.unusedLocal=preserve
-org.eclipse.jdt.core.formatter.brace_position_for_switch=end_of_line
-org.eclipse.jdt.core.formatter.comment.format_header=true
-org.eclipse.jdt.core.formatter.insert_space_before_and_in_type_parameter=insert
-org.eclipse.jdt.core.formatter.insert_space_after_comma_in_constructor_declaration_throws=insert
-org.eclipse.jdt.core.formatter.insert_space_before_question_in_wildcard=do not insert
-org.eclipse.jdt.core.formatter.alignment_for_superclass_in_type_declaration=16
-org.eclipse.jdt.core.formatter.insert_space_after_colon_in_case=insert
-org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_for=do not insert
-org.eclipse.jdt.core.compiler.problem.unusedTypeParameter=warning
-org.eclipse.jdt.core.formatter.insert_space_before_semicolon=do not insert
-org.eclipse.jdt.core.compiler.problem.nonnullParameterAnnotationDropped=warning
-org.eclipse.jdt.core.compiler.problem.comparingIdentical=warning
-org.eclipse.jdt.core.formatter.alignment_for_superinterfaces_in_enum_declaration=16
-org.eclipse.jdt.core.formatter.comment.line_length=130
-org.eclipse.jdt.core.formatter.insert_space_before_comma_in_array_initializer=do not insert
-org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_catch=do not insert
-org.eclipse.jdt.core.formatter.indent_switchstatements_compare_to_cases=true
-org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_method_invocation=do not insert
-org.eclipse.jdt.core.formatter.insert_space_after_comma_in_for_increments=insert
-org.eclipse.jdt.core.compiler.problem.unusedParameterIncludeDocCommentReference=enabled
-org.eclipse.jdt.core.formatter.insert_space_after_binary_operator=insert
-org.eclipse.jdt.core.formatter.insert_new_line_in_empty_block=insert
-org.eclipse.jdt.core.formatter.insert_space_after_prefix_operator=do not insert
-org.eclipse.jdt.core.formatter.brace_position_for_enum_declaration=end_of_line
-org.eclipse.jdt.core.formatter.insert_space_after_comma_in_explicitconstructorcall_arguments=insert
-org.eclipse.jdt.core.compiler.problem.hiddenCatchBlock=warning
-org.eclipse.jdt.core.formatter.insert_space_before_at_in_annotation_type_declaration=do not insert
-org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_parenthesized_expression=do not insert
-org.eclipse.jdt.core.formatter.insert_space_before_closing_brace_in_array_initializer=insert
-org.eclipse.jdt.core.compiler.problem.unusedParameterWhenImplementingAbstract=disabled
-org.eclipse.jdt.core.formatter.insert_new_line_in_empty_type_declaration=insert
-org.eclipse.jdt.core.compiler.problem.uncheckedTypeOperation=warning
-org.eclipse.jdt.core.compiler.codegen.methodParameters=do not generate
-org.eclipse.jdt.core.formatter.insert_space_before_colon_in_assert=insert
-org.eclipse.jdt.core.formatter.insert_space_after_comma_in_constructor_declaration_parameters=insert
-org.eclipse.jdt.core.formatter.comment.format_javadoc_comments=true
-org.eclipse.jdt.core.formatter.continuation_indentation=2
-org.eclipse.jdt.core.formatter.insert_new_line_after_annotation_on_field=insert
-org.eclipse.jdt.core.formatter.comment.insert_new_line_before_root_tags=insert
-org.eclipse.jdt.core.formatter.alignment_for_selector_in_method_invocation=0
-org.eclipse.jdt.core.formatter.insert_space_after_comma_in_parameterized_type_reference=insert
-org.eclipse.jdt.core.compiler.problem.specialParameterHidingField=disabled
-org.eclipse.jdt.core.formatter.insert_space_after_assignment_operator=insert
-org.eclipse.jdt.core.formatter.blank_lines_before_method=1
-org.eclipse.jdt.core.formatter.put_empty_statement_on_new_line=true
-org.eclipse.jdt.core.formatter.alignment_for_parameters_in_constructor_declaration=16
-org.eclipse.jdt.core.formatter.blank_lines_between_type_declarations=1
-org.eclipse.jdt.core.formatter.insert_space_after_comma_in_multiple_field_declarations=insert
-org.eclipse.jdt.core.formatter.insert_space_after_closing_paren_in_cast=insert
-org.eclipse.jdt.core.formatter.brace_position_for_constructor_declaration=end_of_line
-org.eclipse.jdt.core.formatter.insert_new_line_after_opening_brace_in_array_initializer=do not insert
-org.eclipse.jdt.core.formatter.insert_space_before_opening_brace_in_annotation_type_declaration=insert
-org.eclipse.jdt.core.compiler.problem.reportMethodCanBeStatic=ignore
-org.eclipse.jdt.core.formatter.alignment_for_arguments_in_qualified_allocation_expression=16
-org.eclipse.jdt.core.formatter.join_lines_in_comments=false
-org.eclipse.jdt.core.formatter.indent_body_declarations_compare_to_type_header=true
-org.eclipse.jdt.core.formatter.insert_space_before_closing_angle_bracket_in_parameterized_type_reference=do not insert
-org.eclipse.jdt.core.compiler.problem.missingHashCodeMethod=warning
-org.eclipse.jdt.core.formatter.blank_lines_before_first_class_body_declaration=1
-org.eclipse.jdt.core.formatter.comment.format_block_comments=true
-org.eclipse.jdt.core.formatter.insert_space_before_question_in_conditional=insert
-org.eclipse.jdt.core.formatter.alignment_for_multiple_fields=16
-org.eclipse.jdt.core.compiler.annotation.nonnullbydefault=org.eclipse.jdt.annotation.NonNullByDefault
-org.eclipse.jdt.core.formatter.insert_space_before_comma_in_for_increments=do not insert
-org.eclipse.jdt.core.formatter.insert_space_before_colon_in_case=do not insert
-org.eclipse.jdt.core.formatter.alignment_for_union_type_in_multicatch=16
-org.eclipse.jdt.core.formatter.comment.format_html=true
-org.eclipse.jdt.core.formatter.insert_space_before_opening_bracket_in_array_allocation_expression=do not insert
-org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_enum_constant=do not insert
-org.eclipse.jdt.core.formatter.insert_space_before_semicolon_in_for=do not insert
-org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_while=do not insert
-org.eclipse.jdt.core.formatter.insert_space_between_empty_parens_in_method_declaration=do not insert
-org.eclipse.jdt.core.compiler.problem.syntacticNullAnalysisForFields=disabled
-org.eclipse.jdt.core.formatter.alignment_for_parameters_in_method_declaration=16
-org.eclipse.jdt.core.formatter.insert_space_before_opening_angle_bracket_in_parameterized_type_reference=do not insert
-org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_synchronized=do not insert
-org.eclipse.jdt.core.compiler.problem.redundantSuperinterface=ignore
-org.eclipse.jdt.core.compiler.problem.autoboxing=ignore
-org.eclipse.jdt.core.compiler.problem.enumIdentifier=error
-org.eclipse.jdt.core.compiler.problem.fallthroughCase=ignore
-org.eclipse.jdt.core.formatter.insert_space_after_opening_brace_in_array_initializer=insert
-org.eclipse.jdt.core.compiler.problem.deprecationInDeprecatedCode=disabled
-org.eclipse.jdt.core.compiler.problem.fatalOptionalError=disabled
-org.eclipse.jdt.core.formatter.insert_space_after_semicolon_in_for=insert
-org.eclipse.jdt.core.formatter.insert_space_before_assignment_operator=insert
-org.eclipse.jdt.core.compiler.problem.possibleAccidentalBooleanAssignment=warning
-org.eclipse.jdt.core.formatter.insert_space_after_opening_angle_bracket_in_type_parameters=do not insert
-org.eclipse.jdt.core.formatter.insert_space_before_comma_in_superinterfaces=do not insert
-org.eclipse.jdt.core.formatter.brace_position_for_method_declaration=end_of_line
-org.eclipse.jdt.core.compiler.problem.unusedDeclaredThrownException=warning
-org.eclipse.jdt.core.compiler.annotation.nonnull=org.eclipse.jdt.annotation.NonNull
-org.eclipse.jdt.core.formatter.insert_new_line_before_else_in_if_statement=do not insert
-org.eclipse.jdt.core.formatter.insert_space_before_opening_bracket_in_array_reference=do not insert
-org.eclipse.jdt.core.formatter.insert_space_before_comma_in_enum_constant_arguments=do not insert
-org.eclipse.jdt.core.formatter.alignment_for_arguments_in_allocation_expression=16
-org.eclipse.jdt.core.compiler.problem.unnecessaryElse=warning
-org.eclipse.jdt.core.formatter.insert_new_line_in_empty_annotation_declaration=insert
-org.eclipse.jdt.core.compiler.problem.potentiallyUnclosedCloseable=warning
-org.eclipse.jdt.core.compiler.problem.redundantNullCheck=warning
-org.eclipse.jdt.core.compiler.problem.methodWithConstructorName=warning
-org.eclipse.jdt.core.compiler.problem.forbiddenReference=error
-org.eclipse.jdt.core.formatter.insert_space_before_opening_brace_in_method_declaration=insert
-org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_if=insert
-org.eclipse.jdt.core.formatter.comment.new_lines_at_javadoc_boundaries=true
-org.eclipse.jdt.core.formatter.insert_space_before_opening_bracket_in_array_type_reference=do not insert
-org.eclipse.jdt.core.formatter.insert_space_between_empty_braces_in_array_initializer=do not insert
-org.eclipse.jdt.core.compiler.problem.unclosedCloseable=warning
-org.eclipse.jdt.core.formatter.insert_space_before_comma_in_multiple_local_declarations=do not insert
-org.eclipse.jdt.core.compiler.problem.suppressWarnings=enabled
-org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_constructor_declaration=do not insert
-org.eclipse.jdt.core.formatter.indent_body_declarations_compare_to_enum_constant_header=true
-org.eclipse.jdt.core.formatter.comment.insert_new_line_for_parameter=do not insert
-org.eclipse.jdt.core.formatter.alignment_for_throws_clause_in_method_declaration=16
-org.eclipse.jdt.core.formatter.insert_space_after_comma_in_annotation=insert
-org.eclipse.jdt.core.formatter.insert_space_after_ellipsis=insert
-org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_annotation_type_member_declaration=do not insert
-org.eclipse.jdt.core.formatter.insert_new_line_before_finally_in_try_statement=do not insert
-org.eclipse.jdt.core.compiler.problem.redundantNullAnnotation=warning
-org.eclipse.jdt.core.formatter.insert_space_before_colon_in_labeled_statement=do not insert
-org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_if=do not insert
-org.eclipse.jdt.core.formatter.insert_space_after_at_in_annotation=do not insert
-org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_try=do not insert
-org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_switch=do not insert
-org.eclipse.jdt.core.formatter.alignment_for_arguments_in_enum_constant=16
-org.eclipse.jdt.core.formatter.insert_space_before_opening_brace_in_switch=insert
-org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_for=do not insert
-org.eclipse.jdt.core.formatter.insert_space_before_opening_brace_in_anonymous_type_declaration=insert
-org.eclipse.jdt.core.formatter.brace_position_for_enum_constant=end_of_line
-org.eclipse.jdt.core.formatter.wrap_before_or_operator_multicatch=true
-org.eclipse.jdt.core.formatter.insert_space_after_colon_in_labeled_statement=insert
-org.eclipse.jdt.core.compiler.problem.incompleteEnumSwitch=warning
-org.eclipse.jdt.core.compiler.problem.missingDefaultCase=ignore
-org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_cast=do not insert
-org.eclipse.jdt.core.formatter.insert_space_after_and_in_type_parameter=insert
-org.eclipse.jdt.core.formatter.insert_space_after_comma_in_array_initializer=insert
-org.eclipse.jdt.core.formatter.insert_space_before_comma_in_method_declaration_parameters=do not insert
-org.eclipse.jdt.core.formatter.insert_space_between_empty_parens_in_annotation_type_member_declaration=do not insert
-org.eclipse.jdt.core.formatter.alignment_for_enum_constants=16
-org.eclipse.jdt.core.formatter.alignment_for_method_declaration=0
-org.eclipse.jdt.core.compiler.problem.unnecessaryTypeCheck=warning
-org.eclipse.jdt.core.formatter.tabulation.char=space
-org.eclipse.jdt.core.formatter.insert_space_after_comma_in_allocation_expression=insert
-org.eclipse.jdt.core.compiler.problem.includeNullInfoFromAsserts=disabled
-org.eclipse.jdt.core.formatter.wrap_before_binary_operator=false
-org.eclipse.jdt.core.compiler.problem.suppressOptionalErrors=disabled
-org.eclipse.jdt.core.formatter.insert_space_after_question_in_wildcard=do not insert
-org.eclipse.jdt.core.formatter.insert_space_before_comma_in_annotation=do not insert
-org.eclipse.jdt.core.formatter.format_guardian_clause_on_one_line=false
-org.eclipse.jdt.core.formatter.keep_else_statement_on_same_line=false
-org.eclipse.jdt.core.formatter.compact_else_if=true
-org.eclipse.jdt.core.formatter.insert_space_before_parenthesized_expression_in_return=insert
-org.eclipse.jdt.core.formatter.insert_space_between_brackets_in_array_type_reference=do not insert
-org.eclipse.jdt.core.formatter.brace_position_for_anonymous_type_declaration=end_of_line
-org.eclipse.jdt.core.formatter.comment.clear_blank_lines_in_block_comment=false
-org.eclipse.jdt.core.compiler.problem.missingSerialVersion=warning
-org.eclipse.jdt.core.compiler.problem.unusedDeclaredThrownExceptionExemptExceptionAndThrowable=enabled
-org.eclipse.jdt.core.formatter.disabling_tag=@formatter\:off
-org.eclipse.jdt.core.compiler.problem.incompatibleNonInheritedInterfaceMethod=warning
-org.eclipse.jdt.core.formatter.align_type_members_on_columns=false
-org.eclipse.jdt.core.formatter.insert_space_before_comma_in_multiple_field_declarations=do not insert
-org.eclipse.jdt.core.formatter.insert_new_line_after_annotation_on_type=insert
-org.eclipse.jdt.core.formatter.insert_new_line_before_while_in_do_statement=do not insert
-org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_annotation=do not insert
-org.eclipse.jdt.core.compiler.problem.finalParameterBound=warning
-org.eclipse.jdt.core.formatter.join_wrapped_lines=false
-org.eclipse.jdt.core.formatter.insert_space_after_postfix_operator=do not insert
-org.eclipse.jdt.core.formatter.insert_space_before_colon_in_conditional=insert
-org.eclipse.jdt.core.formatter.insert_space_before_comma_in_enum_declarations=do not insert
-org.eclipse.jdt.core.compiler.problem.nullAnnotationInferenceConflict=error
-org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_method_declaration=do not insert
-org.eclipse.jdt.core.formatter.insert_space_after_opening_bracket_in_array_allocation_expression=do not insert
-org.eclipse.jdt.core.formatter.indent_body_declarations_compare_to_enum_declaration_header=true
-org.eclipse.jdt.core.formatter.use_on_off_tags=true
-org.eclipse.jdt.core.compiler.problem.discouragedReference=warning
-org.eclipse.jdt.core.formatter.alignment_for_expressions_in_array_initializer=16
-org.eclipse.jdt.core.compiler.problem.missingEnumCaseDespiteDefault=disabled
-org.eclipse.jdt.core.formatter.never_indent_block_comments_on_first_column=false
-org.eclipse.jdt.core.formatter.insert_new_line_after_annotation_on_method=insert
-org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_switch=insert
-org.eclipse.jdt.core.formatter.comment.format_line_comments=true
-org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_catch=insert
-org.eclipse.jdt.core.formatter.keep_empty_array_initializer_on_one_line=false
-org.eclipse.jdt.core.formatter.insert_space_after_comma_in_enum_declarations=insert
-org.eclipse.jdt.core.formatter.insert_space_after_closing_angle_bracket_in_type_parameters=insert
-org.eclipse.jdt.core.formatter.insert_space_before_opening_angle_bracket_in_type_arguments=do not insert
-org.eclipse.jdt.core.formatter.comment.indent_parameter_description=false
-org.eclipse.jdt.core.formatter.indentation.size=4
-org.eclipse.jdt.core.compiler.problem.unusedDeclaredThrownExceptionWhenOverriding=disabled
-org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_enum_constant=do not insert
-org.eclipse.jdt.core.compiler.problem.unusedDeclaredThrownExceptionIncludeDocCommentReference=enabled
-org.eclipse.jdt.core.formatter.insert_space_before_colon_in_for=insert
-org.eclipse.jdt.core.compiler.debug.sourceFile=generate
-org.eclipse.jdt.core.formatter.insert_space_before_ellipsis=do not insert
-org.eclipse.jdt.core.formatter.insert_space_after_colon_in_for=insert
-org.eclipse.jdt.core.formatter.alignment_for_throws_clause_in_constructor_declaration=16
-org.eclipse.jdt.core.formatter.insert_space_between_empty_parens_in_constructor_declaration=do not insert
-org.eclipse.jdt.core.formatter.insert_space_before_opening_brace_in_array_initializer=insert
-org.eclipse.jdt.core.compiler.problem.deprecation=warning
-org.eclipse.jdt.core.compiler.problem.potentialNullReference=ignore
-org.eclipse.jdt.core.formatter.comment.indent_root_tags=true
-org.eclipse.jdt.core.compiler.problem.missingDeprecatedAnnotation=warning
-org.eclipse.jdt.core.formatter.insert_space_before_opening_brace_in_enum_constant=insert
-org.eclipse.jdt.core.formatter.alignment_for_binary_expression=16
-org.eclipse.jdt.core.formatter.brace_position_for_type_declaration=end_of_line
-org.eclipse.jdt.core.formatter.insert_space_after_comma_in_method_declaration_throws=insert
-org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_parenthesized_expression=do not insert
-org.eclipse.jdt.core.compiler.problem.unusedParameterWhenOverridingConcrete=disabled
-org.eclipse.jdt.core.formatter.insert_space_before_binary_operator=insert
-org.eclipse.jdt.core.formatter.use_tabs_only_for_leading_indentations=false
-org.eclipse.jdt.core.formatter.indent_breaks_compare_to_cases=true
-org.eclipse.jdt.core.formatter.insert_space_between_empty_brackets_in_array_allocation_expression=do not insert
-org.eclipse.jdt.core.formatter.insert_space_before_prefix_operator=do not insert
-org.eclipse.jdt.core.formatter.blank_lines_before_package=0
-org.eclipse.jdt.core.formatter.insert_space_before_opening_brace_in_enum_declaration=insert
-org.eclipse.jdt.core.formatter.indent_empty_lines=false
-org.eclipse.jdt.core.formatter.insert_space_before_closing_angle_bracket_in_type_arguments=do not insert
-org.eclipse.jdt.core.formatter.alignment_for_arguments_in_method_invocation=16
-org.eclipse.jdt.core.formatter.wrap_outer_expressions_when_nested=true
-org.eclipse.jdt.core.compiler.problem.redundantSpecificationOfTypeArguments=warning
-org.eclipse.jdt.core.compiler.problem.missingSynchronizedOnInheritedMethod=warning
-org.eclipse.jdt.core.compiler.problem.deadCode=warning
-org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_annotation=do not insert
-org.eclipse.jdt.core.formatter.insert_new_line_after_annotation_on_parameter=do not insert
-org.eclipse.jdt.core.formatter.insert_space_before_comma_in_constructor_declaration_throws=do not insert
-org.eclipse.jdt.core.compiler.problem.noEffectAssignment=warning
-org.eclipse.jdt.core.formatter.insert_space_before_comma_in_method_invocation_arguments=do not insert
-org.eclipse.jdt.core.compiler.problem.missingOverrideAnnotation=warning
-org.eclipse.jdt.core.formatter.brace_position_for_block_in_case=end_of_line
-org.eclipse.jdt.core.formatter.number_of_blank_lines_at_beginning_of_method_body=0
-org.eclipse.jdt.core.compiler.problem.unusedImport=warning
-org.eclipse.jdt.core.formatter.alignment_for_conditional_expression=16
-org.eclipse.jdt.core.formatter.insert_space_after_colon_in_assert=insert
-org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_method_declaration=do not insert
-org.eclipse.jdt.core.formatter.keep_imple_if_on_one_line=false
-org.eclipse.jdt.core.formatter.insert_new_line_in_empty_enum_declaration=insert
-org.eclipse.jdt.core.formatter.insert_space_after_comma_in_for_inits=insert
-org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_synchronized=do not insert
-org.eclipse.jdt.core.formatter.indent_switchstatements_compare_to_switch=true
-org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_synchronized=insert
-org.eclipse.jdt.core.compiler.problem.unusedLabel=warning
-org.eclipse.jdt.core.formatter.insert_new_line_in_empty_enum_constant=insert
-org.eclipse.jdt.core.formatter.insert_space_after_comma_in_enum_constant_arguments=insert
-org.eclipse.jdt.core.formatter.insert_space_after_comma_in_type_parameters=insert
-org.eclipse.jdt.core.formatter.insert_space_after_opening_angle_bracket_in_type_arguments=do not insert
-org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_for=insert
-org.eclipse.jdt.core.compiler.problem.unqualifiedFieldAccess=ignore
-org.eclipse.jdt.core.formatter.alignment_for_resources_in_try=80
-org.eclipse.jdt.core.formatter.insert_space_after_comma_in_type_arguments=insert
-org.eclipse.jdt.core.formatter.insert_space_before_comma_in_parameterized_type_reference=do not insert
-org.eclipse.jdt.core.compiler.problem.nullReference=warning
-org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_while=insert
-org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_method_invocation=do not insert
-org.eclipse.jdt.core.compiler.debug.lineNumber=generate
-org.eclipse.jdt.core.formatter.blank_lines_before_imports=1
-org.eclipse.jdt.core.formatter.insert_space_before_comma_in_type_parameters=do not insert
-org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_parenthesized_expression=do not insert
-org.eclipse.jdt.core.formatter.alignment_for_compact_if=16
-org.eclipse.jdt.core.compiler.annotation.nullable=org.eclipse.jdt.annotation.Nullable
-org.eclipse.jdt.core.compiler.problem.typeParameterHiding=warning
-org.eclipse.jdt.core.formatter.insert_new_line_after_label=do not insert
-org.eclipse.jdt.core.compiler.codegen.inlineJsrBytecode=enabled
-org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_switch=do not insert
-org.eclipse.jdt.core.compiler.problem.unhandledWarningToken=warning
-org.eclipse.jdt.core.formatter.insert_space_after_closing_angle_bracket_in_type_arguments=insert
-org.eclipse.jdt.core.formatter.comment.preserve_white_space_between_code_and_line_comments=false
-org.eclipse.jdt.core.formatter.insert_space_before_unary_operator=do not insert
-org.eclipse.jdt.core.formatter.insert_space_after_closing_brace_in_block=insert
-org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_constructor_declaration=do not insert
-org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_try=do not insert
-org.eclipse.jdt.core.formatter.continuation_indentation_for_array_initializer=2
-org.eclipse.jdt.core.compiler.problem.missingOverrideAnnotationForInterfaceMethodImplementation=enabled
-org.eclipse.jdt.core.formatter.lineSplit=130
-org.eclipse.jdt.core.compiler.problem.deprecationWhenOverridingDeprecatedMethod=disabled
-org.eclipse.jdt.core.compiler.source=1.7
-org.eclipse.jdt.core.formatter.insert_new_line_in_empty_method_body=insert
-org.eclipse.jdt.core.formatter.insert_new_line_in_empty_anonymous_type_declaration=insert
-org.eclipse.jdt.core.formatter.tabulation.size=4
-org.eclipse.jdt.core.compiler.problem.assertIdentifier=error
-org.eclipse.jdt.core.formatter.brace_position_for_array_initializer=end_of_line
-org.eclipse.jdt.core.compiler.problem.varargsArgumentNeedCast=warning
-org.eclipse.jdt.core.formatter.insert_space_before_comma_in_explicitconstructorcall_arguments=do not insert
-org.eclipse.jdt.core.formatter.blank_lines_between_import_groups=1
-org.eclipse.jdt.core.formatter.comment.new_lines_at_block_boundaries=true
-org.eclipse.jdt.core.compiler.problem.explicitlyClosedAutoCloseable=warning
-org.eclipse.jdt.core.compiler.problem.unusedWarningToken=warning
-org.eclipse.jdt.core.formatter.insert_space_before_comma_in_constructor_declaration_parameters=do not insert
-org.eclipse.jdt.core.formatter.insert_space_between_empty_parens_in_method_invocation=do not insert
-org.eclipse.jdt.core.formatter.insert_space_after_question_in_conditional=insert
-org.eclipse.jdt.core.compiler.problem.unusedObjectAllocation=warning
-org.eclipse.jdt.core.formatter.insert_space_before_postfix_operator=do not insert
-org.eclipse.jdt.core.formatter.insert_space_before_colon_in_default=do not insert
-org.eclipse.jdt.core.compiler.problem.nullSpecViolation=error
-org.eclipse.jdt.core.compiler.problem.unusedParameter=ignore
-org.eclipse.jdt.core.compiler.annotation.inheritNullAnnotations=disabled
-org.eclipse.jdt.core.compiler.problem.overridingPackageDefaultMethod=warning
-org.eclipse.jdt.core.formatter.insert_space_before_opening_brace_in_constructor_declaration=insert
-org.eclipse.jdt.core.compiler.problem.unusedLocal=warning
-org.eclipse.jdt.core.formatter.insert_space_after_opening_angle_bracket_in_parameterized_type_reference=do not insert
-org.eclipse.jdt.core.formatter.indent_statements_compare_to_block=true
-org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_catch=do not insert
-org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_cast=do not insert
-org.eclipse.jdt.core.formatter.insert_space_before_comma_in_type_arguments=do not insert
-org.eclipse.jdt.core.compiler.problem.rawTypeReference=warning
-org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_annotation=do not insert
@@ -376,2 +2,10 @@
-org.eclipse.jdt.core.formatter.enabling_tag=@formatter\:on
-org.eclipse.jdt.core.formatter.insert_space_before_closing_bracket_in_array_reference=do not insert
+org.eclipse.jdt.core.compiler.annotation.inheritNullAnnotations=disabled
+org.eclipse.jdt.core.compiler.annotation.missingNonNullByDefaultAnnotation=ignore
+org.eclipse.jdt.core.compiler.annotation.nonnull=org.eclipse.jdt.annotation.NonNull
+org.eclipse.jdt.core.compiler.annotation.nonnullbydefault=org.eclipse.jdt.annotation.NonNullByDefault
+org.eclipse.jdt.core.compiler.annotation.nullable=org.eclipse.jdt.annotation.Nullable
+org.eclipse.jdt.core.compiler.annotation.nullanalysis=disabled
+org.eclipse.jdt.core.compiler.codegen.inlineJsrBytecode=enabled
+org.eclipse.jdt.core.compiler.codegen.methodParameters=do not generate
+org.eclipse.jdt.core.compiler.codegen.targetPlatform=1.7
+org.eclipse.jdt.core.compiler.codegen.unusedLocal=preserve
@@ -379 +13,109 @@
-org.eclipse.jdt.core.formatter.blank_lines_after_package=1
+org.eclipse.jdt.core.compiler.debug.lineNumber=generate
+org.eclipse.jdt.core.compiler.debug.localVariable=generate
+org.eclipse.jdt.core.compiler.debug.sourceFile=generate
+org.eclipse.jdt.core.compiler.problem.annotationSuperInterface=warning
+org.eclipse.jdt.core.compiler.problem.assertIdentifier=error
+org.eclipse.jdt.core.compiler.problem.autoboxing=ignore
+org.eclipse.jdt.core.compiler.problem.comparingIdentical=warning
+org.eclipse.jdt.core.compiler.problem.deadCode=warning
+org.eclipse.jdt.core.compiler.problem.deprecation=warning
+org.eclipse.jdt.core.compiler.problem.deprecationInDeprecatedCode=disabled
+org.eclipse.jdt.core.compiler.problem.deprecationWhenOverridingDeprecatedMethod=disabled
+org.eclipse.jdt.core.compiler.problem.discouragedReference=warning
+org.eclipse.jdt.core.compiler.problem.emptyStatement=warning
+org.eclipse.jdt.core.compiler.problem.enumIdentifier=error
+org.eclipse.jdt.core.compiler.problem.explicitlyClosedAutoCloseable=warning
+org.eclipse.jdt.core.compiler.problem.fallthroughCase=ignore
+org.eclipse.jdt.core.compiler.problem.fatalOptionalError=disabled
+org.eclipse.jdt.core.compiler.problem.fieldHiding=ignore
+org.eclipse.jdt.core.compiler.problem.finalParameterBound=warning
+org.eclipse.jdt.core.compiler.problem.finallyBlockNotCompletingNormally=warning
+org.eclipse.jdt.core.compiler.problem.forbiddenReference=error
+org.eclipse.jdt.core.compiler.problem.hiddenCatchBlock=warning
+org.eclipse.jdt.core.compiler.problem.includeNullInfoFromAsserts=disabled
+org.eclipse.jdt.core.compiler.problem.incompatibleNonInheritedInterfaceMethod=warning
+org.eclipse.jdt.core.compiler.problem.incompleteEnumSwitch=warning
+org.eclipse.jdt.core.compiler.problem.indirectStaticAccess=ignore
+org.eclipse.jdt.core.compiler.problem.localVariableHiding=ignore
+org.eclipse.jdt.core.compiler.problem.methodWithConstructorName=warning
+org.eclipse.jdt.core.compiler.problem.missingDefaultCase=ignore
+org.eclipse.jdt.core.compiler.problem.missingDeprecatedAnnotation=warning
+org.eclipse.jdt.core.compiler.problem.missingEnumCaseDespiteDefault=disabled
+org.eclipse.jdt.core.compiler.problem.missingHashCodeMethod=warning
+org.eclipse.jdt.core.compiler.problem.missingOverrideAnnotation=warning
+org.eclipse.jdt.core.compiler.problem.missingOverrideAnnotationForInterfaceMethodImplementation=enabled
+org.eclipse.jdt.core.compiler.problem.missingSerialVersion=warning
+org.eclipse.jdt.core.compiler.problem.missingSynchronizedOnInheritedMethod=warning
+org.eclipse.jdt.core.compiler.problem.noEffectAssignment=warning
+org.eclipse.jdt.core.compiler.problem.noImplicitStringConversion=warning
+org.eclipse.jdt.core.compiler.problem.nonExternalizedStringLiteral=ignore
+org.eclipse.jdt.core.compiler.problem.nonnullParameterAnnotationDropped=warning
+org.eclipse.jdt.core.compiler.problem.nullAnnotationInferenceConflict=error
+org.eclipse.jdt.core.compiler.problem.nullReference=warning
+org.eclipse.jdt.core.compiler.problem.nullSpecViolation=error
+org.eclipse.jdt.core.compiler.problem.nullUncheckedConversion=warning
+org.eclipse.jdt.core.compiler.problem.overridingPackageDefaultMethod=warning
+org.eclipse.jdt.core.compiler.problem.parameterAssignment=ignore
+org.eclipse.jdt.core.compiler.problem.possibleAccidentalBooleanAssignment=warning
+org.eclipse.jdt.core.compiler.problem.potentialNullReference=ignore
+org.eclipse.jdt.core.compiler.problem.potentiallyUnclosedCloseable=warning
+org.eclipse.jdt.core.compiler.problem.rawTypeReference=warning
+org.eclipse.jdt.core.compiler.problem.redundantNullAnnotation=warning
+org.eclipse.jdt.core.compiler.problem.redundantNullCheck=warning
+org.eclipse.jdt.core.compiler.problem.redundantSpecificationOfTypeArguments=warning
+org.eclipse.jdt.core.compiler.problem.redundantSuperinterface=ignore
+org.eclipse.jdt.core.compiler.problem.reportMethodCanBePotentiallyStatic=ignore
+org.eclipse.jdt.core.compiler.problem.reportMethodCanBeStatic=ignore
+org.eclipse.jdt.core.compiler.problem.specialParameterHidingField=disabled
+org.eclipse.jdt.core.compiler.problem.staticAccessReceiver=warning
+org.eclipse.jdt.core.compiler.problem.suppressOptionalErrors=disabled
+org.eclipse.jdt.core.compiler.problem.suppressWarnings=enabled
+org.eclipse.jdt.core.compiler.problem.syntacticNullAnalysisForFields=disabled
+org.eclipse.jdt.core.compiler.problem.syntheticAccessEmulation=ignore
+org.eclipse.jdt.core.compiler.problem.typeParameterHiding=warning
+org.eclipse.jdt.core.compiler.problem.unavoidableGenericTypeProblems=enabled
+org.eclipse.jdt.core.compiler.problem.uncheckedTypeOperation=warning
+org.eclipse.jdt.core.compiler.problem.unclosedCloseable=warning
+org.eclipse.jdt.core.compiler.problem.undocumentedEmptyBlock=ignore
+org.eclipse.jdt.core.compiler.problem.unhandledWarningToken=warning
+org.eclipse.jdt.core.compiler.problem.unnecessaryElse=warning
+org.eclipse.jdt.core.compiler.problem.unnecessaryTypeCheck=warning
+org.eclipse.jdt.core.compiler.problem.unqualifiedFieldAccess=ignore
+org.eclipse.jdt.core.compiler.problem.unusedDeclaredThrownException=warning
+org.eclipse.jdt.core.compiler.problem.unusedDeclaredThrownExceptionExemptExceptionAndThrowable=enabled
+org.eclipse.jdt.core.compiler.problem.unusedDeclaredThrownExceptionIncludeDocCommentReference=enabled
+org.eclipse.jdt.core.compiler.problem.unusedDeclaredThrownExceptionWhenOverriding=disabled
+org.eclipse.jdt.core.compiler.problem.unusedImport=warning
+org.eclipse.jdt.core.compiler.problem.unusedLabel=warning
+org.eclipse.jdt.core.compiler.problem.unusedLocal=warning
+org.eclipse.jdt.core.compiler.problem.unusedObjectAllocation=warning
+org.eclipse.jdt.core.compiler.problem.unusedParameter=ignore
+org.eclipse.jdt.core.compiler.problem.unusedParameterIncludeDocCommentReference=enabled
+org.eclipse.jdt.core.compiler.problem.unusedParameterWhenImplementingAbstract=disabled
+org.eclipse.jdt.core.compiler.problem.unusedParameterWhenOverridingConcrete=disabled
+org.eclipse.jdt.core.compiler.problem.unusedPrivateMember=warning
+org.eclipse.jdt.core.compiler.problem.unusedTypeParameter=warning
+org.eclipse.jdt.core.compiler.problem.unusedWarningToken=warning
+org.eclipse.jdt.core.compiler.problem.varargsArgumentNeedCast=warning
+org.eclipse.jdt.core.compiler.source=1.7
+org.eclipse.jdt.core.formatter.align_type_members_on_columns=false
+org.eclipse.jdt.core.formatter.alignment_for_arguments_in_allocation_expression=16
+org.eclipse.jdt.core.formatter.alignment_for_arguments_in_annotation=48
+org.eclipse.jdt.core.formatter.alignment_for_arguments_in_enum_constant=16
+org.eclipse.jdt.core.formatter.alignment_for_arguments_in_explicit_constructor_call=16
+org.eclipse.jdt.core.formatter.alignment_for_arguments_in_method_invocation=16
+org.eclipse.jdt.core.formatter.alignment_for_arguments_in_qualified_allocation_expression=16
+org.eclipse.jdt.core.formatter.alignment_for_assignment=0
+org.eclipse.jdt.core.formatter.alignment_for_binary_expression=16
+org.eclipse.jdt.core.formatter.alignment_for_compact_if=16
+org.eclipse.jdt.core.formatter.alignment_for_conditional_expression=16
+org.eclipse.jdt.core.formatter.alignment_for_enum_constants=16
+org.eclipse.jdt.core.formatter.alignment_for_expressions_in_array_initializer=16
+org.eclipse.jdt.core.formatter.alignment_for_method_declaration=0
+org.eclipse.jdt.core.formatter.alignment_for_multiple_fields=16
+org.eclipse.jdt.core.formatter.alignment_for_parameters_in_constructor_declaration=16
+org.eclipse.jdt.core.formatter.alignment_for_parameters_in_method_declaration=16
+org.eclipse.jdt.core.formatter.alignment_for_resources_in_try=80
+org.eclipse.jdt.core.formatter.alignment_for_selector_in_method_invocation=0
+org.eclipse.jdt.core.formatter.alignment_for_superclass_in_type_declaration=16
+org.eclipse.jdt.core.formatter.alignment_for_superinterfaces_in_enum_declaration=16
@@ -381 +123,5 @@
-org.eclipse.jdt.core.formatter.insert_new_line_at_end_of_file_if_missing=do not insert
+org.eclipse.jdt.core.formatter.alignment_for_throws_clause_in_constructor_declaration=16
+org.eclipse.jdt.core.formatter.alignment_for_throws_clause_in_method_declaration=16
+org.eclipse.jdt.core.formatter.alignment_for_union_type_in_multicatch=16
+org.eclipse.jdt.core.formatter.blank_lines_after_imports=1
+org.eclipse.jdt.core.formatter.blank_lines_after_package=1
@@ -382,0 +129,252 @@
+org.eclipse.jdt.core.formatter.blank_lines_before_first_class_body_declaration=1
+org.eclipse.jdt.core.formatter.blank_lines_before_imports=1
+org.eclipse.jdt.core.formatter.blank_lines_before_member_type=1
+org.eclipse.jdt.core.formatter.blank_lines_before_method=1
+org.eclipse.jdt.core.formatter.blank_lines_before_new_chunk=0
+org.eclipse.jdt.core.formatter.blank_lines_before_package=0
+org.eclipse.jdt.core.formatter.blank_lines_between_import_groups=1
+org.eclipse.jdt.core.formatter.blank_lines_between_type_declarations=1
+org.eclipse.jdt.core.formatter.brace_position_for_annotation_type_declaration=end_of_line
+org.eclipse.jdt.core.formatter.brace_position_for_anonymous_type_declaration=end_of_line
+org.eclipse.jdt.core.formatter.brace_position_for_array_initializer=end_of_line
+org.eclipse.jdt.core.formatter.brace_position_for_block=end_of_line
+org.eclipse.jdt.core.formatter.brace_position_for_block_in_case=end_of_line
+org.eclipse.jdt.core.formatter.brace_position_for_constructor_declaration=end_of_line
+org.eclipse.jdt.core.formatter.brace_position_for_enum_constant=end_of_line
+org.eclipse.jdt.core.formatter.brace_position_for_enum_declaration=end_of_line
+org.eclipse.jdt.core.formatter.brace_position_for_method_declaration=end_of_line
+org.eclipse.jdt.core.formatter.brace_position_for_switch=end_of_line
+org.eclipse.jdt.core.formatter.brace_position_for_type_declaration=end_of_line
+org.eclipse.jdt.core.formatter.comment.clear_blank_lines_in_block_comment=false
+org.eclipse.jdt.core.formatter.comment.clear_blank_lines_in_javadoc_comment=false
+org.eclipse.jdt.core.formatter.comment.format_block_comments=true
+org.eclipse.jdt.core.formatter.comment.format_header=true
+org.eclipse.jdt.core.formatter.comment.format_html=true
+org.eclipse.jdt.core.formatter.comment.format_javadoc_comments=true
+org.eclipse.jdt.core.formatter.comment.format_line_comments=true
+org.eclipse.jdt.core.formatter.comment.format_source_code=true
+org.eclipse.jdt.core.formatter.comment.indent_parameter_description=false
+org.eclipse.jdt.core.formatter.comment.indent_root_tags=true
+org.eclipse.jdt.core.formatter.comment.insert_new_line_before_root_tags=insert
+org.eclipse.jdt.core.formatter.comment.insert_new_line_for_parameter=do not insert
+org.eclipse.jdt.core.formatter.comment.line_length=130
+org.eclipse.jdt.core.formatter.comment.new_lines_at_block_boundaries=true
+org.eclipse.jdt.core.formatter.comment.new_lines_at_javadoc_boundaries=true
+org.eclipse.jdt.core.formatter.comment.preserve_white_space_between_code_and_line_comments=false
+org.eclipse.jdt.core.formatter.compact_else_if=true
+org.eclipse.jdt.core.formatter.continuation_indentation=2
+org.eclipse.jdt.core.formatter.continuation_indentation_for_array_initializer=2
+org.eclipse.jdt.core.formatter.disabling_tag=@formatter\:off
+org.eclipse.jdt.core.formatter.enabling_tag=@formatter\:on
+org.eclipse.jdt.core.formatter.format_guardian_clause_on_one_line=false
+org.eclipse.jdt.core.formatter.format_line_comment_starting_on_first_column=false
+org.eclipse.jdt.core.formatter.indent_body_declarations_compare_to_annotation_declaration_header=true
+org.eclipse.jdt.core.formatter.indent_body_declarations_compare_to_enum_constant_header=true
+org.eclipse.jdt.core.formatter.indent_body_declarations_compare_to_enum_declaration_header=true
+org.eclipse.jdt.core.formatter.indent_body_declarations_compare_to_type_header=true
+org.eclipse.jdt.core.formatter.indent_breaks_compare_to_cases=true
+org.eclipse.jdt.core.formatter.indent_empty_lines=false
+org.eclipse.jdt.core.formatter.indent_statements_compare_to_block=true
+org.eclipse.jdt.core.formatter.indent_statements_compare_to_body=true
+org.eclipse.jdt.core.formatter.indent_switchstatements_compare_to_cases=true
+org.eclipse.jdt.core.formatter.indent_switchstatements_compare_to_switch=true
+org.eclipse.jdt.core.formatter.indentation.size=4
+org.eclipse.jdt.core.formatter.insert_new_line_after_annotation_on_field=insert
+org.eclipse.jdt.core.formatter.insert_new_line_after_annotation_on_local_variable=insert
+org.eclipse.jdt.core.formatter.insert_new_line_after_annotation_on_method=insert
+org.eclipse.jdt.core.formatter.insert_new_line_after_annotation_on_package=insert
+org.eclipse.jdt.core.formatter.insert_new_line_after_annotation_on_parameter=do not insert
+org.eclipse.jdt.core.formatter.insert_new_line_after_annotation_on_type=insert
+org.eclipse.jdt.core.formatter.insert_new_line_after_label=do not insert
+org.eclipse.jdt.core.formatter.insert_new_line_after_opening_brace_in_array_initializer=do not insert
+org.eclipse.jdt.core.formatter.insert_new_line_at_end_of_file_if_missing=do not insert
+org.eclipse.jdt.core.formatter.insert_new_line_before_catch_in_try_statement=do not insert
+org.eclipse.jdt.core.formatter.insert_new_line_before_closing_brace_in_array_initializer=do not insert
+org.eclipse.jdt.core.formatter.insert_new_line_before_else_in_if_statement=do not insert
+org.eclipse.jdt.core.formatter.insert_new_line_before_finally_in_try_statement=do not insert
+org.eclipse.jdt.core.formatter.insert_new_line_before_while_in_do_statement=do not insert
+org.eclipse.jdt.core.formatter.insert_new_line_in_empty_annotation_declaration=insert
+org.eclipse.jdt.core.formatter.insert_new_line_in_empty_anonymous_type_declaration=insert
+org.eclipse.jdt.core.formatter.insert_new_line_in_empty_block=insert
+org.eclipse.jdt.core.formatter.insert_new_line_in_empty_enum_constant=insert
+org.eclipse.jdt.core.formatter.insert_new_line_in_empty_enum_declaration=insert
+org.eclipse.jdt.core.formatter.insert_new_line_in_empty_method_body=insert
+org.eclipse.jdt.core.formatter.insert_new_line_in_empty_type_declaration=insert
+org.eclipse.jdt.core.formatter.insert_space_after_and_in_type_parameter=insert
+org.eclipse.jdt.core.formatter.insert_space_after_assignment_operator=insert
+org.eclipse.jdt.core.formatter.insert_space_after_at_in_annotation=do not insert
+org.eclipse.jdt.core.formatter.insert_space_after_at_in_annotation_type_declaration=do not insert
+org.eclipse.jdt.core.formatter.insert_space_after_binary_operator=insert
+org.eclipse.jdt.core.formatter.insert_space_after_closing_angle_bracket_in_type_arguments=insert
+org.eclipse.jdt.core.formatter.insert_space_after_closing_angle_bracket_in_type_parameters=insert
+org.eclipse.jdt.core.formatter.insert_space_after_closing_brace_in_block=insert
+org.eclipse.jdt.core.formatter.insert_space_after_closing_paren_in_cast=insert
+org.eclipse.jdt.core.formatter.insert_space_after_colon_in_assert=insert
+org.eclipse.jdt.core.formatter.insert_space_after_colon_in_case=insert
+org.eclipse.jdt.core.formatter.insert_space_after_colon_in_conditional=insert
+org.eclipse.jdt.core.formatter.insert_space_after_colon_in_for=insert
+org.eclipse.jdt.core.formatter.insert_space_after_colon_in_labeled_statement=insert
+org.eclipse.jdt.core.formatter.insert_space_after_comma_in_allocation_expression=insert
+org.eclipse.jdt.core.formatter.insert_space_after_comma_in_annotation=insert
+org.eclipse.jdt.core.formatter.insert_space_after_comma_in_array_initializer=insert
+org.eclipse.jdt.core.formatter.insert_space_after_comma_in_constructor_declaration_parameters=insert
+org.eclipse.jdt.core.formatter.insert_space_after_comma_in_constructor_declaration_throws=insert
+org.eclipse.jdt.core.formatter.insert_space_after_comma_in_enum_constant_arguments=insert
+org.eclipse.jdt.core.formatter.insert_space_after_comma_in_enum_declarations=insert
+org.eclipse.jdt.core.formatter.insert_space_after_comma_in_explicitconstructorcall_arguments=insert
+org.eclipse.jdt.core.formatter.insert_space_after_comma_in_for_increments=insert
+org.eclipse.jdt.core.formatter.insert_space_after_comma_in_for_inits=insert
+org.eclipse.jdt.core.formatter.insert_space_after_comma_in_method_declaration_parameters=insert
+org.eclipse.jdt.core.formatter.insert_space_after_comma_in_method_declaration_throws=insert
+org.eclipse.jdt.core.formatter.insert_space_after_comma_in_method_invocation_arguments=insert
+org.eclipse.jdt.core.formatter.insert_space_after_comma_in_multiple_field_declarations=insert
+org.eclipse.jdt.core.formatter.insert_space_after_comma_in_multiple_local_declarations=insert
+org.eclipse.jdt.core.formatter.insert_space_after_comma_in_parameterized_type_reference=insert
+org.eclipse.jdt.core.formatter.insert_space_after_comma_in_superinterfaces=insert
+org.eclipse.jdt.core.formatter.insert_space_after_comma_in_type_arguments=insert
+org.eclipse.jdt.core.formatter.insert_space_after_comma_in_type_parameters=insert
+org.eclipse.jdt.core.formatter.insert_space_after_ellipsis=insert
+org.eclipse.jdt.core.formatter.insert_space_after_opening_angle_bracket_in_parameterized_type_reference=do not insert
+org.eclipse.jdt.core.formatter.insert_space_after_opening_angle_bracket_in_type_arguments=do not insert
+org.eclipse.jdt.core.formatter.insert_space_after_opening_angle_bracket_in_type_parameters=do not insert
+org.eclipse.jdt.core.formatter.insert_space_after_opening_brace_in_array_initializer=insert
+org.eclipse.jdt.core.formatter.insert_space_after_opening_bracket_in_array_allocation_expression=do not insert
+org.eclipse.jdt.core.formatter.insert_space_after_opening_bracket_in_array_reference=do not insert
+org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_annotation=do not insert
+org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_cast=do not insert
+org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_catch=do not insert
+org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_constructor_declaration=do not insert
+org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_enum_constant=do not insert
+org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_for=do not insert
+org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_if=do not insert
+org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_method_declaration=do not insert
+org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_method_invocation=do not insert
+org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_parenthesized_expression=do not insert
+org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_switch=do not insert
+org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_synchronized=do not insert
+org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_try=do not insert
+org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_while=do not insert
+org.eclipse.jdt.core.formatter.insert_space_after_postfix_operator=do not insert
+org.eclipse.jdt.core.formatter.insert_space_after_prefix_operator=do not insert
+org.eclipse.jdt.core.formatter.insert_space_after_question_in_conditional=insert
+org.eclipse.jdt.core.formatter.insert_space_after_question_in_wildcard=do not insert
+org.eclipse.jdt.core.formatter.insert_space_after_semicolon_in_for=insert
+org.eclipse.jdt.core.formatter.insert_space_after_semicolon_in_try_resources=insert
+org.eclipse.jdt.core.formatter.insert_space_after_unary_operator=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_and_in_type_parameter=insert
+org.eclipse.jdt.core.formatter.insert_space_before_assignment_operator=insert
+org.eclipse.jdt.core.formatter.insert_space_before_at_in_annotation_type_declaration=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_binary_operator=insert
+org.eclipse.jdt.core.formatter.insert_space_before_closing_angle_bracket_in_parameterized_type_reference=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_closing_angle_bracket_in_type_arguments=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_closing_angle_bracket_in_type_parameters=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_closing_brace_in_array_initializer=insert
+org.eclipse.jdt.core.formatter.insert_space_before_closing_bracket_in_array_allocation_expression=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_closing_bracket_in_array_reference=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_annotation=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_cast=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_catch=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_constructor_declaration=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_enum_constant=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_for=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_if=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_method_declaration=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_method_invocation=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_parenthesized_expression=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_switch=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_synchronized=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_try=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_while=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_colon_in_assert=insert
+org.eclipse.jdt.core.formatter.insert_space_before_colon_in_case=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_colon_in_conditional=insert
+org.eclipse.jdt.core.formatter.insert_space_before_colon_in_default=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_colon_in_for=insert
+org.eclipse.jdt.core.formatter.insert_space_before_colon_in_labeled_statement=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_comma_in_allocation_expression=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_comma_in_annotation=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_comma_in_array_initializer=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_comma_in_constructor_declaration_parameters=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_comma_in_constructor_declaration_throws=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_comma_in_enum_constant_arguments=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_comma_in_enum_declarations=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_comma_in_explicitconstructorcall_arguments=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_comma_in_for_increments=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_comma_in_for_inits=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_comma_in_method_declaration_parameters=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_comma_in_method_declaration_throws=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_comma_in_method_invocation_arguments=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_comma_in_multiple_field_declarations=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_comma_in_multiple_local_declarations=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_comma_in_parameterized_type_reference=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_comma_in_superinterfaces=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_comma_in_type_arguments=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_comma_in_type_parameters=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_ellipsis=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_opening_angle_bracket_in_parameterized_type_reference=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_opening_angle_bracket_in_type_arguments=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_opening_angle_bracket_in_type_parameters=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_opening_brace_in_annotation_type_declaration=insert
+org.eclipse.jdt.core.formatter.insert_space_before_opening_brace_in_anonymous_type_declaration=insert
+org.eclipse.jdt.core.formatter.insert_space_before_opening_brace_in_array_initializer=insert
+org.eclipse.jdt.core.formatter.insert_space_before_opening_brace_in_block=insert
+org.eclipse.jdt.core.formatter.insert_space_before_opening_brace_in_constructor_declaration=insert
+org.eclipse.jdt.core.formatter.insert_space_before_opening_brace_in_enum_constant=insert
+org.eclipse.jdt.core.formatter.insert_space_before_opening_brace_in_enum_declaration=insert
+org.eclipse.jdt.core.formatter.insert_space_before_opening_brace_in_method_declaration=insert
+org.eclipse.jdt.core.formatter.insert_space_before_opening_brace_in_switch=insert
+org.eclipse.jdt.core.formatter.insert_space_before_opening_brace_in_type_declaration=insert
+org.eclipse.jdt.core.formatter.insert_space_before_opening_bracket_in_array_allocation_expression=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_opening_bracket_in_array_reference=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_opening_bracket_in_array_type_reference=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_annotation=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_annotation_type_member_declaration=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_catch=insert
+org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_constructor_declaration=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_enum_constant=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_for=insert
+org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_if=insert
+org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_method_declaration=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_method_invocation=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_parenthesized_expression=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_switch=insert
+org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_synchronized=insert
+org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_try=insert
+org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_while=insert
+org.eclipse.jdt.core.formatter.insert_space_before_parenthesized_expression_in_return=insert
+org.eclipse.jdt.core.formatter.insert_space_before_parenthesized_expression_in_throw=insert
+org.eclipse.jdt.core.formatter.insert_space_before_postfix_operator=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_prefix_operator=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_question_in_conditional=insert
+org.eclipse.jdt.core.formatter.insert_space_before_question_in_wildcard=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_semicolon=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_semicolon_in_for=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_semicolon_in_try_resources=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_unary_operator=do not insert
+org.eclipse.jdt.core.formatter.insert_space_between_brackets_in_array_type_reference=do not insert
+org.eclipse.jdt.core.formatter.insert_space_between_empty_braces_in_array_initializer=do not insert
+org.eclipse.jdt.core.formatter.insert_space_between_empty_brackets_in_array_allocation_expression=do not insert
+org.eclipse.jdt.core.formatter.insert_space_between_empty_parens_in_annotation_type_member_declaration=do not insert
+org.eclipse.jdt.core.formatter.insert_space_between_empty_parens_in_constructor_declaration=do not insert
+org.eclipse.jdt.core.formatter.insert_space_between_empty_parens_in_enum_constant=do not insert
+org.eclipse.jdt.core.formatter.insert_space_between_empty_parens_in_method_declaration=do not insert
+org.eclipse.jdt.core.formatter.insert_space_between_empty_parens_in_method_invocation=do not insert
+org.eclipse.jdt.core.formatter.join_lines_in_comments=false
+org.eclipse.jdt.core.formatter.join_wrapped_lines=false
+org.eclipse.jdt.core.formatter.keep_else_statement_on_same_line=false
+org.eclipse.jdt.core.formatter.keep_empty_array_initializer_on_one_line=false
+org.eclipse.jdt.core.formatter.keep_imple_if_on_one_line=false
+org.eclipse.jdt.core.formatter.keep_then_statement_on_same_line=false
+org.eclipse.jdt.core.formatter.lineSplit=130
+org.eclipse.jdt.core.formatter.never_indent_block_comments_on_first_column=false
+org.eclipse.jdt.core.formatter.never_indent_line_comments_on_first_column=true
+org.eclipse.jdt.core.formatter.number_of_blank_lines_at_beginning_of_method_body=0
+org.eclipse.jdt.core.formatter.number_of_empty_lines_to_preserve=3
+org.eclipse.jdt.core.formatter.put_empty_statement_on_new_line=true
+org.eclipse.jdt.core.formatter.tabulation.char=space
+org.eclipse.jdt.core.formatter.tabulation.size=4
+org.eclipse.jdt.core.formatter.use_on_off_tags=true
+org.eclipse.jdt.core.formatter.use_tabs_only_for_leading_indentations=false
+org.eclipse.jdt.core.formatter.wrap_before_binary_operator=false
+org.eclipse.jdt.core.formatter.wrap_before_or_operator_multicatch=true
+org.eclipse.jdt.core.formatter.wrap_outer_expressions_when_nested=true
\ No newline at end of file
diff --git a/build.gradle b/build.gradle
index 1c3c5c2..51dc62a 100644
--- a/build.gradle
+++ b/build.gradle
@@ -20,0 +21,13 @@
+// work around unnecessary timestamp in generated file which always causes dirty files in version control
+// https://issues.gradle.org/browse/GRADLE-2293
+task adjustEclipseSettingsFile << {
+   ant.replaceregexp(match:'^#.*', replace:'', flags:'g', byline:true) {
+      fileset(dir: project.projectDir, includes: '.settings/org.eclipse.jdt.core.prefs')
+   }
+}
+task sortEclipseSettingsFile << {
+   new File(project.projectDir, '.settings/org.eclipse.jdt.core.prefs').with { it.text = it.readLines().findAll { it }.sort().join('\n') }
+}
+eclipseJdt.finalizedBy adjustEclipseSettingsFile
+eclipseJdt.finalizedBy sortEclipseSettingsFile
+
@@ -22 +35 @@
-	gradleVersion = '2.3'
+	gradleVersion = '2.4'
diff --git a/gradle/wrapper/gradle-wrapper.jar b/gradle/wrapper/gradle-wrapper.jar
index c97a8bd..b5166da 100644
--- a/gradle/wrapper/gradle-wrapper.jar
+++ b/gradle/wrapper/gradle-wrapper.jar
Binary files differ
diff --git a/gradle/wrapper/gradle-wrapper.properties b/gradle/wrapper/gradle-wrapper.properties
index 6568c98..101f5ac 100644
--- a/gradle/wrapper/gradle-wrapper.properties
+++ b/gradle/wrapper/gradle-wrapper.properties
@@ -1 +1 @@
-#Mon Mar 16 12:31:08 CET 2015
+#Mon May 11 12:45:46 CEST 2015
@@ -6 +6 @@
-distributionUrl=https\://services.gradle.org/distributions/gradle-2.3-bin.zip
+distributionUrl=https\://services.gradle.org/distributions/gradle-2.4-bin.zip
Diff Between d8cdb7596fe6c2c40c7166007ff66e6725b4782d ed8eff82faf70c36c6129d1f6951f5cec6609012diff --git a/README.md b/README.md
index a3b586e..09a784d 100644
--- a/README.md
+++ b/README.md
@@ -7 +7 @@
-The JGit framework is rich and diverse, it has two layers, a low-level _api_ and a higher-level set of _porcelain_ commands. 
+The JGit framework is rich and diverse, it has two layers, a low-level _api_ and a higher-level set of _porcelain_ commands. This can be a bit intimidating at first as there are lots of classes, some of which are not relevant for most tasks.
@@ -9 +9 @@
-This project tries to provide a collection of ready-to-run snippets which try to augment the existing [JavaDoc](http://download.eclipse.org/jgit/docs/latest/apidocs/) and the [User Guide](http://wiki.eclipse.org/JGit/User_Guide)
+This project tries to provide a collection of ready-to-run snippets which try to provide a quick start into building functionality using JGit. Please make sure to also use the existing [JavaDoc](http://download.eclipse.org/jgit/docs/latest/apidocs/) and the [User Guide](http://wiki.eclipse.org/JGit/User_Guide) as well, as they are well done and provide detailed information and a general overview of JGit respectively.
@@ -23 +23 @@
-	mvn dependency:sources eclipse:eclipse package
+    mvn dependency:sources eclipse:eclipse package
@@ -27 +27 @@
-	./gradlew eclipse check
+    ./gradlew eclipse check
Diff Between ed8eff82faf70c36c6129d1f6951f5cec6609012 83a763d07e8f74162be92af684a6506cdd03bbffdiff --git a/src/main/java/org/dstadler/jgit/CreateNewRepository.java b/src/main/java/org/dstadler/jgit/CreateNewRepository.java
index 7fe2080..d930761 100644
--- a/src/main/java/org/dstadler/jgit/CreateNewRepository.java
+++ b/src/main/java/org/dstadler/jgit/CreateNewRepository.java
@@ -23,2 +23,2 @@
-import org.eclipse.jgit.lib.Repository;
-import org.eclipse.jgit.storage.file.FileRepositoryBuilder;
+import org.eclipse.jgit.api.Git;
+import org.eclipse.jgit.api.errors.GitAPIException;
@@ -28 +28 @@
- * 
+ *
@@ -33 +33 @@
-    public static void main(String[] args) throws IOException {
+    public static void main(String[] args) throws IOException, IllegalStateException, GitAPIException {
@@ -39,2 +39 @@
-        Repository repository = FileRepositoryBuilder.create(new File(localPath, ".git"));
-        repository.create();
+        Git git = Git.init().setDirectory(localPath).call();
@@ -42 +41 @@
-        System.out.println("Having repository: " + repository.getDirectory());
+        System.out.println("Having repository: " + git.getRepository().getDirectory());
@@ -44 +43 @@
-        repository.close();
+        git.close();
Diff Between 83a763d07e8f74162be92af684a6506cdd03bbff 7769ad420e3e2a3eb93383c4f5c4afcefafbd36adiff --git a/build.gradle b/build.gradle
index 3d771a2..1c3c5c2 100644
--- a/build.gradle
+++ b/build.gradle
@@ -17,0 +18 @@
+	compile 'org.slf4j:slf4j-simple:1.7.12'
diff --git a/pom.xml b/pom.xml
index 56fd28b..8092f37 100644
--- a/pom.xml
+++ b/pom.xml
@@ -35,0 +36,5 @@
+	<dependency>
+		<groupId>org.slf4j</groupId>
+		<artifactId>slf4j-simple</artifactId>
+		<version>1.7.12</version>
+	</dependency>
Diff Between 7769ad420e3e2a3eb93383c4f5c4afcefafbd36a ac2c096383cb06e91655ae7b253015d49e930c47diff --git a/.settings/org.eclipse.core.resources.prefs b/.settings/org.eclipse.core.resources.prefs
new file mode 100755
index 0000000..4824b80
--- /dev/null
+++ b/.settings/org.eclipse.core.resources.prefs
@@ -0,0 +1,2 @@
+eclipse.preferences.version=1
+encoding/<project>=UTF-8
diff --git a/.settings/org.eclipse.core.runtime.prefs b/.settings/org.eclipse.core.runtime.prefs
new file mode 100755
index 0000000..c522e1f
--- /dev/null
+++ b/.settings/org.eclipse.core.runtime.prefs
@@ -0,0 +1,2 @@
+eclipse.preferences.version=1
+line.separator=\n
diff --git a/build.gradle b/build.gradle
index a819813..3d771a2 100644
--- a/build.gradle
+++ b/build.gradle
@@ -15,2 +15,2 @@
-	compile 'org.eclipse.jgit:org.eclipse.jgit:3.6.2.201501210735-r'
-	compile 'org.eclipse.jgit:org.eclipse.jgit.archive:3.6.2.201501210735-r'
+	compile 'org.eclipse.jgit:org.eclipse.jgit:3.7.0.201502260915-r'
+	compile 'org.eclipse.jgit:org.eclipse.jgit.archive:3.7.0.201502260915-r'
@@ -21 +21 @@
-	gradleVersion = '2.2.1'
+	gradleVersion = '2.3'
diff --git a/gradle/wrapper/gradle-wrapper.jar b/gradle/wrapper/gradle-wrapper.jar
index 3d0dee6..c97a8bd 100644
--- a/gradle/wrapper/gradle-wrapper.jar
+++ b/gradle/wrapper/gradle-wrapper.jar
Binary files differ
diff --git a/gradle/wrapper/gradle-wrapper.properties b/gradle/wrapper/gradle-wrapper.properties
index 5c69a07..6568c98 100644
--- a/gradle/wrapper/gradle-wrapper.properties
+++ b/gradle/wrapper/gradle-wrapper.properties
@@ -1,6 +1,6 @@
-#Thu Dec 11 23:25:39 CET 2014
-distributionBase=GRADLE_USER_HOME
-distributionPath=wrapper/dists
-zipStoreBase=GRADLE_USER_HOME
-zipStorePath=wrapper/dists
-distributionUrl=https\://services.gradle.org/distributions/gradle-2.2.1-bin.zip
+#Mon Mar 16 12:31:08 CET 2015
+distributionBase=GRADLE_USER_HOME
+distributionPath=wrapper/dists
+zipStoreBase=GRADLE_USER_HOME
+zipStorePath=wrapper/dists
+distributionUrl=https\://services.gradle.org/distributions/gradle-2.3-bin.zip
diff --git a/gradlew.bat b/gradlew.bat
index 8a0b282..aec9973 100755
--- a/gradlew.bat
+++ b/gradlew.bat
@@ -1,90 +1,90 @@
-@if "%DEBUG%" == "" @echo off
-@rem ##########################################################################
-@rem
-@rem  Gradle startup script for Windows
-@rem
-@rem ##########################################################################
-
-@rem Set local scope for the variables with windows NT shell
-if "%OS%"=="Windows_NT" setlocal
-
-@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
-set DEFAULT_JVM_OPTS=
-
-set DIRNAME=%~dp0
-if "%DIRNAME%" == "" set DIRNAME=.
-set APP_BASE_NAME=%~n0
-set APP_HOME=%DIRNAME%
-
-@rem Find java.exe
-if defined JAVA_HOME goto findJavaFromJavaHome
-
-set JAVA_EXE=java.exe
-%JAVA_EXE% -version >NUL 2>&1
-if "%ERRORLEVEL%" == "0" goto init
-
-echo.
-echo ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.
-echo.
-echo Please set the JAVA_HOME variable in your environment to match the
-echo location of your Java installation.
-
-goto fail
-
-:findJavaFromJavaHome
-set JAVA_HOME=%JAVA_HOME:"=%
-set JAVA_EXE=%JAVA_HOME%/bin/java.exe
-
-if exist "%JAVA_EXE%" goto init
-
-echo.
-echo ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%
-echo.
-echo Please set the JAVA_HOME variable in your environment to match the
-echo location of your Java installation.
-
-goto fail
-
-:init
-@rem Get command-line arguments, handling Windowz variants
-
-if not "%OS%" == "Windows_NT" goto win9xME_args
-if "%@eval[2+2]" == "4" goto 4NT_args
-
-:win9xME_args
-@rem Slurp the command line arguments.
-set CMD_LINE_ARGS=
-set _SKIP=2
-
-:win9xME_args_slurp
-if "x%~1" == "x" goto execute
-
-set CMD_LINE_ARGS=%*
-goto execute
-
-:4NT_args
-@rem Get arguments from the 4NT Shell from JP Software
-set CMD_LINE_ARGS=%$
-
-:execute
-@rem Setup the command line
-
-set CLASSPATH=%APP_HOME%\gradle\wrapper\gradle-wrapper.jar
-
-@rem Execute Gradle
-"%JAVA_EXE%" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% "-Dorg.gradle.appname=%APP_BASE_NAME%" -classpath "%CLASSPATH%" org.gradle.wrapper.GradleWrapperMain %CMD_LINE_ARGS%
-
-:end
-@rem End local scope for the variables with windows NT shell
-if "%ERRORLEVEL%"=="0" goto mainEnd
-
-:fail
-rem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of
-rem the _cmd.exe /c_ return code!
-if  not "" == "%GRADLE_EXIT_CONSOLE%" exit 1
-exit /b 1
-
-:mainEnd
-if "%OS%"=="Windows_NT" endlocal
-
-:omega
+@if "%DEBUG%" == "" @echo off
+@rem ##########################################################################
+@rem
+@rem  Gradle startup script for Windows
+@rem
+@rem ##########################################################################
+
+@rem Set local scope for the variables with windows NT shell
+if "%OS%"=="Windows_NT" setlocal
+
+@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
+set DEFAULT_JVM_OPTS=
+
+set DIRNAME=%~dp0
+if "%DIRNAME%" == "" set DIRNAME=.
+set APP_BASE_NAME=%~n0
+set APP_HOME=%DIRNAME%
+
+@rem Find java.exe
+if defined JAVA_HOME goto findJavaFromJavaHome
+
+set JAVA_EXE=java.exe
+%JAVA_EXE% -version >NUL 2>&1
+if "%ERRORLEVEL%" == "0" goto init
+
+echo.
+echo ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.
+echo.
+echo Please set the JAVA_HOME variable in your environment to match the
+echo location of your Java installation.
+
+goto fail
+
+:findJavaFromJavaHome
+set JAVA_HOME=%JAVA_HOME:"=%
+set JAVA_EXE=%JAVA_HOME%/bin/java.exe
+
+if exist "%JAVA_EXE%" goto init
+
+echo.
+echo ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%
+echo.
+echo Please set the JAVA_HOME variable in your environment to match the
+echo location of your Java installation.
+
+goto fail
+
+:init
+@rem Get command-line arguments, handling Windowz variants
+
+if not "%OS%" == "Windows_NT" goto win9xME_args
+if "%@eval[2+2]" == "4" goto 4NT_args
+
+:win9xME_args
+@rem Slurp the command line arguments.
+set CMD_LINE_ARGS=
+set _SKIP=2
+
+:win9xME_args_slurp
+if "x%~1" == "x" goto execute
+
+set CMD_LINE_ARGS=%*
+goto execute
+
+:4NT_args
+@rem Get arguments from the 4NT Shell from JP Software
+set CMD_LINE_ARGS=%$
+
+:execute
+@rem Setup the command line
+
+set CLASSPATH=%APP_HOME%\gradle\wrapper\gradle-wrapper.jar
+
+@rem Execute Gradle
+"%JAVA_EXE%" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% "-Dorg.gradle.appname=%APP_BASE_NAME%" -classpath "%CLASSPATH%" org.gradle.wrapper.GradleWrapperMain %CMD_LINE_ARGS%
+
+:end
+@rem End local scope for the variables with windows NT shell
+if "%ERRORLEVEL%"=="0" goto mainEnd
+
+:fail
+rem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of
+rem the _cmd.exe /c_ return code!
+if  not "" == "%GRADLE_EXIT_CONSOLE%" exit 1
+exit /b 1
+
+:mainEnd
+if "%OS%"=="Windows_NT" endlocal
+
+:omega
diff --git a/pom.xml b/pom.xml
index 09ae396..56fd28b 100644
--- a/pom.xml
+++ b/pom.xml
@@ -23 +23 @@
-      <version>3.6.2.201501210735-r</version>
+      <version>3.7.0.201502260915-r</version>
@@ -28 +28 @@
-      <version>3.6.2.201501210735-r</version>
+      <version>3.7.0.201502260915-r</version>
Diff Between ac2c096383cb06e91655ae7b253015d49e930c47 a1de79c38a30fa1d09333e4a64391ae59f15514fdiff --git a/src/main/java/org/dstadler/jgit/porcelain/ListTags.java b/src/main/java/org/dstadler/jgit/porcelain/ListTags.java
index 9e9a3e1..3949403 100644
--- a/src/main/java/org/dstadler/jgit/porcelain/ListTags.java
+++ b/src/main/java/org/dstadler/jgit/porcelain/ListTags.java
@@ -23,0 +24 @@
+import org.eclipse.jgit.api.LogCommand;
@@ -26,0 +28 @@
+import org.eclipse.jgit.revwalk.RevCommit;
@@ -32 +34 @@
- * 
+ *
@@ -42,0 +45,15 @@
+
+            // fetch all commits for this tag
+            LogCommand log = new Git(repository).log();
+
+            Ref peeledRef = repository.peel(ref);
+            if(peeledRef.getPeeledObjectId() != null) {
+            	log.add(peeledRef.getPeeledObjectId());
+            } else {
+            	log.add(ref.getObjectId());
+            }
+
+			Iterable<RevCommit> logs = log.call();
+			for (RevCommit rev : logs) {
+				System.out.println("Commit: " + rev /* + ", name: " + rev.getName() + ", id: " + rev.getId().getName() */);
+			}
Diff Between a1de79c38a30fa1d09333e4a64391ae59f15514f 283d9b5d72b627911516f00ba35bfc546667c78ddiff --git a/build.gradle b/build.gradle
index 12749b7..a819813 100644
--- a/build.gradle
+++ b/build.gradle
@@ -15,2 +15,2 @@
-	compile 'org.eclipse.jgit:org.eclipse.jgit:3.6.0.201412230720-r'
-	compile 'org.eclipse.jgit:org.eclipse.jgit.archive:3.6.0.201412230720-r'
+	compile 'org.eclipse.jgit:org.eclipse.jgit:3.6.2.201501210735-r'
+	compile 'org.eclipse.jgit:org.eclipse.jgit.archive:3.6.2.201501210735-r'
diff --git a/pom.xml b/pom.xml
index e3d10ac..09ae396 100644
--- a/pom.xml
+++ b/pom.xml
@@ -23 +23 @@
-      <version>3.6.0.201412230720-r</version>
+      <version>3.6.2.201501210735-r</version>
@@ -28 +28 @@
-      <version>3.6.0.201412230720-r</version>
+      <version>3.6.2.201501210735-r</version>
Diff Between 283d9b5d72b627911516f00ba35bfc546667c78d 510a5b3583995baca1a82468fc95765a1a52898ddiff --git a/build.gradle b/build.gradle
index 4568ba1..12749b7 100644
--- a/build.gradle
+++ b/build.gradle
@@ -15,2 +15,2 @@
-	compile 'org.eclipse.jgit:org.eclipse.jgit:3.5.3.201412180710-r'
-	compile 'org.eclipse.jgit:org.eclipse.jgit.archive:3.5.3.201412180710-r'
+	compile 'org.eclipse.jgit:org.eclipse.jgit:3.6.0.201412230720-r'
+	compile 'org.eclipse.jgit:org.eclipse.jgit.archive:3.6.0.201412230720-r'
diff --git a/pom.xml b/pom.xml
index 7282eab..e3d10ac 100644
--- a/pom.xml
+++ b/pom.xml
@@ -23 +23 @@
-      <version>3.5.3.201412180710-r</version>
+      <version>3.6.0.201412230720-r</version>
@@ -28 +28 @@
-      <version>3.5.3.201412180710-r</version>
+      <version>3.6.0.201412230720-r</version>
Diff Between 510a5b3583995baca1a82468fc95765a1a52898d d6536e86b3a1e050ec3e3a3e37c60ac076ada90fdiff --git a/pom.xml b/pom.xml
index 0250fd6..7282eab 100644
--- a/pom.xml
+++ b/pom.xml
@@ -23 +23 @@
-      <version>3.5.2.201411120430-r</version>
+      <version>3.5.3.201412180710-r</version>
@@ -28 +28 @@
-      <version>3.5.2.201411120430-r</version>
+      <version>3.5.3.201412180710-r</version>
@@ -45,2 +45,2 @@
-          <source>1.5</source>
-          <target>1.5</target>
+          <source>1.7</source>
+          <target>1.7</target>
Diff Between d6536e86b3a1e050ec3e3a3e37c60ac076ada90f 7a712c5b4c61cdb775c900644fc191bc003d0828diff --git a/.settings/org.eclipse.jdt.core.prefs b/.settings/org.eclipse.jdt.core.prefs
index fef0954..970b79f 100644
--- a/.settings/org.eclipse.jdt.core.prefs
+++ b/.settings/org.eclipse.jdt.core.prefs
@@ -1,75 +1,2 @@
-eclipse.preferences.version=1
-org.eclipse.jdt.core.compiler.annotation.inheritNullAnnotations=disabled
-org.eclipse.jdt.core.compiler.annotation.missingNonNullByDefaultAnnotation=ignore
-org.eclipse.jdt.core.compiler.annotation.nonnull=org.eclipse.jdt.annotation.NonNull
-org.eclipse.jdt.core.compiler.annotation.nonnullbydefault=org.eclipse.jdt.annotation.NonNullByDefault
-org.eclipse.jdt.core.compiler.annotation.nullable=org.eclipse.jdt.annotation.Nullable
-org.eclipse.jdt.core.compiler.annotation.nullanalysis=disabled
-org.eclipse.jdt.core.compiler.codegen.inlineJsrBytecode=enabled
-org.eclipse.jdt.core.compiler.codegen.methodParameters=do not generate
-org.eclipse.jdt.core.compiler.codegen.targetPlatform=1.7
-org.eclipse.jdt.core.compiler.codegen.unusedLocal=preserve
-org.eclipse.jdt.core.compiler.compliance=1.7
-org.eclipse.jdt.core.compiler.debug.lineNumber=generate
-org.eclipse.jdt.core.compiler.debug.localVariable=generate
-org.eclipse.jdt.core.compiler.debug.sourceFile=generate
-org.eclipse.jdt.core.compiler.problem.annotationSuperInterface=warning
-org.eclipse.jdt.core.compiler.problem.assertIdentifier=error
-org.eclipse.jdt.core.compiler.problem.autoboxing=ignore
-org.eclipse.jdt.core.compiler.problem.comparingIdentical=warning
-org.eclipse.jdt.core.compiler.problem.deadCode=warning
-org.eclipse.jdt.core.compiler.problem.deprecation=warning
-org.eclipse.jdt.core.compiler.problem.deprecationInDeprecatedCode=disabled
-org.eclipse.jdt.core.compiler.problem.deprecationWhenOverridingDeprecatedMethod=disabled
-org.eclipse.jdt.core.compiler.problem.discouragedReference=warning
-org.eclipse.jdt.core.compiler.problem.emptyStatement=warning
-org.eclipse.jdt.core.compiler.problem.enumIdentifier=error
-org.eclipse.jdt.core.compiler.problem.explicitlyClosedAutoCloseable=warning
-org.eclipse.jdt.core.compiler.problem.fallthroughCase=ignore
-org.eclipse.jdt.core.compiler.problem.fatalOptionalError=disabled
-org.eclipse.jdt.core.compiler.problem.fieldHiding=ignore
-org.eclipse.jdt.core.compiler.problem.finalParameterBound=warning
-org.eclipse.jdt.core.compiler.problem.finallyBlockNotCompletingNormally=warning
-org.eclipse.jdt.core.compiler.problem.forbiddenReference=error
-org.eclipse.jdt.core.compiler.problem.hiddenCatchBlock=warning
-org.eclipse.jdt.core.compiler.problem.includeNullInfoFromAsserts=disabled
-org.eclipse.jdt.core.compiler.problem.incompatibleNonInheritedInterfaceMethod=warning
-org.eclipse.jdt.core.compiler.problem.incompleteEnumSwitch=warning
-org.eclipse.jdt.core.compiler.problem.indirectStaticAccess=ignore
-org.eclipse.jdt.core.compiler.problem.localVariableHiding=ignore
-org.eclipse.jdt.core.compiler.problem.methodWithConstructorName=warning
-org.eclipse.jdt.core.compiler.problem.missingDefaultCase=ignore
-org.eclipse.jdt.core.compiler.problem.missingDeprecatedAnnotation=warning
-org.eclipse.jdt.core.compiler.problem.missingEnumCaseDespiteDefault=disabled
-org.eclipse.jdt.core.compiler.problem.missingHashCodeMethod=warning
-org.eclipse.jdt.core.compiler.problem.missingOverrideAnnotation=warning
-org.eclipse.jdt.core.compiler.problem.missingOverrideAnnotationForInterfaceMethodImplementation=enabled
-org.eclipse.jdt.core.compiler.problem.missingSerialVersion=warning
-org.eclipse.jdt.core.compiler.problem.missingSynchronizedOnInheritedMethod=warning
-org.eclipse.jdt.core.compiler.problem.noEffectAssignment=warning
-org.eclipse.jdt.core.compiler.problem.noImplicitStringConversion=warning
-org.eclipse.jdt.core.compiler.problem.nonExternalizedStringLiteral=ignore
-org.eclipse.jdt.core.compiler.problem.nonnullParameterAnnotationDropped=warning
-org.eclipse.jdt.core.compiler.problem.nullAnnotationInferenceConflict=error
-org.eclipse.jdt.core.compiler.problem.nullReference=warning
-org.eclipse.jdt.core.compiler.problem.nullSpecViolation=error
-org.eclipse.jdt.core.compiler.problem.nullUncheckedConversion=warning
-org.eclipse.jdt.core.compiler.problem.overridingPackageDefaultMethod=warning
-org.eclipse.jdt.core.compiler.problem.parameterAssignment=ignore
-org.eclipse.jdt.core.compiler.problem.possibleAccidentalBooleanAssignment=warning
-org.eclipse.jdt.core.compiler.problem.potentialNullReference=ignore
-org.eclipse.jdt.core.compiler.problem.potentiallyUnclosedCloseable=warning
-org.eclipse.jdt.core.compiler.problem.rawTypeReference=warning
-org.eclipse.jdt.core.compiler.problem.redundantNullAnnotation=warning
-org.eclipse.jdt.core.compiler.problem.redundantNullCheck=warning
-org.eclipse.jdt.core.compiler.problem.redundantSpecificationOfTypeArguments=warning
-org.eclipse.jdt.core.compiler.problem.redundantSuperinterface=ignore
-org.eclipse.jdt.core.compiler.problem.reportMethodCanBePotentiallyStatic=ignore
-org.eclipse.jdt.core.compiler.problem.reportMethodCanBeStatic=ignore
-org.eclipse.jdt.core.compiler.problem.specialParameterHidingField=disabled
-org.eclipse.jdt.core.compiler.problem.staticAccessReceiver=warning
-org.eclipse.jdt.core.compiler.problem.suppressOptionalErrors=disabled
-org.eclipse.jdt.core.compiler.problem.suppressWarnings=enabled
-org.eclipse.jdt.core.compiler.problem.syntacticNullAnalysisForFields=disabled
-org.eclipse.jdt.core.compiler.problem.syntheticAccessEmulation=ignore
-org.eclipse.jdt.core.compiler.problem.typeParameterHiding=warning
+#
+#Sun Dec 21 21:43:45 CET 2014
@@ -77,226 +4 @@
-org.eclipse.jdt.core.compiler.problem.uncheckedTypeOperation=warning
-org.eclipse.jdt.core.compiler.problem.unclosedCloseable=warning
-org.eclipse.jdt.core.compiler.problem.undocumentedEmptyBlock=ignore
-org.eclipse.jdt.core.compiler.problem.unhandledWarningToken=warning
-org.eclipse.jdt.core.compiler.problem.unnecessaryElse=warning
-org.eclipse.jdt.core.compiler.problem.unnecessaryTypeCheck=warning
-org.eclipse.jdt.core.compiler.problem.unqualifiedFieldAccess=ignore
-org.eclipse.jdt.core.compiler.problem.unusedDeclaredThrownException=warning
-org.eclipse.jdt.core.compiler.problem.unusedDeclaredThrownExceptionExemptExceptionAndThrowable=enabled
-org.eclipse.jdt.core.compiler.problem.unusedDeclaredThrownExceptionIncludeDocCommentReference=enabled
-org.eclipse.jdt.core.compiler.problem.unusedDeclaredThrownExceptionWhenOverriding=disabled
-org.eclipse.jdt.core.compiler.problem.unusedImport=warning
-org.eclipse.jdt.core.compiler.problem.unusedLabel=warning
-org.eclipse.jdt.core.compiler.problem.unusedLocal=warning
-org.eclipse.jdt.core.compiler.problem.unusedObjectAllocation=warning
-org.eclipse.jdt.core.compiler.problem.unusedParameter=ignore
-org.eclipse.jdt.core.compiler.problem.unusedParameterIncludeDocCommentReference=enabled
-org.eclipse.jdt.core.compiler.problem.unusedParameterWhenImplementingAbstract=disabled
-org.eclipse.jdt.core.compiler.problem.unusedParameterWhenOverridingConcrete=disabled
-org.eclipse.jdt.core.compiler.problem.unusedPrivateMember=warning
-org.eclipse.jdt.core.compiler.problem.unusedTypeParameter=warning
-org.eclipse.jdt.core.compiler.problem.unusedWarningToken=warning
-org.eclipse.jdt.core.compiler.problem.varargsArgumentNeedCast=warning
-org.eclipse.jdt.core.compiler.source=1.7
-org.eclipse.jdt.core.formatter.align_type_members_on_columns=false
-org.eclipse.jdt.core.formatter.alignment_for_arguments_in_allocation_expression=16
-org.eclipse.jdt.core.formatter.alignment_for_arguments_in_annotation=48
-org.eclipse.jdt.core.formatter.alignment_for_arguments_in_enum_constant=16
-org.eclipse.jdt.core.formatter.alignment_for_arguments_in_explicit_constructor_call=16
-org.eclipse.jdt.core.formatter.alignment_for_arguments_in_method_invocation=16
-org.eclipse.jdt.core.formatter.alignment_for_arguments_in_qualified_allocation_expression=16
-org.eclipse.jdt.core.formatter.alignment_for_assignment=0
-org.eclipse.jdt.core.formatter.alignment_for_binary_expression=16
-org.eclipse.jdt.core.formatter.alignment_for_compact_if=16
-org.eclipse.jdt.core.formatter.alignment_for_conditional_expression=16
-org.eclipse.jdt.core.formatter.alignment_for_enum_constants=16
-org.eclipse.jdt.core.formatter.alignment_for_expressions_in_array_initializer=16
-org.eclipse.jdt.core.formatter.alignment_for_method_declaration=0
-org.eclipse.jdt.core.formatter.alignment_for_multiple_fields=16
-org.eclipse.jdt.core.formatter.alignment_for_parameters_in_constructor_declaration=16
-org.eclipse.jdt.core.formatter.alignment_for_parameters_in_method_declaration=16
-org.eclipse.jdt.core.formatter.alignment_for_resources_in_try=80
-org.eclipse.jdt.core.formatter.alignment_for_selector_in_method_invocation=0
-org.eclipse.jdt.core.formatter.alignment_for_superclass_in_type_declaration=16
-org.eclipse.jdt.core.formatter.alignment_for_superinterfaces_in_enum_declaration=16
-org.eclipse.jdt.core.formatter.alignment_for_superinterfaces_in_type_declaration=16
-org.eclipse.jdt.core.formatter.alignment_for_throws_clause_in_constructor_declaration=16
-org.eclipse.jdt.core.formatter.alignment_for_throws_clause_in_method_declaration=16
-org.eclipse.jdt.core.formatter.alignment_for_union_type_in_multicatch=16
-org.eclipse.jdt.core.formatter.blank_lines_after_imports=1
-org.eclipse.jdt.core.formatter.blank_lines_after_package=1
-org.eclipse.jdt.core.formatter.blank_lines_before_field=0
-org.eclipse.jdt.core.formatter.blank_lines_before_first_class_body_declaration=1
-org.eclipse.jdt.core.formatter.blank_lines_before_imports=1
-org.eclipse.jdt.core.formatter.blank_lines_before_member_type=1
-org.eclipse.jdt.core.formatter.blank_lines_before_method=1
-org.eclipse.jdt.core.formatter.blank_lines_before_new_chunk=0
-org.eclipse.jdt.core.formatter.blank_lines_before_package=0
-org.eclipse.jdt.core.formatter.blank_lines_between_import_groups=1
-org.eclipse.jdt.core.formatter.blank_lines_between_type_declarations=1
-org.eclipse.jdt.core.formatter.brace_position_for_annotation_type_declaration=end_of_line
-org.eclipse.jdt.core.formatter.brace_position_for_anonymous_type_declaration=end_of_line
-org.eclipse.jdt.core.formatter.brace_position_for_array_initializer=end_of_line
-org.eclipse.jdt.core.formatter.brace_position_for_block=end_of_line
-org.eclipse.jdt.core.formatter.brace_position_for_block_in_case=end_of_line
-org.eclipse.jdt.core.formatter.brace_position_for_constructor_declaration=end_of_line
-org.eclipse.jdt.core.formatter.brace_position_for_enum_constant=end_of_line
-org.eclipse.jdt.core.formatter.brace_position_for_enum_declaration=end_of_line
-org.eclipse.jdt.core.formatter.brace_position_for_method_declaration=end_of_line
-org.eclipse.jdt.core.formatter.brace_position_for_switch=end_of_line
-org.eclipse.jdt.core.formatter.brace_position_for_type_declaration=end_of_line
-org.eclipse.jdt.core.formatter.comment.clear_blank_lines_in_block_comment=false
-org.eclipse.jdt.core.formatter.comment.clear_blank_lines_in_javadoc_comment=false
-org.eclipse.jdt.core.formatter.comment.format_block_comments=true
-org.eclipse.jdt.core.formatter.comment.format_header=true
-org.eclipse.jdt.core.formatter.comment.format_html=true
-org.eclipse.jdt.core.formatter.comment.format_javadoc_comments=true
-org.eclipse.jdt.core.formatter.comment.format_line_comments=true
-org.eclipse.jdt.core.formatter.comment.format_source_code=true
-org.eclipse.jdt.core.formatter.comment.indent_parameter_description=false
-org.eclipse.jdt.core.formatter.comment.indent_root_tags=true
-org.eclipse.jdt.core.formatter.comment.insert_new_line_before_root_tags=insert
-org.eclipse.jdt.core.formatter.comment.insert_new_line_for_parameter=do not insert
-org.eclipse.jdt.core.formatter.comment.line_length=130
-org.eclipse.jdt.core.formatter.comment.new_lines_at_block_boundaries=true
-org.eclipse.jdt.core.formatter.comment.new_lines_at_javadoc_boundaries=true
-org.eclipse.jdt.core.formatter.comment.preserve_white_space_between_code_and_line_comments=false
-org.eclipse.jdt.core.formatter.compact_else_if=true
-org.eclipse.jdt.core.formatter.continuation_indentation=2
-org.eclipse.jdt.core.formatter.continuation_indentation_for_array_initializer=2
-org.eclipse.jdt.core.formatter.disabling_tag=@formatter\:off
-org.eclipse.jdt.core.formatter.enabling_tag=@formatter\:on
-org.eclipse.jdt.core.formatter.format_guardian_clause_on_one_line=false
-org.eclipse.jdt.core.formatter.format_line_comment_starting_on_first_column=false
-org.eclipse.jdt.core.formatter.indent_body_declarations_compare_to_annotation_declaration_header=true
-org.eclipse.jdt.core.formatter.indent_body_declarations_compare_to_enum_constant_header=true
-org.eclipse.jdt.core.formatter.indent_body_declarations_compare_to_enum_declaration_header=true
-org.eclipse.jdt.core.formatter.indent_body_declarations_compare_to_type_header=true
-org.eclipse.jdt.core.formatter.indent_breaks_compare_to_cases=true
-org.eclipse.jdt.core.formatter.indent_empty_lines=false
-org.eclipse.jdt.core.formatter.indent_statements_compare_to_block=true
-org.eclipse.jdt.core.formatter.indent_statements_compare_to_body=true
-org.eclipse.jdt.core.formatter.indent_switchstatements_compare_to_cases=true
-org.eclipse.jdt.core.formatter.indent_switchstatements_compare_to_switch=true
-org.eclipse.jdt.core.formatter.indentation.size=4
-org.eclipse.jdt.core.formatter.insert_new_line_after_annotation_on_field=insert
-org.eclipse.jdt.core.formatter.insert_new_line_after_annotation_on_local_variable=insert
-org.eclipse.jdt.core.formatter.insert_new_line_after_annotation_on_method=insert
-org.eclipse.jdt.core.formatter.insert_new_line_after_annotation_on_package=insert
-org.eclipse.jdt.core.formatter.insert_new_line_after_annotation_on_parameter=do not insert
-org.eclipse.jdt.core.formatter.insert_new_line_after_annotation_on_type=insert
-org.eclipse.jdt.core.formatter.insert_new_line_after_label=do not insert
-org.eclipse.jdt.core.formatter.insert_new_line_after_opening_brace_in_array_initializer=do not insert
-org.eclipse.jdt.core.formatter.insert_new_line_at_end_of_file_if_missing=do not insert
-org.eclipse.jdt.core.formatter.insert_new_line_before_catch_in_try_statement=do not insert
-org.eclipse.jdt.core.formatter.insert_new_line_before_closing_brace_in_array_initializer=do not insert
-org.eclipse.jdt.core.formatter.insert_new_line_before_else_in_if_statement=do not insert
-org.eclipse.jdt.core.formatter.insert_new_line_before_finally_in_try_statement=do not insert
-org.eclipse.jdt.core.formatter.insert_new_line_before_while_in_do_statement=do not insert
-org.eclipse.jdt.core.formatter.insert_new_line_in_empty_annotation_declaration=insert
-org.eclipse.jdt.core.formatter.insert_new_line_in_empty_anonymous_type_declaration=insert
-org.eclipse.jdt.core.formatter.insert_new_line_in_empty_block=insert
-org.eclipse.jdt.core.formatter.insert_new_line_in_empty_enum_constant=insert
-org.eclipse.jdt.core.formatter.insert_new_line_in_empty_enum_declaration=insert
-org.eclipse.jdt.core.formatter.insert_new_line_in_empty_method_body=insert
-org.eclipse.jdt.core.formatter.insert_new_line_in_empty_type_declaration=insert
-org.eclipse.jdt.core.formatter.insert_space_after_and_in_type_parameter=insert
-org.eclipse.jdt.core.formatter.insert_space_after_assignment_operator=insert
-org.eclipse.jdt.core.formatter.insert_space_after_at_in_annotation=do not insert
-org.eclipse.jdt.core.formatter.insert_space_after_at_in_annotation_type_declaration=do not insert
-org.eclipse.jdt.core.formatter.insert_space_after_binary_operator=insert
-org.eclipse.jdt.core.formatter.insert_space_after_closing_angle_bracket_in_type_arguments=insert
-org.eclipse.jdt.core.formatter.insert_space_after_closing_angle_bracket_in_type_parameters=insert
-org.eclipse.jdt.core.formatter.insert_space_after_closing_brace_in_block=insert
-org.eclipse.jdt.core.formatter.insert_space_after_closing_paren_in_cast=insert
-org.eclipse.jdt.core.formatter.insert_space_after_colon_in_assert=insert
-org.eclipse.jdt.core.formatter.insert_space_after_colon_in_case=insert
-org.eclipse.jdt.core.formatter.insert_space_after_colon_in_conditional=insert
-org.eclipse.jdt.core.formatter.insert_space_after_colon_in_for=insert
-org.eclipse.jdt.core.formatter.insert_space_after_colon_in_labeled_statement=insert
-org.eclipse.jdt.core.formatter.insert_space_after_comma_in_allocation_expression=insert
-org.eclipse.jdt.core.formatter.insert_space_after_comma_in_annotation=insert
-org.eclipse.jdt.core.formatter.insert_space_after_comma_in_array_initializer=insert
-org.eclipse.jdt.core.formatter.insert_space_after_comma_in_constructor_declaration_parameters=insert
-org.eclipse.jdt.core.formatter.insert_space_after_comma_in_constructor_declaration_throws=insert
-org.eclipse.jdt.core.formatter.insert_space_after_comma_in_enum_constant_arguments=insert
-org.eclipse.jdt.core.formatter.insert_space_after_comma_in_enum_declarations=insert
-org.eclipse.jdt.core.formatter.insert_space_after_comma_in_explicitconstructorcall_arguments=insert
-org.eclipse.jdt.core.formatter.insert_space_after_comma_in_for_increments=insert
-org.eclipse.jdt.core.formatter.insert_space_after_comma_in_for_inits=insert
-org.eclipse.jdt.core.formatter.insert_space_after_comma_in_method_declaration_parameters=insert
-org.eclipse.jdt.core.formatter.insert_space_after_comma_in_method_declaration_throws=insert
-org.eclipse.jdt.core.formatter.insert_space_after_comma_in_method_invocation_arguments=insert
-org.eclipse.jdt.core.formatter.insert_space_after_comma_in_multiple_field_declarations=insert
-org.eclipse.jdt.core.formatter.insert_space_after_comma_in_multiple_local_declarations=insert
-org.eclipse.jdt.core.formatter.insert_space_after_comma_in_parameterized_type_reference=insert
-org.eclipse.jdt.core.formatter.insert_space_after_comma_in_superinterfaces=insert
-org.eclipse.jdt.core.formatter.insert_space_after_comma_in_type_arguments=insert
-org.eclipse.jdt.core.formatter.insert_space_after_comma_in_type_parameters=insert
-org.eclipse.jdt.core.formatter.insert_space_after_ellipsis=insert
-org.eclipse.jdt.core.formatter.insert_space_after_opening_angle_bracket_in_parameterized_type_reference=do not insert
-org.eclipse.jdt.core.formatter.insert_space_after_opening_angle_bracket_in_type_arguments=do not insert
-org.eclipse.jdt.core.formatter.insert_space_after_opening_angle_bracket_in_type_parameters=do not insert
-org.eclipse.jdt.core.formatter.insert_space_after_opening_brace_in_array_initializer=insert
-org.eclipse.jdt.core.formatter.insert_space_after_opening_bracket_in_array_allocation_expression=do not insert
-org.eclipse.jdt.core.formatter.insert_space_after_opening_bracket_in_array_reference=do not insert
-org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_annotation=do not insert
-org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_cast=do not insert
-org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_catch=do not insert
-org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_constructor_declaration=do not insert
-org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_enum_constant=do not insert
-org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_for=do not insert
-org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_if=do not insert
-org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_method_declaration=do not insert
-org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_method_invocation=do not insert
-org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_parenthesized_expression=do not insert
-org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_switch=do not insert
-org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_synchronized=do not insert
-org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_try=do not insert
-org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_while=do not insert
-org.eclipse.jdt.core.formatter.insert_space_after_postfix_operator=do not insert
-org.eclipse.jdt.core.formatter.insert_space_after_prefix_operator=do not insert
-org.eclipse.jdt.core.formatter.insert_space_after_question_in_conditional=insert
-org.eclipse.jdt.core.formatter.insert_space_after_question_in_wildcard=do not insert
-org.eclipse.jdt.core.formatter.insert_space_after_semicolon_in_for=insert
-org.eclipse.jdt.core.formatter.insert_space_after_semicolon_in_try_resources=insert
-org.eclipse.jdt.core.formatter.insert_space_after_unary_operator=do not insert
-org.eclipse.jdt.core.formatter.insert_space_before_and_in_type_parameter=insert
-org.eclipse.jdt.core.formatter.insert_space_before_assignment_operator=insert
-org.eclipse.jdt.core.formatter.insert_space_before_at_in_annotation_type_declaration=do not insert
-org.eclipse.jdt.core.formatter.insert_space_before_binary_operator=insert
-org.eclipse.jdt.core.formatter.insert_space_before_closing_angle_bracket_in_parameterized_type_reference=do not insert
-org.eclipse.jdt.core.formatter.insert_space_before_closing_angle_bracket_in_type_arguments=do not insert
-org.eclipse.jdt.core.formatter.insert_space_before_closing_angle_bracket_in_type_parameters=do not insert
-org.eclipse.jdt.core.formatter.insert_space_before_closing_brace_in_array_initializer=insert
-org.eclipse.jdt.core.formatter.insert_space_before_closing_bracket_in_array_allocation_expression=do not insert
-org.eclipse.jdt.core.formatter.insert_space_before_closing_bracket_in_array_reference=do not insert
-org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_annotation=do not insert
-org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_cast=do not insert
-org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_catch=do not insert
-org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_constructor_declaration=do not insert
-org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_enum_constant=do not insert
-org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_for=do not insert
-org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_if=do not insert
-org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_method_declaration=do not insert
-org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_method_invocation=do not insert
-org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_parenthesized_expression=do not insert
-org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_switch=do not insert
-org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_synchronized=do not insert
-org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_try=do not insert
-org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_while=do not insert
-org.eclipse.jdt.core.formatter.insert_space_before_colon_in_assert=insert
-org.eclipse.jdt.core.formatter.insert_space_before_colon_in_case=do not insert
-org.eclipse.jdt.core.formatter.insert_space_before_colon_in_conditional=insert
-org.eclipse.jdt.core.formatter.insert_space_before_colon_in_default=do not insert
-org.eclipse.jdt.core.formatter.insert_space_before_colon_in_for=insert
-org.eclipse.jdt.core.formatter.insert_space_before_colon_in_labeled_statement=do not insert
-org.eclipse.jdt.core.formatter.insert_space_before_comma_in_allocation_expression=do not insert
-org.eclipse.jdt.core.formatter.insert_space_before_comma_in_annotation=do not insert
-org.eclipse.jdt.core.formatter.insert_space_before_comma_in_array_initializer=do not insert
-org.eclipse.jdt.core.formatter.insert_space_before_comma_in_constructor_declaration_parameters=do not insert
-org.eclipse.jdt.core.formatter.insert_space_before_comma_in_constructor_declaration_throws=do not insert
-org.eclipse.jdt.core.formatter.insert_space_before_comma_in_enum_constant_arguments=do not insert
-org.eclipse.jdt.core.formatter.insert_space_before_comma_in_enum_declarations=do not insert
-org.eclipse.jdt.core.formatter.insert_space_before_comma_in_explicitconstructorcall_arguments=do not insert
-org.eclipse.jdt.core.formatter.insert_space_before_comma_in_for_increments=do not insert
+org.eclipse.jdt.core.compiler.annotation.missingNonNullByDefaultAnnotation=ignore
@@ -304,48 +6,2 @@
-org.eclipse.jdt.core.formatter.insert_space_before_comma_in_method_declaration_parameters=do not insert
-org.eclipse.jdt.core.formatter.insert_space_before_comma_in_method_declaration_throws=do not insert
-org.eclipse.jdt.core.formatter.insert_space_before_comma_in_method_invocation_arguments=do not insert
-org.eclipse.jdt.core.formatter.insert_space_before_comma_in_multiple_field_declarations=do not insert
-org.eclipse.jdt.core.formatter.insert_space_before_comma_in_multiple_local_declarations=do not insert
-org.eclipse.jdt.core.formatter.insert_space_before_comma_in_parameterized_type_reference=do not insert
-org.eclipse.jdt.core.formatter.insert_space_before_comma_in_superinterfaces=do not insert
-org.eclipse.jdt.core.formatter.insert_space_before_comma_in_type_arguments=do not insert
-org.eclipse.jdt.core.formatter.insert_space_before_comma_in_type_parameters=do not insert
-org.eclipse.jdt.core.formatter.insert_space_before_ellipsis=do not insert
-org.eclipse.jdt.core.formatter.insert_space_before_opening_angle_bracket_in_parameterized_type_reference=do not insert
-org.eclipse.jdt.core.formatter.insert_space_before_opening_angle_bracket_in_type_arguments=do not insert
-org.eclipse.jdt.core.formatter.insert_space_before_opening_angle_bracket_in_type_parameters=do not insert
-org.eclipse.jdt.core.formatter.insert_space_before_opening_brace_in_annotation_type_declaration=insert
-org.eclipse.jdt.core.formatter.insert_space_before_opening_brace_in_anonymous_type_declaration=insert
-org.eclipse.jdt.core.formatter.insert_space_before_opening_brace_in_array_initializer=insert
-org.eclipse.jdt.core.formatter.insert_space_before_opening_brace_in_block=insert
-org.eclipse.jdt.core.formatter.insert_space_before_opening_brace_in_constructor_declaration=insert
-org.eclipse.jdt.core.formatter.insert_space_before_opening_brace_in_enum_constant=insert
-org.eclipse.jdt.core.formatter.insert_space_before_opening_brace_in_enum_declaration=insert
-org.eclipse.jdt.core.formatter.insert_space_before_opening_brace_in_method_declaration=insert
-org.eclipse.jdt.core.formatter.insert_space_before_opening_brace_in_switch=insert
-org.eclipse.jdt.core.formatter.insert_space_before_opening_brace_in_type_declaration=insert
-org.eclipse.jdt.core.formatter.insert_space_before_opening_bracket_in_array_allocation_expression=do not insert
-org.eclipse.jdt.core.formatter.insert_space_before_opening_bracket_in_array_reference=do not insert
-org.eclipse.jdt.core.formatter.insert_space_before_opening_bracket_in_array_type_reference=do not insert
-org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_annotation=do not insert
-org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_annotation_type_member_declaration=do not insert
-org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_catch=insert
-org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_constructor_declaration=do not insert
-org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_enum_constant=do not insert
-org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_for=insert
-org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_if=insert
-org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_method_declaration=do not insert
-org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_method_invocation=do not insert
-org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_parenthesized_expression=do not insert
-org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_switch=insert
-org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_synchronized=insert
-org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_try=insert
-org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_while=insert
-org.eclipse.jdt.core.formatter.insert_space_before_parenthesized_expression_in_return=insert
-org.eclipse.jdt.core.formatter.insert_space_before_parenthesized_expression_in_throw=insert
-org.eclipse.jdt.core.formatter.insert_space_before_postfix_operator=do not insert
-org.eclipse.jdt.core.formatter.insert_space_before_prefix_operator=do not insert
-org.eclipse.jdt.core.formatter.insert_space_before_question_in_conditional=insert
-org.eclipse.jdt.core.formatter.insert_space_before_question_in_wildcard=do not insert
-org.eclipse.jdt.core.formatter.insert_space_before_semicolon=do not insert
-org.eclipse.jdt.core.formatter.insert_space_before_semicolon_in_for=do not insert
+org.eclipse.jdt.core.formatter.brace_position_for_block=end_of_line
+org.eclipse.jdt.core.formatter.insert_space_after_at_in_annotation_type_declaration=do not insert
@@ -353,17 +9,15 @@
-org.eclipse.jdt.core.formatter.insert_space_before_unary_operator=do not insert
-org.eclipse.jdt.core.formatter.insert_space_between_brackets_in_array_type_reference=do not insert
-org.eclipse.jdt.core.formatter.insert_space_between_empty_braces_in_array_initializer=do not insert
-org.eclipse.jdt.core.formatter.insert_space_between_empty_brackets_in_array_allocation_expression=do not insert
-org.eclipse.jdt.core.formatter.insert_space_between_empty_parens_in_annotation_type_member_declaration=do not insert
-org.eclipse.jdt.core.formatter.insert_space_between_empty_parens_in_constructor_declaration=do not insert
-org.eclipse.jdt.core.formatter.insert_space_between_empty_parens_in_enum_constant=do not insert
-org.eclipse.jdt.core.formatter.insert_space_between_empty_parens_in_method_declaration=do not insert
-org.eclipse.jdt.core.formatter.insert_space_between_empty_parens_in_method_invocation=do not insert
-org.eclipse.jdt.core.formatter.join_lines_in_comments=false
-org.eclipse.jdt.core.formatter.join_wrapped_lines=false
-org.eclipse.jdt.core.formatter.keep_else_statement_on_same_line=false
-org.eclipse.jdt.core.formatter.keep_empty_array_initializer_on_one_line=false
-org.eclipse.jdt.core.formatter.keep_imple_if_on_one_line=false
-org.eclipse.jdt.core.formatter.keep_then_statement_on_same_line=false
-org.eclipse.jdt.core.formatter.lineSplit=130
-org.eclipse.jdt.core.formatter.never_indent_block_comments_on_first_column=false
+org.eclipse.jdt.core.formatter.insert_space_before_comma_in_method_declaration_throws=do not insert
+org.eclipse.jdt.core.compiler.annotation.nullanalysis=disabled
+org.eclipse.jdt.core.formatter.brace_position_for_annotation_type_declaration=end_of_line
+org.eclipse.jdt.core.formatter.insert_space_after_colon_in_conditional=insert
+org.eclipse.jdt.core.compiler.problem.localVariableHiding=ignore
+org.eclipse.jdt.core.formatter.alignment_for_assignment=0
+org.eclipse.jdt.core.formatter.insert_space_before_comma_in_allocation_expression=do not insert
+org.eclipse.jdt.core.compiler.problem.staticAccessReceiver=warning
+org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_if=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_opening_brace_in_block=insert
+org.eclipse.jdt.core.formatter.insert_space_after_semicolon_in_try_resources=insert
+org.eclipse.jdt.core.compiler.codegen.targetPlatform=1.7
+org.eclipse.jdt.core.formatter.insert_space_before_closing_angle_bracket_in_type_parameters=do not insert
+org.eclipse.jdt.core.compiler.problem.unusedPrivateMember=warning
+org.eclipse.jdt.core.formatter.comment.clear_blank_lines_in_javadoc_comment=false
@@ -371 +25,42 @@
-org.eclipse.jdt.core.formatter.number_of_blank_lines_at_beginning_of_method_body=0
+org.eclipse.jdt.core.formatter.insert_new_line_before_closing_brace_in_array_initializer=do not insert
+org.eclipse.jdt.core.formatter.indent_statements_compare_to_body=true
+org.eclipse.jdt.core.formatter.insert_space_after_comma_in_superinterfaces=insert
+org.eclipse.jdt.core.compiler.problem.emptyStatement=warning
+org.eclipse.jdt.core.compiler.problem.reportMethodCanBePotentiallyStatic=ignore
+org.eclipse.jdt.core.formatter.insert_new_line_before_catch_in_try_statement=do not insert
+org.eclipse.jdt.core.compiler.problem.indirectStaticAccess=ignore
+org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_method_invocation=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_parenthesized_expression_in_throw=insert
+org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_method_declaration=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_opening_angle_bracket_in_type_parameters=do not insert
+org.eclipse.jdt.core.formatter.insert_space_between_empty_parens_in_enum_constant=do not insert
+org.eclipse.jdt.core.compiler.problem.fieldHiding=ignore
+org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_while=do not insert
+org.eclipse.jdt.core.compiler.problem.annotationSuperInterface=warning
+org.eclipse.jdt.core.compiler.problem.nonExternalizedStringLiteral=ignore
+org.eclipse.jdt.core.formatter.insert_space_after_unary_operator=do not insert
+org.eclipse.jdt.core.formatter.blank_lines_after_imports=1
+org.eclipse.jdt.core.formatter.alignment_for_arguments_in_annotation=48
+org.eclipse.jdt.core.formatter.insert_space_after_opening_bracket_in_array_reference=do not insert
+org.eclipse.jdt.core.compiler.problem.finallyBlockNotCompletingNormally=warning
+org.eclipse.jdt.core.compiler.problem.noImplicitStringConversion=warning
+org.eclipse.jdt.core.compiler.problem.parameterAssignment=ignore
+org.eclipse.jdt.core.formatter.comment.format_source_code=true
+org.eclipse.jdt.core.formatter.insert_space_after_comma_in_method_declaration_parameters=insert
+org.eclipse.jdt.core.compiler.debug.localVariable=generate
+org.eclipse.jdt.core.formatter.indent_body_declarations_compare_to_annotation_declaration_header=true
+org.eclipse.jdt.core.formatter.insert_space_before_closing_bracket_in_array_allocation_expression=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_constructor_declaration=do not insert
+org.eclipse.jdt.core.formatter.insert_new_line_after_annotation_on_package=insert
+org.eclipse.jdt.core.formatter.blank_lines_before_member_type=1
+org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_enum_constant=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_try=insert
+org.eclipse.jdt.core.compiler.problem.undocumentedEmptyBlock=ignore
+org.eclipse.jdt.core.formatter.insert_new_line_after_annotation_on_local_variable=insert
+org.eclipse.jdt.core.formatter.keep_then_statement_on_same_line=false
+org.eclipse.jdt.core.compiler.problem.syntheticAccessEmulation=ignore
+org.eclipse.jdt.core.formatter.insert_space_after_comma_in_method_invocation_arguments=insert
+org.eclipse.jdt.core.formatter.format_line_comment_starting_on_first_column=false
+org.eclipse.jdt.core.formatter.insert_space_after_comma_in_multiple_local_declarations=insert
+org.eclipse.jdt.core.formatter.blank_lines_before_new_chunk=0
+org.eclipse.jdt.core.formatter.alignment_for_arguments_in_explicit_constructor_call=16
@@ -372,0 +68,47 @@
+org.eclipse.jdt.core.compiler.problem.nullUncheckedConversion=warning
+org.eclipse.jdt.core.formatter.insert_space_before_opening_brace_in_type_declaration=insert
+org.eclipse.jdt.core.compiler.codegen.unusedLocal=preserve
+org.eclipse.jdt.core.formatter.brace_position_for_switch=end_of_line
+org.eclipse.jdt.core.formatter.comment.format_header=true
+org.eclipse.jdt.core.formatter.insert_space_before_and_in_type_parameter=insert
+org.eclipse.jdt.core.formatter.insert_space_after_comma_in_constructor_declaration_throws=insert
+org.eclipse.jdt.core.formatter.insert_space_before_question_in_wildcard=do not insert
+org.eclipse.jdt.core.formatter.alignment_for_superclass_in_type_declaration=16
+org.eclipse.jdt.core.formatter.insert_space_after_colon_in_case=insert
+org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_for=do not insert
+org.eclipse.jdt.core.compiler.problem.unusedTypeParameter=warning
+org.eclipse.jdt.core.formatter.insert_space_before_semicolon=do not insert
+org.eclipse.jdt.core.compiler.problem.nonnullParameterAnnotationDropped=warning
+org.eclipse.jdt.core.compiler.problem.comparingIdentical=warning
+org.eclipse.jdt.core.formatter.alignment_for_superinterfaces_in_enum_declaration=16
+org.eclipse.jdt.core.formatter.comment.line_length=130
+org.eclipse.jdt.core.formatter.insert_space_before_comma_in_array_initializer=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_catch=do not insert
+org.eclipse.jdt.core.formatter.indent_switchstatements_compare_to_cases=true
+org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_method_invocation=do not insert
+org.eclipse.jdt.core.formatter.insert_space_after_comma_in_for_increments=insert
+org.eclipse.jdt.core.compiler.problem.unusedParameterIncludeDocCommentReference=enabled
+org.eclipse.jdt.core.formatter.insert_space_after_binary_operator=insert
+org.eclipse.jdt.core.formatter.insert_new_line_in_empty_block=insert
+org.eclipse.jdt.core.formatter.insert_space_after_prefix_operator=do not insert
+org.eclipse.jdt.core.formatter.brace_position_for_enum_declaration=end_of_line
+org.eclipse.jdt.core.formatter.insert_space_after_comma_in_explicitconstructorcall_arguments=insert
+org.eclipse.jdt.core.compiler.problem.hiddenCatchBlock=warning
+org.eclipse.jdt.core.formatter.insert_space_before_at_in_annotation_type_declaration=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_parenthesized_expression=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_closing_brace_in_array_initializer=insert
+org.eclipse.jdt.core.compiler.problem.unusedParameterWhenImplementingAbstract=disabled
+org.eclipse.jdt.core.formatter.insert_new_line_in_empty_type_declaration=insert
+org.eclipse.jdt.core.compiler.problem.uncheckedTypeOperation=warning
+org.eclipse.jdt.core.compiler.codegen.methodParameters=do not generate
+org.eclipse.jdt.core.formatter.insert_space_before_colon_in_assert=insert
+org.eclipse.jdt.core.formatter.insert_space_after_comma_in_constructor_declaration_parameters=insert
+org.eclipse.jdt.core.formatter.comment.format_javadoc_comments=true
+org.eclipse.jdt.core.formatter.continuation_indentation=2
+org.eclipse.jdt.core.formatter.insert_new_line_after_annotation_on_field=insert
+org.eclipse.jdt.core.formatter.comment.insert_new_line_before_root_tags=insert
+org.eclipse.jdt.core.formatter.alignment_for_selector_in_method_invocation=0
+org.eclipse.jdt.core.formatter.insert_space_after_comma_in_parameterized_type_reference=insert
+org.eclipse.jdt.core.compiler.problem.specialParameterHidingField=disabled
+org.eclipse.jdt.core.formatter.insert_space_after_assignment_operator=insert
+org.eclipse.jdt.core.formatter.blank_lines_before_method=1
@@ -374,5 +116,83 @@
-org.eclipse.jdt.core.formatter.tabulation.char=space
-org.eclipse.jdt.core.formatter.tabulation.size=4
-org.eclipse.jdt.core.formatter.use_on_off_tags=true
-org.eclipse.jdt.core.formatter.use_tabs_only_for_leading_indentations=false
-org.eclipse.jdt.core.formatter.wrap_before_binary_operator=false
+org.eclipse.jdt.core.formatter.alignment_for_parameters_in_constructor_declaration=16
+org.eclipse.jdt.core.formatter.blank_lines_between_type_declarations=1
+org.eclipse.jdt.core.formatter.insert_space_after_comma_in_multiple_field_declarations=insert
+org.eclipse.jdt.core.formatter.insert_space_after_closing_paren_in_cast=insert
+org.eclipse.jdt.core.formatter.brace_position_for_constructor_declaration=end_of_line
+org.eclipse.jdt.core.formatter.insert_new_line_after_opening_brace_in_array_initializer=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_opening_brace_in_annotation_type_declaration=insert
+org.eclipse.jdt.core.compiler.problem.reportMethodCanBeStatic=ignore
+org.eclipse.jdt.core.formatter.alignment_for_arguments_in_qualified_allocation_expression=16
+org.eclipse.jdt.core.formatter.join_lines_in_comments=false
+org.eclipse.jdt.core.formatter.indent_body_declarations_compare_to_type_header=true
+org.eclipse.jdt.core.formatter.insert_space_before_closing_angle_bracket_in_parameterized_type_reference=do not insert
+org.eclipse.jdt.core.compiler.problem.missingHashCodeMethod=warning
+org.eclipse.jdt.core.formatter.blank_lines_before_first_class_body_declaration=1
+org.eclipse.jdt.core.formatter.comment.format_block_comments=true
+org.eclipse.jdt.core.formatter.insert_space_before_question_in_conditional=insert
+org.eclipse.jdt.core.formatter.alignment_for_multiple_fields=16
+org.eclipse.jdt.core.compiler.annotation.nonnullbydefault=org.eclipse.jdt.annotation.NonNullByDefault
+org.eclipse.jdt.core.formatter.insert_space_before_comma_in_for_increments=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_colon_in_case=do not insert
+org.eclipse.jdt.core.formatter.alignment_for_union_type_in_multicatch=16
+org.eclipse.jdt.core.formatter.comment.format_html=true
+org.eclipse.jdt.core.formatter.insert_space_before_opening_bracket_in_array_allocation_expression=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_enum_constant=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_semicolon_in_for=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_while=do not insert
+org.eclipse.jdt.core.formatter.insert_space_between_empty_parens_in_method_declaration=do not insert
+org.eclipse.jdt.core.compiler.problem.syntacticNullAnalysisForFields=disabled
+org.eclipse.jdt.core.formatter.alignment_for_parameters_in_method_declaration=16
+org.eclipse.jdt.core.formatter.insert_space_before_opening_angle_bracket_in_parameterized_type_reference=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_synchronized=do not insert
+org.eclipse.jdt.core.compiler.problem.redundantSuperinterface=ignore
+org.eclipse.jdt.core.compiler.problem.autoboxing=ignore
+org.eclipse.jdt.core.compiler.problem.enumIdentifier=error
+org.eclipse.jdt.core.compiler.problem.fallthroughCase=ignore
+org.eclipse.jdt.core.formatter.insert_space_after_opening_brace_in_array_initializer=insert
+org.eclipse.jdt.core.compiler.problem.deprecationInDeprecatedCode=disabled
+org.eclipse.jdt.core.compiler.problem.fatalOptionalError=disabled
+org.eclipse.jdt.core.formatter.insert_space_after_semicolon_in_for=insert
+org.eclipse.jdt.core.formatter.insert_space_before_assignment_operator=insert
+org.eclipse.jdt.core.compiler.problem.possibleAccidentalBooleanAssignment=warning
+org.eclipse.jdt.core.formatter.insert_space_after_opening_angle_bracket_in_type_parameters=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_comma_in_superinterfaces=do not insert
+org.eclipse.jdt.core.formatter.brace_position_for_method_declaration=end_of_line
+org.eclipse.jdt.core.compiler.problem.unusedDeclaredThrownException=warning
+org.eclipse.jdt.core.compiler.annotation.nonnull=org.eclipse.jdt.annotation.NonNull
+org.eclipse.jdt.core.formatter.insert_new_line_before_else_in_if_statement=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_opening_bracket_in_array_reference=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_comma_in_enum_constant_arguments=do not insert
+org.eclipse.jdt.core.formatter.alignment_for_arguments_in_allocation_expression=16
+org.eclipse.jdt.core.compiler.problem.unnecessaryElse=warning
+org.eclipse.jdt.core.formatter.insert_new_line_in_empty_annotation_declaration=insert
+org.eclipse.jdt.core.compiler.problem.potentiallyUnclosedCloseable=warning
+org.eclipse.jdt.core.compiler.problem.redundantNullCheck=warning
+org.eclipse.jdt.core.compiler.problem.methodWithConstructorName=warning
+org.eclipse.jdt.core.compiler.problem.forbiddenReference=error
+org.eclipse.jdt.core.formatter.insert_space_before_opening_brace_in_method_declaration=insert
+org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_if=insert
+org.eclipse.jdt.core.formatter.comment.new_lines_at_javadoc_boundaries=true
+org.eclipse.jdt.core.formatter.insert_space_before_opening_bracket_in_array_type_reference=do not insert
+org.eclipse.jdt.core.formatter.insert_space_between_empty_braces_in_array_initializer=do not insert
+org.eclipse.jdt.core.compiler.problem.unclosedCloseable=warning
+org.eclipse.jdt.core.formatter.insert_space_before_comma_in_multiple_local_declarations=do not insert
+org.eclipse.jdt.core.compiler.problem.suppressWarnings=enabled
+org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_constructor_declaration=do not insert
+org.eclipse.jdt.core.formatter.indent_body_declarations_compare_to_enum_constant_header=true
+org.eclipse.jdt.core.formatter.comment.insert_new_line_for_parameter=do not insert
+org.eclipse.jdt.core.formatter.alignment_for_throws_clause_in_method_declaration=16
+org.eclipse.jdt.core.formatter.insert_space_after_comma_in_annotation=insert
+org.eclipse.jdt.core.formatter.insert_space_after_ellipsis=insert
+org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_annotation_type_member_declaration=do not insert
+org.eclipse.jdt.core.formatter.insert_new_line_before_finally_in_try_statement=do not insert
+org.eclipse.jdt.core.compiler.problem.redundantNullAnnotation=warning
+org.eclipse.jdt.core.formatter.insert_space_before_colon_in_labeled_statement=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_if=do not insert
+org.eclipse.jdt.core.formatter.insert_space_after_at_in_annotation=do not insert
+org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_try=do not insert
+org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_switch=do not insert
+org.eclipse.jdt.core.formatter.alignment_for_arguments_in_enum_constant=16
+org.eclipse.jdt.core.formatter.insert_space_before_opening_brace_in_switch=insert
+org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_for=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_opening_brace_in_anonymous_type_declaration=insert
+org.eclipse.jdt.core.formatter.brace_position_for_enum_constant=end_of_line
@@ -379,0 +200,88 @@
+org.eclipse.jdt.core.formatter.insert_space_after_colon_in_labeled_statement=insert
+org.eclipse.jdt.core.compiler.problem.incompleteEnumSwitch=warning
+org.eclipse.jdt.core.compiler.problem.missingDefaultCase=ignore
+org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_cast=do not insert
+org.eclipse.jdt.core.formatter.insert_space_after_and_in_type_parameter=insert
+org.eclipse.jdt.core.formatter.insert_space_after_comma_in_array_initializer=insert
+org.eclipse.jdt.core.formatter.insert_space_before_comma_in_method_declaration_parameters=do not insert
+org.eclipse.jdt.core.formatter.insert_space_between_empty_parens_in_annotation_type_member_declaration=do not insert
+org.eclipse.jdt.core.formatter.alignment_for_enum_constants=16
+org.eclipse.jdt.core.formatter.alignment_for_method_declaration=0
+org.eclipse.jdt.core.compiler.problem.unnecessaryTypeCheck=warning
+org.eclipse.jdt.core.formatter.tabulation.char=space
+org.eclipse.jdt.core.formatter.insert_space_after_comma_in_allocation_expression=insert
+org.eclipse.jdt.core.compiler.problem.includeNullInfoFromAsserts=disabled
+org.eclipse.jdt.core.formatter.wrap_before_binary_operator=false
+org.eclipse.jdt.core.compiler.problem.suppressOptionalErrors=disabled
+org.eclipse.jdt.core.formatter.insert_space_after_question_in_wildcard=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_comma_in_annotation=do not insert
+org.eclipse.jdt.core.formatter.format_guardian_clause_on_one_line=false
+org.eclipse.jdt.core.formatter.keep_else_statement_on_same_line=false
+org.eclipse.jdt.core.formatter.compact_else_if=true
+org.eclipse.jdt.core.formatter.insert_space_before_parenthesized_expression_in_return=insert
+org.eclipse.jdt.core.formatter.insert_space_between_brackets_in_array_type_reference=do not insert
+org.eclipse.jdt.core.formatter.brace_position_for_anonymous_type_declaration=end_of_line
+org.eclipse.jdt.core.formatter.comment.clear_blank_lines_in_block_comment=false
+org.eclipse.jdt.core.compiler.problem.missingSerialVersion=warning
+org.eclipse.jdt.core.compiler.problem.unusedDeclaredThrownExceptionExemptExceptionAndThrowable=enabled
+org.eclipse.jdt.core.formatter.disabling_tag=@formatter\:off
+org.eclipse.jdt.core.compiler.problem.incompatibleNonInheritedInterfaceMethod=warning
+org.eclipse.jdt.core.formatter.align_type_members_on_columns=false
+org.eclipse.jdt.core.formatter.insert_space_before_comma_in_multiple_field_declarations=do not insert
+org.eclipse.jdt.core.formatter.insert_new_line_after_annotation_on_type=insert
+org.eclipse.jdt.core.formatter.insert_new_line_before_while_in_do_statement=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_annotation=do not insert
+org.eclipse.jdt.core.compiler.problem.finalParameterBound=warning
+org.eclipse.jdt.core.formatter.join_wrapped_lines=false
+org.eclipse.jdt.core.formatter.insert_space_after_postfix_operator=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_colon_in_conditional=insert
+org.eclipse.jdt.core.formatter.insert_space_before_comma_in_enum_declarations=do not insert
+org.eclipse.jdt.core.compiler.problem.nullAnnotationInferenceConflict=error
+org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_method_declaration=do not insert
+org.eclipse.jdt.core.formatter.insert_space_after_opening_bracket_in_array_allocation_expression=do not insert
+org.eclipse.jdt.core.formatter.indent_body_declarations_compare_to_enum_declaration_header=true
+org.eclipse.jdt.core.formatter.use_on_off_tags=true
+org.eclipse.jdt.core.compiler.problem.discouragedReference=warning
+org.eclipse.jdt.core.formatter.alignment_for_expressions_in_array_initializer=16
+org.eclipse.jdt.core.compiler.problem.missingEnumCaseDespiteDefault=disabled
+org.eclipse.jdt.core.formatter.never_indent_block_comments_on_first_column=false
+org.eclipse.jdt.core.formatter.insert_new_line_after_annotation_on_method=insert
+org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_switch=insert
+org.eclipse.jdt.core.formatter.comment.format_line_comments=true
+org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_catch=insert
+org.eclipse.jdt.core.formatter.keep_empty_array_initializer_on_one_line=false
+org.eclipse.jdt.core.formatter.insert_space_after_comma_in_enum_declarations=insert
+org.eclipse.jdt.core.formatter.insert_space_after_closing_angle_bracket_in_type_parameters=insert
+org.eclipse.jdt.core.formatter.insert_space_before_opening_angle_bracket_in_type_arguments=do not insert
+org.eclipse.jdt.core.formatter.comment.indent_parameter_description=false
+org.eclipse.jdt.core.formatter.indentation.size=4
+org.eclipse.jdt.core.compiler.problem.unusedDeclaredThrownExceptionWhenOverriding=disabled
+org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_enum_constant=do not insert
+org.eclipse.jdt.core.compiler.problem.unusedDeclaredThrownExceptionIncludeDocCommentReference=enabled
+org.eclipse.jdt.core.formatter.insert_space_before_colon_in_for=insert
+org.eclipse.jdt.core.compiler.debug.sourceFile=generate
+org.eclipse.jdt.core.formatter.insert_space_before_ellipsis=do not insert
+org.eclipse.jdt.core.formatter.insert_space_after_colon_in_for=insert
+org.eclipse.jdt.core.formatter.alignment_for_throws_clause_in_constructor_declaration=16
+org.eclipse.jdt.core.formatter.insert_space_between_empty_parens_in_constructor_declaration=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_opening_brace_in_array_initializer=insert
+org.eclipse.jdt.core.compiler.problem.deprecation=warning
+org.eclipse.jdt.core.compiler.problem.potentialNullReference=ignore
+org.eclipse.jdt.core.formatter.comment.indent_root_tags=true
+org.eclipse.jdt.core.compiler.problem.missingDeprecatedAnnotation=warning
+org.eclipse.jdt.core.formatter.insert_space_before_opening_brace_in_enum_constant=insert
+org.eclipse.jdt.core.formatter.alignment_for_binary_expression=16
+org.eclipse.jdt.core.formatter.brace_position_for_type_declaration=end_of_line
+org.eclipse.jdt.core.formatter.insert_space_after_comma_in_method_declaration_throws=insert
+org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_parenthesized_expression=do not insert
+org.eclipse.jdt.core.compiler.problem.unusedParameterWhenOverridingConcrete=disabled
+org.eclipse.jdt.core.formatter.insert_space_before_binary_operator=insert
+org.eclipse.jdt.core.formatter.use_tabs_only_for_leading_indentations=false
+org.eclipse.jdt.core.formatter.indent_breaks_compare_to_cases=true
+org.eclipse.jdt.core.formatter.insert_space_between_empty_brackets_in_array_allocation_expression=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_prefix_operator=do not insert
+org.eclipse.jdt.core.formatter.blank_lines_before_package=0
+org.eclipse.jdt.core.formatter.insert_space_before_opening_brace_in_enum_declaration=insert
+org.eclipse.jdt.core.formatter.indent_empty_lines=false
+org.eclipse.jdt.core.formatter.insert_space_before_closing_angle_bracket_in_type_arguments=do not insert
+org.eclipse.jdt.core.formatter.alignment_for_arguments_in_method_invocation=16
@@ -380,0 +289,94 @@
+org.eclipse.jdt.core.compiler.problem.redundantSpecificationOfTypeArguments=warning
+org.eclipse.jdt.core.compiler.problem.missingSynchronizedOnInheritedMethod=warning
+org.eclipse.jdt.core.compiler.problem.deadCode=warning
+org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_annotation=do not insert
+org.eclipse.jdt.core.formatter.insert_new_line_after_annotation_on_parameter=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_comma_in_constructor_declaration_throws=do not insert
+org.eclipse.jdt.core.compiler.problem.noEffectAssignment=warning
+org.eclipse.jdt.core.formatter.insert_space_before_comma_in_method_invocation_arguments=do not insert
+org.eclipse.jdt.core.compiler.problem.missingOverrideAnnotation=warning
+org.eclipse.jdt.core.formatter.brace_position_for_block_in_case=end_of_line
+org.eclipse.jdt.core.formatter.number_of_blank_lines_at_beginning_of_method_body=0
+org.eclipse.jdt.core.compiler.problem.unusedImport=warning
+org.eclipse.jdt.core.formatter.alignment_for_conditional_expression=16
+org.eclipse.jdt.core.formatter.insert_space_after_colon_in_assert=insert
+org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_method_declaration=do not insert
+org.eclipse.jdt.core.formatter.keep_imple_if_on_one_line=false
+org.eclipse.jdt.core.formatter.insert_new_line_in_empty_enum_declaration=insert
+org.eclipse.jdt.core.formatter.insert_space_after_comma_in_for_inits=insert
+org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_synchronized=do not insert
+org.eclipse.jdt.core.formatter.indent_switchstatements_compare_to_switch=true
+org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_synchronized=insert
+org.eclipse.jdt.core.compiler.problem.unusedLabel=warning
+org.eclipse.jdt.core.formatter.insert_new_line_in_empty_enum_constant=insert
+org.eclipse.jdt.core.formatter.insert_space_after_comma_in_enum_constant_arguments=insert
+org.eclipse.jdt.core.formatter.insert_space_after_comma_in_type_parameters=insert
+org.eclipse.jdt.core.formatter.insert_space_after_opening_angle_bracket_in_type_arguments=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_for=insert
+org.eclipse.jdt.core.compiler.problem.unqualifiedFieldAccess=ignore
+org.eclipse.jdt.core.formatter.alignment_for_resources_in_try=80
+org.eclipse.jdt.core.formatter.insert_space_after_comma_in_type_arguments=insert
+org.eclipse.jdt.core.formatter.insert_space_before_comma_in_parameterized_type_reference=do not insert
+org.eclipse.jdt.core.compiler.problem.nullReference=warning
+org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_while=insert
+org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_method_invocation=do not insert
+org.eclipse.jdt.core.compiler.debug.lineNumber=generate
+org.eclipse.jdt.core.formatter.blank_lines_before_imports=1
+org.eclipse.jdt.core.formatter.insert_space_before_comma_in_type_parameters=do not insert
+org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_parenthesized_expression=do not insert
+org.eclipse.jdt.core.formatter.alignment_for_compact_if=16
+org.eclipse.jdt.core.compiler.annotation.nullable=org.eclipse.jdt.annotation.Nullable
+org.eclipse.jdt.core.compiler.problem.typeParameterHiding=warning
+org.eclipse.jdt.core.formatter.insert_new_line_after_label=do not insert
+org.eclipse.jdt.core.compiler.codegen.inlineJsrBytecode=enabled
+org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_switch=do not insert
+org.eclipse.jdt.core.compiler.problem.unhandledWarningToken=warning
+org.eclipse.jdt.core.formatter.insert_space_after_closing_angle_bracket_in_type_arguments=insert
+org.eclipse.jdt.core.formatter.comment.preserve_white_space_between_code_and_line_comments=false
+org.eclipse.jdt.core.formatter.insert_space_before_unary_operator=do not insert
+org.eclipse.jdt.core.formatter.insert_space_after_closing_brace_in_block=insert
+org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_constructor_declaration=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_try=do not insert
+org.eclipse.jdt.core.formatter.continuation_indentation_for_array_initializer=2
+org.eclipse.jdt.core.compiler.problem.missingOverrideAnnotationForInterfaceMethodImplementation=enabled
+org.eclipse.jdt.core.formatter.lineSplit=130
+org.eclipse.jdt.core.compiler.problem.deprecationWhenOverridingDeprecatedMethod=disabled
+org.eclipse.jdt.core.compiler.source=1.7
+org.eclipse.jdt.core.formatter.insert_new_line_in_empty_method_body=insert
+org.eclipse.jdt.core.formatter.insert_new_line_in_empty_anonymous_type_declaration=insert
+org.eclipse.jdt.core.formatter.tabulation.size=4
+org.eclipse.jdt.core.compiler.problem.assertIdentifier=error
+org.eclipse.jdt.core.formatter.brace_position_for_array_initializer=end_of_line
+org.eclipse.jdt.core.compiler.problem.varargsArgumentNeedCast=warning
+org.eclipse.jdt.core.formatter.insert_space_before_comma_in_explicitconstructorcall_arguments=do not insert
+org.eclipse.jdt.core.formatter.blank_lines_between_import_groups=1
+org.eclipse.jdt.core.formatter.comment.new_lines_at_block_boundaries=true
+org.eclipse.jdt.core.compiler.problem.explicitlyClosedAutoCloseable=warning
+org.eclipse.jdt.core.compiler.problem.unusedWarningToken=warning
+org.eclipse.jdt.core.formatter.insert_space_before_comma_in_constructor_declaration_parameters=do not insert
+org.eclipse.jdt.core.formatter.insert_space_between_empty_parens_in_method_invocation=do not insert
+org.eclipse.jdt.core.formatter.insert_space_after_question_in_conditional=insert
+org.eclipse.jdt.core.compiler.problem.unusedObjectAllocation=warning
+org.eclipse.jdt.core.formatter.insert_space_before_postfix_operator=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_colon_in_default=do not insert
+org.eclipse.jdt.core.compiler.problem.nullSpecViolation=error
+org.eclipse.jdt.core.compiler.problem.unusedParameter=ignore
+org.eclipse.jdt.core.compiler.annotation.inheritNullAnnotations=disabled
+org.eclipse.jdt.core.compiler.problem.overridingPackageDefaultMethod=warning
+org.eclipse.jdt.core.formatter.insert_space_before_opening_brace_in_constructor_declaration=insert
+org.eclipse.jdt.core.compiler.problem.unusedLocal=warning
+org.eclipse.jdt.core.formatter.insert_space_after_opening_angle_bracket_in_parameterized_type_reference=do not insert
+org.eclipse.jdt.core.formatter.indent_statements_compare_to_block=true
+org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_catch=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_cast=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_comma_in_type_arguments=do not insert
+org.eclipse.jdt.core.compiler.problem.rawTypeReference=warning
+org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_annotation=do not insert
+eclipse.preferences.version=1
+org.eclipse.jdt.core.formatter.enabling_tag=@formatter\:on
+org.eclipse.jdt.core.formatter.insert_space_before_closing_bracket_in_array_reference=do not insert
+org.eclipse.jdt.core.compiler.compliance=1.7
+org.eclipse.jdt.core.formatter.blank_lines_after_package=1
+org.eclipse.jdt.core.formatter.alignment_for_superinterfaces_in_type_declaration=16
+org.eclipse.jdt.core.formatter.insert_new_line_at_end_of_file_if_missing=do not insert
+org.eclipse.jdt.core.formatter.blank_lines_before_field=0
diff --git a/build.gradle b/build.gradle
index 67d1e04..4568ba1 100644
--- a/build.gradle
+++ b/build.gradle
@@ -5 +5 @@
-sourceCompatibility = '1.5'
+sourceCompatibility = '1.7'
@@ -15,2 +15,2 @@
-	compile 'org.eclipse.jgit:org.eclipse.jgit:3.5.2.201411120430-r'
-	compile 'org.eclipse.jgit:org.eclipse.jgit.archive:3.5.2.201411120430-r'
+	compile 'org.eclipse.jgit:org.eclipse.jgit:3.5.3.201412180710-r'
+	compile 'org.eclipse.jgit:org.eclipse.jgit.archive:3.5.3.201412180710-r'
Diff Between 7a712c5b4c61cdb775c900644fc191bc003d0828 c2bac90a79aa4086a14b720dcac7cdf79bb3a08fdiff --git a/.gitignore b/.gitignore
index 48ce2c0..fd46575 100644
--- a/.gitignore
+++ b/.gitignore
@@ -5 +4,0 @@
-.settings
diff --git a/.settings/org.eclipse.jdt.core.prefs b/.settings/org.eclipse.jdt.core.prefs
new file mode 100644
index 0000000..fef0954
--- /dev/null
+++ b/.settings/org.eclipse.jdt.core.prefs
@@ -0,0 +1,380 @@
+eclipse.preferences.version=1
+org.eclipse.jdt.core.compiler.annotation.inheritNullAnnotations=disabled
+org.eclipse.jdt.core.compiler.annotation.missingNonNullByDefaultAnnotation=ignore
+org.eclipse.jdt.core.compiler.annotation.nonnull=org.eclipse.jdt.annotation.NonNull
+org.eclipse.jdt.core.compiler.annotation.nonnullbydefault=org.eclipse.jdt.annotation.NonNullByDefault
+org.eclipse.jdt.core.compiler.annotation.nullable=org.eclipse.jdt.annotation.Nullable
+org.eclipse.jdt.core.compiler.annotation.nullanalysis=disabled
+org.eclipse.jdt.core.compiler.codegen.inlineJsrBytecode=enabled
+org.eclipse.jdt.core.compiler.codegen.methodParameters=do not generate
+org.eclipse.jdt.core.compiler.codegen.targetPlatform=1.7
+org.eclipse.jdt.core.compiler.codegen.unusedLocal=preserve
+org.eclipse.jdt.core.compiler.compliance=1.7
+org.eclipse.jdt.core.compiler.debug.lineNumber=generate
+org.eclipse.jdt.core.compiler.debug.localVariable=generate
+org.eclipse.jdt.core.compiler.debug.sourceFile=generate
+org.eclipse.jdt.core.compiler.problem.annotationSuperInterface=warning
+org.eclipse.jdt.core.compiler.problem.assertIdentifier=error
+org.eclipse.jdt.core.compiler.problem.autoboxing=ignore
+org.eclipse.jdt.core.compiler.problem.comparingIdentical=warning
+org.eclipse.jdt.core.compiler.problem.deadCode=warning
+org.eclipse.jdt.core.compiler.problem.deprecation=warning
+org.eclipse.jdt.core.compiler.problem.deprecationInDeprecatedCode=disabled
+org.eclipse.jdt.core.compiler.problem.deprecationWhenOverridingDeprecatedMethod=disabled
+org.eclipse.jdt.core.compiler.problem.discouragedReference=warning
+org.eclipse.jdt.core.compiler.problem.emptyStatement=warning
+org.eclipse.jdt.core.compiler.problem.enumIdentifier=error
+org.eclipse.jdt.core.compiler.problem.explicitlyClosedAutoCloseable=warning
+org.eclipse.jdt.core.compiler.problem.fallthroughCase=ignore
+org.eclipse.jdt.core.compiler.problem.fatalOptionalError=disabled
+org.eclipse.jdt.core.compiler.problem.fieldHiding=ignore
+org.eclipse.jdt.core.compiler.problem.finalParameterBound=warning
+org.eclipse.jdt.core.compiler.problem.finallyBlockNotCompletingNormally=warning
+org.eclipse.jdt.core.compiler.problem.forbiddenReference=error
+org.eclipse.jdt.core.compiler.problem.hiddenCatchBlock=warning
+org.eclipse.jdt.core.compiler.problem.includeNullInfoFromAsserts=disabled
+org.eclipse.jdt.core.compiler.problem.incompatibleNonInheritedInterfaceMethod=warning
+org.eclipse.jdt.core.compiler.problem.incompleteEnumSwitch=warning
+org.eclipse.jdt.core.compiler.problem.indirectStaticAccess=ignore
+org.eclipse.jdt.core.compiler.problem.localVariableHiding=ignore
+org.eclipse.jdt.core.compiler.problem.methodWithConstructorName=warning
+org.eclipse.jdt.core.compiler.problem.missingDefaultCase=ignore
+org.eclipse.jdt.core.compiler.problem.missingDeprecatedAnnotation=warning
+org.eclipse.jdt.core.compiler.problem.missingEnumCaseDespiteDefault=disabled
+org.eclipse.jdt.core.compiler.problem.missingHashCodeMethod=warning
+org.eclipse.jdt.core.compiler.problem.missingOverrideAnnotation=warning
+org.eclipse.jdt.core.compiler.problem.missingOverrideAnnotationForInterfaceMethodImplementation=enabled
+org.eclipse.jdt.core.compiler.problem.missingSerialVersion=warning
+org.eclipse.jdt.core.compiler.problem.missingSynchronizedOnInheritedMethod=warning
+org.eclipse.jdt.core.compiler.problem.noEffectAssignment=warning
+org.eclipse.jdt.core.compiler.problem.noImplicitStringConversion=warning
+org.eclipse.jdt.core.compiler.problem.nonExternalizedStringLiteral=ignore
+org.eclipse.jdt.core.compiler.problem.nonnullParameterAnnotationDropped=warning
+org.eclipse.jdt.core.compiler.problem.nullAnnotationInferenceConflict=error
+org.eclipse.jdt.core.compiler.problem.nullReference=warning
+org.eclipse.jdt.core.compiler.problem.nullSpecViolation=error
+org.eclipse.jdt.core.compiler.problem.nullUncheckedConversion=warning
+org.eclipse.jdt.core.compiler.problem.overridingPackageDefaultMethod=warning
+org.eclipse.jdt.core.compiler.problem.parameterAssignment=ignore
+org.eclipse.jdt.core.compiler.problem.possibleAccidentalBooleanAssignment=warning
+org.eclipse.jdt.core.compiler.problem.potentialNullReference=ignore
+org.eclipse.jdt.core.compiler.problem.potentiallyUnclosedCloseable=warning
+org.eclipse.jdt.core.compiler.problem.rawTypeReference=warning
+org.eclipse.jdt.core.compiler.problem.redundantNullAnnotation=warning
+org.eclipse.jdt.core.compiler.problem.redundantNullCheck=warning
+org.eclipse.jdt.core.compiler.problem.redundantSpecificationOfTypeArguments=warning
+org.eclipse.jdt.core.compiler.problem.redundantSuperinterface=ignore
+org.eclipse.jdt.core.compiler.problem.reportMethodCanBePotentiallyStatic=ignore
+org.eclipse.jdt.core.compiler.problem.reportMethodCanBeStatic=ignore
+org.eclipse.jdt.core.compiler.problem.specialParameterHidingField=disabled
+org.eclipse.jdt.core.compiler.problem.staticAccessReceiver=warning
+org.eclipse.jdt.core.compiler.problem.suppressOptionalErrors=disabled
+org.eclipse.jdt.core.compiler.problem.suppressWarnings=enabled
+org.eclipse.jdt.core.compiler.problem.syntacticNullAnalysisForFields=disabled
+org.eclipse.jdt.core.compiler.problem.syntheticAccessEmulation=ignore
+org.eclipse.jdt.core.compiler.problem.typeParameterHiding=warning
+org.eclipse.jdt.core.compiler.problem.unavoidableGenericTypeProblems=enabled
+org.eclipse.jdt.core.compiler.problem.uncheckedTypeOperation=warning
+org.eclipse.jdt.core.compiler.problem.unclosedCloseable=warning
+org.eclipse.jdt.core.compiler.problem.undocumentedEmptyBlock=ignore
+org.eclipse.jdt.core.compiler.problem.unhandledWarningToken=warning
+org.eclipse.jdt.core.compiler.problem.unnecessaryElse=warning
+org.eclipse.jdt.core.compiler.problem.unnecessaryTypeCheck=warning
+org.eclipse.jdt.core.compiler.problem.unqualifiedFieldAccess=ignore
+org.eclipse.jdt.core.compiler.problem.unusedDeclaredThrownException=warning
+org.eclipse.jdt.core.compiler.problem.unusedDeclaredThrownExceptionExemptExceptionAndThrowable=enabled
+org.eclipse.jdt.core.compiler.problem.unusedDeclaredThrownExceptionIncludeDocCommentReference=enabled
+org.eclipse.jdt.core.compiler.problem.unusedDeclaredThrownExceptionWhenOverriding=disabled
+org.eclipse.jdt.core.compiler.problem.unusedImport=warning
+org.eclipse.jdt.core.compiler.problem.unusedLabel=warning
+org.eclipse.jdt.core.compiler.problem.unusedLocal=warning
+org.eclipse.jdt.core.compiler.problem.unusedObjectAllocation=warning
+org.eclipse.jdt.core.compiler.problem.unusedParameter=ignore
+org.eclipse.jdt.core.compiler.problem.unusedParameterIncludeDocCommentReference=enabled
+org.eclipse.jdt.core.compiler.problem.unusedParameterWhenImplementingAbstract=disabled
+org.eclipse.jdt.core.compiler.problem.unusedParameterWhenOverridingConcrete=disabled
+org.eclipse.jdt.core.compiler.problem.unusedPrivateMember=warning
+org.eclipse.jdt.core.compiler.problem.unusedTypeParameter=warning
+org.eclipse.jdt.core.compiler.problem.unusedWarningToken=warning
+org.eclipse.jdt.core.compiler.problem.varargsArgumentNeedCast=warning
+org.eclipse.jdt.core.compiler.source=1.7
+org.eclipse.jdt.core.formatter.align_type_members_on_columns=false
+org.eclipse.jdt.core.formatter.alignment_for_arguments_in_allocation_expression=16
+org.eclipse.jdt.core.formatter.alignment_for_arguments_in_annotation=48
+org.eclipse.jdt.core.formatter.alignment_for_arguments_in_enum_constant=16
+org.eclipse.jdt.core.formatter.alignment_for_arguments_in_explicit_constructor_call=16
+org.eclipse.jdt.core.formatter.alignment_for_arguments_in_method_invocation=16
+org.eclipse.jdt.core.formatter.alignment_for_arguments_in_qualified_allocation_expression=16
+org.eclipse.jdt.core.formatter.alignment_for_assignment=0
+org.eclipse.jdt.core.formatter.alignment_for_binary_expression=16
+org.eclipse.jdt.core.formatter.alignment_for_compact_if=16
+org.eclipse.jdt.core.formatter.alignment_for_conditional_expression=16
+org.eclipse.jdt.core.formatter.alignment_for_enum_constants=16
+org.eclipse.jdt.core.formatter.alignment_for_expressions_in_array_initializer=16
+org.eclipse.jdt.core.formatter.alignment_for_method_declaration=0
+org.eclipse.jdt.core.formatter.alignment_for_multiple_fields=16
+org.eclipse.jdt.core.formatter.alignment_for_parameters_in_constructor_declaration=16
+org.eclipse.jdt.core.formatter.alignment_for_parameters_in_method_declaration=16
+org.eclipse.jdt.core.formatter.alignment_for_resources_in_try=80
+org.eclipse.jdt.core.formatter.alignment_for_selector_in_method_invocation=0
+org.eclipse.jdt.core.formatter.alignment_for_superclass_in_type_declaration=16
+org.eclipse.jdt.core.formatter.alignment_for_superinterfaces_in_enum_declaration=16
+org.eclipse.jdt.core.formatter.alignment_for_superinterfaces_in_type_declaration=16
+org.eclipse.jdt.core.formatter.alignment_for_throws_clause_in_constructor_declaration=16
+org.eclipse.jdt.core.formatter.alignment_for_throws_clause_in_method_declaration=16
+org.eclipse.jdt.core.formatter.alignment_for_union_type_in_multicatch=16
+org.eclipse.jdt.core.formatter.blank_lines_after_imports=1
+org.eclipse.jdt.core.formatter.blank_lines_after_package=1
+org.eclipse.jdt.core.formatter.blank_lines_before_field=0
+org.eclipse.jdt.core.formatter.blank_lines_before_first_class_body_declaration=1
+org.eclipse.jdt.core.formatter.blank_lines_before_imports=1
+org.eclipse.jdt.core.formatter.blank_lines_before_member_type=1
+org.eclipse.jdt.core.formatter.blank_lines_before_method=1
+org.eclipse.jdt.core.formatter.blank_lines_before_new_chunk=0
+org.eclipse.jdt.core.formatter.blank_lines_before_package=0
+org.eclipse.jdt.core.formatter.blank_lines_between_import_groups=1
+org.eclipse.jdt.core.formatter.blank_lines_between_type_declarations=1
+org.eclipse.jdt.core.formatter.brace_position_for_annotation_type_declaration=end_of_line
+org.eclipse.jdt.core.formatter.brace_position_for_anonymous_type_declaration=end_of_line
+org.eclipse.jdt.core.formatter.brace_position_for_array_initializer=end_of_line
+org.eclipse.jdt.core.formatter.brace_position_for_block=end_of_line
+org.eclipse.jdt.core.formatter.brace_position_for_block_in_case=end_of_line
+org.eclipse.jdt.core.formatter.brace_position_for_constructor_declaration=end_of_line
+org.eclipse.jdt.core.formatter.brace_position_for_enum_constant=end_of_line
+org.eclipse.jdt.core.formatter.brace_position_for_enum_declaration=end_of_line
+org.eclipse.jdt.core.formatter.brace_position_for_method_declaration=end_of_line
+org.eclipse.jdt.core.formatter.brace_position_for_switch=end_of_line
+org.eclipse.jdt.core.formatter.brace_position_for_type_declaration=end_of_line
+org.eclipse.jdt.core.formatter.comment.clear_blank_lines_in_block_comment=false
+org.eclipse.jdt.core.formatter.comment.clear_blank_lines_in_javadoc_comment=false
+org.eclipse.jdt.core.formatter.comment.format_block_comments=true
+org.eclipse.jdt.core.formatter.comment.format_header=true
+org.eclipse.jdt.core.formatter.comment.format_html=true
+org.eclipse.jdt.core.formatter.comment.format_javadoc_comments=true
+org.eclipse.jdt.core.formatter.comment.format_line_comments=true
+org.eclipse.jdt.core.formatter.comment.format_source_code=true
+org.eclipse.jdt.core.formatter.comment.indent_parameter_description=false
+org.eclipse.jdt.core.formatter.comment.indent_root_tags=true
+org.eclipse.jdt.core.formatter.comment.insert_new_line_before_root_tags=insert
+org.eclipse.jdt.core.formatter.comment.insert_new_line_for_parameter=do not insert
+org.eclipse.jdt.core.formatter.comment.line_length=130
+org.eclipse.jdt.core.formatter.comment.new_lines_at_block_boundaries=true
+org.eclipse.jdt.core.formatter.comment.new_lines_at_javadoc_boundaries=true
+org.eclipse.jdt.core.formatter.comment.preserve_white_space_between_code_and_line_comments=false
+org.eclipse.jdt.core.formatter.compact_else_if=true
+org.eclipse.jdt.core.formatter.continuation_indentation=2
+org.eclipse.jdt.core.formatter.continuation_indentation_for_array_initializer=2
+org.eclipse.jdt.core.formatter.disabling_tag=@formatter\:off
+org.eclipse.jdt.core.formatter.enabling_tag=@formatter\:on
+org.eclipse.jdt.core.formatter.format_guardian_clause_on_one_line=false
+org.eclipse.jdt.core.formatter.format_line_comment_starting_on_first_column=false
+org.eclipse.jdt.core.formatter.indent_body_declarations_compare_to_annotation_declaration_header=true
+org.eclipse.jdt.core.formatter.indent_body_declarations_compare_to_enum_constant_header=true
+org.eclipse.jdt.core.formatter.indent_body_declarations_compare_to_enum_declaration_header=true
+org.eclipse.jdt.core.formatter.indent_body_declarations_compare_to_type_header=true
+org.eclipse.jdt.core.formatter.indent_breaks_compare_to_cases=true
+org.eclipse.jdt.core.formatter.indent_empty_lines=false
+org.eclipse.jdt.core.formatter.indent_statements_compare_to_block=true
+org.eclipse.jdt.core.formatter.indent_statements_compare_to_body=true
+org.eclipse.jdt.core.formatter.indent_switchstatements_compare_to_cases=true
+org.eclipse.jdt.core.formatter.indent_switchstatements_compare_to_switch=true
+org.eclipse.jdt.core.formatter.indentation.size=4
+org.eclipse.jdt.core.formatter.insert_new_line_after_annotation_on_field=insert
+org.eclipse.jdt.core.formatter.insert_new_line_after_annotation_on_local_variable=insert
+org.eclipse.jdt.core.formatter.insert_new_line_after_annotation_on_method=insert
+org.eclipse.jdt.core.formatter.insert_new_line_after_annotation_on_package=insert
+org.eclipse.jdt.core.formatter.insert_new_line_after_annotation_on_parameter=do not insert
+org.eclipse.jdt.core.formatter.insert_new_line_after_annotation_on_type=insert
+org.eclipse.jdt.core.formatter.insert_new_line_after_label=do not insert
+org.eclipse.jdt.core.formatter.insert_new_line_after_opening_brace_in_array_initializer=do not insert
+org.eclipse.jdt.core.formatter.insert_new_line_at_end_of_file_if_missing=do not insert
+org.eclipse.jdt.core.formatter.insert_new_line_before_catch_in_try_statement=do not insert
+org.eclipse.jdt.core.formatter.insert_new_line_before_closing_brace_in_array_initializer=do not insert
+org.eclipse.jdt.core.formatter.insert_new_line_before_else_in_if_statement=do not insert
+org.eclipse.jdt.core.formatter.insert_new_line_before_finally_in_try_statement=do not insert
+org.eclipse.jdt.core.formatter.insert_new_line_before_while_in_do_statement=do not insert
+org.eclipse.jdt.core.formatter.insert_new_line_in_empty_annotation_declaration=insert
+org.eclipse.jdt.core.formatter.insert_new_line_in_empty_anonymous_type_declaration=insert
+org.eclipse.jdt.core.formatter.insert_new_line_in_empty_block=insert
+org.eclipse.jdt.core.formatter.insert_new_line_in_empty_enum_constant=insert
+org.eclipse.jdt.core.formatter.insert_new_line_in_empty_enum_declaration=insert
+org.eclipse.jdt.core.formatter.insert_new_line_in_empty_method_body=insert
+org.eclipse.jdt.core.formatter.insert_new_line_in_empty_type_declaration=insert
+org.eclipse.jdt.core.formatter.insert_space_after_and_in_type_parameter=insert
+org.eclipse.jdt.core.formatter.insert_space_after_assignment_operator=insert
+org.eclipse.jdt.core.formatter.insert_space_after_at_in_annotation=do not insert
+org.eclipse.jdt.core.formatter.insert_space_after_at_in_annotation_type_declaration=do not insert
+org.eclipse.jdt.core.formatter.insert_space_after_binary_operator=insert
+org.eclipse.jdt.core.formatter.insert_space_after_closing_angle_bracket_in_type_arguments=insert
+org.eclipse.jdt.core.formatter.insert_space_after_closing_angle_bracket_in_type_parameters=insert
+org.eclipse.jdt.core.formatter.insert_space_after_closing_brace_in_block=insert
+org.eclipse.jdt.core.formatter.insert_space_after_closing_paren_in_cast=insert
+org.eclipse.jdt.core.formatter.insert_space_after_colon_in_assert=insert
+org.eclipse.jdt.core.formatter.insert_space_after_colon_in_case=insert
+org.eclipse.jdt.core.formatter.insert_space_after_colon_in_conditional=insert
+org.eclipse.jdt.core.formatter.insert_space_after_colon_in_for=insert
+org.eclipse.jdt.core.formatter.insert_space_after_colon_in_labeled_statement=insert
+org.eclipse.jdt.core.formatter.insert_space_after_comma_in_allocation_expression=insert
+org.eclipse.jdt.core.formatter.insert_space_after_comma_in_annotation=insert
+org.eclipse.jdt.core.formatter.insert_space_after_comma_in_array_initializer=insert
+org.eclipse.jdt.core.formatter.insert_space_after_comma_in_constructor_declaration_parameters=insert
+org.eclipse.jdt.core.formatter.insert_space_after_comma_in_constructor_declaration_throws=insert
+org.eclipse.jdt.core.formatter.insert_space_after_comma_in_enum_constant_arguments=insert
+org.eclipse.jdt.core.formatter.insert_space_after_comma_in_enum_declarations=insert
+org.eclipse.jdt.core.formatter.insert_space_after_comma_in_explicitconstructorcall_arguments=insert
+org.eclipse.jdt.core.formatter.insert_space_after_comma_in_for_increments=insert
+org.eclipse.jdt.core.formatter.insert_space_after_comma_in_for_inits=insert
+org.eclipse.jdt.core.formatter.insert_space_after_comma_in_method_declaration_parameters=insert
+org.eclipse.jdt.core.formatter.insert_space_after_comma_in_method_declaration_throws=insert
+org.eclipse.jdt.core.formatter.insert_space_after_comma_in_method_invocation_arguments=insert
+org.eclipse.jdt.core.formatter.insert_space_after_comma_in_multiple_field_declarations=insert
+org.eclipse.jdt.core.formatter.insert_space_after_comma_in_multiple_local_declarations=insert
+org.eclipse.jdt.core.formatter.insert_space_after_comma_in_parameterized_type_reference=insert
+org.eclipse.jdt.core.formatter.insert_space_after_comma_in_superinterfaces=insert
+org.eclipse.jdt.core.formatter.insert_space_after_comma_in_type_arguments=insert
+org.eclipse.jdt.core.formatter.insert_space_after_comma_in_type_parameters=insert
+org.eclipse.jdt.core.formatter.insert_space_after_ellipsis=insert
+org.eclipse.jdt.core.formatter.insert_space_after_opening_angle_bracket_in_parameterized_type_reference=do not insert
+org.eclipse.jdt.core.formatter.insert_space_after_opening_angle_bracket_in_type_arguments=do not insert
+org.eclipse.jdt.core.formatter.insert_space_after_opening_angle_bracket_in_type_parameters=do not insert
+org.eclipse.jdt.core.formatter.insert_space_after_opening_brace_in_array_initializer=insert
+org.eclipse.jdt.core.formatter.insert_space_after_opening_bracket_in_array_allocation_expression=do not insert
+org.eclipse.jdt.core.formatter.insert_space_after_opening_bracket_in_array_reference=do not insert
+org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_annotation=do not insert
+org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_cast=do not insert
+org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_catch=do not insert
+org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_constructor_declaration=do not insert
+org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_enum_constant=do not insert
+org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_for=do not insert
+org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_if=do not insert
+org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_method_declaration=do not insert
+org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_method_invocation=do not insert
+org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_parenthesized_expression=do not insert
+org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_switch=do not insert
+org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_synchronized=do not insert
+org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_try=do not insert
+org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_while=do not insert
+org.eclipse.jdt.core.formatter.insert_space_after_postfix_operator=do not insert
+org.eclipse.jdt.core.formatter.insert_space_after_prefix_operator=do not insert
+org.eclipse.jdt.core.formatter.insert_space_after_question_in_conditional=insert
+org.eclipse.jdt.core.formatter.insert_space_after_question_in_wildcard=do not insert
+org.eclipse.jdt.core.formatter.insert_space_after_semicolon_in_for=insert
+org.eclipse.jdt.core.formatter.insert_space_after_semicolon_in_try_resources=insert
+org.eclipse.jdt.core.formatter.insert_space_after_unary_operator=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_and_in_type_parameter=insert
+org.eclipse.jdt.core.formatter.insert_space_before_assignment_operator=insert
+org.eclipse.jdt.core.formatter.insert_space_before_at_in_annotation_type_declaration=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_binary_operator=insert
+org.eclipse.jdt.core.formatter.insert_space_before_closing_angle_bracket_in_parameterized_type_reference=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_closing_angle_bracket_in_type_arguments=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_closing_angle_bracket_in_type_parameters=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_closing_brace_in_array_initializer=insert
+org.eclipse.jdt.core.formatter.insert_space_before_closing_bracket_in_array_allocation_expression=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_closing_bracket_in_array_reference=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_annotation=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_cast=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_catch=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_constructor_declaration=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_enum_constant=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_for=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_if=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_method_declaration=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_method_invocation=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_parenthesized_expression=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_switch=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_synchronized=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_try=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_while=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_colon_in_assert=insert
+org.eclipse.jdt.core.formatter.insert_space_before_colon_in_case=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_colon_in_conditional=insert
+org.eclipse.jdt.core.formatter.insert_space_before_colon_in_default=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_colon_in_for=insert
+org.eclipse.jdt.core.formatter.insert_space_before_colon_in_labeled_statement=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_comma_in_allocation_expression=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_comma_in_annotation=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_comma_in_array_initializer=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_comma_in_constructor_declaration_parameters=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_comma_in_constructor_declaration_throws=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_comma_in_enum_constant_arguments=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_comma_in_enum_declarations=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_comma_in_explicitconstructorcall_arguments=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_comma_in_for_increments=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_comma_in_for_inits=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_comma_in_method_declaration_parameters=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_comma_in_method_declaration_throws=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_comma_in_method_invocation_arguments=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_comma_in_multiple_field_declarations=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_comma_in_multiple_local_declarations=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_comma_in_parameterized_type_reference=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_comma_in_superinterfaces=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_comma_in_type_arguments=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_comma_in_type_parameters=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_ellipsis=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_opening_angle_bracket_in_parameterized_type_reference=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_opening_angle_bracket_in_type_arguments=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_opening_angle_bracket_in_type_parameters=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_opening_brace_in_annotation_type_declaration=insert
+org.eclipse.jdt.core.formatter.insert_space_before_opening_brace_in_anonymous_type_declaration=insert
+org.eclipse.jdt.core.formatter.insert_space_before_opening_brace_in_array_initializer=insert
+org.eclipse.jdt.core.formatter.insert_space_before_opening_brace_in_block=insert
+org.eclipse.jdt.core.formatter.insert_space_before_opening_brace_in_constructor_declaration=insert
+org.eclipse.jdt.core.formatter.insert_space_before_opening_brace_in_enum_constant=insert
+org.eclipse.jdt.core.formatter.insert_space_before_opening_brace_in_enum_declaration=insert
+org.eclipse.jdt.core.formatter.insert_space_before_opening_brace_in_method_declaration=insert
+org.eclipse.jdt.core.formatter.insert_space_before_opening_brace_in_switch=insert
+org.eclipse.jdt.core.formatter.insert_space_before_opening_brace_in_type_declaration=insert
+org.eclipse.jdt.core.formatter.insert_space_before_opening_bracket_in_array_allocation_expression=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_opening_bracket_in_array_reference=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_opening_bracket_in_array_type_reference=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_annotation=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_annotation_type_member_declaration=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_catch=insert
+org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_constructor_declaration=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_enum_constant=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_for=insert
+org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_if=insert
+org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_method_declaration=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_method_invocation=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_parenthesized_expression=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_switch=insert
+org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_synchronized=insert
+org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_try=insert
+org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_while=insert
+org.eclipse.jdt.core.formatter.insert_space_before_parenthesized_expression_in_return=insert
+org.eclipse.jdt.core.formatter.insert_space_before_parenthesized_expression_in_throw=insert
+org.eclipse.jdt.core.formatter.insert_space_before_postfix_operator=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_prefix_operator=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_question_in_conditional=insert
+org.eclipse.jdt.core.formatter.insert_space_before_question_in_wildcard=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_semicolon=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_semicolon_in_for=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_semicolon_in_try_resources=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_unary_operator=do not insert
+org.eclipse.jdt.core.formatter.insert_space_between_brackets_in_array_type_reference=do not insert
+org.eclipse.jdt.core.formatter.insert_space_between_empty_braces_in_array_initializer=do not insert
+org.eclipse.jdt.core.formatter.insert_space_between_empty_brackets_in_array_allocation_expression=do not insert
+org.eclipse.jdt.core.formatter.insert_space_between_empty_parens_in_annotation_type_member_declaration=do not insert
+org.eclipse.jdt.core.formatter.insert_space_between_empty_parens_in_constructor_declaration=do not insert
+org.eclipse.jdt.core.formatter.insert_space_between_empty_parens_in_enum_constant=do not insert
+org.eclipse.jdt.core.formatter.insert_space_between_empty_parens_in_method_declaration=do not insert
+org.eclipse.jdt.core.formatter.insert_space_between_empty_parens_in_method_invocation=do not insert
+org.eclipse.jdt.core.formatter.join_lines_in_comments=false
+org.eclipse.jdt.core.formatter.join_wrapped_lines=false
+org.eclipse.jdt.core.formatter.keep_else_statement_on_same_line=false
+org.eclipse.jdt.core.formatter.keep_empty_array_initializer_on_one_line=false
+org.eclipse.jdt.core.formatter.keep_imple_if_on_one_line=false
+org.eclipse.jdt.core.formatter.keep_then_statement_on_same_line=false
+org.eclipse.jdt.core.formatter.lineSplit=130
+org.eclipse.jdt.core.formatter.never_indent_block_comments_on_first_column=false
+org.eclipse.jdt.core.formatter.never_indent_line_comments_on_first_column=true
+org.eclipse.jdt.core.formatter.number_of_blank_lines_at_beginning_of_method_body=0
+org.eclipse.jdt.core.formatter.number_of_empty_lines_to_preserve=3
+org.eclipse.jdt.core.formatter.put_empty_statement_on_new_line=true
+org.eclipse.jdt.core.formatter.tabulation.char=space
+org.eclipse.jdt.core.formatter.tabulation.size=4
+org.eclipse.jdt.core.formatter.use_on_off_tags=true
+org.eclipse.jdt.core.formatter.use_tabs_only_for_leading_indentations=false
+org.eclipse.jdt.core.formatter.wrap_before_binary_operator=false
+org.eclipse.jdt.core.formatter.wrap_before_or_operator_multicatch=true
+org.eclipse.jdt.core.formatter.wrap_outer_expressions_when_nested=true
diff --git a/.settings/org.eclipse.jdt.ui.prefs b/.settings/org.eclipse.jdt.ui.prefs
new file mode 100644
index 0000000..4175e4b
--- /dev/null
+++ b/.settings/org.eclipse.jdt.ui.prefs
@@ -0,0 +1,3 @@
+eclipse.preferences.version=1
+formatter_profile=_dynaTrace
+formatter_settings_version=12
diff --git a/src/main/java/org/dstadler/jgit/api/GetFileAttributes.java b/src/main/java/org/dstadler/jgit/api/GetFileAttributes.java
index 9f67d2b..f9afc9d 100755
--- a/src/main/java/org/dstadler/jgit/api/GetFileAttributes.java
+++ b/src/main/java/org/dstadler/jgit/api/GetFileAttributes.java
@@ -22 +21,0 @@
-import org.eclipse.jgit.api.errors.GitAPIException;
@@ -46 +45 @@
-    public static void main(String[] args) throws IOException, GitAPIException {
+    public static void main(String[] args) throws IOException {
diff --git a/src/main/java/org/dstadler/jgit/api/GetRevTreeFromObjectId.java b/src/main/java/org/dstadler/jgit/api/GetRevTreeFromObjectId.java
index 1e6932e..b5547cb 100644
--- a/src/main/java/org/dstadler/jgit/api/GetRevTreeFromObjectId.java
+++ b/src/main/java/org/dstadler/jgit/api/GetRevTreeFromObjectId.java
@@ -22 +21,0 @@
-import org.eclipse.jgit.api.errors.GitAPIException;
@@ -34 +33 @@
-    public static void main(String[] args) throws IOException, GitAPIException {
+    public static void main(String[] args) throws IOException {
diff --git a/src/main/java/org/dstadler/jgit/api/ReadFileFromCommit.java b/src/main/java/org/dstadler/jgit/api/ReadFileFromCommit.java
index d231f8b..5275c09 100644
--- a/src/main/java/org/dstadler/jgit/api/ReadFileFromCommit.java
+++ b/src/main/java/org/dstadler/jgit/api/ReadFileFromCommit.java
@@ -22 +21,0 @@
-import org.eclipse.jgit.api.errors.GitAPIException;
@@ -41 +40 @@
-    public static void main(String[] args) throws IOException, GitAPIException {
+    public static void main(String[] args) throws IOException {
diff --git a/src/main/java/org/dstadler/jgit/api/ReadTagFromName.java b/src/main/java/org/dstadler/jgit/api/ReadTagFromName.java
index 9774e52..dad0ebf 100644
--- a/src/main/java/org/dstadler/jgit/api/ReadTagFromName.java
+++ b/src/main/java/org/dstadler/jgit/api/ReadTagFromName.java
@@ -22 +21,0 @@
-import org.eclipse.jgit.api.errors.GitAPIException;
@@ -34 +33 @@
-    public static void main(String[] args) throws IOException, GitAPIException {
+    public static void main(String[] args) throws IOException {
diff --git a/src/main/java/org/dstadler/jgit/api/ShowBranchTrackingStatus.java b/src/main/java/org/dstadler/jgit/api/ShowBranchTrackingStatus.java
index bf9a5e4..90f0920 100644
--- a/src/main/java/org/dstadler/jgit/api/ShowBranchTrackingStatus.java
+++ b/src/main/java/org/dstadler/jgit/api/ShowBranchTrackingStatus.java
@@ -56 +56 @@
-        List<Integer> counts = new ArrayList<Integer>();
+        List<Integer> counts = new ArrayList<>();
diff --git a/src/main/java/org/dstadler/jgit/porcelain/CreateArchive.java b/src/main/java/org/dstadler/jgit/porcelain/CreateArchive.java
index 86269cc..05466a7 100644
--- a/src/main/java/org/dstadler/jgit/porcelain/CreateArchive.java
+++ b/src/main/java/org/dstadler/jgit/porcelain/CreateArchive.java
@@ -60,2 +60 @@
-        OutputStream out = new FileOutputStream(file);
-        try {
+        try (OutputStream out = new FileOutputStream(file)) {
@@ -68,2 +66,0 @@
-        } finally {
-            out.close();
diff --git a/src/main/java/org/dstadler/jgit/porcelain/CreateCustomFormatArchive.java b/src/main/java/org/dstadler/jgit/porcelain/CreateCustomFormatArchive.java
index d362f0e..c268287 100644
--- a/src/main/java/org/dstadler/jgit/porcelain/CreateCustomFormatArchive.java
+++ b/src/main/java/org/dstadler/jgit/porcelain/CreateCustomFormatArchive.java
@@ -51 +51,2 @@
-		public ZipOutputStream createArchiveOutputStream(OutputStream s) throws IOException {
+		@Override
+        public ZipOutputStream createArchiveOutputStream(OutputStream s) throws IOException {
@@ -55 +56,2 @@
-		public void putEntry(ZipOutputStream out, String path, FileMode mode, ObjectLoader loader) throws IOException {
+		@Override
+        public void putEntry(ZipOutputStream out, String path, FileMode mode, ObjectLoader loader) throws IOException {
@@ -65 +67,2 @@
-		public Iterable<String> suffixes() {
+		@Override
+        public Iterable<String> suffixes() {
@@ -79,2 +82 @@
-            OutputStream out = new FileOutputStream(file);
-            try {
+            try (OutputStream out = new FileOutputStream(file)) {
@@ -87,2 +88,0 @@
-            } finally {
-                out.close();
diff --git a/src/main/java/org/dstadler/jgit/porcelain/ListRemoteRepository.java b/src/main/java/org/dstadler/jgit/porcelain/ListRemoteRepository.java
index f3833c5..90dfae2 100644
--- a/src/main/java/org/dstadler/jgit/porcelain/ListRemoteRepository.java
+++ b/src/main/java/org/dstadler/jgit/porcelain/ListRemoteRepository.java
@@ -19 +18,0 @@
-import java.io.IOException;
@@ -40 +39 @@
-    public static void main(String[] args) throws IOException, InvalidRemoteException, TransportException, GitAPIException {
+    public static void main(String[] args) throws InvalidRemoteException, TransportException, GitAPIException {
diff --git a/src/main/java/org/dstadler/jgit/unfinished/BrowseTree.java b/src/main/java/org/dstadler/jgit/unfinished/BrowseTree.java
index 57b3531..be58653 100644
--- a/src/main/java/org/dstadler/jgit/unfinished/BrowseTree.java
+++ b/src/main/java/org/dstadler/jgit/unfinished/BrowseTree.java
@@ -22 +21,0 @@
-import org.eclipse.jgit.api.errors.GitAPIException;
@@ -37 +36 @@
-    public static void main(String[] args) throws IOException, GitAPIException {
+    public static void main(String[] args) throws IOException {
diff --git a/src/main/java/org/dstadler/jgit/unfinished/ListChildrenOfCommit.java b/src/main/java/org/dstadler/jgit/unfinished/ListChildrenOfCommit.java
index a0537db..577890b 100755
--- a/src/main/java/org/dstadler/jgit/unfinished/ListChildrenOfCommit.java
+++ b/src/main/java/org/dstadler/jgit/unfinished/ListChildrenOfCommit.java
@@ -22 +21,0 @@
-import org.eclipse.jgit.api.errors.GitAPIException;
@@ -37 +36 @@
-    public static void main(String[] args) throws IOException, GitAPIException {
+    public static void main(String[] args) throws IOException {
@@ -44 +43 @@
-        PlotCommitList<PlotLane> plotCommitList = new PlotCommitList<PlotLane>();
+        PlotCommitList<PlotLane> plotCommitList = new PlotCommitList<>();
diff --git a/src/main/java/org/dstadler/jgit/unfinished/ListIndex.java b/src/main/java/org/dstadler/jgit/unfinished/ListIndex.java
index f3f06c6..a5c39fb 100755
--- a/src/main/java/org/dstadler/jgit/unfinished/ListIndex.java
+++ b/src/main/java/org/dstadler/jgit/unfinished/ListIndex.java
@@ -22 +21,0 @@
-import org.eclipse.jgit.api.errors.GitAPIException;
@@ -34 +33 @@
-    public static void main(String[] args) throws IOException, GitAPIException {
+    public static void main(String[] args) throws IOException {
diff --git a/src/main/java/org/dstadler/jgit/unfinished/ListRefLog.java b/src/main/java/org/dstadler/jgit/unfinished/ListRefLog.java
index c4354a3..c451d61 100755
--- a/src/main/java/org/dstadler/jgit/unfinished/ListRefLog.java
+++ b/src/main/java/org/dstadler/jgit/unfinished/ListRefLog.java
@@ -61 +61 @@
-    private static void listReflog(Repository repository, Ref ref) throws GitAPIException, InvalidRefNameException, IOException {
+    private static void listReflog(Repository repository, Ref ref) throws GitAPIException, InvalidRefNameException {
diff --git a/src/main/java/org/dstadler/jgit/unfinished/WalkTreeNonRecursive.java b/src/main/java/org/dstadler/jgit/unfinished/WalkTreeNonRecursive.java
index b7d3f8e..d6854f5 100644
--- a/src/main/java/org/dstadler/jgit/unfinished/WalkTreeNonRecursive.java
+++ b/src/main/java/org/dstadler/jgit/unfinished/WalkTreeNonRecursive.java
@@ -22 +21,0 @@
-import org.eclipse.jgit.api.errors.GitAPIException;
@@ -37 +36 @@
-    public static void main(String[] args) throws IOException, GitAPIException {
+    public static void main(String[] args) throws IOException {
diff --git a/src/main/java/org/dstadler/jgit/unfinished/WalkTreeRecursive.java b/src/main/java/org/dstadler/jgit/unfinished/WalkTreeRecursive.java
index 1e1f28d..2c1dbf0 100644
--- a/src/main/java/org/dstadler/jgit/unfinished/WalkTreeRecursive.java
+++ b/src/main/java/org/dstadler/jgit/unfinished/WalkTreeRecursive.java
@@ -22 +21,0 @@
-import org.eclipse.jgit.api.errors.GitAPIException;
@@ -37 +36 @@
-    public static void main(String[] args) throws IOException, GitAPIException {
+    public static void main(String[] args) throws IOException {
Diff Between c2bac90a79aa4086a14b720dcac7cdf79bb3a08f e6d5eeb172cfd6f1998fbd976059441cf537b00cdiff --git a/src/main/java/org/dstadler/jgit/porcelain/ShowChangedFilesBetweenCommits.java b/src/main/java/org/dstadler/jgit/porcelain/ShowChangedFilesBetweenCommits.java
index 4c3d19f..db8db05 100755
--- a/src/main/java/org/dstadler/jgit/porcelain/ShowChangedFilesBetweenCommits.java
+++ b/src/main/java/org/dstadler/jgit/porcelain/ShowChangedFilesBetweenCommits.java
@@ -43,0 +44,3 @@
+        // For a description of what the carets do see e.g. http://www.paulboxley.com/blog/2011/06/git-caret-and-tilde
+        // This means we are selecting the parent of the parent of the parent of the parent of current HEAD and
+        // take the tree-ish of it
Diff Between e6d5eeb172cfd6f1998fbd976059441cf537b00c f991c2d216d337ea1f661dcaec558be235c4a1fbdiff --git a/src/main/java/org/dstadler/jgit/api/GetRevTreeFromObjectId.java b/src/main/java/org/dstadler/jgit/api/GetRevTreeFromObjectId.java
index b2d1f5e..1e6932e 100644
--- a/src/main/java/org/dstadler/jgit/api/GetRevTreeFromObjectId.java
+++ b/src/main/java/org/dstadler/jgit/api/GetRevTreeFromObjectId.java
@@ -36,0 +37 @@
+        // See e.g. GetRevCommitFromObjectId for how to use a SHA-1 directly
Diff Between f991c2d216d337ea1f661dcaec558be235c4a1fb e9ba2007b15fc612b9a7d95777df8114f6e0c09eDiff Between e9ba2007b15fc612b9a7d95777df8114f6e0c09e 38d51408bdf594a3dbe67c7b53847375f46bf9dediff --git a/src/main/java/org/dstadler/jgit/api/GetRevCommitFromObjectId.java b/src/main/java/org/dstadler/jgit/api/GetRevCommitFromObjectId.java
index e5b2faa..8d5dfb7 100644
--- a/src/main/java/org/dstadler/jgit/api/GetRevCommitFromObjectId.java
+++ b/src/main/java/org/dstadler/jgit/api/GetRevCommitFromObjectId.java
@@ -21,0 +22 @@
+import org.eclipse.jgit.lib.ObjectId;
@@ -42,0 +44,6 @@
+        // You can also get the commit for an (abbreviated) SHA
+        walk.reset();
+        ObjectId id = repository.resolve("38d51408bd");
+        RevCommit commitAgain = walk.parseCommit(id);
+        System.out.println("Found Commit again: " + commitAgain);
+
Diff Between 38d51408bdf594a3dbe67c7b53847375f46bf9de bdea5353c5002509a246f59b8c0714f3a4fed695diff --git a/build.gradle b/build.gradle
index d059731..67d1e04 100644
--- a/build.gradle
+++ b/build.gradle
@@ -15,2 +15,2 @@
-	compile 'org.eclipse.jgit:org.eclipse.jgit:3.4.1.201406201815-r'
-	compile 'org.eclipse.jgit:org.eclipse.jgit.archive:3.4.1.201406201815-r'
+	compile 'org.eclipse.jgit:org.eclipse.jgit:3.5.2.201411120430-r'
+	compile 'org.eclipse.jgit:org.eclipse.jgit.archive:3.5.2.201411120430-r'
@@ -21 +21 @@
-	gradleVersion = '2.1'
+	gradleVersion = '2.2.1'
diff --git a/gradle/wrapper/gradle-wrapper.properties b/gradle/wrapper/gradle-wrapper.properties
index dac87ec..5c69a07 100644
--- a/gradle/wrapper/gradle-wrapper.properties
+++ b/gradle/wrapper/gradle-wrapper.properties
@@ -1 +1 @@
-#Thu Oct 30 10:07:17 CET 2014
+#Thu Dec 11 23:25:39 CET 2014
@@ -6 +6 @@
-distributionUrl=https\://services.gradle.org/distributions/gradle-2.1-bin.zip
+distributionUrl=https\://services.gradle.org/distributions/gradle-2.2.1-bin.zip
diff --git a/pom.xml b/pom.xml
index 089b562..0250fd6 100644
--- a/pom.xml
+++ b/pom.xml
@@ -23 +23 @@
-      <version>3.4.1.201406201815-r</version>
+      <version>3.5.2.201411120430-r</version>
@@ -28 +28 @@
-      <version>3.4.1.201406201815-r</version>
+      <version>3.5.2.201411120430-r</version>
Diff Between bdea5353c5002509a246f59b8c0714f3a4fed695 1e23e4044b30a354913efb1ffd4a22028544e4f2diff --git a/.gitignore b/.gitignore
index d49dbd2..48ce2c0 100644
--- a/.gitignore
+++ b/.gitignore
@@ -6,0 +7 @@
+/bin/
diff --git a/build.gradle b/build.gradle
index 48bebb5..d059731 100644
--- a/build.gradle
+++ b/build.gradle
@@ -4,0 +5,2 @@
+sourceCompatibility = '1.5'
+
diff --git a/pom.xml b/pom.xml
index b28a636..089b562 100644
--- a/pom.xml
+++ b/pom.xml
@@ -43 +43 @@
-        <version>3.1</version>
+        <version>3.2</version>
diff --git a/src/main/java/org/dstadler/jgit/api/ShowBranchTrackingStatus.java b/src/main/java/org/dstadler/jgit/api/ShowBranchTrackingStatus.java
index ea8da5f..bf9a5e4 100644
--- a/src/main/java/org/dstadler/jgit/api/ShowBranchTrackingStatus.java
+++ b/src/main/java/org/dstadler/jgit/api/ShowBranchTrackingStatus.java
@@ -5 +5 @@
- * 
+ *
@@ -9 +9 @@
- * 
+ *
@@ -11 +11 @@
- * 
+ *
@@ -32 +32 @@
- * how many commits away the local git repository is from the 
+ * how many commits away the local git repository is from the
@@ -34 +34 @@
- * 
+ *
diff --git a/src/main/java/org/dstadler/jgit/porcelain/CreateCustomFormatArchive.java b/src/main/java/org/dstadler/jgit/porcelain/CreateCustomFormatArchive.java
index 632b5a1..d362f0e 100644
--- a/src/main/java/org/dstadler/jgit/porcelain/CreateCustomFormatArchive.java
+++ b/src/main/java/org/dstadler/jgit/porcelain/CreateCustomFormatArchive.java
@@ -5 +5 @@
- * 
+ *
@@ -9 +9 @@
- * 
+ *
@@ -11 +11 @@
- * 
+ *
@@ -39 +39 @@
- * Simple snippet which shows how to package the contents of a branch into an archive file 
+ * Simple snippet which shows how to package the contents of a branch into an archive file
@@ -41 +41 @@
- * 
+ *
@@ -51 +51 @@
-        public ZipOutputStream createArchiveOutputStream(OutputStream s) throws IOException {
+		public ZipOutputStream createArchiveOutputStream(OutputStream s) throws IOException {
@@ -55 +55 @@
-        public void putEntry(ZipOutputStream out, String path, FileMode mode, ObjectLoader loader) throws IOException {
+		public void putEntry(ZipOutputStream out, String path, FileMode mode, ObjectLoader loader) throws IOException {
@@ -65 +65 @@
-        public Iterable<String> suffixes() {
+		public Iterable<String> suffixes() {
diff --git a/src/main/java/org/dstadler/jgit/unfinished/ListChildrenOfCommit.java b/src/main/java/org/dstadler/jgit/unfinished/ListChildrenOfCommit.java
index 1ad54fc..a0537db 100755
--- a/src/main/java/org/dstadler/jgit/unfinished/ListChildrenOfCommit.java
+++ b/src/main/java/org/dstadler/jgit/unfinished/ListChildrenOfCommit.java
@@ -32 +32 @@
- * 
+ *
Diff Between 1e23e4044b30a354913efb1ffd4a22028544e4f2 7245ca5cea397f66b4af568af267925e65ddae80diff --git a/README.md b/README.md
index ef0a08e..a3b586e 100644
--- a/README.md
+++ b/README.md
@@ -87,0 +88 @@
+* [Check if commits on other branches are merged into a given branch](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/api/CheckMergeStatusOfCommit.java)
diff --git a/src/main/java/org/dstadler/jgit/api/CheckMergeStatusOfCommit.java b/src/main/java/org/dstadler/jgit/api/CheckMergeStatusOfCommit.java
new file mode 100644
index 0000000..c3686c9
--- /dev/null
+++ b/src/main/java/org/dstadler/jgit/api/CheckMergeStatusOfCommit.java
@@ -0,0 +1,80 @@
+package org.dstadler.jgit.api;
+
+/*
+   Copyright 2013, 2014 Dominik Stadler
+
+   Licensed under the Apache License, Version 2.0 (the "License");
+   you may not use this file except in compliance with the License.
+   You may obtain a copy of the License at
+
+     http://www.apache.org/licenses/LICENSE-2.0
+
+   Unless required by applicable law or agreed to in writing, software
+   distributed under the License is distributed on an "AS IS" BASIS,
+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+   See the License for the specific language governing permissions and
+   limitations under the License.
+ */
+
+import java.io.IOException;
+
+import org.dstadler.jgit.helper.CookbookHelper;
+import org.eclipse.jgit.lib.ObjectId;
+import org.eclipse.jgit.lib.Repository;
+import org.eclipse.jgit.revwalk.RevCommit;
+import org.eclipse.jgit.revwalk.RevWalk;
+
+/**
+ * Snippet which shows how to check if commits are merged into a
+ * given branch. 
+ * 
+ * See also http://stackoverflow.com/questions/26644919/how-to-determine-with-jgit-which-branches-have-been-merged-to-master
+ */
+public class CheckMergeStatusOfCommit {
+
+    public static void main(String[] args) throws IOException {
+        Repository repository = CookbookHelper.openJGitCookbookRepository();
+
+        RevWalk revWalk = new RevWalk( repository );
+        RevCommit masterHead = revWalk.parseCommit( repository.resolve( "refs/heads/master" ));
+        
+        // first a commit that was merged
+        ObjectId id = repository.resolve("05d18a76875716fbdbd2c200091b40caa06c713d");
+        System.out.println("Had id: " + id);
+        RevCommit otherHead = revWalk.parseCommit( id );
+        
+        if( revWalk.isMergedInto( otherHead, masterHead ) ) {
+            System.out.println("Commit " + otherHead + " is merged into master");
+        } else {
+            System.out.println("Commit " + otherHead + " is NOT merged into master");
+        }
+
+        
+        // then a commit on a test-branch which is not merged
+        id = repository.resolve("ae70dd60a7423eb07893d833600f096617f450d2");
+        System.out.println("Had id: " + id);
+        otherHead = revWalk.parseCommit( id );
+        
+        if( revWalk.isMergedInto( otherHead, masterHead ) ) {
+            System.out.println("Commit " + otherHead + " is merged into master");
+        } else {
+            System.out.println("Commit " + otherHead + " is NOT merged into master");
+        }
+
+        // and finally master-HEAD itself
+        id = repository.resolve("HEAD");
+        System.out.println("Had id: " + id);
+        otherHead = revWalk.parseCommit( id );
+        
+        if( revWalk.isMergedInto( otherHead, masterHead ) ) {
+            System.out.println("Commit " + otherHead + " is merged into master");
+        } else {
+            System.out.println("Commit " + otherHead + " is NOT merged into master");
+        }
+
+        
+        revWalk.dispose();
+
+        repository.close();
+    }
+}
diff --git a/src/main/java/org/dstadler/jgit/api/ResolveRef.java b/src/main/java/org/dstadler/jgit/api/ResolveRef.java
index 026b2b2..40648fd 100644
--- a/src/main/java/org/dstadler/jgit/api/ResolveRef.java
+++ b/src/main/java/org/dstadler/jgit/api/ResolveRef.java
@@ -42,0 +43,6 @@
+        id = repository.resolve("b419522521af553ae2752fd1b609f2aa11062243");
+        System.out.println("ObjectId of specific commit: " + id);
+        
+        id = repository.resolve("05d18a76875716fbdbd2c200091b40caa06c713d");
+        System.out.println("ObjectId of merged commit: " + id);
+
Diff Between 7245ca5cea397f66b4af568af267925e65ddae80 dba4d7589cc8c2f9fe450a6f4454c72ff9e1d76ddiff --git a/.gitignore b/.gitignore
index 3f7c223..d49dbd2 100644
--- a/.gitignore
+++ b/.gitignore
@@ -6,5 +6 @@
-
-# Package Files #
-*.jar
-*.war
-*.ear
+.gradle
diff --git a/README.md b/README.md
index c324be3..ef0a08e 100644
--- a/README.md
+++ b/README.md
@@ -20,0 +21,2 @@
+###### When using Maven
+
@@ -22,0 +25,4 @@
+###### When using Gradle
+
+	./gradlew eclipse check
+
diff --git a/build.gradle b/build.gradle
new file mode 100644
index 0000000..48bebb5
--- /dev/null
+++ b/build.gradle
@@ -0,0 +1,20 @@
+apply plugin: 'java'
+//apply plugin: 'idea'
+apply plugin: 'eclipse'
+
+repositories {
+  mavenCentral()
+  maven {
+    url "https://repo.eclipse.org/content/groups/releases/"
+  }
+}
+
+dependencies {
+	compile 'org.eclipse.jgit:org.eclipse.jgit:3.4.1.201406201815-r'
+	compile 'org.eclipse.jgit:org.eclipse.jgit.archive:3.4.1.201406201815-r'
+	compile 'commons-io:commons-io:2.4'
+}
+
+task wrapper(type: Wrapper) {
+	gradleVersion = '2.1'
+}
diff --git a/gradle/wrapper/gradle-wrapper.jar b/gradle/wrapper/gradle-wrapper.jar
new file mode 100644
index 0000000..3d0dee6
--- /dev/null
+++ b/gradle/wrapper/gradle-wrapper.jar
Binary files differ
diff --git a/gradle/wrapper/gradle-wrapper.properties b/gradle/wrapper/gradle-wrapper.properties
new file mode 100644
index 0000000..dac87ec
--- /dev/null
+++ b/gradle/wrapper/gradle-wrapper.properties
@@ -0,0 +1,6 @@
+#Thu Oct 30 10:07:17 CET 2014
+distributionBase=GRADLE_USER_HOME
+distributionPath=wrapper/dists
+zipStoreBase=GRADLE_USER_HOME
+zipStorePath=wrapper/dists
+distributionUrl=https\://services.gradle.org/distributions/gradle-2.1-bin.zip
diff --git a/gradlew b/gradlew
new file mode 100755
index 0000000..91a7e26
--- /dev/null
+++ b/gradlew
@@ -0,0 +1,164 @@
+#!/usr/bin/env bash
+
+##############################################################################
+##
+##  Gradle start up script for UN*X
+##
+##############################################################################
+
+# Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
+DEFAULT_JVM_OPTS=""
+
+APP_NAME="Gradle"
+APP_BASE_NAME=`basename "$0"`
+
+# Use the maximum available, or set MAX_FD != -1 to use that value.
+MAX_FD="maximum"
+
+warn ( ) {
+    echo "$*"
+}
+
+die ( ) {
+    echo
+    echo "$*"
+    echo
+    exit 1
+}
+
+# OS specific support (must be 'true' or 'false').
+cygwin=false
+msys=false
+darwin=false
+case "`uname`" in
+  CYGWIN* )
+    cygwin=true
+    ;;
+  Darwin* )
+    darwin=true
+    ;;
+  MINGW* )
+    msys=true
+    ;;
+esac
+
+# For Cygwin, ensure paths are in UNIX format before anything is touched.
+if $cygwin ; then
+    [ -n "$JAVA_HOME" ] && JAVA_HOME=`cygpath --unix "$JAVA_HOME"`
+fi
+
+# Attempt to set APP_HOME
+# Resolve links: $0 may be a link
+PRG="$0"
+# Need this for relative symlinks.
+while [ -h "$PRG" ] ; do
+    ls=`ls -ld "$PRG"`
+    link=`expr "$ls" : '.*-> \(.*\)$'`
+    if expr "$link" : '/.*' > /dev/null; then
+        PRG="$link"
+    else
+        PRG=`dirname "$PRG"`"/$link"
+    fi
+done
+SAVED="`pwd`"
+cd "`dirname \"$PRG\"`/" >&-
+APP_HOME="`pwd -P`"
+cd "$SAVED" >&-
+
+CLASSPATH=$APP_HOME/gradle/wrapper/gradle-wrapper.jar
+
+# Determine the Java command to use to start the JVM.
+if [ -n "$JAVA_HOME" ] ; then
+    if [ -x "$JAVA_HOME/jre/sh/java" ] ; then
+        # IBM's JDK on AIX uses strange locations for the executables
+        JAVACMD="$JAVA_HOME/jre/sh/java"
+    else
+        JAVACMD="$JAVA_HOME/bin/java"
+    fi
+    if [ ! -x "$JAVACMD" ] ; then
+        die "ERROR: JAVA_HOME is set to an invalid directory: $JAVA_HOME
+
+Please set the JAVA_HOME variable in your environment to match the
+location of your Java installation."
+    fi
+else
+    JAVACMD="java"
+    which java >/dev/null 2>&1 || die "ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.
+
+Please set the JAVA_HOME variable in your environment to match the
+location of your Java installation."
+fi
+
+# Increase the maximum file descriptors if we can.
+if [ "$cygwin" = "false" -a "$darwin" = "false" ] ; then
+    MAX_FD_LIMIT=`ulimit -H -n`
+    if [ $? -eq 0 ] ; then
+        if [ "$MAX_FD" = "maximum" -o "$MAX_FD" = "max" ] ; then
+            MAX_FD="$MAX_FD_LIMIT"
+        fi
+        ulimit -n $MAX_FD
+        if [ $? -ne 0 ] ; then
+            warn "Could not set maximum file descriptor limit: $MAX_FD"
+        fi
+    else
+        warn "Could not query maximum file descriptor limit: $MAX_FD_LIMIT"
+    fi
+fi
+
+# For Darwin, add options to specify how the application appears in the dock
+if $darwin; then
+    GRADLE_OPTS="$GRADLE_OPTS \"-Xdock:name=$APP_NAME\" \"-Xdock:icon=$APP_HOME/media/gradle.icns\""
+fi
+
+# For Cygwin, switch paths to Windows format before running java
+if $cygwin ; then
+    APP_HOME=`cygpath --path --mixed "$APP_HOME"`
+    CLASSPATH=`cygpath --path --mixed "$CLASSPATH"`
+
+    # We build the pattern for arguments to be converted via cygpath
+    ROOTDIRSRAW=`find -L / -maxdepth 1 -mindepth 1 -type d 2>/dev/null`
+    SEP=""
+    for dir in $ROOTDIRSRAW ; do
+        ROOTDIRS="$ROOTDIRS$SEP$dir"
+        SEP="|"
+    done
+    OURCYGPATTERN="(^($ROOTDIRS))"
+    # Add a user-defined pattern to the cygpath arguments
+    if [ "$GRADLE_CYGPATTERN" != "" ] ; then
+        OURCYGPATTERN="$OURCYGPATTERN|($GRADLE_CYGPATTERN)"
+    fi
+    # Now convert the arguments - kludge to limit ourselves to /bin/sh
+    i=0
+    for arg in "$@" ; do
+        CHECK=`echo "$arg"|egrep -c "$OURCYGPATTERN" -`
+        CHECK2=`echo "$arg"|egrep -c "^-"`                                 ### Determine if an option
+
+        if [ $CHECK -ne 0 ] && [ $CHECK2 -eq 0 ] ; then                    ### Added a condition
+            eval `echo args$i`=`cygpath --path --ignore --mixed "$arg"`
+        else
+            eval `echo args$i`="\"$arg\""
+        fi
+        i=$((i+1))
+    done
+    case $i in
+        (0) set -- ;;
+        (1) set -- "$args0" ;;
+        (2) set -- "$args0" "$args1" ;;
+        (3) set -- "$args0" "$args1" "$args2" ;;
+        (4) set -- "$args0" "$args1" "$args2" "$args3" ;;
+        (5) set -- "$args0" "$args1" "$args2" "$args3" "$args4" ;;
+        (6) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" ;;
+        (7) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" "$args6" ;;
+        (8) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" "$args6" "$args7" ;;
+        (9) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" "$args6" "$args7" "$args8" ;;
+    esac
+fi
+
+# Split up the JVM_OPTS And GRADLE_OPTS values into an array, following the shell quoting and substitution rules
+function splitJvmOpts() {
+    JVM_OPTS=("$@")
+}
+eval splitJvmOpts $DEFAULT_JVM_OPTS $JAVA_OPTS $GRADLE_OPTS
+JVM_OPTS[${#JVM_OPTS[*]}]="-Dorg.gradle.appname=$APP_BASE_NAME"
+
+exec "$JAVACMD" "${JVM_OPTS[@]}" -classpath "$CLASSPATH" org.gradle.wrapper.GradleWrapperMain "$@"
diff --git a/gradlew.bat b/gradlew.bat
new file mode 100755
index 0000000..8a0b282
--- /dev/null
+++ b/gradlew.bat
@@ -0,0 +1,90 @@
+@if "%DEBUG%" == "" @echo off
+@rem ##########################################################################
+@rem
+@rem  Gradle startup script for Windows
+@rem
+@rem ##########################################################################
+
+@rem Set local scope for the variables with windows NT shell
+if "%OS%"=="Windows_NT" setlocal
+
+@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
+set DEFAULT_JVM_OPTS=
+
+set DIRNAME=%~dp0
+if "%DIRNAME%" == "" set DIRNAME=.
+set APP_BASE_NAME=%~n0
+set APP_HOME=%DIRNAME%
+
+@rem Find java.exe
+if defined JAVA_HOME goto findJavaFromJavaHome
+
+set JAVA_EXE=java.exe
+%JAVA_EXE% -version >NUL 2>&1
+if "%ERRORLEVEL%" == "0" goto init
+
+echo.
+echo ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.
+echo.
+echo Please set the JAVA_HOME variable in your environment to match the
+echo location of your Java installation.
+
+goto fail
+
+:findJavaFromJavaHome
+set JAVA_HOME=%JAVA_HOME:"=%
+set JAVA_EXE=%JAVA_HOME%/bin/java.exe
+
+if exist "%JAVA_EXE%" goto init
+
+echo.
+echo ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%
+echo.
+echo Please set the JAVA_HOME variable in your environment to match the
+echo location of your Java installation.
+
+goto fail
+
+:init
+@rem Get command-line arguments, handling Windowz variants
+
+if not "%OS%" == "Windows_NT" goto win9xME_args
+if "%@eval[2+2]" == "4" goto 4NT_args
+
+:win9xME_args
+@rem Slurp the command line arguments.
+set CMD_LINE_ARGS=
+set _SKIP=2
+
+:win9xME_args_slurp
+if "x%~1" == "x" goto execute
+
+set CMD_LINE_ARGS=%*
+goto execute
+
+:4NT_args
+@rem Get arguments from the 4NT Shell from JP Software
+set CMD_LINE_ARGS=%$
+
+:execute
+@rem Setup the command line
+
+set CLASSPATH=%APP_HOME%\gradle\wrapper\gradle-wrapper.jar
+
+@rem Execute Gradle
+"%JAVA_EXE%" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% "-Dorg.gradle.appname=%APP_BASE_NAME%" -classpath "%CLASSPATH%" org.gradle.wrapper.GradleWrapperMain %CMD_LINE_ARGS%
+
+:end
+@rem End local scope for the variables with windows NT shell
+if "%ERRORLEVEL%"=="0" goto mainEnd
+
+:fail
+rem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of
+rem the _cmd.exe /c_ return code!
+if  not "" == "%GRADLE_EXIT_CONSOLE%" exit 1
+exit /b 1
+
+:mainEnd
+if "%OS%"=="Windows_NT" endlocal
+
+:omega
Diff Between dba4d7589cc8c2f9fe450a6f4454c72ff9e1d76d b419522521af553ae2752fd1b609f2aa11062243diff --git a/README.md b/README.md
index ddf96be..c324be3 100644
--- a/README.md
+++ b/README.md
@@ -10,0 +11,2 @@
+*Note: Please use sites such as http://stackoverflow.com for general questions about JGit usage, not issues in this project. Issues should be used for problems with snippets and suggestions of missing snippets. Snippets from good answers on stackoverflow can then be included here, naturally.*
+
Diff Between b419522521af553ae2752fd1b609f2aa11062243 d469249e90c3bd2ebe992ea054b256e811d9e5a1diff --git a/src/main/java/org/dstadler/jgit/unfinished/TestSubmodules.java b/src/main/java/org/dstadler/jgit/unfinished/TestSubmodules.java
new file mode 100755
index 0000000..4646745
--- /dev/null
+++ b/src/main/java/org/dstadler/jgit/unfinished/TestSubmodules.java
@@ -0,0 +1,98 @@
+package org.dstadler.jgit.unfinished;
+
+/*
+   Copyright 2013, 2014 Dominik Stadler
+
+   Licensed under the Apache License, Version 2.0 (the "License");
+   you may not use this file except in compliance with the License.
+   You may obtain a copy of the License at
+
+     http://www.apache.org/licenses/LICENSE-2.0
+
+   Unless required by applicable law or agreed to in writing, software
+   distributed under the License is distributed on an "AS IS" BASIS,
+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+   See the License for the specific language governing permissions and
+   limitations under the License.
+ */
+
+import java.io.File;
+import java.io.IOException;
+
+import org.eclipse.jgit.api.Git;
+import org.eclipse.jgit.api.errors.GitAPIException;
+import org.eclipse.jgit.lib.Repository;
+import org.eclipse.jgit.storage.file.FileRepositoryBuilder;
+
+
+
+/**
+ * Simple snippet which shows how to initialize a new repository
+ * 
+ * @author dominik.stadler at gmx.at
+ */
+public class TestSubmodules {
+
+    public static void main(String[] args) throws IOException, GitAPIException {
+        File mainRepoDir = createRepository();
+        
+        Repository mainRepo = openMainRepo(mainRepoDir);
+        
+        addSubmodule(mainRepo);
+        
+        FileRepositoryBuilder builder = new FileRepositoryBuilder();
+
+        Repository subRepo = builder.setGitDir(new File("testrepo/.git"))
+          .readEnvironment() // scan environment GIT_* variables
+          .findGitDir() // scan up the file system tree
+          .build();
+
+        if(subRepo.isBare()) {
+            throw new IllegalStateException("Repository at " + subRepo.getDirectory() + " should not be bare");
+        }
+
+        System.out.println("All done!");
+    }
+
+    private static void addSubmodule(Repository mainRepo) throws GitAPIException {
+        System.out.println("Adding submodule");
+        Repository subRepoInit = new Git(mainRepo).submoduleAdd().
+                setURI("https://github.com/github/testrepo.git").
+                setPath("testrepo").
+                call();
+        if(subRepoInit.isBare()) {
+            throw new IllegalStateException("Repository at " + subRepoInit.getDirectory() + " should not be bare");
+        }
+    }
+
+    private static Repository openMainRepo(File mainRepoDir) throws IOException {
+        FileRepositoryBuilder builder = new FileRepositoryBuilder();
+
+        Repository mainRepo = builder.setGitDir(new File(mainRepoDir.getAbsolutePath(), ".git"))
+          .readEnvironment() // scan environment GIT_* variables
+          .findGitDir() // scan up the file system tree
+          .build();
+
+        if(mainRepo.isBare()) {
+            throw new IllegalStateException("Repository at " + mainRepoDir + " should not be bare");
+        }
+        return mainRepo;
+    }
+
+    private static File createRepository() throws IOException, GitAPIException {
+        File dir = File.createTempFile("gitinit", ".test");
+        dir.delete();
+
+        Git.init()
+                .setDirectory(dir)
+                .call();
+
+        Repository repository = FileRepositoryBuilder.create(new File(dir.getAbsolutePath(), ".git"));
+
+        System.out.println("Created a new repository at " + repository.getDirectory());
+
+        repository.close();
+        
+        return dir;
+    }
+}
Diff Between d469249e90c3bd2ebe992ea054b256e811d9e5a1 598b7c634d1029351b24019c796e963e7cc94a1ediff --git a/README.md b/README.md
index 74e8994..ddf96be 100644
--- a/README.md
+++ b/README.md
@@ -46 +46 @@
-* [Show diff of changes to a file between two commits](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/porcelain/ShowChangedFilesBetweenCommits.java)
+* [Show diff of changes to all files between two commits](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/porcelain/ShowChangedFilesBetweenCommits.java)
Diff Between 598b7c634d1029351b24019c796e963e7cc94a1e 17197f0c81266dbd63b9cd948be0ca3001fb801ediff --git a/README.md b/README.md
index 843bbff..74e8994 100644
--- a/README.md
+++ b/README.md
@@ -93,0 +94 @@
+* Submodules - http://www.codeaffine.com/2014/04/16/how-to-manage-git-submodules-with-jgit/
Diff Between 17197f0c81266dbd63b9cd948be0ca3001fb801e 05d18a76875716fbdbd2c200091b40caa06c713dDiff Between 05d18a76875716fbdbd2c200091b40caa06c713d 8cb70b1b134bb3a428a6bab070d46d0664917e4ediff --git a/README.md b/README.md
index a94bcc8..843bbff 100644
--- a/README.md
+++ b/README.md
@@ -46,0 +47 @@
+* [Show diff of changes to a file between two commits when the file has been renamed](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/porcelain/DiffRenamedFile.java)
Diff Between 8cb70b1b134bb3a428a6bab070d46d0664917e4e 5a10bd6ee431e362facb03cfe763b9a3d9dfd02ddiff --git a/src/main/java/org/dstadler/jgit/porcelain/DiffRenamedFile.java b/src/main/java/org/dstadler/jgit/porcelain/DiffRenamedFile.java
new file mode 100644
index 0000000..4dddf63
--- /dev/null
+++ b/src/main/java/org/dstadler/jgit/porcelain/DiffRenamedFile.java
@@ -0,0 +1,83 @@
+package org.dstadler.jgit.porcelain;
+
+import java.io.IOException;
+import java.util.List;
+
+import org.dstadler.jgit.helper.CookbookHelper;
+import org.eclipse.jgit.api.Git;
+import org.eclipse.jgit.api.errors.GitAPIException;
+import org.eclipse.jgit.diff.DiffConfig;
+import org.eclipse.jgit.diff.DiffEntry;
+import org.eclipse.jgit.diff.DiffFormatter;
+import org.eclipse.jgit.errors.IncorrectObjectTypeException;
+import org.eclipse.jgit.errors.MissingObjectException;
+import org.eclipse.jgit.lib.Config;
+import org.eclipse.jgit.lib.ObjectId;
+import org.eclipse.jgit.lib.ObjectReader;
+import org.eclipse.jgit.lib.Repository;
+import org.eclipse.jgit.revwalk.FollowFilter;
+import org.eclipse.jgit.revwalk.RevCommit;
+import org.eclipse.jgit.revwalk.RevTree;
+import org.eclipse.jgit.revwalk.RevWalk;
+import org.eclipse.jgit.treewalk.AbstractTreeIterator;
+import org.eclipse.jgit.treewalk.CanonicalTreeParser;
+
+// Simple example that shows how to diff a single file between two commits when
+// the file may have been renamed.
+public class DiffRenamedFile {
+	private static AbstractTreeIterator prepareTreeParser(Repository repository, String objectId) throws IOException,
+			MissingObjectException,
+			IncorrectObjectTypeException {
+		// from the commit we can build the tree which allows us to construct the TreeParser
+		RevWalk walk = new RevWalk(repository);
+		RevCommit commit = walk.parseCommit(ObjectId.fromString(objectId));
+		RevTree tree = walk.parseTree(commit.getTree().getId());
+
+		CanonicalTreeParser oldTreeParser = new CanonicalTreeParser();
+		ObjectReader oldReader = repository.newObjectReader();
+		try {
+			oldTreeParser.reset(oldReader, tree.getId());
+		} finally {
+			oldReader.release();
+		}
+
+		walk.dispose();
+
+		return oldTreeParser;
+	}
+
+	private static DiffEntry diffFile(Repository repo, String oldCommit,
+		String newCommit, String path) throws IOException, GitAPIException {
+		Config config = new Config();
+		config.setBoolean("diff", null, "renames", true);
+		DiffConfig diffConfig = config.get(DiffConfig.KEY);
+		List<DiffEntry> diffList = new Git(repo).diff().
+			setOldTree(prepareTreeParser(repo, oldCommit)).
+			setNewTree(prepareTreeParser(repo, newCommit)).
+			setPathFilter(FollowFilter.create(path, diffConfig)).
+			call();
+		if (diffList.size() == 0)
+			return null;
+		if (diffList.size() > 1)
+			throw new RuntimeException("invalid diff");
+		return diffList.get(0);
+	}
+
+	public static void main(String args[])
+		throws IOException, GitAPIException {
+		Repository repo = CookbookHelper.openJGitCookbookRepository();
+
+		// Diff README.md between two commits. The file is named README.md in
+		// the new commit (5a10bd6e), but was named "jgit-cookbook README.md" in
+		// the old commit (2e1d65e4).
+		DiffEntry diff = diffFile(repo,
+			"2e1d65e4cf6c5e267e109aa20fd68ae119fa5ec9",
+			"5a10bd6ee431e362facb03cfe763b9a3d9dfd02d",
+			"README.md");
+
+		// Display the diff.
+		DiffFormatter formatter = new DiffFormatter(System.out);
+		formatter.setRepository(repo);
+		formatter.format(diff);
+	}
+}
Diff Between 5a10bd6ee431e362facb03cfe763b9a3d9dfd02d 2e1d65e4cf6c5e267e109aa20fd68ae119fa5ec9diff --git a/README.md b/README.md
new file mode 100644
index 0000000..a94bcc8
--- /dev/null
+++ b/README.md
@@ -0,0 +1,123 @@
+jgit-cookbook
+=============
+[![Build Status](https://buildhive.cloudbees.com/job/centic9/job/jgit-cookbook/badge/icon)](https://buildhive.cloudbees.com/job/centic9/job/jgit-cookbook/)
+
+Provides examples and code snippets for the [JGit](http://wiki.eclipse.org/JGit/) Java Git implementation. 
+
+The JGit framework is rich and diverse, it has two layers, a low-level _api_ and a higher-level set of _porcelain_ commands. 
+
+This project tries to provide a collection of ready-to-run snippets which try to augment the existing [JavaDoc](http://download.eclipse.org/jgit/docs/latest/apidocs/) and the [User Guide](http://wiki.eclipse.org/JGit/User_Guide)
+
+#### Getting started
+
+##### Grab it
+
+    git clone git://github.com/centic9/jgit-cookbook
+
+##### Build it and create Eclipse project files
+
+	mvn dependency:sources eclipse:eclipse package
+
+#### Run it
+
+    Import the project into an Eclipse workspace and execute the snippets there.
+
+#### Currently the following snippets are available
+
+##### General Repository handling
+
+* [Open an existing repository](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/OpenRepository.java)
+* [Create a new repository](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/CreateNewRepository.java)
+
+##### Porcelain commands
+
+* [Initialize a new repository](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/porcelain/InitRepository.java)
+* [Add a new file to the index](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/porcelain/AddFile.java)
+* [Commit a file to an existing repository](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/porcelain/CommitFile.java)
+* [Commit all changes](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/porcelain/CommitAll.java)
+* [List commits (i.e. Log)](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/porcelain/ShowLog.java)
+* [List all tags in a repository](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/porcelain/ListTags.java)
+* [List all branches in a repository](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/porcelain/ListBranches.java)
+* [List all commits in a repository](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/porcelain/WalkAllCommits.java)
+* [Create and delete branches](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/porcelain/CreateAndDeleteBranch.java)
+* [Create and delete tags](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/porcelain/CreateAndDeleteTag.java)
+* [Return diff between two branches](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/porcelain/ShowBranchDiff.java)
+* [Show diff of changes to a file between two revs](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/porcelain/ShowFileDiff.java)
+* [Show diff of changes to a file between two commits](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/porcelain/ShowChangedFilesBetweenCommits.java)
+* [Show Status](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/porcelain/ShowStatus.java)
+* [Store contents of branch into a compressed file](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/porcelain/CreateArchive.java)
+* [Write contents of branch into a compressed file using a custom archive format](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/porcelain/CreateCustomFormatArchive.java)
+* [Blame, i.e. find out which commit changed specific lines in a file](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/porcelain/ShowBlame.java)
+* [Add and list Notes attached to commits](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/porcelain/AddAndListNoteOfCommit.java)
+* [List available Notes](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/porcelain/ListNotes.java)
+* [Clean all untracked files](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/porcelain/CleanUntrackedFiles.java)
+* [Create, list, apply and drop stashes](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/porcelain/CreateListApplyAndDropStash.java)
+* [Run garbage collection](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/porcelain/CollectGarbage.java)
+
+##### Commands working with remote repositories
+
+* [Clone a remote reppository into a new local directory](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/porcelain/CloneRemoteRepository.java)
+* [Iterate remote references in a repository](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/porcelain/ListRemotes.java)
+* [List remote heads/tags without a local clone](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/porcelain/ListRemoteRepository.java)
+* [Fetch from remote repositories](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/porcelain/FetchRemoteCommits.java)
+
+##### Low-level API
+
+* [Get the SHA-1 ref from a name, e.g. refs/heads/master](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/api/GetRefFromName.java)
+* [Get the commit-object from a name or a SHA-1](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/api/GetRevCommitFromObjectId.java)
+* [Get the commit-message](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/api/GetCommitMessage.java)
+* [Get the tree-object from a commit-object, name or SHA-1](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/api/GetRevTreeFromObjectId.java)
+* [Read the contents of a file/blob](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/api/ReadBlobContents.java)
+* [Get the tag-object from a name or a SHA-1](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/api/ReadTagFromName.java)
+* [Resolve complex references, e.g. HEAD^^ to a SHA-1](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/api/ResolveRef.java)
+* [Iterate over the commits on a branch](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/api/WalkRev.java)
+* [Read contents of a specific file from a specific commit](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/api/ReadFileFromCommit.java)
+* [List remotes configured for the current repository](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/api/PrintRemotes.java)
+* [Print out user information from Git](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/api/ReadUserConfig.java)
+* [Read file attributes, e.g. executeable state, file or directory, size, ...](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/api/GetFileAttributes.java)
+* [Use class BranchTrackingStatus to retrieve number of commits ahead/behind compared to remote branches](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/api/ShowBranchTrackingStatus.java)
+
+#### Missing snippets
+
+* Iterate all commits of a repository - https://gerrit.googlesource.com/plugins/branch-network/+log/refs/heads/master/src/main/java/com/googlesource/gerrit/plugins/branchnetwork/data/JGitFacade.java
+* Take some of the unit tests as example: https://github.com/eclipse/jgit/tree/master/org.eclipse.jgit.test/tst/org/eclipse/jgit/api
+* Add/Remove/Read Notes
+* SubModules: http://stackoverflow.com/questions/13426798/jgit-read-gitmodules
+* Diffing: http://stackoverflow.com/questions/12987364/how-to-diff-with-two-files-by-jgit-without-creating-repo
+* Ammend a previous commit: http://stackoverflow.com/questions/4772142/jgit-unstaging-files-removing-files-from-the-index-and-ammending-a-commit
+* Remove a file from the index: http://stackoverflow.com/questions/4803462/jgit-java-git-library-unstaging-files
+* Git repo on Amazon S3: http://stackoverflow.com/questions/8744611/git-repository-on-s3-as-origin-not-as-backup http://stackoverflow.com/questions/7031729/publish-to-s3-using-git http://www.fancybeans.com/blog/2012/08/24/how-to-use-s3-as-a-private-git-repository/
+* Doing stuff without local storage: Using org.eclipse.jgit.storage.dfs.InMemoryRepository to clone a Git repo in-memory and work from there
+* CherryPick
+* Rebase - http://stackoverflow.com/questions/22945257/jgit-how-to-squash-commits
+
+#### Sources
+
+The following sources were used to build the snippets
+
+* [JGit JavaDoc](http://download.eclipse.org/jgit/docs/latest/apidocs/)
+* [JGit User Guide](http://wiki.eclipse.org/JGit/User_Guide)
+* [JGit related questions on Stackoverflow](http://stackoverflow.com/questions/tagged/jgit)
+* [AlBlue's Blog: Embedding JGit](http://alblue.bandlem.com/2013/11/embedding-jgit.html)
+* [JGit main page](http://www.eclipse.org/jgit/)
+
+#### Contribute
+
+Please note that the list of snippets is not yet complete, probably never will. If you are missing things or have suggestions how to improve or add snippets, please either send pull requests or create [issues](https://github.com/centic9/jgit-cookbook/issues).
+
+#### Licensing
+
+   Copyright 2013, 2014 Dominik Stadler
+
+   Licensed under the Apache License, Version 2.0 (the "License");
+   you may not use this file except in compliance with the License.
+   You may obtain a copy of the License at
+
+     http://www.apache.org/licenses/LICENSE-2.0
+
+   Unless required by applicable law or agreed to in writing, software
+   distributed under the License is distributed on an "AS IS" BASIS,
+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+   See the License for the specific language governing permissions and
+   limitations under the License.
+some more text
diff --git a/jgit-cookbook README.md b/jgit-cookbook README.md
deleted file mode 100644
index 219d61f..0000000
--- a/jgit-cookbook README.md
+++ /dev/null
@@ -1,125 +0,0 @@
-jgit-cookbook
-=============
-[![Build Status](https://buildhive.cloudbees.com/job/centic9/job/jgit-cookbook/badge/icon)](https://buildhive.cloudbees.com/job/centic9/job/jgit-cookbook/)
-
-Provides examples and code snippets for the [JGit](http://wiki.eclipse.org/JGit/) Java Git implementation. 
-
-The JGit framework is rich and diverse, it has two layers, a low-level _api_ and a higher-level set of _porcelain_ commands. 
-
-This project tries to provide a collection of ready-to-run snippets which try to augment the existing [JavaDoc](http://download.eclipse.org/jgit/docs/latest/apidocs/) and the [User Guide](http://wiki.eclipse.org/JGit/User_Guide)
-
-#### Getting started
-
-##### Grab it
-
-    git clone git://github.com/centic9/jgit-cookbook
-
-##### Build it and create Eclipse project files
-
-	mvn dependency:sources eclipse:eclipse package
-
-#### Run it
-
-    Import the project into an Eclipse workspace and execute the snippets there.
-
-#### Currently the following snippets are available
-
-##### General Repository handling
-
-* [Open an existing repository](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/OpenRepository.java)
-* [Create a new repository](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/CreateNewRepository.java)
-
-##### Porcelain commands
-
-* [Initialize a new repository](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/porcelain/InitRepository.java)
-* [Add a new file to the index](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/porcelain/AddFile.java)
-* [Commit a file to an existing repository](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/porcelain/CommitFile.java)
-* [Commit all changes](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/porcelain/CommitAll.java)
-* [List commits (i.e. Log)](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/porcelain/ShowLog.java)
-* [List all tags in a repository](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/porcelain/ListTags.java)
-* [List all branches in a repository](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/porcelain/ListBranches.java)
-* [List all commits in a repository](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/porcelain/WalkAllCommits.java)
-* [Create and delete branches](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/porcelain/CreateAndDeleteBranch.java)
-* [Create and delete tags](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/porcelain/CreateAndDeleteTag.java)
-* [Return diff between two branches](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/porcelain/ShowBranchDiff.java)
-* [Show diff of changes to a file between two revs](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/porcelain/ShowFileDiff.java)
-* [Show diff of changes to a file between two commits](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/porcelain/ShowChangedFilesBetweenCommits.java)
-* [Show Status](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/porcelain/ShowStatus.java)
-* [Store contents of branch into a compressed file](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/porcelain/CreateArchive.java)
-* [Write contents of branch into a compressed file using a custom archive format](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/porcelain/CreateCustomFormatArchive.java)
-* [Blame, i.e. find out which commit changed specific lines in a file](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/porcelain/ShowBlame.java)
-* [Add and list Notes attached to commits](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/porcelain/AddAndListNoteOfCommit.java)
-* [List available Notes](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/porcelain/ListNotes.java)
-* [Clean all untracked files](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/porcelain/CleanUntrackedFiles.java)
-* [Create, list, apply and drop stashes](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/porcelain/CreateListApplyAndDropStash.java)
-* [Run garbage collection](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/porcelain/CollectGarbage.java)
-
-##### Commands working with remote repositories
-
-* [Clone a remote reppository into a new local directory](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/porcelain/CloneRemoteRepository.java)
-* [Iterate remote references in a repository](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/porcelain/ListRemotes.java)
-* [List remote heads/tags without a local clone](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/porcelain/ListRemoteRepository.java)
-* [Fetch from remote repositories](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/porcelain/FetchRemoteCommits.java)
-
-##### Low-level API
-
-* [Get the SHA-1 ref from a name, e.g. refs/heads/master](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/api/GetRefFromName.java)
-* [Get the commit-object from a name or a SHA-1](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/api/GetRevCommitFromObjectId.java)
-* [Get the commit-message](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/api/GetCommitMessage.java)
-* [Get the tree-object from a commit-object, name or SHA-1](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/api/GetRevTreeFromObjectId.java)
-* [Read the contents of a file/blob](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/api/ReadBlobContents.java)
-* [Get the tag-object from a name or a SHA-1](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/api/ReadTagFromName.java)
-* [Resolve complex references, e.g. HEAD^^ to a SHA-1](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/api/ResolveRef.java)
-* [Iterate over the commits on a branch](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/api/WalkRev.java)
-* [Read contents of a specific file from a specific commit](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/api/ReadFileFromCommit.java)
-* [List remotes configured for the current repository](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/api/PrintRemotes.java)
-* [Print out user information from Git](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/api/ReadUserConfig.java)
-* [Read file attributes, e.g. executeable state, file or directory, size, ...](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/api/GetFileAttributes.java)
-* [Use class BranchTrackingStatus to retrieve number of commits ahead/behind compared to remote branches](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/api/ShowBranchTrackingStatus.java)
-
-#### Missing snippets
-
-* Iterate all commits of a repository - https://gerrit.googlesource.com/plugins/branch-network/+log/refs/heads/master/src/main/java/com/googlesource/gerrit/plugins/branchnetwork/data/JGitFacade.java
-* Take some of the unit tests as example: https://github.com/eclipse/jgit/tree/master/org.eclipse.jgit.test/tst/org/eclipse/jgit/api
-* Add/Remove/Read Notes
-* SubModules: http://stackoverflow.com/questions/13426798/jgit-read-gitmodules
-* Diffing: http://stackoverflow.com/questions/12987364/how-to-diff-with-two-files-by-jgit-without-creating-repo
-* Ammend a previous commit: http://stackoverflow.com/questions/4772142/jgit-unstaging-files-removing-files-from-the-index-and-ammending-a-commit
-* Remove a file from the index: http://stackoverflow.com/questions/4803462/jgit-java-git-library-unstaging-files
-* Git repo on Amazon S3: http://stackoverflow.com/questions/8744611/git-repository-on-s3-as-origin-not-as-backup http://stackoverflow.com/questions/7031729/publish-to-s3-using-git http://www.fancybeans.com/blog/2012/08/24/how-to-use-s3-as-a-private-git-repository/
-* Doing stuff without local storage: Using org.eclipse.jgit.storage.dfs.InMemoryRepository to clone a Git repo in-memory and work from there
-* CherryPick
-* Rebase - http://stackoverflow.com/questions/22945257/jgit-how-to-squash-commits
-
-#### Sources
-
-The following sources were used to build the snippets
-
-* [JGit JavaDoc](http://download.eclipse.org/jgit/docs/latest/apidocs/)
-* [JGit User Guide](http://wiki.eclipse.org/JGit/User_Guide)
-* [JGit related questions on Stackoverflow](http://stackoverflow.com/questions/tagged/jgit)
-* [AlBlue's Blog: Embedding JGit](http://alblue.bandlem.com/2013/11/embedding-jgit.html)
-* [JGit main page](http://www.eclipse.org/jgit/)
-
-#### Contribute
-
-Please note that the list of snippets is not yet complete, probably never will. If you are missing things or have suggestions how to improve or add snippets, please either send pull requests or create [issues](https://github.com/centic9/jgit-cookbook/issues).
-
-Added line
-
-#### Licensing
-
-   Copyright 2013, 2014 Dominik Stadler
-
-   Licensed under the Apache License, Version 2.0 (the "License");
-   you may not use this file except in compliance with the License.
-   You may obtain a copy of the License at
-
-     http://www.apache.org/licenses/LICENSE-2.0
-
-   Unless required by applicable law or agreed to in writing, software
-   distributed under the License is distributed on an "AS IS" BASIS,
-   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-   See the License for the specific language governing permissions and
-   limitations under the License.
-some more text
Diff Between 2e1d65e4cf6c5e267e109aa20fd68ae119fa5ec9 a837a9c5563ddb01ebd121f85d9d64cf3c1823cbdiff --git a/README.md b/README.md
deleted file mode 100644
index a94bcc8..0000000
--- a/README.md
+++ /dev/null
@@ -1,123 +0,0 @@
-jgit-cookbook
-=============
-[![Build Status](https://buildhive.cloudbees.com/job/centic9/job/jgit-cookbook/badge/icon)](https://buildhive.cloudbees.com/job/centic9/job/jgit-cookbook/)
-
-Provides examples and code snippets for the [JGit](http://wiki.eclipse.org/JGit/) Java Git implementation. 
-
-The JGit framework is rich and diverse, it has two layers, a low-level _api_ and a higher-level set of _porcelain_ commands. 
-
-This project tries to provide a collection of ready-to-run snippets which try to augment the existing [JavaDoc](http://download.eclipse.org/jgit/docs/latest/apidocs/) and the [User Guide](http://wiki.eclipse.org/JGit/User_Guide)
-
-#### Getting started
-
-##### Grab it
-
-    git clone git://github.com/centic9/jgit-cookbook
-
-##### Build it and create Eclipse project files
-
-	mvn dependency:sources eclipse:eclipse package
-
-#### Run it
-
-    Import the project into an Eclipse workspace and execute the snippets there.
-
-#### Currently the following snippets are available
-
-##### General Repository handling
-
-* [Open an existing repository](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/OpenRepository.java)
-* [Create a new repository](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/CreateNewRepository.java)
-
-##### Porcelain commands
-
-* [Initialize a new repository](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/porcelain/InitRepository.java)
-* [Add a new file to the index](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/porcelain/AddFile.java)
-* [Commit a file to an existing repository](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/porcelain/CommitFile.java)
-* [Commit all changes](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/porcelain/CommitAll.java)
-* [List commits (i.e. Log)](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/porcelain/ShowLog.java)
-* [List all tags in a repository](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/porcelain/ListTags.java)
-* [List all branches in a repository](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/porcelain/ListBranches.java)
-* [List all commits in a repository](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/porcelain/WalkAllCommits.java)
-* [Create and delete branches](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/porcelain/CreateAndDeleteBranch.java)
-* [Create and delete tags](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/porcelain/CreateAndDeleteTag.java)
-* [Return diff between two branches](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/porcelain/ShowBranchDiff.java)
-* [Show diff of changes to a file between two revs](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/porcelain/ShowFileDiff.java)
-* [Show diff of changes to a file between two commits](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/porcelain/ShowChangedFilesBetweenCommits.java)
-* [Show Status](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/porcelain/ShowStatus.java)
-* [Store contents of branch into a compressed file](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/porcelain/CreateArchive.java)
-* [Write contents of branch into a compressed file using a custom archive format](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/porcelain/CreateCustomFormatArchive.java)
-* [Blame, i.e. find out which commit changed specific lines in a file](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/porcelain/ShowBlame.java)
-* [Add and list Notes attached to commits](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/porcelain/AddAndListNoteOfCommit.java)
-* [List available Notes](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/porcelain/ListNotes.java)
-* [Clean all untracked files](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/porcelain/CleanUntrackedFiles.java)
-* [Create, list, apply and drop stashes](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/porcelain/CreateListApplyAndDropStash.java)
-* [Run garbage collection](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/porcelain/CollectGarbage.java)
-
-##### Commands working with remote repositories
-
-* [Clone a remote reppository into a new local directory](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/porcelain/CloneRemoteRepository.java)
-* [Iterate remote references in a repository](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/porcelain/ListRemotes.java)
-* [List remote heads/tags without a local clone](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/porcelain/ListRemoteRepository.java)
-* [Fetch from remote repositories](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/porcelain/FetchRemoteCommits.java)
-
-##### Low-level API
-
-* [Get the SHA-1 ref from a name, e.g. refs/heads/master](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/api/GetRefFromName.java)
-* [Get the commit-object from a name or a SHA-1](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/api/GetRevCommitFromObjectId.java)
-* [Get the commit-message](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/api/GetCommitMessage.java)
-* [Get the tree-object from a commit-object, name or SHA-1](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/api/GetRevTreeFromObjectId.java)
-* [Read the contents of a file/blob](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/api/ReadBlobContents.java)
-* [Get the tag-object from a name or a SHA-1](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/api/ReadTagFromName.java)
-* [Resolve complex references, e.g. HEAD^^ to a SHA-1](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/api/ResolveRef.java)
-* [Iterate over the commits on a branch](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/api/WalkRev.java)
-* [Read contents of a specific file from a specific commit](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/api/ReadFileFromCommit.java)
-* [List remotes configured for the current repository](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/api/PrintRemotes.java)
-* [Print out user information from Git](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/api/ReadUserConfig.java)
-* [Read file attributes, e.g. executeable state, file or directory, size, ...](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/api/GetFileAttributes.java)
-* [Use class BranchTrackingStatus to retrieve number of commits ahead/behind compared to remote branches](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/api/ShowBranchTrackingStatus.java)
-
-#### Missing snippets
-
-* Iterate all commits of a repository - https://gerrit.googlesource.com/plugins/branch-network/+log/refs/heads/master/src/main/java/com/googlesource/gerrit/plugins/branchnetwork/data/JGitFacade.java
-* Take some of the unit tests as example: https://github.com/eclipse/jgit/tree/master/org.eclipse.jgit.test/tst/org/eclipse/jgit/api
-* Add/Remove/Read Notes
-* SubModules: http://stackoverflow.com/questions/13426798/jgit-read-gitmodules
-* Diffing: http://stackoverflow.com/questions/12987364/how-to-diff-with-two-files-by-jgit-without-creating-repo
-* Ammend a previous commit: http://stackoverflow.com/questions/4772142/jgit-unstaging-files-removing-files-from-the-index-and-ammending-a-commit
-* Remove a file from the index: http://stackoverflow.com/questions/4803462/jgit-java-git-library-unstaging-files
-* Git repo on Amazon S3: http://stackoverflow.com/questions/8744611/git-repository-on-s3-as-origin-not-as-backup http://stackoverflow.com/questions/7031729/publish-to-s3-using-git http://www.fancybeans.com/blog/2012/08/24/how-to-use-s3-as-a-private-git-repository/
-* Doing stuff without local storage: Using org.eclipse.jgit.storage.dfs.InMemoryRepository to clone a Git repo in-memory and work from there
-* CherryPick
-* Rebase - http://stackoverflow.com/questions/22945257/jgit-how-to-squash-commits
-
-#### Sources
-
-The following sources were used to build the snippets
-
-* [JGit JavaDoc](http://download.eclipse.org/jgit/docs/latest/apidocs/)
-* [JGit User Guide](http://wiki.eclipse.org/JGit/User_Guide)
-* [JGit related questions on Stackoverflow](http://stackoverflow.com/questions/tagged/jgit)
-* [AlBlue's Blog: Embedding JGit](http://alblue.bandlem.com/2013/11/embedding-jgit.html)
-* [JGit main page](http://www.eclipse.org/jgit/)
-
-#### Contribute
-
-Please note that the list of snippets is not yet complete, probably never will. If you are missing things or have suggestions how to improve or add snippets, please either send pull requests or create [issues](https://github.com/centic9/jgit-cookbook/issues).
-
-#### Licensing
-
-   Copyright 2013, 2014 Dominik Stadler
-
-   Licensed under the Apache License, Version 2.0 (the "License");
-   you may not use this file except in compliance with the License.
-   You may obtain a copy of the License at
-
-     http://www.apache.org/licenses/LICENSE-2.0
-
-   Unless required by applicable law or agreed to in writing, software
-   distributed under the License is distributed on an "AS IS" BASIS,
-   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-   See the License for the specific language governing permissions and
-   limitations under the License.
-some more text
diff --git a/jgit-cookbook README.md b/jgit-cookbook README.md
new file mode 100644
index 0000000..219d61f
--- /dev/null
+++ b/jgit-cookbook README.md
@@ -0,0 +1,125 @@
+jgit-cookbook
+=============
+[![Build Status](https://buildhive.cloudbees.com/job/centic9/job/jgit-cookbook/badge/icon)](https://buildhive.cloudbees.com/job/centic9/job/jgit-cookbook/)
+
+Provides examples and code snippets for the [JGit](http://wiki.eclipse.org/JGit/) Java Git implementation. 
+
+The JGit framework is rich and diverse, it has two layers, a low-level _api_ and a higher-level set of _porcelain_ commands. 
+
+This project tries to provide a collection of ready-to-run snippets which try to augment the existing [JavaDoc](http://download.eclipse.org/jgit/docs/latest/apidocs/) and the [User Guide](http://wiki.eclipse.org/JGit/User_Guide)
+
+#### Getting started
+
+##### Grab it
+
+    git clone git://github.com/centic9/jgit-cookbook
+
+##### Build it and create Eclipse project files
+
+	mvn dependency:sources eclipse:eclipse package
+
+#### Run it
+
+    Import the project into an Eclipse workspace and execute the snippets there.
+
+#### Currently the following snippets are available
+
+##### General Repository handling
+
+* [Open an existing repository](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/OpenRepository.java)
+* [Create a new repository](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/CreateNewRepository.java)
+
+##### Porcelain commands
+
+* [Initialize a new repository](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/porcelain/InitRepository.java)
+* [Add a new file to the index](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/porcelain/AddFile.java)
+* [Commit a file to an existing repository](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/porcelain/CommitFile.java)
+* [Commit all changes](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/porcelain/CommitAll.java)
+* [List commits (i.e. Log)](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/porcelain/ShowLog.java)
+* [List all tags in a repository](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/porcelain/ListTags.java)
+* [List all branches in a repository](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/porcelain/ListBranches.java)
+* [List all commits in a repository](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/porcelain/WalkAllCommits.java)
+* [Create and delete branches](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/porcelain/CreateAndDeleteBranch.java)
+* [Create and delete tags](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/porcelain/CreateAndDeleteTag.java)
+* [Return diff between two branches](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/porcelain/ShowBranchDiff.java)
+* [Show diff of changes to a file between two revs](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/porcelain/ShowFileDiff.java)
+* [Show diff of changes to a file between two commits](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/porcelain/ShowChangedFilesBetweenCommits.java)
+* [Show Status](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/porcelain/ShowStatus.java)
+* [Store contents of branch into a compressed file](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/porcelain/CreateArchive.java)
+* [Write contents of branch into a compressed file using a custom archive format](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/porcelain/CreateCustomFormatArchive.java)
+* [Blame, i.e. find out which commit changed specific lines in a file](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/porcelain/ShowBlame.java)
+* [Add and list Notes attached to commits](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/porcelain/AddAndListNoteOfCommit.java)
+* [List available Notes](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/porcelain/ListNotes.java)
+* [Clean all untracked files](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/porcelain/CleanUntrackedFiles.java)
+* [Create, list, apply and drop stashes](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/porcelain/CreateListApplyAndDropStash.java)
+* [Run garbage collection](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/porcelain/CollectGarbage.java)
+
+##### Commands working with remote repositories
+
+* [Clone a remote reppository into a new local directory](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/porcelain/CloneRemoteRepository.java)
+* [Iterate remote references in a repository](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/porcelain/ListRemotes.java)
+* [List remote heads/tags without a local clone](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/porcelain/ListRemoteRepository.java)
+* [Fetch from remote repositories](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/porcelain/FetchRemoteCommits.java)
+
+##### Low-level API
+
+* [Get the SHA-1 ref from a name, e.g. refs/heads/master](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/api/GetRefFromName.java)
+* [Get the commit-object from a name or a SHA-1](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/api/GetRevCommitFromObjectId.java)
+* [Get the commit-message](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/api/GetCommitMessage.java)
+* [Get the tree-object from a commit-object, name or SHA-1](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/api/GetRevTreeFromObjectId.java)
+* [Read the contents of a file/blob](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/api/ReadBlobContents.java)
+* [Get the tag-object from a name or a SHA-1](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/api/ReadTagFromName.java)
+* [Resolve complex references, e.g. HEAD^^ to a SHA-1](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/api/ResolveRef.java)
+* [Iterate over the commits on a branch](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/api/WalkRev.java)
+* [Read contents of a specific file from a specific commit](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/api/ReadFileFromCommit.java)
+* [List remotes configured for the current repository](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/api/PrintRemotes.java)
+* [Print out user information from Git](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/api/ReadUserConfig.java)
+* [Read file attributes, e.g. executeable state, file or directory, size, ...](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/api/GetFileAttributes.java)
+* [Use class BranchTrackingStatus to retrieve number of commits ahead/behind compared to remote branches](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/api/ShowBranchTrackingStatus.java)
+
+#### Missing snippets
+
+* Iterate all commits of a repository - https://gerrit.googlesource.com/plugins/branch-network/+log/refs/heads/master/src/main/java/com/googlesource/gerrit/plugins/branchnetwork/data/JGitFacade.java
+* Take some of the unit tests as example: https://github.com/eclipse/jgit/tree/master/org.eclipse.jgit.test/tst/org/eclipse/jgit/api
+* Add/Remove/Read Notes
+* SubModules: http://stackoverflow.com/questions/13426798/jgit-read-gitmodules
+* Diffing: http://stackoverflow.com/questions/12987364/how-to-diff-with-two-files-by-jgit-without-creating-repo
+* Ammend a previous commit: http://stackoverflow.com/questions/4772142/jgit-unstaging-files-removing-files-from-the-index-and-ammending-a-commit
+* Remove a file from the index: http://stackoverflow.com/questions/4803462/jgit-java-git-library-unstaging-files
+* Git repo on Amazon S3: http://stackoverflow.com/questions/8744611/git-repository-on-s3-as-origin-not-as-backup http://stackoverflow.com/questions/7031729/publish-to-s3-using-git http://www.fancybeans.com/blog/2012/08/24/how-to-use-s3-as-a-private-git-repository/
+* Doing stuff without local storage: Using org.eclipse.jgit.storage.dfs.InMemoryRepository to clone a Git repo in-memory and work from there
+* CherryPick
+* Rebase - http://stackoverflow.com/questions/22945257/jgit-how-to-squash-commits
+
+#### Sources
+
+The following sources were used to build the snippets
+
+* [JGit JavaDoc](http://download.eclipse.org/jgit/docs/latest/apidocs/)
+* [JGit User Guide](http://wiki.eclipse.org/JGit/User_Guide)
+* [JGit related questions on Stackoverflow](http://stackoverflow.com/questions/tagged/jgit)
+* [AlBlue's Blog: Embedding JGit](http://alblue.bandlem.com/2013/11/embedding-jgit.html)
+* [JGit main page](http://www.eclipse.org/jgit/)
+
+#### Contribute
+
+Please note that the list of snippets is not yet complete, probably never will. If you are missing things or have suggestions how to improve or add snippets, please either send pull requests or create [issues](https://github.com/centic9/jgit-cookbook/issues).
+
+Added line
+
+#### Licensing
+
+   Copyright 2013, 2014 Dominik Stadler
+
+   Licensed under the Apache License, Version 2.0 (the "License");
+   you may not use this file except in compliance with the License.
+   You may obtain a copy of the License at
+
+     http://www.apache.org/licenses/LICENSE-2.0
+
+   Unless required by applicable law or agreed to in writing, software
+   distributed under the License is distributed on an "AS IS" BASIS,
+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+   See the License for the specific language governing permissions and
+   limitations under the License.
+some more text
Diff Between a837a9c5563ddb01ebd121f85d9d64cf3c1823cb 2a43999b2a3976676662ef6b9bed77e89c213d03diff --git a/src/main/java/org/dstadler/jgit/porcelain/CloneRemoteRepository.java b/src/main/java/org/dstadler/jgit/porcelain/CloneRemoteRepository.java
index 3426d57..89e5aac 100644
--- a/src/main/java/org/dstadler/jgit/porcelain/CloneRemoteRepository.java
+++ b/src/main/java/org/dstadler/jgit/porcelain/CloneRemoteRepository.java
@@ -26,2 +25,0 @@
-import org.eclipse.jgit.lib.Repository;
-import org.eclipse.jgit.storage.file.FileRepositoryBuilder;
@@ -33 +31 @@
- * 
+ *
@@ -47 +45 @@
-        Git.cloneRepository()
+        Git result = Git.cloneRepository()
@@ -52,10 +50,6 @@
-        // now open the created repository
-        FileRepositoryBuilder builder = new FileRepositoryBuilder();
-        Repository repository = builder.setGitDir(localPath)
-                .readEnvironment() // scan environment GIT_* variables
-                .findGitDir() // scan up the file system tree
-                .build();
-
-        System.out.println("Having repository: " + repository.getDirectory());
-
-        repository.close();
+        try {
+	        // Note: the call() returns an opened repository already which needs to be closed to avoid file handle leaks!
+	        System.out.println("Having repository: " + result.getRepository().getDirectory());
+        } finally {
+        	result.close();
+        }
diff --git a/src/main/java/org/dstadler/jgit/unfinished/PullFromRemoteRepository.java b/src/main/java/org/dstadler/jgit/unfinished/PullFromRemoteRepository.java
index 5652bc7..2f2f187 100644
--- a/src/main/java/org/dstadler/jgit/unfinished/PullFromRemoteRepository.java
+++ b/src/main/java/org/dstadler/jgit/unfinished/PullFromRemoteRepository.java
@@ -26,2 +25,0 @@
-import org.eclipse.jgit.lib.Repository;
-import org.eclipse.jgit.storage.file.FileRepositoryBuilder;
@@ -33 +31 @@
- * 
+ *
@@ -47 +45 @@
-        Git.cloneRepository()
+        Git result = Git.cloneRepository()
@@ -52,6 +50,6 @@
-        // now open the created repository
-        FileRepositoryBuilder builder = new FileRepositoryBuilder();
-        Repository repository = builder.setGitDir(localPath)
-                .readEnvironment() // scan environment GIT_* variables
-                .findGitDir() // scan up the file system tree
-                .build();
+        try {
+	        // Note: the call() returns an opened repository already which needs to be closed to avoid file handle leaks!
+	        System.out.println("Having repository: " + result.getRepository().getDirectory());
+	        Git git = new Git(result.getRepository());
+	        git.pull()
+	        .call();
@@ -59,7 +57,4 @@
-        Git git = new Git(repository);
-        git.pull()
-                .call();
-
-        System.out.println("Pulled from remote repository to local repository at " + repository.getDirectory());
-
-        repository.close();
+	        System.out.println("Pulled from remote repository to local repository at " + result.getRepository().getDirectory());
+        } finally {
+        	result.close();
+        }
diff --git a/src/main/java/org/dstadler/jgit/unfinished/PullRemoteRepository.java b/src/main/java/org/dstadler/jgit/unfinished/PullRemoteRepository.java
index ac4d038..35669be 100755
--- a/src/main/java/org/dstadler/jgit/unfinished/PullRemoteRepository.java
+++ b/src/main/java/org/dstadler/jgit/unfinished/PullRemoteRepository.java
@@ -29 +28,0 @@
-import org.eclipse.jgit.storage.file.FileRepositoryBuilder;
@@ -35 +34 @@
- * 
+ *
@@ -66 +65 @@
-        Git.cloneRepository()
+        Git result = Git.cloneRepository()
@@ -71,7 +70,2 @@
-        // now open the created repository
-        FileRepositoryBuilder builder = new FileRepositoryBuilder();
-        Repository repository = builder.setGitDir(localPath)
-                .readEnvironment() // scan environment GIT_* variables
-                .findGitDir() // scan up the file system tree
-                .build();
-        return repository;
+        // Note: the call() returns an opened repository already which needs to be closed to avoid file handle leaks!
+        return result.getRepository();
diff --git a/src/main/java/org/dstadler/jgit/unfinished/PushToRemoteRepository.java b/src/main/java/org/dstadler/jgit/unfinished/PushToRemoteRepository.java
index 37e7e46..39e644c 100644
--- a/src/main/java/org/dstadler/jgit/unfinished/PushToRemoteRepository.java
+++ b/src/main/java/org/dstadler/jgit/unfinished/PushToRemoteRepository.java
@@ -33 +33 @@
- * 
+ *
@@ -47 +47 @@
-        Git.cloneRepository()
+        Git result = Git.cloneRepository()
@@ -58 +58 @@
-        Git.cloneRepository()
+        Git result2 = Git.cloneRepository()
@@ -76,0 +77,3 @@
+
+        result.close();
+        result2.close();
diff --git a/src/main/java/org/dstadler/jgit/unfinished/TrackMaster.java b/src/main/java/org/dstadler/jgit/unfinished/TrackMaster.java
index fd22f63..8a61cea 100644
--- a/src/main/java/org/dstadler/jgit/unfinished/TrackMaster.java
+++ b/src/main/java/org/dstadler/jgit/unfinished/TrackMaster.java
@@ -33 +33 @@
- * 
+ *
@@ -47 +47 @@
-        Git.cloneRepository()
+        Git result = Git.cloneRepository()
@@ -71,0 +72,2 @@
+
+        result.close();
Diff Between 2a43999b2a3976676662ef6b9bed77e89c213d03 8b7ae6f0a3300662b094585d0c9016c9d7e09fe4diff --git a/README.md b/README.md
index d0bdfe5..a94bcc8 100644
--- a/README.md
+++ b/README.md
@@ -36,0 +37 @@
+* [Commit all changes](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/porcelain/CommitAll.java)
diff --git a/src/main/java/org/dstadler/jgit/porcelain/CommitAll.java b/src/main/java/org/dstadler/jgit/porcelain/CommitAll.java
new file mode 100755
index 0000000..7c84129
--- /dev/null
+++ b/src/main/java/org/dstadler/jgit/porcelain/CommitAll.java
@@ -0,0 +1,39 @@
+package org.dstadler.jgit.porcelain;
+
+import java.io.File;
+import java.io.IOException;
+
+import org.dstadler.jgit.helper.CookbookHelper;
+import org.eclipse.jgit.api.Git;
+import org.eclipse.jgit.api.errors.GitAPIException;
+import org.eclipse.jgit.lib.Repository;
+
+
+
+/**
+ * Simple snippet which shows how to commit all files
+ *
+ * @author dominik.stadler@gmx.at
+ */
+public class CommitAll {
+
+    public static void main(String[] args) throws IOException, GitAPIException {
+        // prepare a new test-repository
+        Repository repository = CookbookHelper.createNewRepository();
+        Git git = new Git(repository);
+
+        // create the file
+        File myfile = new File(repository.getDirectory().getParent(), "testfile");
+        myfile.createNewFile();
+
+        // and then commit the changes
+        git.commit()
+        		.setAll(true)
+                .setMessage("Commit all")
+                .call();
+
+        System.out.println("Committed all changes to repository at " + repository.getDirectory());
+
+        repository.close();
+    }
+}
Diff Between 8b7ae6f0a3300662b094585d0c9016c9d7e09fe4 de5592a419bbfede6043bf5ead73ef72bb00c6c7diff --git a/README.md b/README.md
index f801167..d0bdfe5 100644
--- a/README.md
+++ b/README.md
@@ -44,0 +45 @@
+* [Show diff of changes to a file between two commits](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/porcelain/ShowChangedFilesBetweenCommits.java)
diff --git a/src/main/java/org/dstadler/jgit/porcelain/ShowChangedFilesBetweenCommits.java b/src/main/java/org/dstadler/jgit/porcelain/ShowChangedFilesBetweenCommits.java
new file mode 100755
index 0000000..4c3d19f
--- /dev/null
+++ b/src/main/java/org/dstadler/jgit/porcelain/ShowChangedFilesBetweenCommits.java
@@ -0,0 +1,68 @@
+package org.dstadler.jgit.porcelain;
+
+/*
+   Copyright 2013, 2014 Dominik Stadler
+
+   Licensed under the Apache License, Version 2.0 (the "License");
+   you may not use this file except in compliance with the License.
+   You may obtain a copy of the License at
+
+     http://www.apache.org/licenses/LICENSE-2.0
+
+   Unless required by applicable law or agreed to in writing, software
+   distributed under the License is distributed on an "AS IS" BASIS,
+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+   See the License for the specific language governing permissions and
+   limitations under the License.
+ */
+
+import java.io.IOException;
+import java.util.List;
+
+import org.dstadler.jgit.helper.CookbookHelper;
+import org.eclipse.jgit.api.Git;
+import org.eclipse.jgit.api.errors.GitAPIException;
+import org.eclipse.jgit.diff.DiffEntry;
+import org.eclipse.jgit.lib.ObjectId;
+import org.eclipse.jgit.lib.ObjectReader;
+import org.eclipse.jgit.lib.Repository;
+import org.eclipse.jgit.treewalk.CanonicalTreeParser;
+
+
+
+/**
+ * Snippet which shows how to show diffs between two commits.
+ *
+ * @author dominik.stadler at gmx.at
+ */
+public class ShowChangedFilesBetweenCommits {
+
+    public static void main(String[] args) throws IOException, GitAPIException {
+        Repository repository = CookbookHelper.openJGitCookbookRepository();
+
+        // The {tree} will return the underlying tree-id instead of the commit-id itself!
+        ObjectId oldHead = repository.resolve("HEAD^^^^{tree}");
+        ObjectId head = repository.resolve("HEAD^{tree}");
+
+        System.out.println("Printing diff between tree: " + oldHead + " and " + head);
+
+        // prepare the two iterators to compute the diff between
+		ObjectReader reader = repository.newObjectReader();
+		CanonicalTreeParser oldTreeIter = new CanonicalTreeParser();
+		oldTreeIter.reset(reader, oldHead);
+		CanonicalTreeParser newTreeIter = new CanonicalTreeParser();
+		newTreeIter.reset(reader, head);
+
+		// finally get the list of changed files
+		List<DiffEntry> diffs= new Git(repository).diff()
+		                    .setNewTree(newTreeIter)
+		                    .setOldTree(oldTreeIter)
+		                    .call();
+        for (DiffEntry entry : diffs) {
+            System.out.println("Entry: " + entry);
+        }
+        System.out.println("Done");
+
+        repository.close();
+    }
+}
Diff Between de5592a419bbfede6043bf5ead73ef72bb00c6c7 ffff2fdfe20373480a06ca377ffec98a0eafe987diff --git a/src/main/java/org/dstadler/jgit/porcelain/ShowLog.java b/src/main/java/org/dstadler/jgit/porcelain/ShowLog.java
index 0ec705e..8dc582d 100755
--- a/src/main/java/org/dstadler/jgit/porcelain/ShowLog.java
+++ b/src/main/java/org/dstadler/jgit/porcelain/ShowLog.java
@@ -31 +31 @@
- * 
+ *
@@ -48 +48,11 @@
-        
+
+        logs = new Git(repository).log()
+                .add(repository.resolve("remotes/origin/testbranch"))
+                .call();
+        count = 0;
+        for (RevCommit rev : logs) {
+            System.out.println("Commit: " + rev /* + ", name: " + rev.getName() + ", id: " + rev.getId().getName() */);
+            count++;
+        }
+        System.out.println("Had " + count + " commits overall on test-branch");
+
@@ -58 +68 @@
-        
+
Diff Between ffff2fdfe20373480a06ca377ffec98a0eafe987 98922c08ddca128be2f0d8b7bba5a60296b06365diff --git a/src/main/java/org/dstadler/jgit/OpenRepository.java b/src/main/java/org/dstadler/jgit/OpenRepository.java
index 3f00bd7..3c7c1b9 100644
--- a/src/main/java/org/dstadler/jgit/OpenRepository.java
+++ b/src/main/java/org/dstadler/jgit/OpenRepository.java
@@ -21,0 +22,4 @@
+import org.dstadler.jgit.helper.CookbookHelper;
+import org.eclipse.jgit.api.Git;
+import org.eclipse.jgit.api.errors.GitAPIException;
+import org.eclipse.jgit.lib.Ref;
@@ -34 +38,5 @@
-    public static void main(String[] args) throws IOException {
+    public static void main(String[] args) throws IOException, GitAPIException {
+        // first create a test-repository, the return is including the .get directory here!
+        File repoDir = createSampleGitRepo();
+        
+        // now open the resulting repository with a FileRepositoryBuilder
@@ -36 +44 @@
-        Repository repository = builder.setGitDir(new File("/my/git/directory"))
+        Repository repository = builder.setGitDir(repoDir)
@@ -42,0 +51,4 @@
+        // the Ref holds an ObjectId for any type of object (tree, commit, blob, tree)
+        Ref head = repository.getRef("refs/heads/master");
+        System.out.println("Ref of refs/heads/master: " + head);
+
@@ -44,0 +57,29 @@
+
+    private static File createSampleGitRepo() throws IOException, GitAPIException {
+        Repository repository = CookbookHelper.createNewRepository();
+        
+        System.out.println("Temporary repository at " + repository.getDirectory());
+
+        // create the file
+        File myfile = new File(repository.getDirectory().getParent(), "testfile");
+        myfile.createNewFile();
+
+        // run the add-call
+        new Git(repository).add()
+                .addFilepattern("testfile")
+                .call();
+
+
+        // and then commit the changes
+        new Git(repository).commit()
+                .setMessage("Added testfile")
+                .call();
+        
+        System.out.println("Added file " + myfile + " to repository at " + repository.getDirectory());
+        
+        File dir = repository.getDirectory();
+        
+        repository.close();
+        
+        return dir;
+    }
Diff Between 98922c08ddca128be2f0d8b7bba5a60296b06365 a8d8583b3151874d362a4b86121df00dd7b7c6cediff --git a/src/main/java/org/dstadler/jgit/api/GetCommitMessage.java b/src/main/java/org/dstadler/jgit/api/GetCommitMessage.java
index ec4d3d8..4a526e9 100644
--- a/src/main/java/org/dstadler/jgit/api/GetCommitMessage.java
+++ b/src/main/java/org/dstadler/jgit/api/GetCommitMessage.java
@@ -42,0 +43,2 @@
+        
+        walk.dispose();
diff --git a/src/main/java/org/dstadler/jgit/api/GetRevCommitFromObjectId.java b/src/main/java/org/dstadler/jgit/api/GetRevCommitFromObjectId.java
index e4a8dad..e5b2faa 100644
--- a/src/main/java/org/dstadler/jgit/api/GetRevCommitFromObjectId.java
+++ b/src/main/java/org/dstadler/jgit/api/GetRevCommitFromObjectId.java
@@ -42,0 +43,2 @@
+        walk.dispose();
+
diff --git a/src/main/java/org/dstadler/jgit/api/GetRevTreeFromObjectId.java b/src/main/java/org/dstadler/jgit/api/GetRevTreeFromObjectId.java
index eece952..b2d1f5e 100644
--- a/src/main/java/org/dstadler/jgit/api/GetRevTreeFromObjectId.java
+++ b/src/main/java/org/dstadler/jgit/api/GetRevTreeFromObjectId.java
@@ -48,0 +49,2 @@
+        walk.dispose();
+
diff --git a/src/main/java/org/dstadler/jgit/api/ReadBlobContents.java b/src/main/java/org/dstadler/jgit/api/ReadBlobContents.java
index e01b21e..c422b4a 100644
--- a/src/main/java/org/dstadler/jgit/api/ReadBlobContents.java
+++ b/src/main/java/org/dstadler/jgit/api/ReadBlobContents.java
@@ -54,0 +55,2 @@
+        walk.dispose();
+
diff --git a/src/main/java/org/dstadler/jgit/api/ReadFileFromCommit.java b/src/main/java/org/dstadler/jgit/api/ReadFileFromCommit.java
index 3d23d3f..d231f8b 100644
--- a/src/main/java/org/dstadler/jgit/api/ReadFileFromCommit.java
+++ b/src/main/java/org/dstadler/jgit/api/ReadFileFromCommit.java
@@ -68,0 +69,2 @@
+        revWalk.dispose();
+
diff --git a/src/main/java/org/dstadler/jgit/api/ReadTagFromName.java b/src/main/java/org/dstadler/jgit/api/ReadTagFromName.java
index 932ec1b..9774e52 100644
--- a/src/main/java/org/dstadler/jgit/api/ReadTagFromName.java
+++ b/src/main/java/org/dstadler/jgit/api/ReadTagFromName.java
@@ -54,0 +55,2 @@
+        walk.dispose();
+
diff --git a/src/main/java/org/dstadler/jgit/api/WalkRev.java b/src/main/java/org/dstadler/jgit/api/WalkRev.java
index 1c1b855..c5e959b 100644
--- a/src/main/java/org/dstadler/jgit/api/WalkRev.java
+++ b/src/main/java/org/dstadler/jgit/api/WalkRev.java
@@ -53,0 +54,2 @@
+        walk.dispose();
+
diff --git a/src/main/java/org/dstadler/jgit/porcelain/AddAndListNoteOfCommit.java b/src/main/java/org/dstadler/jgit/porcelain/AddAndListNoteOfCommit.java
index 1b9020f..3873974 100755
--- a/src/main/java/org/dstadler/jgit/porcelain/AddAndListNoteOfCommit.java
+++ b/src/main/java/org/dstadler/jgit/porcelain/AddAndListNoteOfCommit.java
@@ -68,0 +69,2 @@
+        walk.dispose();
+
diff --git a/src/main/java/org/dstadler/jgit/porcelain/CreateAndDeleteTag.java b/src/main/java/org/dstadler/jgit/porcelain/CreateAndDeleteTag.java
index 9ea9df6..f83f2de 100755
--- a/src/main/java/org/dstadler/jgit/porcelain/CreateAndDeleteTag.java
+++ b/src/main/java/org/dstadler/jgit/porcelain/CreateAndDeleteTag.java
@@ -70,0 +71,2 @@
+        walk.dispose();
+
diff --git a/src/main/java/org/dstadler/jgit/porcelain/ShowBlame.java b/src/main/java/org/dstadler/jgit/porcelain/ShowBlame.java
index 58b4b27..aefd982 100644
--- a/src/main/java/org/dstadler/jgit/porcelain/ShowBlame.java
+++ b/src/main/java/org/dstadler/jgit/porcelain/ShowBlame.java
@@ -90,0 +91,2 @@
+        revWalk.dispose();
+
diff --git a/src/main/java/org/dstadler/jgit/porcelain/ShowBranchDiff.java b/src/main/java/org/dstadler/jgit/porcelain/ShowBranchDiff.java
index 7a6b5ca..4ba96cf 100755
--- a/src/main/java/org/dstadler/jgit/porcelain/ShowBranchDiff.java
+++ b/src/main/java/org/dstadler/jgit/porcelain/ShowBranchDiff.java
@@ -77,0 +78,3 @@
+
+        walk.dispose();
+
diff --git a/src/main/java/org/dstadler/jgit/porcelain/ShowFileDiff.java b/src/main/java/org/dstadler/jgit/porcelain/ShowFileDiff.java
index 6222f54..6d520e7 100644
--- a/src/main/java/org/dstadler/jgit/porcelain/ShowFileDiff.java
+++ b/src/main/java/org/dstadler/jgit/porcelain/ShowFileDiff.java
@@ -85,0 +86,3 @@
+        
+        walk.dispose();
+
Diff Between a8d8583b3151874d362a4b86121df00dd7b7c6ce 4f199cd38f981d1e355377ba12a181bac353ef92diff --git a/README.md b/README.md
index 349fafd..f801167 100644
--- a/README.md
+++ b/README.md
@@ -65,0 +66 @@
+* [Get the commit-message](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/api/GetCommitMessage.java)
diff --git a/src/main/java/org/dstadler/jgit/api/GetCommitMessage.java b/src/main/java/org/dstadler/jgit/api/GetCommitMessage.java
new file mode 100644
index 0000000..ec4d3d8
--- /dev/null
+++ b/src/main/java/org/dstadler/jgit/api/GetCommitMessage.java
@@ -0,0 +1,46 @@
+package org.dstadler.jgit.api;
+
+/*
+   Copyright 2013, 2014 Dominik Stadler
+
+   Licensed under the Apache License, Version 2.0 (the "License");
+   you may not use this file except in compliance with the License.
+   You may obtain a copy of the License at
+
+     http://www.apache.org/licenses/LICENSE-2.0
+
+   Unless required by applicable law or agreed to in writing, software
+   distributed under the License is distributed on an "AS IS" BASIS,
+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+   See the License for the specific language governing permissions and
+   limitations under the License.
+ */
+
+import java.io.IOException;
+
+import org.dstadler.jgit.helper.CookbookHelper;
+import org.eclipse.jgit.lib.Ref;
+import org.eclipse.jgit.lib.Repository;
+import org.eclipse.jgit.revwalk.RevCommit;
+import org.eclipse.jgit.revwalk.RevWalk;
+
+/**
+ * Simple snippet which shows how to retrieve the commit-message based on object id.
+ */
+public class GetCommitMessage {
+
+    public static void main(String[] args) throws IOException {
+        Repository repository = CookbookHelper.openJGitCookbookRepository();
+
+        Ref head = repository.getRef("refs/heads/master");
+        System.out.println("Found head: " + head);
+
+        // a RevWalk allows to walk over commits based on some filtering that is defined
+        RevWalk walk = new RevWalk(repository);
+        RevCommit commit = walk.parseCommit(head.getObjectId());
+        
+        System.out.println("\nCommit-Message: " + commit.getFullMessage());
+
+        repository.close();
+    }
+}
diff --git a/src/main/java/org/dstadler/jgit/api/ReadBlobContents.java b/src/main/java/org/dstadler/jgit/api/ReadBlobContents.java
index 5ac537c..e01b21e 100644
--- a/src/main/java/org/dstadler/jgit/api/ReadBlobContents.java
+++ b/src/main/java/org/dstadler/jgit/api/ReadBlobContents.java
@@ -41 +41 @@
-        System.out.println("Print contents of head of master branch, i.e. the latest commit information");
+        System.out.println("\nPrint contents of head of master branch, i.e. the latest commit information");
@@ -45 +45 @@
-        System.out.println("Print contents of tree of head of master branch, i.e. the latest binary tree information");
+        System.out.println("\nPrint contents of tree of head of master branch, i.e. the latest binary tree information");
Diff Between 4f199cd38f981d1e355377ba12a181bac353ef92 efbfb7d4fb00582715e3b60fa649d4ea92c9ddfbdiff --git a/README.md b/README.md
index 7525f6e..349fafd 100644
--- a/README.md
+++ b/README.md
@@ -46 +46,2 @@
-* [Write contents of branch into an compressed file](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/porcelain/CreateArchive.java)
+* [Store contents of branch into a compressed file](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/porcelain/CreateArchive.java)
+* [Write contents of branch into a compressed file using a custom archive format](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/porcelain/CreateCustomFormatArchive.java)
diff --git a/pom.xml b/pom.xml
index f2d797c..b28a636 100644
--- a/pom.xml
+++ b/pom.xml
@@ -24,0 +25,5 @@
+    <dependency>
+      <groupId>org.eclipse.jgit</groupId>
+      <artifactId>org.eclipse.jgit.archive</artifactId>
+      <version>3.4.1.201406201815-r</version>
+    </dependency>
diff --git a/src/main/java/org/dstadler/jgit/porcelain/CreateArchive.java b/src/main/java/org/dstadler/jgit/porcelain/CreateArchive.java
index d311ef2..86269cc 100644
--- a/src/main/java/org/dstadler/jgit/porcelain/CreateArchive.java
+++ b/src/main/java/org/dstadler/jgit/porcelain/CreateArchive.java
@@ -23,3 +22,0 @@
-import java.util.Collections;
-import java.util.zip.ZipEntry;
-import java.util.zip.ZipOutputStream;
@@ -28,2 +24,0 @@
-import org.eclipse.jgit.api.ArchiveCommand;
-import org.eclipse.jgit.api.ArchiveCommand.Format;
@@ -32,2 +27 @@
-import org.eclipse.jgit.lib.FileMode;
-import org.eclipse.jgit.lib.ObjectLoader;
+import org.eclipse.jgit.archive.ArchiveFormats;
@@ -39 +33,2 @@
- * Simple snippet which shows how to package the contents of a branch into an archive file.
+ * Simple snippet which shows how to package the contents of a branch into an archive file
+ * using a format provided by the org.eclipse.jgit.archive jar.
@@ -44,25 +38,0 @@
-
-    /**
-     * A custom format for Zip-files, unfortunately JGit does not come with any pre-defined ones
-     */
-    private static final class ZipArchiveFormat implements Format<ZipOutputStream> {
-
-        public ZipOutputStream createArchiveOutputStream(OutputStream s) throws IOException {
-            return new ZipOutputStream(s);
-        }
-
-        public void putEntry(ZipOutputStream out, String path, FileMode mode, ObjectLoader loader) throws IOException {
-            // loader is null for directories...
-            if (loader != null) {
-                ZipEntry entry = new ZipEntry(path);
-                out.putNextEntry(entry);
-                out.write(loader.getBytes());
-                out.closeEntry();
-            }
-        }
-
-        public Iterable<String> suffixes() {
-            return Collections.singleton(".zip");
-        }
-    }
-
@@ -73,3 +43,2 @@
-        File file = File.createTempFile("test", ".zip");
-        // make the archive format known
-        ArchiveCommand.registerFormat("zip", new ZipArchiveFormat());
+        // make the included archive formats known
+        ArchiveFormats.registerAll();
@@ -77,12 +46,4 @@
-            // this is the file that we write the archive to
-            OutputStream out = new FileOutputStream(file);
-            try {
-                // finally call the ArchiveCommand to write out using the given format
-                new Git(repository).archive()
-                        .setTree(repository.resolve("master"))
-                        .setFormat("zip")
-                        .setOutputStream(out)
-                        .call();
-            } finally {
-                out.close();
-            }
+            write(repository, ".zip", "zip");
+            write(repository, ".tar.gz", "tgz");
+            write(repository, ".tar.bz2", "tbz2");
+            write(repository, ".tar.xz", "txz");
@@ -90 +51,19 @@
-            ArchiveCommand.unregisterFormat("zip");
+            ArchiveFormats.unregisterAll();
+        }
+
+        repository.close();
+    }
+
+    private static void write(Repository repository, String suffix, String format) throws IOException, GitAPIException {
+        // this is the file that we write the archive to
+        File file = File.createTempFile("test", suffix);
+        OutputStream out = new FileOutputStream(file);
+        try {
+            // finally call the ArchiveCommand to write out using the various supported formats
+            new Git(repository).archive()
+                    .setTree(repository.resolve("master"))
+                    .setFormat(format)
+                    .setOutputStream(out)
+                    .call();
+        } finally {
+            out.close();
@@ -94,2 +72,0 @@
-
-        repository.close();
diff --git a/src/main/java/org/dstadler/jgit/porcelain/CreateCustomFormatArchive.java b/src/main/java/org/dstadler/jgit/porcelain/CreateCustomFormatArchive.java
new file mode 100644
index 0000000..632b5a1
--- /dev/null
+++ b/src/main/java/org/dstadler/jgit/porcelain/CreateCustomFormatArchive.java
@@ -0,0 +1,98 @@
+package org.dstadler.jgit.porcelain;
+
+/*
+ * Copyright 2013, 2014 Dominik Stadler
+ * 
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ * 
+ * http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+import java.io.File;
+import java.io.FileOutputStream;
+import java.io.IOException;
+import java.io.OutputStream;
+import java.util.Collections;
+import java.util.zip.ZipEntry;
+import java.util.zip.ZipOutputStream;
+
+import org.dstadler.jgit.helper.CookbookHelper;
+import org.eclipse.jgit.api.ArchiveCommand;
+import org.eclipse.jgit.api.ArchiveCommand.Format;
+import org.eclipse.jgit.api.Git;
+import org.eclipse.jgit.api.errors.GitAPIException;
+import org.eclipse.jgit.lib.FileMode;
+import org.eclipse.jgit.lib.ObjectLoader;
+import org.eclipse.jgit.lib.Repository;
+
+
+
+/**
+ * Simple snippet which shows how to package the contents of a branch into an archive file 
+ * using a custom compression format.
+ * 
+ * @author dominik.stadler at gmx.at
+ */
+public class CreateCustomFormatArchive {
+
+    /**
+     * A custom format for Zip-files, unfortunately JGit does not come with any pre-defined ones
+     */
+    private static final class ZipArchiveFormat implements Format<ZipOutputStream> {
+
+        public ZipOutputStream createArchiveOutputStream(OutputStream s) throws IOException {
+            return new ZipOutputStream(s);
+        }
+
+        public void putEntry(ZipOutputStream out, String path, FileMode mode, ObjectLoader loader) throws IOException {
+            // loader is null for directories...
+            if (loader != null) {
+                ZipEntry entry = new ZipEntry(path);
+                out.putNextEntry(entry);
+                out.write(loader.getBytes());
+                out.closeEntry();
+            }
+        }
+
+        public Iterable<String> suffixes() {
+            return Collections.singleton(".mzip");
+        }
+    }
+
+    public static void main(String[] args) throws IOException, GitAPIException {
+        Repository repository = CookbookHelper.openJGitCookbookRepository();
+
+
+        File file = File.createTempFile("test", ".mzip");
+        // make the archive format known
+        ArchiveCommand.registerFormat("myzip", new ZipArchiveFormat());
+        try {
+            // this is the file that we write the archive to
+            OutputStream out = new FileOutputStream(file);
+            try {
+                // finally call the ArchiveCommand to write out using the given format
+                new Git(repository).archive()
+                        .setTree(repository.resolve("master"))
+                        .setFormat("myzip")
+                        .setOutputStream(out)
+                        .call();
+            } finally {
+                out.close();
+            }
+        } finally {
+            ArchiveCommand.unregisterFormat("myzip");
+        }
+
+        System.out.println("Wrote " + file.length() + " bytes to " + file);
+
+        repository.close();
+    }
+}
Diff Between efbfb7d4fb00582715e3b60fa649d4ea92c9ddfb 5bd7796749b63d5e584030f47440387791b21ab3diff --git a/README.md b/README.md
index a1dc11f..7525f6e 100644
--- a/README.md
+++ b/README.md
@@ -96,0 +97,2 @@
+* [AlBlue's Blog: Embedding JGit](http://alblue.bandlem.com/2013/11/embedding-jgit.html)
+* [JGit main page](http://www.eclipse.org/jgit/)
Diff Between 5bd7796749b63d5e584030f47440387791b21ab3 15a5ad9aef458a2ae6adf2c384258980c0f46c12diff --git a/src/main/java/org/dstadler/jgit/api/ReadUserConfig.java b/src/main/java/org/dstadler/jgit/api/ReadUserConfig.java
index 0beabf6..618d57b 100755
--- a/src/main/java/org/dstadler/jgit/api/ReadUserConfig.java
+++ b/src/main/java/org/dstadler/jgit/api/ReadUserConfig.java
@@ -40,0 +41,6 @@
+        
+        String url = config.getString("remote", "origin", "url");
+        if (url != null) {
+                System.out.println("Origin comes from " + url);
+        }
+        
Diff Between 15a5ad9aef458a2ae6adf2c384258980c0f46c12 ce2a59bdfcec3126fb6d91097ecdfdb612b555ebdiff --git a/src/main/java/org/dstadler/jgit/porcelain/ShowLog.java b/src/main/java/org/dstadler/jgit/porcelain/ShowLog.java
index 1629856..0ec705e 100755
--- a/src/main/java/org/dstadler/jgit/porcelain/ShowLog.java
+++ b/src/main/java/org/dstadler/jgit/porcelain/ShowLog.java
@@ -35,0 +36 @@
+    @SuppressWarnings("unused")
Diff Between ce2a59bdfcec3126fb6d91097ecdfdb612b555eb ed34c0073f249d984e91246008473feee78296e4diff --git a/src/main/java/org/dstadler/jgit/porcelain/CreateArchive.java b/src/main/java/org/dstadler/jgit/porcelain/CreateArchive.java
index b30f1ac..d311ef2 100644
--- a/src/main/java/org/dstadler/jgit/porcelain/CreateArchive.java
+++ b/src/main/java/org/dstadler/jgit/porcelain/CreateArchive.java
@@ -4,13 +4,13 @@
-   Copyright 2013, 2014 Dominik Stadler
-
-   Licensed under the Apache License, Version 2.0 (the "License");
-   you may not use this file except in compliance with the License.
-   You may obtain a copy of the License at
-
-     http://www.apache.org/licenses/LICENSE-2.0
-
-   Unless required by applicable law or agreed to in writing, software
-   distributed under the License is distributed on an "AS IS" BASIS,
-   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-   See the License for the specific language governing permissions and
-   limitations under the License.
+ * Copyright 2013, 2014 Dominik Stadler
+ * 
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ * 
+ * http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
@@ -55,4 +55,7 @@
-            ZipEntry entry = new ZipEntry(path);
-            out.putNextEntry(entry);
-            out.write(loader.getBytes());
-            out.closeEntry();
+            // loader is null for directories...
+            if (loader != null) {
+                ZipEntry entry = new ZipEntry(path);
+                out.putNextEntry(entry);
+                out.write(loader.getBytes());
+                out.closeEntry();
+            }
@@ -70,0 +74,2 @@
+        // make the archive format known
+        ArchiveCommand.registerFormat("zip", new ZipArchiveFormat());
@@ -72,3 +77,2 @@
-
-            // make the archive format known
-            ArchiveCommand.registerFormat("zip", new ZipArchiveFormat());
+            // this is the file that we write the archive to
+            OutputStream out = new FileOutputStream(file);
@@ -76,12 +80,6 @@
-                // this is the file that we write the archive to
-                OutputStream out = new FileOutputStream(file);
-                try {
-                    // finally call the ArchiveCommand to write out using the given format
-                    new Git(repository).archive()
-                            .setTree(repository.resolve("master"))
-                            .setFormat("zip")
-                            .setOutputStream(out)
-                            .call();
-                } finally {
-                    out.close();
-                }
+                // finally call the ArchiveCommand to write out using the given format
+                new Git(repository).archive()
+                        .setTree(repository.resolve("master"))
+                        .setFormat("zip")
+                        .setOutputStream(out)
+                        .call();
@@ -89 +87 @@
-                ArchiveCommand.unregisterFormat("zip");
+                out.close();
@@ -91,2 +88,0 @@
-
-            System.out.println("Wrote " + file.length() + " bytes to " + file);
@@ -94 +90 @@
-            file.delete();
+            ArchiveCommand.unregisterFormat("zip");
@@ -96,0 +93,2 @@
+        System.out.println("Wrote " + file.length() + " bytes to " + file);
+
Diff Between ed34c0073f249d984e91246008473feee78296e4 5b21502eae4973d3bc990b86315c5edae6835502diff --git a/README.md b/README.md
index 8b9fed3..a1dc11f 100644
--- a/README.md
+++ b/README.md
@@ -51,0 +52 @@
+* [Run garbage collection](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/porcelain/CollectGarbage.java)
diff --git a/src/main/java/org/dstadler/jgit/porcelain/CollectGarbage.java b/src/main/java/org/dstadler/jgit/porcelain/CollectGarbage.java
new file mode 100644
index 0000000..eb1c10c
--- /dev/null
+++ b/src/main/java/org/dstadler/jgit/porcelain/CollectGarbage.java
@@ -0,0 +1,48 @@
+package org.dstadler.jgit.porcelain;
+
+/*
+   Copyright 2013, 2014 Dominik Stadler
+
+   Licensed under the Apache License, Version 2.0 (the "License");
+   you may not use this file except in compliance with the License.
+   You may obtain a copy of the License at
+
+     http://www.apache.org/licenses/LICENSE-2.0
+
+   Unless required by applicable law or agreed to in writing, software
+   distributed under the License is distributed on an "AS IS" BASIS,
+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+   See the License for the specific language governing permissions and
+   limitations under the License.
+ */
+
+import java.io.IOException;
+import java.util.Map;
+import java.util.Properties;
+
+import org.dstadler.jgit.helper.CookbookHelper;
+import org.eclipse.jgit.api.Git;
+import org.eclipse.jgit.api.errors.GitAPIException;
+import org.eclipse.jgit.lib.Repository;
+
+
+
+/**
+ * Simple snippet which shows how to execute the "gc" command to remove unused 
+ * objects from the .git directory.
+ * 
+ * @author dominik.stadler at gmx.at
+ */
+public class CollectGarbage {
+
+    public static void main(String[] args) throws IOException, GitAPIException {
+        Repository repository = CookbookHelper.openJGitCookbookRepository();
+
+        Properties ret = new Git(repository).gc().call();
+        for(Map.Entry<Object, Object> entry : ret.entrySet()) {
+            System.out.println("Ret: " + entry.getKey() + ": " + entry.getValue());
+        }
+
+        repository.close();
+    }
+}
Diff Between 5b21502eae4973d3bc990b86315c5edae6835502 16bb7441616e796ca88ba189af6cbc7981a1e0c8diff --git a/pom.xml b/pom.xml
index 0260169..f2d797c 100644
--- a/pom.xml
+++ b/pom.xml
@@ -23 +23 @@
-      <version>3.3.2.201404171909-r</version>
+      <version>3.4.1.201406201815-r</version>
Diff Between 16bb7441616e796ca88ba189af6cbc7981a1e0c8 285db581ff0d53da89ee61a1bf236cbfeae7cb1ddiff --git a/pom.xml b/pom.xml
index 5fc9327..0260169 100644
--- a/pom.xml
+++ b/pom.xml
@@ -1,46 +1,46 @@
-<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
-  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
-  <modelVersion>4.0.0</modelVersion>
-  <groupId>org.dstadler.jgit</groupId>
-  <artifactId>jgit-cookbook</artifactId>
-  <packaging>jar</packaging>
-  <version>1.0-SNAPSHOT</version>
-  <name>jgit-cookbook</name>
-  <url>http://maven.apache.org</url>
-
-  <repositories>
-    <repository>
-      <id>jgit-repository</id>
-      <url>https://repo.eclipse.org/content/groups/releases/</url>
-    </repository>
-  </repositories>
-
-  <!-- Core Library -->
-  <dependencies>
-    <dependency>
-      <groupId>org.eclipse.jgit</groupId>
-      <artifactId>org.eclipse.jgit</artifactId>
-      <version>3.3.2.201404171909-r</version>
-    </dependency>
-
-	<dependency>
-		<groupId>commons-io</groupId>
-		<artifactId>commons-io</artifactId>
-		<version>2.4</version>
-	</dependency>
-  </dependencies>
-
-  <build>
-    <plugins>
-      <plugin>
-        <groupId>org.apache.maven.plugins</groupId>
-        <artifactId>maven-compiler-plugin</artifactId>
-        <version>3.1</version>
-        <configuration>
-          <source>1.5</source>
-          <target>1.5</target>
-        </configuration>
-      </plugin>
-    </plugins>
-  </build>
-</project>
+<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
+  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
+  <modelVersion>4.0.0</modelVersion>
+  <groupId>org.dstadler.jgit</groupId>
+  <artifactId>jgit-cookbook</artifactId>
+  <packaging>jar</packaging>
+  <version>1.0-SNAPSHOT</version>
+  <name>jgit-cookbook</name>
+  <url>http://maven.apache.org</url>
+
+  <repositories>
+    <repository>
+      <id>jgit-repository</id>
+      <url>https://repo.eclipse.org/content/groups/releases/</url>
+    </repository>
+  </repositories>
+
+  <!-- Core Library -->
+  <dependencies>
+    <dependency>
+      <groupId>org.eclipse.jgit</groupId>
+      <artifactId>org.eclipse.jgit</artifactId>
+      <version>3.3.2.201404171909-r</version>
+    </dependency>
+
+	<dependency>
+		<groupId>commons-io</groupId>
+		<artifactId>commons-io</artifactId>
+		<version>2.4</version>
+	</dependency>
+  </dependencies>
+
+  <build>
+    <plugins>
+      <plugin>
+        <groupId>org.apache.maven.plugins</groupId>
+        <artifactId>maven-compiler-plugin</artifactId>
+        <version>3.1</version>
+        <configuration>
+          <source>1.5</source>
+          <target>1.5</target>
+        </configuration>
+      </plugin>
+    </plugins>
+  </build>
+</project>
diff --git a/src/main/java/org/dstadler/jgit/CreateNewRepository.java b/src/main/java/org/dstadler/jgit/CreateNewRepository.java
index 7101237..7fe2080 100644
--- a/src/main/java/org/dstadler/jgit/CreateNewRepository.java
+++ b/src/main/java/org/dstadler/jgit/CreateNewRepository.java
@@ -1,48 +1,48 @@
-package org.dstadler.jgit;
-
-/*
-   Copyright 2013, 2014 Dominik Stadler
-
-   Licensed under the Apache License, Version 2.0 (the "License");
-   you may not use this file except in compliance with the License.
-   You may obtain a copy of the License at
-
-     http://www.apache.org/licenses/LICENSE-2.0
-
-   Unless required by applicable law or agreed to in writing, software
-   distributed under the License is distributed on an "AS IS" BASIS,
-   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-   See the License for the specific language governing permissions and
-   limitations under the License.
- */
-
-import java.io.File;
-import java.io.IOException;
-
-import org.apache.commons.io.FileUtils;
-import org.eclipse.jgit.lib.Repository;
-import org.eclipse.jgit.storage.file.FileRepositoryBuilder;
-
-/**
- * Simple snippet which shows how to create a new repository
- * 
- * @author dominik.stadler at gmx.at
- */
-public class CreateNewRepository {
-
-    public static void main(String[] args) throws IOException {
-        // prepare a new folder
-        File localPath = File.createTempFile("TestGitRepository", "");
-        localPath.delete();
-
-        // create the directory
-        Repository repository = FileRepositoryBuilder.create(new File(localPath, ".git"));
-        repository.create();
-
-        System.out.println("Having repository: " + repository.getDirectory());
-
-        repository.close();
-
-        FileUtils.deleteDirectory(localPath);
-    }
-}
+package org.dstadler.jgit;
+
+/*
+   Copyright 2013, 2014 Dominik Stadler
+
+   Licensed under the Apache License, Version 2.0 (the "License");
+   you may not use this file except in compliance with the License.
+   You may obtain a copy of the License at
+
+     http://www.apache.org/licenses/LICENSE-2.0
+
+   Unless required by applicable law or agreed to in writing, software
+   distributed under the License is distributed on an "AS IS" BASIS,
+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+   See the License for the specific language governing permissions and
+   limitations under the License.
+ */
+
+import java.io.File;
+import java.io.IOException;
+
+import org.apache.commons.io.FileUtils;
+import org.eclipse.jgit.lib.Repository;
+import org.eclipse.jgit.storage.file.FileRepositoryBuilder;
+
+/**
+ * Simple snippet which shows how to create a new repository
+ * 
+ * @author dominik.stadler at gmx.at
+ */
+public class CreateNewRepository {
+
+    public static void main(String[] args) throws IOException {
+        // prepare a new folder
+        File localPath = File.createTempFile("TestGitRepository", "");
+        localPath.delete();
+
+        // create the directory
+        Repository repository = FileRepositoryBuilder.create(new File(localPath, ".git"));
+        repository.create();
+
+        System.out.println("Having repository: " + repository.getDirectory());
+
+        repository.close();
+
+        FileUtils.deleteDirectory(localPath);
+    }
+}
diff --git a/src/main/java/org/dstadler/jgit/OpenRepository.java b/src/main/java/org/dstadler/jgit/OpenRepository.java
index 17c8423..3f00bd7 100644
--- a/src/main/java/org/dstadler/jgit/OpenRepository.java
+++ b/src/main/java/org/dstadler/jgit/OpenRepository.java
@@ -1,45 +1,45 @@
-package org.dstadler.jgit;
-
-/*
-   Copyright 2013, 2014 Dominik Stadler
-
-   Licensed under the Apache License, Version 2.0 (the "License");
-   you may not use this file except in compliance with the License.
-   You may obtain a copy of the License at
-
-     http://www.apache.org/licenses/LICENSE-2.0
-
-   Unless required by applicable law or agreed to in writing, software
-   distributed under the License is distributed on an "AS IS" BASIS,
-   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-   See the License for the specific language governing permissions and
-   limitations under the License.
- */
-
-import java.io.File;
-import java.io.IOException;
-
-import org.eclipse.jgit.lib.Repository;
-import org.eclipse.jgit.storage.file.FileRepositoryBuilder;
-
-
-
-/**
- * Simple snippet which shows how to open an existing repository
- * 
- * @author dominik.stadler at gmx.at
- */
-public class OpenRepository {
-
-    public static void main(String[] args) throws IOException {
-        FileRepositoryBuilder builder = new FileRepositoryBuilder();
-        Repository repository = builder.setGitDir(new File("/my/git/directory"))
-                .readEnvironment() // scan environment GIT_* variables
-                .findGitDir() // scan up the file system tree
-                .build();
-
-        System.out.println("Having repository: " + repository.getDirectory());
-
-        repository.close();
-    }
-}
+package org.dstadler.jgit;
+
+/*
+   Copyright 2013, 2014 Dominik Stadler
+
+   Licensed under the Apache License, Version 2.0 (the "License");
+   you may not use this file except in compliance with the License.
+   You may obtain a copy of the License at
+
+     http://www.apache.org/licenses/LICENSE-2.0
+
+   Unless required by applicable law or agreed to in writing, software
+   distributed under the License is distributed on an "AS IS" BASIS,
+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+   See the License for the specific language governing permissions and
+   limitations under the License.
+ */
+
+import java.io.File;
+import java.io.IOException;
+
+import org.eclipse.jgit.lib.Repository;
+import org.eclipse.jgit.storage.file.FileRepositoryBuilder;
+
+
+
+/**
+ * Simple snippet which shows how to open an existing repository
+ * 
+ * @author dominik.stadler at gmx.at
+ */
+public class OpenRepository {
+
+    public static void main(String[] args) throws IOException {
+        FileRepositoryBuilder builder = new FileRepositoryBuilder();
+        Repository repository = builder.setGitDir(new File("/my/git/directory"))
+                .readEnvironment() // scan environment GIT_* variables
+                .findGitDir() // scan up the file system tree
+                .build();
+
+        System.out.println("Having repository: " + repository.getDirectory());
+
+        repository.close();
+    }
+}
diff --git a/src/main/java/org/dstadler/jgit/api/GetRefFromName.java b/src/main/java/org/dstadler/jgit/api/GetRefFromName.java
index cac3624..befddf6 100644
--- a/src/main/java/org/dstadler/jgit/api/GetRefFromName.java
+++ b/src/main/java/org/dstadler/jgit/api/GetRefFromName.java
@@ -1,39 +1,39 @@
-package org.dstadler.jgit.api;
-
-/*
-   Copyright 2013, 2014 Dominik Stadler
-
-   Licensed under the Apache License, Version 2.0 (the "License");
-   you may not use this file except in compliance with the License.
-   You may obtain a copy of the License at
-
-     http://www.apache.org/licenses/LICENSE-2.0
-
-   Unless required by applicable law or agreed to in writing, software
-   distributed under the License is distributed on an "AS IS" BASIS,
-   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-   See the License for the specific language governing permissions and
-   limitations under the License.
- */
-
-import java.io.IOException;
-
-import org.dstadler.jgit.helper.CookbookHelper;
-import org.eclipse.jgit.lib.Ref;
-import org.eclipse.jgit.lib.Repository;
-
-/**
- * Simple snippet which shows how to retrieve a Ref for some reference string.
- */
-public class GetRefFromName {
-
-    public static void main(String[] args) throws IOException {
-        Repository repository = CookbookHelper.openJGitCookbookRepository();
-
-        // the Ref holds an ObjectId for any type of object (tree, commit, blob, tree)
-        Ref head = repository.getRef("refs/heads/master");
-        System.out.println("Ref of refs/heads/master: " + head);
-
-        repository.close();
-    }
-}
+package org.dstadler.jgit.api;
+
+/*
+   Copyright 2013, 2014 Dominik Stadler
+
+   Licensed under the Apache License, Version 2.0 (the "License");
+   you may not use this file except in compliance with the License.
+   You may obtain a copy of the License at
+
+     http://www.apache.org/licenses/LICENSE-2.0
+
+   Unless required by applicable law or agreed to in writing, software
+   distributed under the License is distributed on an "AS IS" BASIS,
+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+   See the License for the specific language governing permissions and
+   limitations under the License.
+ */
+
+import java.io.IOException;
+
+import org.dstadler.jgit.helper.CookbookHelper;
+import org.eclipse.jgit.lib.Ref;
+import org.eclipse.jgit.lib.Repository;
+
+/**
+ * Simple snippet which shows how to retrieve a Ref for some reference string.
+ */
+public class GetRefFromName {
+
+    public static void main(String[] args) throws IOException {
+        Repository repository = CookbookHelper.openJGitCookbookRepository();
+
+        // the Ref holds an ObjectId for any type of object (tree, commit, blob, tree)
+        Ref head = repository.getRef("refs/heads/master");
+        System.out.println("Ref of refs/heads/master: " + head);
+
+        repository.close();
+    }
+}
diff --git a/src/main/java/org/dstadler/jgit/api/GetRevCommitFromObjectId.java b/src/main/java/org/dstadler/jgit/api/GetRevCommitFromObjectId.java
index c72be00..e4a8dad 100644
--- a/src/main/java/org/dstadler/jgit/api/GetRevCommitFromObjectId.java
+++ b/src/main/java/org/dstadler/jgit/api/GetRevCommitFromObjectId.java
@@ -1,45 +1,45 @@
-package org.dstadler.jgit.api;
-
-/*
-   Copyright 2013, 2014 Dominik Stadler
-
-   Licensed under the Apache License, Version 2.0 (the "License");
-   you may not use this file except in compliance with the License.
-   You may obtain a copy of the License at
-
-     http://www.apache.org/licenses/LICENSE-2.0
-
-   Unless required by applicable law or agreed to in writing, software
-   distributed under the License is distributed on an "AS IS" BASIS,
-   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-   See the License for the specific language governing permissions and
-   limitations under the License.
- */
-
-import java.io.IOException;
-
-import org.dstadler.jgit.helper.CookbookHelper;
-import org.eclipse.jgit.lib.Ref;
-import org.eclipse.jgit.lib.Repository;
-import org.eclipse.jgit.revwalk.RevCommit;
-import org.eclipse.jgit.revwalk.RevWalk;
-
-/**
- * Simple snippet which shows how to use RevWalk to iterate over objects
- */
-public class GetRevCommitFromObjectId {
-
-    public static void main(String[] args) throws IOException {
-        Repository repository = CookbookHelper.openJGitCookbookRepository();
-
-        Ref head = repository.getRef("refs/heads/master");
-        System.out.println("Found head: " + head);
-
-        // a RevWalk allows to walk over commits based on some filtering that is defined
-        RevWalk walk = new RevWalk(repository);
-        RevCommit commit = walk.parseCommit(head.getObjectId());
-        System.out.println("Found Commit: " + commit);
-
-        repository.close();
-    }
-}
+package org.dstadler.jgit.api;
+
+/*
+   Copyright 2013, 2014 Dominik Stadler
+
+   Licensed under the Apache License, Version 2.0 (the "License");
+   you may not use this file except in compliance with the License.
+   You may obtain a copy of the License at
+
+     http://www.apache.org/licenses/LICENSE-2.0
+
+   Unless required by applicable law or agreed to in writing, software
+   distributed under the License is distributed on an "AS IS" BASIS,
+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+   See the License for the specific language governing permissions and
+   limitations under the License.
+ */
+
+import java.io.IOException;
+
+import org.dstadler.jgit.helper.CookbookHelper;
+import org.eclipse.jgit.lib.Ref;
+import org.eclipse.jgit.lib.Repository;
+import org.eclipse.jgit.revwalk.RevCommit;
+import org.eclipse.jgit.revwalk.RevWalk;
+
+/**
+ * Simple snippet which shows how to use RevWalk to iterate over objects
+ */
+public class GetRevCommitFromObjectId {
+
+    public static void main(String[] args) throws IOException {
+        Repository repository = CookbookHelper.openJGitCookbookRepository();
+
+        Ref head = repository.getRef("refs/heads/master");
+        System.out.println("Found head: " + head);
+
+        // a RevWalk allows to walk over commits based on some filtering that is defined
+        RevWalk walk = new RevWalk(repository);
+        RevCommit commit = walk.parseCommit(head.getObjectId());
+        System.out.println("Found Commit: " + commit);
+
+        repository.close();
+    }
+}
diff --git a/src/main/java/org/dstadler/jgit/api/GetRevTreeFromObjectId.java b/src/main/java/org/dstadler/jgit/api/GetRevTreeFromObjectId.java
index 593ee58..eece952 100644
--- a/src/main/java/org/dstadler/jgit/api/GetRevTreeFromObjectId.java
+++ b/src/main/java/org/dstadler/jgit/api/GetRevTreeFromObjectId.java
@@ -1,51 +1,51 @@
-package org.dstadler.jgit.api;
-
-/*
-   Copyright 2013, 2014 Dominik Stadler
-
-   Licensed under the Apache License, Version 2.0 (the "License");
-   you may not use this file except in compliance with the License.
-   You may obtain a copy of the License at
-
-     http://www.apache.org/licenses/LICENSE-2.0
-
-   Unless required by applicable law or agreed to in writing, software
-   distributed under the License is distributed on an "AS IS" BASIS,
-   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-   See the License for the specific language governing permissions and
-   limitations under the License.
- */
-
-import java.io.IOException;
-
-import org.dstadler.jgit.helper.CookbookHelper;
-import org.eclipse.jgit.api.errors.GitAPIException;
-import org.eclipse.jgit.lib.Ref;
-import org.eclipse.jgit.lib.Repository;
-import org.eclipse.jgit.revwalk.RevCommit;
-import org.eclipse.jgit.revwalk.RevTree;
-import org.eclipse.jgit.revwalk.RevWalk;
-
-/**
- * Simple snippet which shows how to use RevWalk to iterate over objects
- */
-public class GetRevTreeFromObjectId {
-
-    public static void main(String[] args) throws IOException, GitAPIException {
-        Repository repository = CookbookHelper.openJGitCookbookRepository();
-
-        Ref head = repository.getRef("HEAD");
-
-        // a RevWalk allows to walk over commits based on some filtering that is defined
-        RevWalk walk = new RevWalk(repository);
-
-        RevCommit commit = walk.parseCommit(head.getObjectId());
-        System.out.println("Commit: " + commit);
-
-        // a commit points to a tree
-        RevTree tree = walk.parseTree(commit.getTree().getId());
-        System.out.println("Found Tree: " + tree);
-
-        repository.close();
-    }
-}
+package org.dstadler.jgit.api;
+
+/*
+   Copyright 2013, 2014 Dominik Stadler
+
+   Licensed under the Apache License, Version 2.0 (the "License");
+   you may not use this file except in compliance with the License.
+   You may obtain a copy of the License at
+
+     http://www.apache.org/licenses/LICENSE-2.0
+
+   Unless required by applicable law or agreed to in writing, software
+   distributed under the License is distributed on an "AS IS" BASIS,
+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+   See the License for the specific language governing permissions and
+   limitations under the License.
+ */
+
+import java.io.IOException;
+
+import org.dstadler.jgit.helper.CookbookHelper;
+import org.eclipse.jgit.api.errors.GitAPIException;
+import org.eclipse.jgit.lib.Ref;
+import org.eclipse.jgit.lib.Repository;
+import org.eclipse.jgit.revwalk.RevCommit;
+import org.eclipse.jgit.revwalk.RevTree;
+import org.eclipse.jgit.revwalk.RevWalk;
+
+/**
+ * Simple snippet which shows how to use RevWalk to iterate over objects
+ */
+public class GetRevTreeFromObjectId {
+
+    public static void main(String[] args) throws IOException, GitAPIException {
+        Repository repository = CookbookHelper.openJGitCookbookRepository();
+
+        Ref head = repository.getRef("HEAD");
+
+        // a RevWalk allows to walk over commits based on some filtering that is defined
+        RevWalk walk = new RevWalk(repository);
+
+        RevCommit commit = walk.parseCommit(head.getObjectId());
+        System.out.println("Commit: " + commit);
+
+        // a commit points to a tree
+        RevTree tree = walk.parseTree(commit.getTree().getId());
+        System.out.println("Found Tree: " + tree);
+
+        repository.close();
+    }
+}
diff --git a/src/main/java/org/dstadler/jgit/api/PrintRemotes.java b/src/main/java/org/dstadler/jgit/api/PrintRemotes.java
index c5476df..c333d78 100755
--- a/src/main/java/org/dstadler/jgit/api/PrintRemotes.java
+++ b/src/main/java/org/dstadler/jgit/api/PrintRemotes.java
@@ -1,44 +1,44 @@
-package org.dstadler.jgit.api;
-
-/*
-   Copyright 2013, 2014 Dominik Stadler
-
-   Licensed under the Apache License, Version 2.0 (the "License");
-   you may not use this file except in compliance with the License.
-   You may obtain a copy of the License at
-
-     http://www.apache.org/licenses/LICENSE-2.0
-
-   Unless required by applicable law or agreed to in writing, software
-   distributed under the License is distributed on an "AS IS" BASIS,
-   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-   See the License for the specific language governing permissions and
-   limitations under the License.
- */
-
-import java.io.IOException;
-import java.util.Set;
-
-import org.dstadler.jgit.helper.CookbookHelper;
-import org.eclipse.jgit.lib.Config;
-import org.eclipse.jgit.lib.Repository;
-
-/**
- * Simple snippet which shows how to retrieve the list of remotes from the configuration
- */
-public class PrintRemotes {
-
-    public static void main(String[] args) throws IOException {
-        Repository repository = CookbookHelper.openJGitCookbookRepository();
-
-        Config storedConfig = repository.getConfig();
-        Set<String> remotes = storedConfig.getSubsections("remote");
-
-        for (String remoteName : remotes) {
-            String url = storedConfig.getString("remote", remoteName, "url");
-            System.out.println(remoteName + " " + url);
-        }
-
-        repository.close();
-    }
-}
+package org.dstadler.jgit.api;
+
+/*
+   Copyright 2013, 2014 Dominik Stadler
+
+   Licensed under the Apache License, Version 2.0 (the "License");
+   you may not use this file except in compliance with the License.
+   You may obtain a copy of the License at
+
+     http://www.apache.org/licenses/LICENSE-2.0
+
+   Unless required by applicable law or agreed to in writing, software
+   distributed under the License is distributed on an "AS IS" BASIS,
+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+   See the License for the specific language governing permissions and
+   limitations under the License.
+ */
+
+import java.io.IOException;
+import java.util.Set;
+
+import org.dstadler.jgit.helper.CookbookHelper;
+import org.eclipse.jgit.lib.Config;
+import org.eclipse.jgit.lib.Repository;
+
+/**
+ * Simple snippet which shows how to retrieve the list of remotes from the configuration
+ */
+public class PrintRemotes {
+
+    public static void main(String[] args) throws IOException {
+        Repository repository = CookbookHelper.openJGitCookbookRepository();
+
+        Config storedConfig = repository.getConfig();
+        Set<String> remotes = storedConfig.getSubsections("remote");
+
+        for (String remoteName : remotes) {
+            String url = storedConfig.getString("remote", remoteName, "url");
+            System.out.println(remoteName + " " + url);
+        }
+
+        repository.close();
+    }
+}
diff --git a/src/main/java/org/dstadler/jgit/api/ReadBlobContents.java b/src/main/java/org/dstadler/jgit/api/ReadBlobContents.java
index ef51cf1..5ac537c 100644
--- a/src/main/java/org/dstadler/jgit/api/ReadBlobContents.java
+++ b/src/main/java/org/dstadler/jgit/api/ReadBlobContents.java
@@ -1,57 +1,57 @@
-package org.dstadler.jgit.api;
-
-/*
-   Copyright 2013, 2014 Dominik Stadler
-
-   Licensed under the Apache License, Version 2.0 (the "License");
-   you may not use this file except in compliance with the License.
-   You may obtain a copy of the License at
-
-     http://www.apache.org/licenses/LICENSE-2.0
-
-   Unless required by applicable law or agreed to in writing, software
-   distributed under the License is distributed on an "AS IS" BASIS,
-   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-   See the License for the specific language governing permissions and
-   limitations under the License.
- */
-
-import java.io.IOException;
-
-import org.dstadler.jgit.helper.CookbookHelper;
-import org.eclipse.jgit.lib.ObjectLoader;
-import org.eclipse.jgit.lib.Ref;
-import org.eclipse.jgit.lib.Repository;
-import org.eclipse.jgit.revwalk.RevCommit;
-import org.eclipse.jgit.revwalk.RevTree;
-import org.eclipse.jgit.revwalk.RevWalk;
-
-/**
- * Simple snippet which shows how to retrieve a Ref for some reference string.
- */
-public class ReadBlobContents {
-
-    public static void main(String[] args) throws IOException {
-        Repository repository = CookbookHelper.openJGitCookbookRepository();
-
-        // the Ref holds an ObjectId for any type of object (tree, commit, blob, tree)
-        Ref head = repository.getRef("refs/heads/master");
-        System.out.println("Ref of refs/heads/master: " + head);
-
-        System.out.println("Print contents of head of master branch, i.e. the latest commit information");
-        ObjectLoader loader = repository.open(head.getObjectId());
-        loader.copyTo(System.out);
-
-        System.out.println("Print contents of tree of head of master branch, i.e. the latest binary tree information");
-
-        // a commit points to a tree
-        RevWalk walk = new RevWalk(repository);
-        RevCommit commit = walk.parseCommit(head.getObjectId());
-        RevTree tree = walk.parseTree(commit.getTree().getId());
-        System.out.println("Found Tree: " + tree);
-        loader = repository.open(tree.getId());
-        loader.copyTo(System.out);
-
-        repository.close();
-    }
-}
+package org.dstadler.jgit.api;
+
+/*
+   Copyright 2013, 2014 Dominik Stadler
+
+   Licensed under the Apache License, Version 2.0 (the "License");
+   you may not use this file except in compliance with the License.
+   You may obtain a copy of the License at
+
+     http://www.apache.org/licenses/LICENSE-2.0
+
+   Unless required by applicable law or agreed to in writing, software
+   distributed under the License is distributed on an "AS IS" BASIS,
+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+   See the License for the specific language governing permissions and
+   limitations under the License.
+ */
+
+import java.io.IOException;
+
+import org.dstadler.jgit.helper.CookbookHelper;
+import org.eclipse.jgit.lib.ObjectLoader;
+import org.eclipse.jgit.lib.Ref;
+import org.eclipse.jgit.lib.Repository;
+import org.eclipse.jgit.revwalk.RevCommit;
+import org.eclipse.jgit.revwalk.RevTree;
+import org.eclipse.jgit.revwalk.RevWalk;
+
+/**
+ * Simple snippet which shows how to retrieve a Ref for some reference string.
+ */
+public class ReadBlobContents {
+
+    public static void main(String[] args) throws IOException {
+        Repository repository = CookbookHelper.openJGitCookbookRepository();
+
+        // the Ref holds an ObjectId for any type of object (tree, commit, blob, tree)
+        Ref head = repository.getRef("refs/heads/master");
+        System.out.println("Ref of refs/heads/master: " + head);
+
+        System.out.println("Print contents of head of master branch, i.e. the latest commit information");
+        ObjectLoader loader = repository.open(head.getObjectId());
+        loader.copyTo(System.out);
+
+        System.out.println("Print contents of tree of head of master branch, i.e. the latest binary tree information");
+
+        // a commit points to a tree
+        RevWalk walk = new RevWalk(repository);
+        RevCommit commit = walk.parseCommit(head.getObjectId());
+        RevTree tree = walk.parseTree(commit.getTree().getId());
+        System.out.println("Found Tree: " + tree);
+        loader = repository.open(tree.getId());
+        loader.copyTo(System.out);
+
+        repository.close();
+    }
+}
diff --git a/src/main/java/org/dstadler/jgit/api/ReadTagFromName.java b/src/main/java/org/dstadler/jgit/api/ReadTagFromName.java
index b2c5a21..932ec1b 100644
--- a/src/main/java/org/dstadler/jgit/api/ReadTagFromName.java
+++ b/src/main/java/org/dstadler/jgit/api/ReadTagFromName.java
@@ -1,57 +1,57 @@
-package org.dstadler.jgit.api;
-
-/*
-   Copyright 2013, 2014 Dominik Stadler
-
-   Licensed under the Apache License, Version 2.0 (the "License");
-   you may not use this file except in compliance with the License.
-   You may obtain a copy of the License at
-
-     http://www.apache.org/licenses/LICENSE-2.0
-
-   Unless required by applicable law or agreed to in writing, software
-   distributed under the License is distributed on an "AS IS" BASIS,
-   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-   See the License for the specific language governing permissions and
-   limitations under the License.
- */
-
-import java.io.IOException;
-
-import org.dstadler.jgit.helper.CookbookHelper;
-import org.eclipse.jgit.api.errors.GitAPIException;
-import org.eclipse.jgit.lib.ObjectLoader;
-import org.eclipse.jgit.lib.Ref;
-import org.eclipse.jgit.lib.Repository;
-import org.eclipse.jgit.revwalk.RevObject;
-import org.eclipse.jgit.revwalk.RevWalk;
-
-/**
- * Simple snippet which shows how to use RevWalk to read tags
- */
-public class ReadTagFromName {
-
-    public static void main(String[] args) throws IOException, GitAPIException {
-        Repository repository = CookbookHelper.openJGitCookbookRepository();
-
-        // a RevWalk allows to retrieve information from the repository
-        RevWalk walk = new RevWalk(repository);
-
-        // a simple tag that is not annotated
-        Ref simpleTag = repository.getRef("initialtag");
-        RevObject any = walk.parseAny(simpleTag.getObjectId());
-        System.out.println("Commit: " + any);
-
-        // an annotated tag
-        Ref annotatedTag = repository.getRef("secondtag");
-        any = walk.parseAny(annotatedTag.getObjectId());
-        System.out.println("Tag: " + any);
-
-        // finally try to print out the tag-content
-        System.out.println("\nTag-Content: \n");
-        ObjectLoader loader = repository.open(annotatedTag.getObjectId());
-        loader.copyTo(System.out);
-
-        repository.close();
-    }
-}
+package org.dstadler.jgit.api;
+
+/*
+   Copyright 2013, 2014 Dominik Stadler
+
+   Licensed under the Apache License, Version 2.0 (the "License");
+   you may not use this file except in compliance with the License.
+   You may obtain a copy of the License at
+
+     http://www.apache.org/licenses/LICENSE-2.0
+
+   Unless required by applicable law or agreed to in writing, software
+   distributed under the License is distributed on an "AS IS" BASIS,
+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+   See the License for the specific language governing permissions and
+   limitations under the License.
+ */
+
+import java.io.IOException;
+
+import org.dstadler.jgit.helper.CookbookHelper;
+import org.eclipse.jgit.api.errors.GitAPIException;
+import org.eclipse.jgit.lib.ObjectLoader;
+import org.eclipse.jgit.lib.Ref;
+import org.eclipse.jgit.lib.Repository;
+import org.eclipse.jgit.revwalk.RevObject;
+import org.eclipse.jgit.revwalk.RevWalk;
+
+/**
+ * Simple snippet which shows how to use RevWalk to read tags
+ */
+public class ReadTagFromName {
+
+    public static void main(String[] args) throws IOException, GitAPIException {
+        Repository repository = CookbookHelper.openJGitCookbookRepository();
+
+        // a RevWalk allows to retrieve information from the repository
+        RevWalk walk = new RevWalk(repository);
+
+        // a simple tag that is not annotated
+        Ref simpleTag = repository.getRef("initialtag");
+        RevObject any = walk.parseAny(simpleTag.getObjectId());
+        System.out.println("Commit: " + any);
+
+        // an annotated tag
+        Ref annotatedTag = repository.getRef("secondtag");
+        any = walk.parseAny(annotatedTag.getObjectId());
+        System.out.println("Tag: " + any);
+
+        // finally try to print out the tag-content
+        System.out.println("\nTag-Content: \n");
+        ObjectLoader loader = repository.open(annotatedTag.getObjectId());
+        loader.copyTo(System.out);
+
+        repository.close();
+    }
+}
diff --git a/src/main/java/org/dstadler/jgit/api/ReadUserConfig.java b/src/main/java/org/dstadler/jgit/api/ReadUserConfig.java
index ac774a0..0beabf6 100755
--- a/src/main/java/org/dstadler/jgit/api/ReadUserConfig.java
+++ b/src/main/java/org/dstadler/jgit/api/ReadUserConfig.java
@@ -1,43 +1,43 @@
-package org.dstadler.jgit.api;
-
-/*
-   Copyright 2013, 2014 Dominik Stadler
-
-   Licensed under the Apache License, Version 2.0 (the "License");
-   you may not use this file except in compliance with the License.
-   You may obtain a copy of the License at
-
-     http://www.apache.org/licenses/LICENSE-2.0
-
-   Unless required by applicable law or agreed to in writing, software
-   distributed under the License is distributed on an "AS IS" BASIS,
-   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-   See the License for the specific language governing permissions and
-   limitations under the License.
- */
-
-import java.io.IOException;
-
-import org.dstadler.jgit.helper.CookbookHelper;
-import org.eclipse.jgit.lib.Config;
-import org.eclipse.jgit.lib.Repository;
-
-/**
- * Simple snippet which shows how to retrieve the user name and email that is configured in Git.
- */
-public class ReadUserConfig {
-
-    public static void main(String[] args) throws IOException {
-        Repository repository = CookbookHelper.openJGitCookbookRepository();
-
-        Config config = repository.getConfig();
-        String name = config.getString("user", null, "name");
-        String email = config.getString("user", null, "email");
-        if (name == null || email == null) {
-            System.out.println("User identity is unknown!");
-        } else {
-            System.out.println("User identity is " + name + " <" + email + ">");
-        }
-        repository.close();
-    }
-}
+package org.dstadler.jgit.api;
+
+/*
+   Copyright 2013, 2014 Dominik Stadler
+
+   Licensed under the Apache License, Version 2.0 (the "License");
+   you may not use this file except in compliance with the License.
+   You may obtain a copy of the License at
+
+     http://www.apache.org/licenses/LICENSE-2.0
+
+   Unless required by applicable law or agreed to in writing, software
+   distributed under the License is distributed on an "AS IS" BASIS,
+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+   See the License for the specific language governing permissions and
+   limitations under the License.
+ */
+
+import java.io.IOException;
+
+import org.dstadler.jgit.helper.CookbookHelper;
+import org.eclipse.jgit.lib.Config;
+import org.eclipse.jgit.lib.Repository;
+
+/**
+ * Simple snippet which shows how to retrieve the user name and email that is configured in Git.
+ */
+public class ReadUserConfig {
+
+    public static void main(String[] args) throws IOException {
+        Repository repository = CookbookHelper.openJGitCookbookRepository();
+
+        Config config = repository.getConfig();
+        String name = config.getString("user", null, "name");
+        String email = config.getString("user", null, "email");
+        if (name == null || email == null) {
+            System.out.println("User identity is unknown!");
+        } else {
+            System.out.println("User identity is " + name + " <" + email + ">");
+        }
+        repository.close();
+    }
+}
diff --git a/src/main/java/org/dstadler/jgit/api/ResolveRef.java b/src/main/java/org/dstadler/jgit/api/ResolveRef.java
index d55b0fd..026b2b2 100644
--- a/src/main/java/org/dstadler/jgit/api/ResolveRef.java
+++ b/src/main/java/org/dstadler/jgit/api/ResolveRef.java
@@ -1,45 +1,45 @@
-package org.dstadler.jgit.api;
-
-/*
-   Copyright 2013, 2014 Dominik Stadler
-
-   Licensed under the Apache License, Version 2.0 (the "License");
-   you may not use this file except in compliance with the License.
-   You may obtain a copy of the License at
-
-     http://www.apache.org/licenses/LICENSE-2.0
-
-   Unless required by applicable law or agreed to in writing, software
-   distributed under the License is distributed on an "AS IS" BASIS,
-   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-   See the License for the specific language governing permissions and
-   limitations under the License.
- */
-
-import java.io.IOException;
-
-import org.dstadler.jgit.helper.CookbookHelper;
-import org.eclipse.jgit.lib.ObjectId;
-import org.eclipse.jgit.lib.Repository;
-
-
-
-/**
- * Simple snippet which shows how to retrieve an ObjectId for some name.
- */
-public class ResolveRef {
-
-    public static void main(String[] args) throws IOException {
-        Repository repository = CookbookHelper.openJGitCookbookRepository();
-
-        // basic syntax is similar to getRef()
-        ObjectId id = repository.resolve("HEAD");
-        System.out.println("ObjectId of HEAD: " + id);
-
-        // however resolve() supports almost all of the git-syntax, where getRef() only works on names
-        id = repository.resolve("HEAD^1");
-        System.out.println("ObjectId of HEAD: " + id);
-
-        repository.close();
-    }
-}
+package org.dstadler.jgit.api;
+
+/*
+   Copyright 2013, 2014 Dominik Stadler
+
+   Licensed under the Apache License, Version 2.0 (the "License");
+   you may not use this file except in compliance with the License.
+   You may obtain a copy of the License at
+
+     http://www.apache.org/licenses/LICENSE-2.0
+
+   Unless required by applicable law or agreed to in writing, software
+   distributed under the License is distributed on an "AS IS" BASIS,
+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+   See the License for the specific language governing permissions and
+   limitations under the License.
+ */
+
+import java.io.IOException;
+
+import org.dstadler.jgit.helper.CookbookHelper;
+import org.eclipse.jgit.lib.ObjectId;
+import org.eclipse.jgit.lib.Repository;
+
+
+
+/**
+ * Simple snippet which shows how to retrieve an ObjectId for some name.
+ */
+public class ResolveRef {
+
+    public static void main(String[] args) throws IOException {
+        Repository repository = CookbookHelper.openJGitCookbookRepository();
+
+        // basic syntax is similar to getRef()
+        ObjectId id = repository.resolve("HEAD");
+        System.out.println("ObjectId of HEAD: " + id);
+
+        // however resolve() supports almost all of the git-syntax, where getRef() only works on names
+        id = repository.resolve("HEAD^1");
+        System.out.println("ObjectId of HEAD: " + id);
+
+        repository.close();
+    }
+}
diff --git a/src/main/java/org/dstadler/jgit/api/WalkRev.java b/src/main/java/org/dstadler/jgit/api/WalkRev.java
index 3e9b3c7..1c1b855 100644
--- a/src/main/java/org/dstadler/jgit/api/WalkRev.java
+++ b/src/main/java/org/dstadler/jgit/api/WalkRev.java
@@ -1,56 +1,56 @@
-package org.dstadler.jgit.api;
-
-/*
-   Copyright 2013, 2014 Dominik Stadler
-
-   Licensed under the Apache License, Version 2.0 (the "License");
-   you may not use this file except in compliance with the License.
-   You may obtain a copy of the License at
-
-     http://www.apache.org/licenses/LICENSE-2.0
-
-   Unless required by applicable law or agreed to in writing, software
-   distributed under the License is distributed on an "AS IS" BASIS,
-   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-   See the License for the specific language governing permissions and
-   limitations under the License.
- */
-
-import java.io.IOException;
-
-import org.dstadler.jgit.helper.CookbookHelper;
-import org.eclipse.jgit.lib.Ref;
-import org.eclipse.jgit.lib.Repository;
-import org.eclipse.jgit.revwalk.RevCommit;
-import org.eclipse.jgit.revwalk.RevWalk;
-
-
-
-/**
- * Simple snippet which shows how to use RevWalk to iterate over objects
- */
-public class WalkRev {
-
-    public static void main(String[] args) throws IOException {
-        Repository repository = CookbookHelper.openJGitCookbookRepository();
-
-        Ref head = repository.getRef("refs/heads/master");
-
-        // a RevWalk allows to walk over commits based on some filtering that is defined
-        RevWalk walk = new RevWalk(repository);
-
-        RevCommit commit = walk.parseCommit(head.getObjectId());
-        System.out.println("Start-Commit: " + commit);
-
-        System.out.println("Walking all commits starting at HEAD");
-        walk.markStart(commit);
-        int count = 0;
-        for (RevCommit rev : walk) {
-            System.out.println("Commit: " + rev);
-            count++;
-        }
-        System.out.println(count);
-
-        repository.close();
-    }
-}
+package org.dstadler.jgit.api;
+
+/*
+   Copyright 2013, 2014 Dominik Stadler
+
+   Licensed under the Apache License, Version 2.0 (the "License");
+   you may not use this file except in compliance with the License.
+   You may obtain a copy of the License at
+
+     http://www.apache.org/licenses/LICENSE-2.0
+
+   Unless required by applicable law or agreed to in writing, software
+   distributed under the License is distributed on an "AS IS" BASIS,
+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+   See the License for the specific language governing permissions and
+   limitations under the License.
+ */
+
+import java.io.IOException;
+
+import org.dstadler.jgit.helper.CookbookHelper;
+import org.eclipse.jgit.lib.Ref;
+import org.eclipse.jgit.lib.Repository;
+import org.eclipse.jgit.revwalk.RevCommit;
+import org.eclipse.jgit.revwalk.RevWalk;
+
+
+
+/**
+ * Simple snippet which shows how to use RevWalk to iterate over objects
+ */
+public class WalkRev {
+
+    public static void main(String[] args) throws IOException {
+        Repository repository = CookbookHelper.openJGitCookbookRepository();
+
+        Ref head = repository.getRef("refs/heads/master");
+
+        // a RevWalk allows to walk over commits based on some filtering that is defined
+        RevWalk walk = new RevWalk(repository);
+
+        RevCommit commit = walk.parseCommit(head.getObjectId());
+        System.out.println("Start-Commit: " + commit);
+
+        System.out.println("Walking all commits starting at HEAD");
+        walk.markStart(commit);
+        int count = 0;
+        for (RevCommit rev : walk) {
+            System.out.println("Commit: " + rev);
+            count++;
+        }
+        System.out.println(count);
+
+        repository.close();
+    }
+}
diff --git a/src/main/java/org/dstadler/jgit/helper/CookbookHelper.java b/src/main/java/org/dstadler/jgit/helper/CookbookHelper.java
index 4f9976e..154eca6 100644
--- a/src/main/java/org/dstadler/jgit/helper/CookbookHelper.java
+++ b/src/main/java/org/dstadler/jgit/helper/CookbookHelper.java
@@ -1,48 +1,48 @@
-package org.dstadler.jgit.helper;
-
-/*
-   Copyright 2013, 2014 Dominik Stadler
-
-   Licensed under the Apache License, Version 2.0 (the "License");
-   you may not use this file except in compliance with the License.
-   You may obtain a copy of the License at
-
-     http://www.apache.org/licenses/LICENSE-2.0
-
-   Unless required by applicable law or agreed to in writing, software
-   distributed under the License is distributed on an "AS IS" BASIS,
-   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-   See the License for the specific language governing permissions and
-   limitations under the License.
- */
-
-import java.io.File;
-import java.io.IOException;
-
-import org.eclipse.jgit.lib.Repository;
-import org.eclipse.jgit.storage.file.FileRepositoryBuilder;
-
-
-public class CookbookHelper {
-
-    public static Repository openJGitCookbookRepository() throws IOException {
-        FileRepositoryBuilder builder = new FileRepositoryBuilder();
-        Repository repository = builder
-                .readEnvironment() // scan environment GIT_* variables
-                .findGitDir() // scan up the file system tree
-                .build();
-        return repository;
-    }
-
-    public static Repository createNewRepository() throws IOException {
-        // prepare a new folder
-        File localPath = File.createTempFile("TestGitRepository", "");
-        localPath.delete();
-
-        // create the directory
-        Repository repository = FileRepositoryBuilder.create(new File(localPath, ".git"));
-        repository.create();
-
-        return repository;
-    }
-}
+package org.dstadler.jgit.helper;
+
+/*
+   Copyright 2013, 2014 Dominik Stadler
+
+   Licensed under the Apache License, Version 2.0 (the "License");
+   you may not use this file except in compliance with the License.
+   You may obtain a copy of the License at
+
+     http://www.apache.org/licenses/LICENSE-2.0
+
+   Unless required by applicable law or agreed to in writing, software
+   distributed under the License is distributed on an "AS IS" BASIS,
+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+   See the License for the specific language governing permissions and
+   limitations under the License.
+ */
+
+import java.io.File;
+import java.io.IOException;
+
+import org.eclipse.jgit.lib.Repository;
+import org.eclipse.jgit.storage.file.FileRepositoryBuilder;
+
+
+public class CookbookHelper {
+
+    public static Repository openJGitCookbookRepository() throws IOException {
+        FileRepositoryBuilder builder = new FileRepositoryBuilder();
+        Repository repository = builder
+                .readEnvironment() // scan environment GIT_* variables
+                .findGitDir() // scan up the file system tree
+                .build();
+        return repository;
+    }
+
+    public static Repository createNewRepository() throws IOException {
+        // prepare a new folder
+        File localPath = File.createTempFile("TestGitRepository", "");
+        localPath.delete();
+
+        // create the directory
+        Repository repository = FileRepositoryBuilder.create(new File(localPath, ".git"));
+        repository.create();
+
+        return repository;
+    }
+}
diff --git a/src/main/java/org/dstadler/jgit/porcelain/AddFile.java b/src/main/java/org/dstadler/jgit/porcelain/AddFile.java
index c1f28aa..c4ccddb 100644
--- a/src/main/java/org/dstadler/jgit/porcelain/AddFile.java
+++ b/src/main/java/org/dstadler/jgit/porcelain/AddFile.java
@@ -1,54 +1,54 @@
-package org.dstadler.jgit.porcelain;
-
-/*
-   Copyright 2013, 2014 Dominik Stadler
-
-   Licensed under the Apache License, Version 2.0 (the "License");
-   you may not use this file except in compliance with the License.
-   You may obtain a copy of the License at
-
-     http://www.apache.org/licenses/LICENSE-2.0
-
-   Unless required by applicable law or agreed to in writing, software
-   distributed under the License is distributed on an "AS IS" BASIS,
-   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-   See the License for the specific language governing permissions and
-   limitations under the License.
- */
-
-import java.io.File;
-import java.io.IOException;
-
-import org.dstadler.jgit.helper.CookbookHelper;
-import org.eclipse.jgit.api.Git;
-import org.eclipse.jgit.api.errors.GitAPIException;
-import org.eclipse.jgit.lib.Repository;
-
-
-
-/**
- * Simple snippet which shows how to add a file to the index
- * 
- * @author dominik.stadler at gmx.at
- */
-public class AddFile {
-
-    public static void main(String[] args) throws IOException, GitAPIException {
-        // prepare a new test-repository
-        Repository repository = CookbookHelper.createNewRepository();
-        Git git = new Git(repository);
-
-        // create the file
-        File myfile = new File(repository.getDirectory().getParent(), "testfile");
-        myfile.createNewFile();
-
-        // run the add-call
-        git.add()
-                .addFilepattern("testfile")
-                .call();
-
-        System.out.println("Added file " + myfile + " to repository at " + repository.getDirectory());
-
-        repository.close();
-    }
-}
+package org.dstadler.jgit.porcelain;
+
+/*
+   Copyright 2013, 2014 Dominik Stadler
+
+   Licensed under the Apache License, Version 2.0 (the "License");
+   you may not use this file except in compliance with the License.
+   You may obtain a copy of the License at
+
+     http://www.apache.org/licenses/LICENSE-2.0
+
+   Unless required by applicable law or agreed to in writing, software
+   distributed under the License is distributed on an "AS IS" BASIS,
+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+   See the License for the specific language governing permissions and
+   limitations under the License.
+ */
+
+import java.io.File;
+import java.io.IOException;
+
+import org.dstadler.jgit.helper.CookbookHelper;
+import org.eclipse.jgit.api.Git;
+import org.eclipse.jgit.api.errors.GitAPIException;
+import org.eclipse.jgit.lib.Repository;
+
+
+
+/**
+ * Simple snippet which shows how to add a file to the index
+ * 
+ * @author dominik.stadler at gmx.at
+ */
+public class AddFile {
+
+    public static void main(String[] args) throws IOException, GitAPIException {
+        // prepare a new test-repository
+        Repository repository = CookbookHelper.createNewRepository();
+        Git git = new Git(repository);
+
+        // create the file
+        File myfile = new File(repository.getDirectory().getParent(), "testfile");
+        myfile.createNewFile();
+
+        // run the add-call
+        git.add()
+                .addFilepattern("testfile")
+                .call();
+
+        System.out.println("Added file " + myfile + " to repository at " + repository.getDirectory());
+
+        repository.close();
+    }
+}
diff --git a/src/main/java/org/dstadler/jgit/porcelain/CleanUntrackedFiles.java b/src/main/java/org/dstadler/jgit/porcelain/CleanUntrackedFiles.java
index e8a2350..fef582f 100755
--- a/src/main/java/org/dstadler/jgit/porcelain/CleanUntrackedFiles.java
+++ b/src/main/java/org/dstadler/jgit/porcelain/CleanUntrackedFiles.java
@@ -1,59 +1,59 @@
-package org.dstadler.jgit.porcelain;
-
-/*
-   Copyright 2013, 2014 Dominik Stadler
-
-   Licensed under the Apache License, Version 2.0 (the "License");
-   you may not use this file except in compliance with the License.
-   You may obtain a copy of the License at
-
-     http://www.apache.org/licenses/LICENSE-2.0
-
-   Unless required by applicable law or agreed to in writing, software
-   distributed under the License is distributed on an "AS IS" BASIS,
-   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-   See the License for the specific language governing permissions and
-   limitations under the License.
- */
-
-import java.io.File;
-import java.io.IOException;
-import java.util.Set;
-
-import org.dstadler.jgit.helper.CookbookHelper;
-import org.eclipse.jgit.api.Git;
-import org.eclipse.jgit.api.errors.GitAPIException;
-import org.eclipse.jgit.lib.Repository;
-
-
-
-/**
- * Simple snippet which shows how to list all Tags
- *
- * @author dominik.stadler at gmx.at
- */
-public class CleanUntrackedFiles {
-
-    public static void main(String[] args) throws IOException, GitAPIException {
-        Repository repository = CookbookHelper.createNewRepository();
-
-        System.out.println("Repository at " + repository.getWorkTree());
-
-        File untrackedFile = File.createTempFile("untracked", ".txt", repository.getWorkTree());
-        File untrackedDir = File.createTempFile("untrackedDir", "", repository.getWorkTree());
-        untrackedDir.delete();
-        untrackedDir.mkdirs();
-
-        System.out.println("Untracked exists: " + untrackedFile.exists() + " Dir: " + untrackedDir.exists() + "/" + untrackedDir.isDirectory());
-
-        Set<String> removed = new Git(repository).clean().setCleanDirectories(true).call();
-        for(String item : removed) {
-        	System.out.println("Removed: " + item);
-        }
-        System.out.println("Removed " + removed.size() + " items");
-
-        System.out.println("Untracked after: " + untrackedFile.exists() + " Dir: " + untrackedDir.exists() + "/" + untrackedDir.isDirectory());
-
-        repository.close();
-    }
-}
+package org.dstadler.jgit.porcelain;
+
+/*
+   Copyright 2013, 2014 Dominik Stadler
+
+   Licensed under the Apache License, Version 2.0 (the "License");
+   you may not use this file except in compliance with the License.
+   You may obtain a copy of the License at
+
+     http://www.apache.org/licenses/LICENSE-2.0
+
+   Unless required by applicable law or agreed to in writing, software
+   distributed under the License is distributed on an "AS IS" BASIS,
+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+   See the License for the specific language governing permissions and
+   limitations under the License.
+ */
+
+import java.io.File;
+import java.io.IOException;
+import java.util.Set;
+
+import org.dstadler.jgit.helper.CookbookHelper;
+import org.eclipse.jgit.api.Git;
+import org.eclipse.jgit.api.errors.GitAPIException;
+import org.eclipse.jgit.lib.Repository;
+
+
+
+/**
+ * Simple snippet which shows how to list all Tags
+ *
+ * @author dominik.stadler at gmx.at
+ */
+public class CleanUntrackedFiles {
+
+    public static void main(String[] args) throws IOException, GitAPIException {
+        Repository repository = CookbookHelper.createNewRepository();
+
+        System.out.println("Repository at " + repository.getWorkTree());
+
+        File untrackedFile = File.createTempFile("untracked", ".txt", repository.getWorkTree());
+        File untrackedDir = File.createTempFile("untrackedDir", "", repository.getWorkTree());
+        untrackedDir.delete();
+        untrackedDir.mkdirs();
+
+        System.out.println("Untracked exists: " + untrackedFile.exists() + " Dir: " + untrackedDir.exists() + "/" + untrackedDir.isDirectory());
+
+        Set<String> removed = new Git(repository).clean().setCleanDirectories(true).call();
+        for(String item : removed) {
+        	System.out.println("Removed: " + item);
+        }
+        System.out.println("Removed " + removed.size() + " items");
+
+        System.out.println("Untracked after: " + untrackedFile.exists() + " Dir: " + untrackedDir.exists() + "/" + untrackedDir.isDirectory());
+
+        repository.close();
+    }
+}
diff --git a/src/main/java/org/dstadler/jgit/porcelain/CloneRemoteRepository.java b/src/main/java/org/dstadler/jgit/porcelain/CloneRemoteRepository.java
index 72e96ed..3426d57 100644
--- a/src/main/java/org/dstadler/jgit/porcelain/CloneRemoteRepository.java
+++ b/src/main/java/org/dstadler/jgit/porcelain/CloneRemoteRepository.java
@@ -1,63 +1,63 @@
-package org.dstadler.jgit.porcelain;
-
-/*
-   Copyright 2013, 2014 Dominik Stadler
-
-   Licensed under the Apache License, Version 2.0 (the "License");
-   you may not use this file except in compliance with the License.
-   You may obtain a copy of the License at
-
-     http://www.apache.org/licenses/LICENSE-2.0
-
-   Unless required by applicable law or agreed to in writing, software
-   distributed under the License is distributed on an "AS IS" BASIS,
-   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-   See the License for the specific language governing permissions and
-   limitations under the License.
- */
-
-import java.io.File;
-import java.io.IOException;
-
-import org.eclipse.jgit.api.Git;
-import org.eclipse.jgit.api.errors.GitAPIException;
-import org.eclipse.jgit.api.errors.InvalidRemoteException;
-import org.eclipse.jgit.api.errors.TransportException;
-import org.eclipse.jgit.lib.Repository;
-import org.eclipse.jgit.storage.file.FileRepositoryBuilder;
-
-
-
-/**
- * Simple snippet which shows how to clone a repository from a remote source
- * 
- * @author dominik.stadler at gmx.at
- */
-public class CloneRemoteRepository {
-
-    private static final String REMOTE_URL = "https://github.com/github/testrepo.git";
-
-    public static void main(String[] args) throws IOException, InvalidRemoteException, TransportException, GitAPIException {
-        // prepare a new folder for the cloned repository
-        File localPath = File.createTempFile("TestGitRepository", "");
-        localPath.delete();
-
-        // then clone
-        System.out.println("Cloning from " + REMOTE_URL + " to " + localPath);
-        Git.cloneRepository()
-                .setURI(REMOTE_URL)
-                .setDirectory(localPath)
-                .call();
-
-        // now open the created repository
-        FileRepositoryBuilder builder = new FileRepositoryBuilder();
-        Repository repository = builder.setGitDir(localPath)
-                .readEnvironment() // scan environment GIT_* variables
-                .findGitDir() // scan up the file system tree
-                .build();
-
-        System.out.println("Having repository: " + repository.getDirectory());
-
-        repository.close();
-    }
-}
+package org.dstadler.jgit.porcelain;
+
+/*
+   Copyright 2013, 2014 Dominik Stadler
+
+   Licensed under the Apache License, Version 2.0 (the "License");
+   you may not use this file except in compliance with the License.
+   You may obtain a copy of the License at
+
+     http://www.apache.org/licenses/LICENSE-2.0
+
+   Unless required by applicable law or agreed to in writing, software
+   distributed under the License is distributed on an "AS IS" BASIS,
+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+   See the License for the specific language governing permissions and
+   limitations under the License.
+ */
+
+import java.io.File;
+import java.io.IOException;
+
+import org.eclipse.jgit.api.Git;
+import org.eclipse.jgit.api.errors.GitAPIException;
+import org.eclipse.jgit.api.errors.InvalidRemoteException;
+import org.eclipse.jgit.api.errors.TransportException;
+import org.eclipse.jgit.lib.Repository;
+import org.eclipse.jgit.storage.file.FileRepositoryBuilder;
+
+
+
+/**
+ * Simple snippet which shows how to clone a repository from a remote source
+ * 
+ * @author dominik.stadler at gmx.at
+ */
+public class CloneRemoteRepository {
+
+    private static final String REMOTE_URL = "https://github.com/github/testrepo.git";
+
+    public static void main(String[] args) throws IOException, InvalidRemoteException, TransportException, GitAPIException {
+        // prepare a new folder for the cloned repository
+        File localPath = File.createTempFile("TestGitRepository", "");
+        localPath.delete();
+
+        // then clone
+        System.out.println("Cloning from " + REMOTE_URL + " to " + localPath);
+        Git.cloneRepository()
+                .setURI(REMOTE_URL)
+                .setDirectory(localPath)
+                .call();
+
+        // now open the created repository
+        FileRepositoryBuilder builder = new FileRepositoryBuilder();
+        Repository repository = builder.setGitDir(localPath)
+                .readEnvironment() // scan environment GIT_* variables
+                .findGitDir() // scan up the file system tree
+                .build();
+
+        System.out.println("Having repository: " + repository.getDirectory());
+
+        repository.close();
+    }
+}
diff --git a/src/main/java/org/dstadler/jgit/porcelain/CommitFile.java b/src/main/java/org/dstadler/jgit/porcelain/CommitFile.java
index 9e91b69..9ab7f1b 100644
--- a/src/main/java/org/dstadler/jgit/porcelain/CommitFile.java
+++ b/src/main/java/org/dstadler/jgit/porcelain/CommitFile.java
@@ -1,59 +1,59 @@
-package org.dstadler.jgit.porcelain;
-
-/*
-   Copyright 2013, 2014 Dominik Stadler
-
-   Licensed under the Apache License, Version 2.0 (the "License");
-   you may not use this file except in compliance with the License.
-   You may obtain a copy of the License at
-
-     http://www.apache.org/licenses/LICENSE-2.0
-
-   Unless required by applicable law or agreed to in writing, software
-   distributed under the License is distributed on an "AS IS" BASIS,
-   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-   See the License for the specific language governing permissions and
-   limitations under the License.
- */
-
-import java.io.File;
-import java.io.IOException;
-
-import org.dstadler.jgit.helper.CookbookHelper;
-import org.eclipse.jgit.api.Git;
-import org.eclipse.jgit.api.errors.GitAPIException;
-import org.eclipse.jgit.lib.Repository;
-
-
-
-/**
- * Simple snippet which shows how to commit a file
- * 
- * @author dominik.stadler at gmx.at
- */
-public class CommitFile {
-
-    public static void main(String[] args) throws IOException, GitAPIException {
-        // prepare a new test-repository
-        Repository repository = CookbookHelper.createNewRepository();
-        Git git = new Git(repository);
-
-        // create the file
-        File myfile = new File(repository.getDirectory().getParent(), "testfile");
-        myfile.createNewFile();
-
-        // run the add
-        git.add()
-                .addFilepattern("testfile")
-                .call();
-
-        // and then commit the changes
-        git.commit()
-                .setMessage("Added testfile")
-                .call();
-
-        System.out.println("Committed file " + myfile + " to repository at " + repository.getDirectory());
-
-        repository.close();
-    }
-}
+package org.dstadler.jgit.porcelain;
+
+/*
+   Copyright 2013, 2014 Dominik Stadler
+
+   Licensed under the Apache License, Version 2.0 (the "License");
+   you may not use this file except in compliance with the License.
+   You may obtain a copy of the License at
+
+     http://www.apache.org/licenses/LICENSE-2.0
+
+   Unless required by applicable law or agreed to in writing, software
+   distributed under the License is distributed on an "AS IS" BASIS,
+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+   See the License for the specific language governing permissions and
+   limitations under the License.
+ */
+
+import java.io.File;
+import java.io.IOException;
+
+import org.dstadler.jgit.helper.CookbookHelper;
+import org.eclipse.jgit.api.Git;
+import org.eclipse.jgit.api.errors.GitAPIException;
+import org.eclipse.jgit.lib.Repository;
+
+
+
+/**
+ * Simple snippet which shows how to commit a file
+ * 
+ * @author dominik.stadler at gmx.at
+ */
+public class CommitFile {
+
+    public static void main(String[] args) throws IOException, GitAPIException {
+        // prepare a new test-repository
+        Repository repository = CookbookHelper.createNewRepository();
+        Git git = new Git(repository);
+
+        // create the file
+        File myfile = new File(repository.getDirectory().getParent(), "testfile");
+        myfile.createNewFile();
+
+        // run the add
+        git.add()
+                .addFilepattern("testfile")
+                .call();
+
+        // and then commit the changes
+        git.commit()
+                .setMessage("Added testfile")
+                .call();
+
+        System.out.println("Committed file " + myfile + " to repository at " + repository.getDirectory());
+
+        repository.close();
+    }
+}
diff --git a/src/main/java/org/dstadler/jgit/porcelain/CreateAndDeleteBranch.java b/src/main/java/org/dstadler/jgit/porcelain/CreateAndDeleteBranch.java
index eb00114..a877932 100755
--- a/src/main/java/org/dstadler/jgit/porcelain/CreateAndDeleteBranch.java
+++ b/src/main/java/org/dstadler/jgit/porcelain/CreateAndDeleteBranch.java
@@ -1,69 +1,69 @@
-package org.dstadler.jgit.porcelain;
-
-/*
-   Copyright 2013, 2014 Dominik Stadler
-
-   Licensed under the Apache License, Version 2.0 (the "License");
-   you may not use this file except in compliance with the License.
-   You may obtain a copy of the License at
-
-     http://www.apache.org/licenses/LICENSE-2.0
-
-   Unless required by applicable law or agreed to in writing, software
-   distributed under the License is distributed on an "AS IS" BASIS,
-   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-   See the License for the specific language governing permissions and
-   limitations under the License.
- */
-
-import java.io.IOException;
-import java.util.List;
-
-import org.dstadler.jgit.helper.CookbookHelper;
-import org.eclipse.jgit.api.Git;
-import org.eclipse.jgit.api.errors.GitAPIException;
-import org.eclipse.jgit.lib.Ref;
-import org.eclipse.jgit.lib.Repository;
-
-
-
-/**
- * Simple snippet which shows how to create and delete branches
- * 
- * @author dominik.stadler at gmx.at
- */
-public class CreateAndDeleteBranch {
-
-    public static void main(String[] args) throws IOException, GitAPIException {
-        // prepare test-repository
-        Repository repository = CookbookHelper.openJGitCookbookRepository();
-        Git git = new Git(repository);
-
-        List<Ref> call = new Git(repository).branchList().call();
-        for (Ref ref : call) {
-            System.out.println("Branch-Before: " + ref + " " + ref.getName() + " " + ref.getObjectId().getName());
-        }
-
-        // run the add-call
-        git.branchCreate()
-                .setName("testbranch")
-                .call();
-
-        call = new Git(repository).branchList().call();
-        for (Ref ref : call) {
-            System.out.println("Branch-Created: " + ref + " " + ref.getName() + " " + ref.getObjectId().getName());
-        }
-
-        // run the delete-call
-        git.branchDelete()
-                .setBranchNames("testbranch")
-                .call();
-
-        call = new Git(repository).branchList().call();
-        for (Ref ref : call) {
-            System.out.println("Branch-After: " + ref + " " + ref.getName() + " " + ref.getObjectId().getName());
-        }
-
-        repository.close();
-    }
-}
+package org.dstadler.jgit.porcelain;
+
+/*
+   Copyright 2013, 2014 Dominik Stadler
+
+   Licensed under the Apache License, Version 2.0 (the "License");
+   you may not use this file except in compliance with the License.
+   You may obtain a copy of the License at
+
+     http://www.apache.org/licenses/LICENSE-2.0
+
+   Unless required by applicable law or agreed to in writing, software
+   distributed under the License is distributed on an "AS IS" BASIS,
+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+   See the License for the specific language governing permissions and
+   limitations under the License.
+ */
+
+import java.io.IOException;
+import java.util.List;
+
+import org.dstadler.jgit.helper.CookbookHelper;
+import org.eclipse.jgit.api.Git;
+import org.eclipse.jgit.api.errors.GitAPIException;
+import org.eclipse.jgit.lib.Ref;
+import org.eclipse.jgit.lib.Repository;
+
+
+
+/**
+ * Simple snippet which shows how to create and delete branches
+ * 
+ * @author dominik.stadler at gmx.at
+ */
+public class CreateAndDeleteBranch {
+
+    public static void main(String[] args) throws IOException, GitAPIException {
+        // prepare test-repository
+        Repository repository = CookbookHelper.openJGitCookbookRepository();
+        Git git = new Git(repository);
+
+        List<Ref> call = new Git(repository).branchList().call();
+        for (Ref ref : call) {
+            System.out.println("Branch-Before: " + ref + " " + ref.getName() + " " + ref.getObjectId().getName());
+        }
+
+        // run the add-call
+        git.branchCreate()
+                .setName("testbranch")
+                .call();
+
+        call = new Git(repository).branchList().call();
+        for (Ref ref : call) {
+            System.out.println("Branch-Created: " + ref + " " + ref.getName() + " " + ref.getObjectId().getName());
+        }
+
+        // run the delete-call
+        git.branchDelete()
+                .setBranchNames("testbranch")
+                .call();
+
+        call = new Git(repository).branchList().call();
+        for (Ref ref : call) {
+            System.out.println("Branch-After: " + ref + " " + ref.getName() + " " + ref.getObjectId().getName());
+        }
+
+        repository.close();
+    }
+}
diff --git a/src/main/java/org/dstadler/jgit/porcelain/CreateAndDeleteTag.java b/src/main/java/org/dstadler/jgit/porcelain/CreateAndDeleteTag.java
index 8648603..9ea9df6 100755
--- a/src/main/java/org/dstadler/jgit/porcelain/CreateAndDeleteTag.java
+++ b/src/main/java/org/dstadler/jgit/porcelain/CreateAndDeleteTag.java
@@ -1,73 +1,73 @@
-package org.dstadler.jgit.porcelain;
-
-/*
-   Copyright 2013, 2014 Dominik Stadler
-
-   Licensed under the Apache License, Version 2.0 (the "License");
-   you may not use this file except in compliance with the License.
-   You may obtain a copy of the License at
-
-     http://www.apache.org/licenses/LICENSE-2.0
-
-   Unless required by applicable law or agreed to in writing, software
-   distributed under the License is distributed on an "AS IS" BASIS,
-   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-   See the License for the specific language governing permissions and
-   limitations under the License.
- */
-
-import java.io.IOException;
-
-import org.dstadler.jgit.helper.CookbookHelper;
-import org.eclipse.jgit.api.Git;
-import org.eclipse.jgit.api.errors.GitAPIException;
-import org.eclipse.jgit.lib.ObjectId;
-import org.eclipse.jgit.lib.Ref;
-import org.eclipse.jgit.lib.Repository;
-import org.eclipse.jgit.revwalk.RevCommit;
-import org.eclipse.jgit.revwalk.RevWalk;
-
-
-
-/**
- * Simple snippet which shows how to create a tag
- * 
- * @author dominik.stadler at gmx.at
- */
-public class CreateAndDeleteTag {
-
-    public static void main(String[] args) throws IOException, GitAPIException {
-        // prepare test-repository
-        Repository repository = CookbookHelper.openJGitCookbookRepository();
-        Git git = new Git(repository);
-
-        // remove the tag before creating it
-        git.tagDelete().setTags("tag_for_testing").call();
-
-        // set it on the current HEAD
-        Ref tag = git.tag().setName("tag_for_testing").call();
-        System.out.println("Created/moved tag " + tag + " to repository at " + repository.getDirectory());
-
-        // remove the tag again
-        git.tagDelete().setTags("tag_for_testing").call();
-
-        // read some other commit and set the tag on it
-        ObjectId id = repository.resolve("HEAD^");
-        RevWalk walk = new RevWalk(repository);
-        RevCommit commit = walk.parseCommit(id);
-        tag = git.tag().setObjectId(commit).setName("tag_for_testing").call();
-        System.out.println("Created/moved tag " + tag + " to repository at " + repository.getDirectory());
-
-        // remove the tag again
-        git.tagDelete().setTags("tag_for_testing").call();
-
-        // create an annotated tag
-        tag = git.tag().setName("tag_for_testing").setAnnotated(true).call();
-        System.out.println("Created/moved tag " + tag + " to repository at " + repository.getDirectory());
-
-        // remove the tag again
-        git.tagDelete().setTags("tag_for_testing").call();
-
-        repository.close();
-    }
-}
+package org.dstadler.jgit.porcelain;
+
+/*
+   Copyright 2013, 2014 Dominik Stadler
+
+   Licensed under the Apache License, Version 2.0 (the "License");
+   you may not use this file except in compliance with the License.
+   You may obtain a copy of the License at
+
+     http://www.apache.org/licenses/LICENSE-2.0
+
+   Unless required by applicable law or agreed to in writing, software
+   distributed under the License is distributed on an "AS IS" BASIS,
+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+   See the License for the specific language governing permissions and
+   limitations under the License.
+ */
+
+import java.io.IOException;
+
+import org.dstadler.jgit.helper.CookbookHelper;
+import org.eclipse.jgit.api.Git;
+import org.eclipse.jgit.api.errors.GitAPIException;
+import org.eclipse.jgit.lib.ObjectId;
+import org.eclipse.jgit.lib.Ref;
+import org.eclipse.jgit.lib.Repository;
+import org.eclipse.jgit.revwalk.RevCommit;
+import org.eclipse.jgit.revwalk.RevWalk;
+
+
+
+/**
+ * Simple snippet which shows how to create a tag
+ * 
+ * @author dominik.stadler at gmx.at
+ */
+public class CreateAndDeleteTag {
+
+    public static void main(String[] args) throws IOException, GitAPIException {
+        // prepare test-repository
+        Repository repository = CookbookHelper.openJGitCookbookRepository();
+        Git git = new Git(repository);
+
+        // remove the tag before creating it
+        git.tagDelete().setTags("tag_for_testing").call();
+
+        // set it on the current HEAD
+        Ref tag = git.tag().setName("tag_for_testing").call();
+        System.out.println("Created/moved tag " + tag + " to repository at " + repository.getDirectory());
+
+        // remove the tag again
+        git.tagDelete().setTags("tag_for_testing").call();
+
+        // read some other commit and set the tag on it
+        ObjectId id = repository.resolve("HEAD^");
+        RevWalk walk = new RevWalk(repository);
+        RevCommit commit = walk.parseCommit(id);
+        tag = git.tag().setObjectId(commit).setName("tag_for_testing").call();
+        System.out.println("Created/moved tag " + tag + " to repository at " + repository.getDirectory());
+
+        // remove the tag again
+        git.tagDelete().setTags("tag_for_testing").call();
+
+        // create an annotated tag
+        tag = git.tag().setName("tag_for_testing").setAnnotated(true).call();
+        System.out.println("Created/moved tag " + tag + " to repository at " + repository.getDirectory());
+
+        // remove the tag again
+        git.tagDelete().setTags("tag_for_testing").call();
+
+        repository.close();
+    }
+}
diff --git a/src/main/java/org/dstadler/jgit/porcelain/CreateArchive.java b/src/main/java/org/dstadler/jgit/porcelain/CreateArchive.java
index c09c1b7..b30f1ac 100644
--- a/src/main/java/org/dstadler/jgit/porcelain/CreateArchive.java
+++ b/src/main/java/org/dstadler/jgit/porcelain/CreateArchive.java
@@ -1,99 +1,99 @@
-package org.dstadler.jgit.porcelain;
-
-/*
-   Copyright 2013, 2014 Dominik Stadler
-
-   Licensed under the Apache License, Version 2.0 (the "License");
-   you may not use this file except in compliance with the License.
-   You may obtain a copy of the License at
-
-     http://www.apache.org/licenses/LICENSE-2.0
-
-   Unless required by applicable law or agreed to in writing, software
-   distributed under the License is distributed on an "AS IS" BASIS,
-   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-   See the License for the specific language governing permissions and
-   limitations under the License.
- */
-
-import java.io.File;
-import java.io.FileOutputStream;
-import java.io.IOException;
-import java.io.OutputStream;
-import java.util.Collections;
-import java.util.zip.ZipEntry;
-import java.util.zip.ZipOutputStream;
-
-import org.dstadler.jgit.helper.CookbookHelper;
-import org.eclipse.jgit.api.ArchiveCommand;
-import org.eclipse.jgit.api.ArchiveCommand.Format;
-import org.eclipse.jgit.api.Git;
-import org.eclipse.jgit.api.errors.GitAPIException;
-import org.eclipse.jgit.lib.FileMode;
-import org.eclipse.jgit.lib.ObjectLoader;
-import org.eclipse.jgit.lib.Repository;
-
-
-
-/**
- * Simple snippet which shows how to package the contents of a branch into an archive file.
- * 
- * @author dominik.stadler at gmx.at
- */
-public class CreateArchive {
-
-    /**
-     * A custom format for Zip-files, unfortunately JGit does not come with any pre-defined ones
-     */
-    private static final class ZipArchiveFormat implements Format<ZipOutputStream> {
-
-        public ZipOutputStream createArchiveOutputStream(OutputStream s) throws IOException {
-            return new ZipOutputStream(s);
-        }
-
-        public void putEntry(ZipOutputStream out, String path, FileMode mode, ObjectLoader loader) throws IOException {
-            ZipEntry entry = new ZipEntry(path);
-            out.putNextEntry(entry);
-            out.write(loader.getBytes());
-            out.closeEntry();
-        }
-
-        public Iterable<String> suffixes() {
-            return Collections.singleton(".zip");
-        }
-    }
-
-    public static void main(String[] args) throws IOException, GitAPIException {
-        Repository repository = CookbookHelper.openJGitCookbookRepository();
-
-
-        File file = File.createTempFile("test", ".zip");
-        try {
-
-            // make the archive format known
-            ArchiveCommand.registerFormat("zip", new ZipArchiveFormat());
-            try {
-                // this is the file that we write the archive to
-                OutputStream out = new FileOutputStream(file);
-                try {
-                    // finally call the ArchiveCommand to write out using the given format
-                    new Git(repository).archive()
-                            .setTree(repository.resolve("master"))
-                            .setFormat("zip")
-                            .setOutputStream(out)
-                            .call();
-                } finally {
-                    out.close();
-                }
-            } finally {
-                ArchiveCommand.unregisterFormat("zip");
-            }
-
-            System.out.println("Wrote " + file.length() + " bytes to " + file);
-        } finally {
-            file.delete();
-        }
-
-        repository.close();
-    }
-}
+package org.dstadler.jgit.porcelain;
+
+/*
+   Copyright 2013, 2014 Dominik Stadler
+
+   Licensed under the Apache License, Version 2.0 (the "License");
+   you may not use this file except in compliance with the License.
+   You may obtain a copy of the License at
+
+     http://www.apache.org/licenses/LICENSE-2.0
+
+   Unless required by applicable law or agreed to in writing, software
+   distributed under the License is distributed on an "AS IS" BASIS,
+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+   See the License for the specific language governing permissions and
+   limitations under the License.
+ */
+
+import java.io.File;
+import java.io.FileOutputStream;
+import java.io.IOException;
+import java.io.OutputStream;
+import java.util.Collections;
+import java.util.zip.ZipEntry;
+import java.util.zip.ZipOutputStream;
+
+import org.dstadler.jgit.helper.CookbookHelper;
+import org.eclipse.jgit.api.ArchiveCommand;
+import org.eclipse.jgit.api.ArchiveCommand.Format;
+import org.eclipse.jgit.api.Git;
+import org.eclipse.jgit.api.errors.GitAPIException;
+import org.eclipse.jgit.lib.FileMode;
+import org.eclipse.jgit.lib.ObjectLoader;
+import org.eclipse.jgit.lib.Repository;
+
+
+
+/**
+ * Simple snippet which shows how to package the contents of a branch into an archive file.
+ * 
+ * @author dominik.stadler at gmx.at
+ */
+public class CreateArchive {
+
+    /**
+     * A custom format for Zip-files, unfortunately JGit does not come with any pre-defined ones
+     */
+    private static final class ZipArchiveFormat implements Format<ZipOutputStream> {
+
+        public ZipOutputStream createArchiveOutputStream(OutputStream s) throws IOException {
+            return new ZipOutputStream(s);
+        }
+
+        public void putEntry(ZipOutputStream out, String path, FileMode mode, ObjectLoader loader) throws IOException {
+            ZipEntry entry = new ZipEntry(path);
+            out.putNextEntry(entry);
+            out.write(loader.getBytes());
+            out.closeEntry();
+        }
+
+        public Iterable<String> suffixes() {
+            return Collections.singleton(".zip");
+        }
+    }
+
+    public static void main(String[] args) throws IOException, GitAPIException {
+        Repository repository = CookbookHelper.openJGitCookbookRepository();
+
+
+        File file = File.createTempFile("test", ".zip");
+        try {
+
+            // make the archive format known
+            ArchiveCommand.registerFormat("zip", new ZipArchiveFormat());
+            try {
+                // this is the file that we write the archive to
+                OutputStream out = new FileOutputStream(file);
+                try {
+                    // finally call the ArchiveCommand to write out using the given format
+                    new Git(repository).archive()
+                            .setTree(repository.resolve("master"))
+                            .setFormat("zip")
+                            .setOutputStream(out)
+                            .call();
+                } finally {
+                    out.close();
+                }
+            } finally {
+                ArchiveCommand.unregisterFormat("zip");
+            }
+
+            System.out.println("Wrote " + file.length() + " bytes to " + file);
+        } finally {
+            file.delete();
+        }
+
+        repository.close();
+    }
+}
diff --git a/src/main/java/org/dstadler/jgit/porcelain/CreateListApplyAndDropStash.java b/src/main/java/org/dstadler/jgit/porcelain/CreateListApplyAndDropStash.java
index 9c3dcf2..492e81b 100644
--- a/src/main/java/org/dstadler/jgit/porcelain/CreateListApplyAndDropStash.java
+++ b/src/main/java/org/dstadler/jgit/porcelain/CreateListApplyAndDropStash.java
@@ -1,95 +1,95 @@
-package org.dstadler.jgit.porcelain;
-
-/*
-   Copyright 2013, 2014 Dominik Stadler
-
-   Licensed under the Apache License, Version 2.0 (the "License");
-   you may not use this file except in compliance with the License.
-   You may obtain a copy of the License at
-
-     http://www.apache.org/licenses/LICENSE-2.0
-
-   Unless required by applicable law or agreed to in writing, software
-   distributed under the License is distributed on an "AS IS" BASIS,
-   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-   See the License for the specific language governing permissions and
-   limitations under the License.
- */
-
-import java.io.File;
-import java.io.IOException;
-import java.util.Collection;
-
-import org.apache.commons.io.FileUtils;
-import org.dstadler.jgit.helper.CookbookHelper;
-import org.eclipse.jgit.api.Git;
-import org.eclipse.jgit.api.errors.GitAPIException;
-import org.eclipse.jgit.lib.ObjectId;
-import org.eclipse.jgit.lib.Repository;
-import org.eclipse.jgit.revwalk.RevCommit;
-
-
-
-/**
- * Simple snippet which shows how to use commands for stashing changes.
- * 
- * @author dominik.stadler at gmx.at
- */
-public class CreateListApplyAndDropStash {
-
-    public static void main(String[] args) throws IOException, GitAPIException {
-        // prepare a new test-repository
-        Repository repository = CookbookHelper.createNewRepository();
-        Git git = new Git(repository);
-
-        // create a file
-        File file1 = new File(repository.getDirectory().getParent(), "testfile");
-        FileUtils.writeStringToFile(file1, "some text");
-        File file2 = new File(repository.getDirectory().getParent(), "testfile2");
-        FileUtils.writeStringToFile(file2, "some text");
-        
-        // add and commit the file
-        git.add()
-                .addFilepattern("testfile")
-                .call();
-        git.add()
-                .addFilepattern("testfile2")
-                .call();
-        git.commit()
-                .setMessage("Added testfiles")
-                .call();
-
-        // then modify the file
-        FileUtils.writeStringToFile(file1, "some more text", true);
-        
-        // push the changes to a new stash
-        RevCommit stash = git.stashCreate()
-                .call();
-
-        System.out.println("Created stash " + stash);
-
-        // then modify the 2nd file
-        FileUtils.writeStringToFile(file2, "some more text", true);
-        
-        // push the changes to a new stash
-        stash = git.stashCreate()
-                .call();
-
-        System.out.println("Created stash " + stash);
-
-        // list the stashes
-        Collection<RevCommit> stashes = git.stashList().call();
-        for(RevCommit rev : stashes) {
-            System.out.println("Found stash: " + rev);
-        }
-        
-        // drop the 1st stash without applying it
-        ObjectId call = git.stashDrop().setStashRef(0).call();
-        System.out.println("StashDrop returned: " + call);
-        
-        ObjectId applied = git.stashApply().setStashRef(stash.getName()).call();
-        System.out.println("Applied 2nd stash as: " + applied);
-
-        repository.close();
-    }
-}
+package org.dstadler.jgit.porcelain;
+
+/*
+   Copyright 2013, 2014 Dominik Stadler
+
+   Licensed under the Apache License, Version 2.0 (the "License");
+   you may not use this file except in compliance with the License.
+   You may obtain a copy of the License at
+
+     http://www.apache.org/licenses/LICENSE-2.0
+
+   Unless required by applicable law or agreed to in writing, software
+   distributed under the License is distributed on an "AS IS" BASIS,
+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+   See the License for the specific language governing permissions and
+   limitations under the License.
+ */
+
+import java.io.File;
+import java.io.IOException;
+import java.util.Collection;
+
+import org.apache.commons.io.FileUtils;
+import org.dstadler.jgit.helper.CookbookHelper;
+import org.eclipse.jgit.api.Git;
+import org.eclipse.jgit.api.errors.GitAPIException;
+import org.eclipse.jgit.lib.ObjectId;
+import org.eclipse.jgit.lib.Repository;
+import org.eclipse.jgit.revwalk.RevCommit;
+
+
+
+/**
+ * Simple snippet which shows how to use commands for stashing changes.
+ * 
+ * @author dominik.stadler at gmx.at
+ */
+public class CreateListApplyAndDropStash {
+
+    public static void main(String[] args) throws IOException, GitAPIException {
+        // prepare a new test-repository
+        Repository repository = CookbookHelper.createNewRepository();
+        Git git = new Git(repository);
+
+        // create a file
+        File file1 = new File(repository.getDirectory().getParent(), "testfile");
+        FileUtils.writeStringToFile(file1, "some text");
+        File file2 = new File(repository.getDirectory().getParent(), "testfile2");
+        FileUtils.writeStringToFile(file2, "some text");
+        
+        // add and commit the file
+        git.add()
+                .addFilepattern("testfile")
+                .call();
+        git.add()
+                .addFilepattern("testfile2")
+                .call();
+        git.commit()
+                .setMessage("Added testfiles")
+                .call();
+
+        // then modify the file
+        FileUtils.writeStringToFile(file1, "some more text", true);
+        
+        // push the changes to a new stash
+        RevCommit stash = git.stashCreate()
+                .call();
+
+        System.out.println("Created stash " + stash);
+
+        // then modify the 2nd file
+        FileUtils.writeStringToFile(file2, "some more text", true);
+        
+        // push the changes to a new stash
+        stash = git.stashCreate()
+                .call();
+
+        System.out.println("Created stash " + stash);
+
+        // list the stashes
+        Collection<RevCommit> stashes = git.stashList().call();
+        for(RevCommit rev : stashes) {
+            System.out.println("Found stash: " + rev);
+        }
+        
+        // drop the 1st stash without applying it
+        ObjectId call = git.stashDrop().setStashRef(0).call();
+        System.out.println("StashDrop returned: " + call);
+        
+        ObjectId applied = git.stashApply().setStashRef(stash.getName()).call();
+        System.out.println("Applied 2nd stash as: " + applied);
+
+        repository.close();
+    }
+}
diff --git a/src/main/java/org/dstadler/jgit/porcelain/InitRepository.java b/src/main/java/org/dstadler/jgit/porcelain/InitRepository.java
index 98b893a..e090fc1 100755
--- a/src/main/java/org/dstadler/jgit/porcelain/InitRepository.java
+++ b/src/main/java/org/dstadler/jgit/porcelain/InitRepository.java
@@ -1,51 +1,51 @@
-package org.dstadler.jgit.porcelain;
-
-/*
-   Copyright 2013, 2014 Dominik Stadler
-
-   Licensed under the Apache License, Version 2.0 (the "License");
-   you may not use this file except in compliance with the License.
-   You may obtain a copy of the License at
-
-     http://www.apache.org/licenses/LICENSE-2.0
-
-   Unless required by applicable law or agreed to in writing, software
-   distributed under the License is distributed on an "AS IS" BASIS,
-   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-   See the License for the specific language governing permissions and
-   limitations under the License.
- */
-
-import java.io.File;
-import java.io.IOException;
-
-import org.eclipse.jgit.api.Git;
-import org.eclipse.jgit.api.errors.GitAPIException;
-import org.eclipse.jgit.lib.Repository;
-import org.eclipse.jgit.storage.file.FileRepositoryBuilder;
-
-
-
-/**
- * Simple snippet which shows how to initialize a new repository
- * 
- * @author dominik.stadler at gmx.at
- */
-public class InitRepository {
-
-    public static void main(String[] args) throws IOException, GitAPIException {
-        // run the init-call
-        File dir = File.createTempFile("gitinit", ".test");
-        dir.delete();
-
-        Git.init()
-                .setDirectory(dir)
-                .call();
-
-        Repository repository = FileRepositoryBuilder.create(new File(dir.getAbsolutePath(), ".git"));
-
-        System.out.println("Created a new repository at " + repository.getDirectory());
-
-        repository.close();
-    }
-}
+package org.dstadler.jgit.porcelain;
+
+/*
+   Copyright 2013, 2014 Dominik Stadler
+
+   Licensed under the Apache License, Version 2.0 (the "License");
+   you may not use this file except in compliance with the License.
+   You may obtain a copy of the License at
+
+     http://www.apache.org/licenses/LICENSE-2.0
+
+   Unless required by applicable law or agreed to in writing, software
+   distributed under the License is distributed on an "AS IS" BASIS,
+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+   See the License for the specific language governing permissions and
+   limitations under the License.
+ */
+
+import java.io.File;
+import java.io.IOException;
+
+import org.eclipse.jgit.api.Git;
+import org.eclipse.jgit.api.errors.GitAPIException;
+import org.eclipse.jgit.lib.Repository;
+import org.eclipse.jgit.storage.file.FileRepositoryBuilder;
+
+
+
+/**
+ * Simple snippet which shows how to initialize a new repository
+ * 
+ * @author dominik.stadler at gmx.at
+ */
+public class InitRepository {
+
+    public static void main(String[] args) throws IOException, GitAPIException {
+        // run the init-call
+        File dir = File.createTempFile("gitinit", ".test");
+        dir.delete();
+
+        Git.init()
+                .setDirectory(dir)
+                .call();
+
+        Repository repository = FileRepositoryBuilder.create(new File(dir.getAbsolutePath(), ".git"));
+
+        System.out.println("Created a new repository at " + repository.getDirectory());
+
+        repository.close();
+    }
+}
diff --git a/src/main/java/org/dstadler/jgit/porcelain/ListRemoteRepository.java b/src/main/java/org/dstadler/jgit/porcelain/ListRemoteRepository.java
index b88fce0..f3833c5 100644
--- a/src/main/java/org/dstadler/jgit/porcelain/ListRemoteRepository.java
+++ b/src/main/java/org/dstadler/jgit/porcelain/ListRemoteRepository.java
@@ -1,53 +1,53 @@
-package org.dstadler.jgit.porcelain;
-
-/*
-   Copyright 2013, 2014 Dominik Stadler
-
-   Licensed under the Apache License, Version 2.0 (the "License");
-   you may not use this file except in compliance with the License.
-   You may obtain a copy of the License at
-
-     http://www.apache.org/licenses/LICENSE-2.0
-
-   Unless required by applicable law or agreed to in writing, software
-   distributed under the License is distributed on an "AS IS" BASIS,
-   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-   See the License for the specific language governing permissions and
-   limitations under the License.
- */
-
-import java.io.IOException;
-import java.util.Collection;
-
-import org.eclipse.jgit.api.Git;
-import org.eclipse.jgit.api.errors.GitAPIException;
-import org.eclipse.jgit.api.errors.InvalidRemoteException;
-import org.eclipse.jgit.api.errors.TransportException;
-import org.eclipse.jgit.lib.Ref;
-
-
-
-/**
- * Simple snippet which shows how to list heads/tags of remote repositories without
- * a local repository
- * 
- * @author dominik.stadler at gmx.at
- */
-public class ListRemoteRepository {
-
-    private static final String REMOTE_URL = "https://github.com/github/testrepo.git";
-
-    public static void main(String[] args) throws IOException, InvalidRemoteException, TransportException, GitAPIException {
-        // then clone
-        System.out.println("Listing remote repository " + REMOTE_URL);
-        Collection<Ref> refs = Git.lsRemoteRepository()
-                .setHeads(true)
-                .setTags(true)
-                .setRemote(REMOTE_URL)
-                .call();
-
-        for (Ref ref : refs) {
-            System.out.println("Ref: " + ref);
-        }
-    }
-}
+package org.dstadler.jgit.porcelain;
+
+/*
+   Copyright 2013, 2014 Dominik Stadler
+
+   Licensed under the Apache License, Version 2.0 (the "License");
+   you may not use this file except in compliance with the License.
+   You may obtain a copy of the License at
+
+     http://www.apache.org/licenses/LICENSE-2.0
+
+   Unless required by applicable law or agreed to in writing, software
+   distributed under the License is distributed on an "AS IS" BASIS,
+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+   See the License for the specific language governing permissions and
+   limitations under the License.
+ */
+
+import java.io.IOException;
+import java.util.Collection;
+
+import org.eclipse.jgit.api.Git;
+import org.eclipse.jgit.api.errors.GitAPIException;
+import org.eclipse.jgit.api.errors.InvalidRemoteException;
+import org.eclipse.jgit.api.errors.TransportException;
+import org.eclipse.jgit.lib.Ref;
+
+
+
+/**
+ * Simple snippet which shows how to list heads/tags of remote repositories without
+ * a local repository
+ * 
+ * @author dominik.stadler at gmx.at
+ */
+public class ListRemoteRepository {
+
+    private static final String REMOTE_URL = "https://github.com/github/testrepo.git";
+
+    public static void main(String[] args) throws IOException, InvalidRemoteException, TransportException, GitAPIException {
+        // then clone
+        System.out.println("Listing remote repository " + REMOTE_URL);
+        Collection<Ref> refs = Git.lsRemoteRepository()
+                .setHeads(true)
+                .setTags(true)
+                .setRemote(REMOTE_URL)
+                .call();
+
+        for (Ref ref : refs) {
+            System.out.println("Ref: " + ref);
+        }
+    }
+}
diff --git a/src/main/java/org/dstadler/jgit/porcelain/ListTags.java b/src/main/java/org/dstadler/jgit/porcelain/ListTags.java
index 82a73af..9e9a3e1 100644
--- a/src/main/java/org/dstadler/jgit/porcelain/ListTags.java
+++ b/src/main/java/org/dstadler/jgit/porcelain/ListTags.java
@@ -1,47 +1,47 @@
-package org.dstadler.jgit.porcelain;
-
-/*
-   Copyright 2013, 2014 Dominik Stadler
-
-   Licensed under the Apache License, Version 2.0 (the "License");
-   you may not use this file except in compliance with the License.
-   You may obtain a copy of the License at
-
-     http://www.apache.org/licenses/LICENSE-2.0
-
-   Unless required by applicable law or agreed to in writing, software
-   distributed under the License is distributed on an "AS IS" BASIS,
-   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-   See the License for the specific language governing permissions and
-   limitations under the License.
- */
-
-import java.io.IOException;
-import java.util.List;
-
-import org.dstadler.jgit.helper.CookbookHelper;
-import org.eclipse.jgit.api.Git;
-import org.eclipse.jgit.api.errors.GitAPIException;
-import org.eclipse.jgit.lib.Ref;
-import org.eclipse.jgit.lib.Repository;
-
-
-
-/**
- * Simple snippet which shows how to list all Tags
- * 
- * @author dominik.stadler at gmx.at
- */
-public class ListTags {
-
-    public static void main(String[] args) throws IOException, GitAPIException {
-        Repository repository = CookbookHelper.openJGitCookbookRepository();
-
-        List<Ref> call = new Git(repository).tagList().call();
-        for (Ref ref : call) {
-            System.out.println("Tag: " + ref + " " + ref.getName() + " " + ref.getObjectId().getName());
-        }
-
-        repository.close();
-    }
-}
+package org.dstadler.jgit.porcelain;
+
+/*
+   Copyright 2013, 2014 Dominik Stadler
+
+   Licensed under the Apache License, Version 2.0 (the "License");
+   you may not use this file except in compliance with the License.
+   You may obtain a copy of the License at
+
+     http://www.apache.org/licenses/LICENSE-2.0
+
+   Unless required by applicable law or agreed to in writing, software
+   distributed under the License is distributed on an "AS IS" BASIS,
+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+   See the License for the specific language governing permissions and
+   limitations under the License.
+ */
+
+import java.io.IOException;
+import java.util.List;
+
+import org.dstadler.jgit.helper.CookbookHelper;
+import org.eclipse.jgit.api.Git;
+import org.eclipse.jgit.api.errors.GitAPIException;
+import org.eclipse.jgit.lib.Ref;
+import org.eclipse.jgit.lib.Repository;
+
+
+
+/**
+ * Simple snippet which shows how to list all Tags
+ * 
+ * @author dominik.stadler at gmx.at
+ */
+public class ListTags {
+
+    public static void main(String[] args) throws IOException, GitAPIException {
+        Repository repository = CookbookHelper.openJGitCookbookRepository();
+
+        List<Ref> call = new Git(repository).tagList().call();
+        for (Ref ref : call) {
+            System.out.println("Tag: " + ref + " " + ref.getName() + " " + ref.getObjectId().getName());
+        }
+
+        repository.close();
+    }
+}
diff --git a/src/main/java/org/dstadler/jgit/porcelain/ShowBlame.java b/src/main/java/org/dstadler/jgit/porcelain/ShowBlame.java
index c10da7f..58b4b27 100644
--- a/src/main/java/org/dstadler/jgit/porcelain/ShowBlame.java
+++ b/src/main/java/org/dstadler/jgit/porcelain/ShowBlame.java
@@ -1,93 +1,93 @@
-package org.dstadler.jgit.porcelain;
-
-/*
-    Copyright 2013, 2014 Dominik Stadler
-    
-    Licensed under the Apache License, Version 2.0 (the "License");
-    you may not use this file except in compliance with the License.
-    You may obtain a copy of the License at
-    
-      http://www.apache.org/licenses/LICENSE-2.0
-    
-    Unless required by applicable law or agreed to in writing, software
-    distributed under the License is distributed on an "AS IS" BASIS,
-    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-    See the License for the specific language governing permissions and
-    limitations under the License.
-*/
-
-import java.io.ByteArrayInputStream;
-import java.io.ByteArrayOutputStream;
-import java.io.IOException;
-
-import org.apache.commons.io.IOUtils;
-import org.dstadler.jgit.helper.CookbookHelper;
-import org.eclipse.jgit.api.BlameCommand;
-import org.eclipse.jgit.api.errors.GitAPIException;
-import org.eclipse.jgit.blame.BlameResult;
-import org.eclipse.jgit.lib.ObjectId;
-import org.eclipse.jgit.lib.ObjectLoader;
-import org.eclipse.jgit.lib.Repository;
-import org.eclipse.jgit.revwalk.RevCommit;
-import org.eclipse.jgit.revwalk.RevTree;
-import org.eclipse.jgit.revwalk.RevWalk;
-import org.eclipse.jgit.treewalk.TreeWalk;
-import org.eclipse.jgit.treewalk.filter.PathFilter;
-
-
-
-/**
- * Simple snippet which shows how to get a diff showing who
- * changed which line in a file
- * 
- * @author dominik.stadler at gmx.at
- */
-public class ShowBlame {
-
-    public static void main(String[] args) throws IOException, GitAPIException {
-        // prepare a new test-repository
-        Repository repository = CookbookHelper.openJGitCookbookRepository();
-
-        BlameCommand blamer = new BlameCommand(repository);
-        ObjectId commitID = repository.resolve("HEAD");
-        blamer.setStartCommit(commitID);
-        blamer.setFilePath("README.md");
-        BlameResult blame = blamer.call();
-
-        // read the number of lines from the commit to not look at changes in the working copy
-        int lines = countFiles(repository, commitID, "README.md");
-        for (int i = 0; i < lines; i++) {
-            RevCommit commit = blame.getSourceCommit(i);
-            System.out.println("Line: " + i + ": " + commit);
-        }
-
-        System.out.println("Displayed commits responsible for " + lines + " lines of README.md");
-
-        repository.close();
-    }
-
-    private static int countFiles(Repository repository, ObjectId commitID, String name) throws IOException {
-        RevWalk revWalk = new RevWalk(repository);
-        RevCommit commit = revWalk.parseCommit(commitID);
-        RevTree tree = commit.getTree();
-        System.out.println("Having tree: " + tree);
-
-        // now try to find a specific file
-        TreeWalk treeWalk = new TreeWalk(repository);
-        treeWalk.addTree(tree);
-        treeWalk.setRecursive(true);
-        treeWalk.setFilter(PathFilter.create(name));
-        if (!treeWalk.next()) {
-            throw new IllegalStateException("Did not find expected file 'README.md'");
-        }
-
-        ObjectId objectId = treeWalk.getObjectId(0);
-        ObjectLoader loader = repository.open(objectId);
-
-        ByteArrayOutputStream stream = new ByteArrayOutputStream();
-        // and then one can the loader to read the file
-        loader.copyTo(stream);
-
-        return IOUtils.readLines(new ByteArrayInputStream(stream.toByteArray())).size();
-    }
-}
+package org.dstadler.jgit.porcelain;
+
+/*
+    Copyright 2013, 2014 Dominik Stadler
+    
+    Licensed under the Apache License, Version 2.0 (the "License");
+    you may not use this file except in compliance with the License.
+    You may obtain a copy of the License at
+    
+      http://www.apache.org/licenses/LICENSE-2.0
+    
+    Unless required by applicable law or agreed to in writing, software
+    distributed under the License is distributed on an "AS IS" BASIS,
+    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+    See the License for the specific language governing permissions and
+    limitations under the License.
+*/
+
+import java.io.ByteArrayInputStream;
+import java.io.ByteArrayOutputStream;
+import java.io.IOException;
+
+import org.apache.commons.io.IOUtils;
+import org.dstadler.jgit.helper.CookbookHelper;
+import org.eclipse.jgit.api.BlameCommand;
+import org.eclipse.jgit.api.errors.GitAPIException;
+import org.eclipse.jgit.blame.BlameResult;
+import org.eclipse.jgit.lib.ObjectId;
+import org.eclipse.jgit.lib.ObjectLoader;
+import org.eclipse.jgit.lib.Repository;
+import org.eclipse.jgit.revwalk.RevCommit;
+import org.eclipse.jgit.revwalk.RevTree;
+import org.eclipse.jgit.revwalk.RevWalk;
+import org.eclipse.jgit.treewalk.TreeWalk;
+import org.eclipse.jgit.treewalk.filter.PathFilter;
+
+
+
+/**
+ * Simple snippet which shows how to get a diff showing who
+ * changed which line in a file
+ * 
+ * @author dominik.stadler at gmx.at
+ */
+public class ShowBlame {
+
+    public static void main(String[] args) throws IOException, GitAPIException {
+        // prepare a new test-repository
+        Repository repository = CookbookHelper.openJGitCookbookRepository();
+
+        BlameCommand blamer = new BlameCommand(repository);
+        ObjectId commitID = repository.resolve("HEAD");
+        blamer.setStartCommit(commitID);
+        blamer.setFilePath("README.md");
+        BlameResult blame = blamer.call();
+
+        // read the number of lines from the commit to not look at changes in the working copy
+        int lines = countFiles(repository, commitID, "README.md");
+        for (int i = 0; i < lines; i++) {
+            RevCommit commit = blame.getSourceCommit(i);
+            System.out.println("Line: " + i + ": " + commit);
+        }
+
+        System.out.println("Displayed commits responsible for " + lines + " lines of README.md");
+
+        repository.close();
+    }
+
+    private static int countFiles(Repository repository, ObjectId commitID, String name) throws IOException {
+        RevWalk revWalk = new RevWalk(repository);
+        RevCommit commit = revWalk.parseCommit(commitID);
+        RevTree tree = commit.getTree();
+        System.out.println("Having tree: " + tree);
+
+        // now try to find a specific file
+        TreeWalk treeWalk = new TreeWalk(repository);
+        treeWalk.addTree(tree);
+        treeWalk.setRecursive(true);
+        treeWalk.setFilter(PathFilter.create(name));
+        if (!treeWalk.next()) {
+            throw new IllegalStateException("Did not find expected file 'README.md'");
+        }
+
+        ObjectId objectId = treeWalk.getObjectId(0);
+        ObjectLoader loader = repository.open(objectId);
+
+        ByteArrayOutputStream stream = new ByteArrayOutputStream();
+        // and then one can the loader to read the file
+        loader.copyTo(stream);
+
+        return IOUtils.readLines(new ByteArrayInputStream(stream.toByteArray())).size();
+    }
+}
diff --git a/src/main/java/org/dstadler/jgit/porcelain/ShowBranchDiff.java b/src/main/java/org/dstadler/jgit/porcelain/ShowBranchDiff.java
index 34f8f8a..7a6b5ca 100755
--- a/src/main/java/org/dstadler/jgit/porcelain/ShowBranchDiff.java
+++ b/src/main/java/org/dstadler/jgit/porcelain/ShowBranchDiff.java
@@ -1,80 +1,80 @@
-package org.dstadler.jgit.porcelain;
-
-/*
-   Copyright 2013, 2014 Dominik Stadler
-
-   Licensed under the Apache License, Version 2.0 (the "License");
-   you may not use this file except in compliance with the License.
-   You may obtain a copy of the License at
-
-     http://www.apache.org/licenses/LICENSE-2.0
-
-   Unless required by applicable law or agreed to in writing, software
-   distributed under the License is distributed on an "AS IS" BASIS,
-   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-   See the License for the specific language governing permissions and
-   limitations under the License.
- */
-
-import java.io.IOException;
-import java.util.List;
-
-import org.dstadler.jgit.helper.CookbookHelper;
-import org.eclipse.jgit.api.Git;
-import org.eclipse.jgit.api.errors.GitAPIException;
-import org.eclipse.jgit.diff.DiffEntry;
-import org.eclipse.jgit.errors.IncorrectObjectTypeException;
-import org.eclipse.jgit.errors.MissingObjectException;
-import org.eclipse.jgit.lib.ObjectReader;
-import org.eclipse.jgit.lib.Ref;
-import org.eclipse.jgit.lib.Repository;
-import org.eclipse.jgit.revwalk.RevCommit;
-import org.eclipse.jgit.revwalk.RevTree;
-import org.eclipse.jgit.revwalk.RevWalk;
-import org.eclipse.jgit.treewalk.AbstractTreeIterator;
-import org.eclipse.jgit.treewalk.CanonicalTreeParser;
-
-
-
-/**
- * Simple snippet which shows how to show diffs between branches
- * 
- * @author dominik.stadler at gmx.at
- */
-public class ShowBranchDiff {
-
-    public static void main(String[] args) throws IOException, GitAPIException {
-        Repository repository = CookbookHelper.openJGitCookbookRepository();
-
-        // the diff works on TreeIterators, we prepare two for the two branches
-        AbstractTreeIterator oldTreeParser = prepareTreeParser(repository, "refs/heads/testbranch");
-        AbstractTreeIterator newTreeParser = prepareTreeParser(repository, "refs/heads/master");
-
-        // then the procelain diff-command returns a list of diff entries
-        List<DiffEntry> diff = new Git(repository).diff().setOldTree(oldTreeParser).setNewTree(newTreeParser).call();
-        for (DiffEntry entry : diff) {
-            System.out.println("Entry: " + entry);
-        }
-
-        repository.close();
-    }
-
-    private static AbstractTreeIterator prepareTreeParser(Repository repository, String ref) throws IOException,
-            MissingObjectException,
-            IncorrectObjectTypeException {
-        // from the commit we can build the tree which allows us to construct the TreeParser
-        Ref head = repository.getRef(ref);
-        RevWalk walk = new RevWalk(repository);
-        RevCommit commit = walk.parseCommit(head.getObjectId());
-        RevTree tree = walk.parseTree(commit.getTree().getId());
-
-        CanonicalTreeParser oldTreeParser = new CanonicalTreeParser();
-        ObjectReader oldReader = repository.newObjectReader();
-        try {
-            oldTreeParser.reset(oldReader, tree.getId());
-        } finally {
-            oldReader.release();
-        }
-        return oldTreeParser;
-    }
-}
+package org.dstadler.jgit.porcelain;
+
+/*
+   Copyright 2013, 2014 Dominik Stadler
+
+   Licensed under the Apache License, Version 2.0 (the "License");
+   you may not use this file except in compliance with the License.
+   You may obtain a copy of the License at
+
+     http://www.apache.org/licenses/LICENSE-2.0
+
+   Unless required by applicable law or agreed to in writing, software
+   distributed under the License is distributed on an "AS IS" BASIS,
+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+   See the License for the specific language governing permissions and
+   limitations under the License.
+ */
+
+import java.io.IOException;
+import java.util.List;
+
+import org.dstadler.jgit.helper.CookbookHelper;
+import org.eclipse.jgit.api.Git;
+import org.eclipse.jgit.api.errors.GitAPIException;
+import org.eclipse.jgit.diff.DiffEntry;
+import org.eclipse.jgit.errors.IncorrectObjectTypeException;
+import org.eclipse.jgit.errors.MissingObjectException;
+import org.eclipse.jgit.lib.ObjectReader;
+import org.eclipse.jgit.lib.Ref;
+import org.eclipse.jgit.lib.Repository;
+import org.eclipse.jgit.revwalk.RevCommit;
+import org.eclipse.jgit.revwalk.RevTree;
+import org.eclipse.jgit.revwalk.RevWalk;
+import org.eclipse.jgit.treewalk.AbstractTreeIterator;
+import org.eclipse.jgit.treewalk.CanonicalTreeParser;
+
+
+
+/**
+ * Simple snippet which shows how to show diffs between branches
+ * 
+ * @author dominik.stadler at gmx.at
+ */
+public class ShowBranchDiff {
+
+    public static void main(String[] args) throws IOException, GitAPIException {
+        Repository repository = CookbookHelper.openJGitCookbookRepository();
+
+        // the diff works on TreeIterators, we prepare two for the two branches
+        AbstractTreeIterator oldTreeParser = prepareTreeParser(repository, "refs/heads/testbranch");
+        AbstractTreeIterator newTreeParser = prepareTreeParser(repository, "refs/heads/master");
+
+        // then the procelain diff-command returns a list of diff entries
+        List<DiffEntry> diff = new Git(repository).diff().setOldTree(oldTreeParser).setNewTree(newTreeParser).call();
+        for (DiffEntry entry : diff) {
+            System.out.println("Entry: " + entry);
+        }
+
+        repository.close();
+    }
+
+    private static AbstractTreeIterator prepareTreeParser(Repository repository, String ref) throws IOException,
+            MissingObjectException,
+            IncorrectObjectTypeException {
+        // from the commit we can build the tree which allows us to construct the TreeParser
+        Ref head = repository.getRef(ref);
+        RevWalk walk = new RevWalk(repository);
+        RevCommit commit = walk.parseCommit(head.getObjectId());
+        RevTree tree = walk.parseTree(commit.getTree().getId());
+
+        CanonicalTreeParser oldTreeParser = new CanonicalTreeParser();
+        ObjectReader oldReader = repository.newObjectReader();
+        try {
+            oldTreeParser.reset(oldReader, tree.getId());
+        } finally {
+            oldReader.release();
+        }
+        return oldTreeParser;
+    }
+}
diff --git a/src/main/java/org/dstadler/jgit/porcelain/ShowFileDiff.java b/src/main/java/org/dstadler/jgit/porcelain/ShowFileDiff.java
index 1aeb98a..6222f54 100644
--- a/src/main/java/org/dstadler/jgit/porcelain/ShowFileDiff.java
+++ b/src/main/java/org/dstadler/jgit/porcelain/ShowFileDiff.java
@@ -1,88 +1,88 @@
-package org.dstadler.jgit.porcelain;
-
-/*
-   Copyright 2013, 2014 Dominik Stadler
-
-   Licensed under the Apache License, Version 2.0 (the "License");
-   you may not use this file except in compliance with the License.
-   You may obtain a copy of the License at
-
-     http://www.apache.org/licenses/LICENSE-2.0
-
-   Unless required by applicable law or agreed to in writing, software
-   distributed under the License is distributed on an "AS IS" BASIS,
-   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-   See the License for the specific language governing permissions and
-   limitations under the License.
- */
-
-import java.io.IOException;
-import java.util.List;
-
-import org.dstadler.jgit.helper.CookbookHelper;
-import org.eclipse.jgit.api.Git;
-import org.eclipse.jgit.api.errors.GitAPIException;
-import org.eclipse.jgit.diff.DiffEntry;
-import org.eclipse.jgit.diff.DiffFormatter;
-import org.eclipse.jgit.errors.IncorrectObjectTypeException;
-import org.eclipse.jgit.errors.MissingObjectException;
-import org.eclipse.jgit.lib.ObjectId;
-import org.eclipse.jgit.lib.ObjectReader;
-import org.eclipse.jgit.lib.Repository;
-import org.eclipse.jgit.revwalk.RevCommit;
-import org.eclipse.jgit.revwalk.RevTree;
-import org.eclipse.jgit.revwalk.RevWalk;
-import org.eclipse.jgit.treewalk.AbstractTreeIterator;
-import org.eclipse.jgit.treewalk.CanonicalTreeParser;
-import org.eclipse.jgit.treewalk.filter.PathFilter;
-
-
-
-/**
- * Simple snippet which shows how to show diffs between branches
- * 
- * @author dominik.stadler at gmx.at
- */
-public class ShowFileDiff {
-
-    public static void main(String[] args) throws IOException, GitAPIException {
-        Repository repository = CookbookHelper.openJGitCookbookRepository();
-
-        // the diff works on TreeIterators, we prepare two for the two branches
-        AbstractTreeIterator oldTreeParser = prepareTreeParser(repository, "09c65401f3730eb3e619c33bf31e2376fb393727");
-        AbstractTreeIterator newTreeParser = prepareTreeParser(repository, "aa31703b65774e4a06010824601e56375a70078c");
-
-        // then the procelain diff-command returns a list of diff entries
-        List<DiffEntry> diff = new Git(repository).diff().
-                setOldTree(oldTreeParser).
-                setNewTree(newTreeParser).
-                setPathFilter(PathFilter.create("README.md")).
-                call();
-        for (DiffEntry entry : diff) {
-            System.out.println("Entry: " + entry + ", from: " + entry.getOldId() + ", to: " + entry.getNewId());
-            DiffFormatter formatter = new DiffFormatter(System.out);
-            formatter.setRepository(repository);
-            formatter.format(entry);
-        }
-
-        repository.close();
-    }
-
-    private static AbstractTreeIterator prepareTreeParser(Repository repository, String objectId) throws IOException,
-            MissingObjectException,
-            IncorrectObjectTypeException {
-        // from the commit we can build the tree which allows us to construct the TreeParser
-        RevWalk walk = new RevWalk(repository);
-        RevCommit commit = walk.parseCommit(ObjectId.fromString(objectId));
-        RevTree tree = walk.parseTree(commit.getTree().getId());
-
-        CanonicalTreeParser oldTreeParser = new CanonicalTreeParser();
-        ObjectReader oldReader = repository.newObjectReader();
-        try {
-            oldTreeParser.reset(oldReader, tree.getId());
-        } finally {
-            oldReader.release();
-        }
-        return oldTreeParser;
-    }
-}
+package org.dstadler.jgit.porcelain;
+
+/*
+   Copyright 2013, 2014 Dominik Stadler
+
+   Licensed under the Apache License, Version 2.0 (the "License");
+   you may not use this file except in compliance with the License.
+   You may obtain a copy of the License at
+
+     http://www.apache.org/licenses/LICENSE-2.0
+
+   Unless required by applicable law or agreed to in writing, software
+   distributed under the License is distributed on an "AS IS" BASIS,
+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+   See the License for the specific language governing permissions and
+   limitations under the License.
+ */
+
+import java.io.IOException;
+import java.util.List;
+
+import org.dstadler.jgit.helper.CookbookHelper;
+import org.eclipse.jgit.api.Git;
+import org.eclipse.jgit.api.errors.GitAPIException;
+import org.eclipse.jgit.diff.DiffEntry;
+import org.eclipse.jgit.diff.DiffFormatter;
+import org.eclipse.jgit.errors.IncorrectObjectTypeException;
+import org.eclipse.jgit.errors.MissingObjectException;
+import org.eclipse.jgit.lib.ObjectId;
+import org.eclipse.jgit.lib.ObjectReader;
+import org.eclipse.jgit.lib.Repository;
+import org.eclipse.jgit.revwalk.RevCommit;
+import org.eclipse.jgit.revwalk.RevTree;
+import org.eclipse.jgit.revwalk.RevWalk;
+import org.eclipse.jgit.treewalk.AbstractTreeIterator;
+import org.eclipse.jgit.treewalk.CanonicalTreeParser;
+import org.eclipse.jgit.treewalk.filter.PathFilter;
+
+
+
+/**
+ * Simple snippet which shows how to show diffs between branches
+ * 
+ * @author dominik.stadler at gmx.at
+ */
+public class ShowFileDiff {
+
+    public static void main(String[] args) throws IOException, GitAPIException {
+        Repository repository = CookbookHelper.openJGitCookbookRepository();
+
+        // the diff works on TreeIterators, we prepare two for the two branches
+        AbstractTreeIterator oldTreeParser = prepareTreeParser(repository, "09c65401f3730eb3e619c33bf31e2376fb393727");
+        AbstractTreeIterator newTreeParser = prepareTreeParser(repository, "aa31703b65774e4a06010824601e56375a70078c");
+
+        // then the procelain diff-command returns a list of diff entries
+        List<DiffEntry> diff = new Git(repository).diff().
+                setOldTree(oldTreeParser).
+                setNewTree(newTreeParser).
+                setPathFilter(PathFilter.create("README.md")).
+                call();
+        for (DiffEntry entry : diff) {
+            System.out.println("Entry: " + entry + ", from: " + entry.getOldId() + ", to: " + entry.getNewId());
+            DiffFormatter formatter = new DiffFormatter(System.out);
+            formatter.setRepository(repository);
+            formatter.format(entry);
+        }
+
+        repository.close();
+    }
+
+    private static AbstractTreeIterator prepareTreeParser(Repository repository, String objectId) throws IOException,
+            MissingObjectException,
+            IncorrectObjectTypeException {
+        // from the commit we can build the tree which allows us to construct the TreeParser
+        RevWalk walk = new RevWalk(repository);
+        RevCommit commit = walk.parseCommit(ObjectId.fromString(objectId));
+        RevTree tree = walk.parseTree(commit.getTree().getId());
+
+        CanonicalTreeParser oldTreeParser = new CanonicalTreeParser();
+        ObjectReader oldReader = repository.newObjectReader();
+        try {
+            oldTreeParser.reset(oldReader, tree.getId());
+        } finally {
+            oldReader.release();
+        }
+        return oldTreeParser;
+    }
+}
diff --git a/src/main/java/org/dstadler/jgit/porcelain/ShowLog.java b/src/main/java/org/dstadler/jgit/porcelain/ShowLog.java
index ade6824..1629856 100755
--- a/src/main/java/org/dstadler/jgit/porcelain/ShowLog.java
+++ b/src/main/java/org/dstadler/jgit/porcelain/ShowLog.java
@@ -1,82 +1,82 @@
-package org.dstadler.jgit.porcelain;
-
-/*
-   Copyright 2013, 2014 Dominik Stadler
-
-   Licensed under the Apache License, Version 2.0 (the "License");
-   you may not use this file except in compliance with the License.
-   You may obtain a copy of the License at
-
-     http://www.apache.org/licenses/LICENSE-2.0
-
-   Unless required by applicable law or agreed to in writing, software
-   distributed under the License is distributed on an "AS IS" BASIS,
-   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-   See the License for the specific language governing permissions and
-   limitations under the License.
- */
-
-import java.io.IOException;
-
-import org.dstadler.jgit.helper.CookbookHelper;
-import org.eclipse.jgit.api.Git;
-import org.eclipse.jgit.api.errors.GitAPIException;
-import org.eclipse.jgit.lib.Repository;
-import org.eclipse.jgit.revwalk.RevCommit;
-
-
-
-/**
- * Simple snippet which shows how to get the commit-ids for a file to provide log information.
- * 
- * @author dominik.stadler at gmx.at
- */
-public class ShowLog {
-
-    public static void main(String[] args) throws IOException, GitAPIException {
-        Repository repository = CookbookHelper.openJGitCookbookRepository();
-
-        Iterable<RevCommit> logs = new Git(repository).log()
-                .call();
-        int count = 0;
-        for (RevCommit rev : logs) {
-            //System.out.println("Commit: " + rev /* + ", name: " + rev.getName() + ", id: " + rev.getId().getName() */);
-            count++;
-        }
-        System.out.println("Had " + count + " commits overall on current branch");
-        
-        logs = new Git(repository).log()
-                .all()
-                .call();
-        count = 0;
-        for (RevCommit rev : logs) {
-            //System.out.println("Commit: " + rev /* + ", name: " + rev.getName() + ", id: " + rev.getId().getName() */);
-            count++;
-        }
-        System.out.println("Had " + count + " commits overall in repository");
-        
-        logs = new Git(repository).log()
-                // for all log.all()
-                .addPath("README.md")
-                .call();
-        count = 0;
-        for (RevCommit rev : logs) {
-            //System.out.println("Commit: " + rev /* + ", name: " + rev.getName() + ", id: " + rev.getId().getName() */);
-            count++;
-        }
-        System.out.println("Had " + count + " commits on README.md");
-
-        logs = new Git(repository).log()
-                // for all log.all()
-                .addPath("pom.xml")
-                .call();
-        count = 0;
-        for (RevCommit rev : logs) {
-            //System.out.println("Commit: " + rev /* + ", name: " + rev.getName() + ", id: " + rev.getId().getName() */);
-            count++;
-        }
-        System.out.println("Had " + count + " commits on pom.xml");
-
-        repository.close();
-    }
-}
+package org.dstadler.jgit.porcelain;
+
+/*
+   Copyright 2013, 2014 Dominik Stadler
+
+   Licensed under the Apache License, Version 2.0 (the "License");
+   you may not use this file except in compliance with the License.
+   You may obtain a copy of the License at
+
+     http://www.apache.org/licenses/LICENSE-2.0
+
+   Unless required by applicable law or agreed to in writing, software
+   distributed under the License is distributed on an "AS IS" BASIS,
+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+   See the License for the specific language governing permissions and
+   limitations under the License.
+ */
+
+import java.io.IOException;
+
+import org.dstadler.jgit.helper.CookbookHelper;
+import org.eclipse.jgit.api.Git;
+import org.eclipse.jgit.api.errors.GitAPIException;
+import org.eclipse.jgit.lib.Repository;
+import org.eclipse.jgit.revwalk.RevCommit;
+
+
+
+/**
+ * Simple snippet which shows how to get the commit-ids for a file to provide log information.
+ * 
+ * @author dominik.stadler at gmx.at
+ */
+public class ShowLog {
+
+    public static void main(String[] args) throws IOException, GitAPIException {
+        Repository repository = CookbookHelper.openJGitCookbookRepository();
+
+        Iterable<RevCommit> logs = new Git(repository).log()
+                .call();
+        int count = 0;
+        for (RevCommit rev : logs) {
+            //System.out.println("Commit: " + rev /* + ", name: " + rev.getName() + ", id: " + rev.getId().getName() */);
+            count++;
+        }
+        System.out.println("Had " + count + " commits overall on current branch");
+        
+        logs = new Git(repository).log()
+                .all()
+                .call();
+        count = 0;
+        for (RevCommit rev : logs) {
+            //System.out.println("Commit: " + rev /* + ", name: " + rev.getName() + ", id: " + rev.getId().getName() */);
+            count++;
+        }
+        System.out.println("Had " + count + " commits overall in repository");
+        
+        logs = new Git(repository).log()
+                // for all log.all()
+                .addPath("README.md")
+                .call();
+        count = 0;
+        for (RevCommit rev : logs) {
+            //System.out.println("Commit: " + rev /* + ", name: " + rev.getName() + ", id: " + rev.getId().getName() */);
+            count++;
+        }
+        System.out.println("Had " + count + " commits on README.md");
+
+        logs = new Git(repository).log()
+                // for all log.all()
+                .addPath("pom.xml")
+                .call();
+        count = 0;
+        for (RevCommit rev : logs) {
+            //System.out.println("Commit: " + rev /* + ", name: " + rev.getName() + ", id: " + rev.getId().getName() */);
+            count++;
+        }
+        System.out.println("Had " + count + " commits on pom.xml");
+
+        repository.close();
+    }
+}
diff --git a/src/main/java/org/dstadler/jgit/porcelain/ShowStatus.java b/src/main/java/org/dstadler/jgit/porcelain/ShowStatus.java
index 0dd5ca7..aa2735c 100644
--- a/src/main/java/org/dstadler/jgit/porcelain/ShowStatus.java
+++ b/src/main/java/org/dstadler/jgit/porcelain/ShowStatus.java
@@ -1,54 +1,54 @@
-package org.dstadler.jgit.porcelain;
-
-/*
-   Copyright 2013, 2014 Dominik Stadler
-
-   Licensed under the Apache License, Version 2.0 (the "License");
-   you may not use this file except in compliance with the License.
-   You may obtain a copy of the License at
-
-     http://www.apache.org/licenses/LICENSE-2.0
-
-   Unless required by applicable law or agreed to in writing, software
-   distributed under the License is distributed on an "AS IS" BASIS,
-   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-   See the License for the specific language governing permissions and
-   limitations under the License.
- */
-
-import java.io.IOException;
-
-import org.dstadler.jgit.helper.CookbookHelper;
-import org.eclipse.jgit.api.Git;
-import org.eclipse.jgit.api.Status;
-import org.eclipse.jgit.api.errors.GitAPIException;
-import org.eclipse.jgit.lib.Repository;
-
-
-
-/**
- * Simple snippet which prints the Status of a git repository, i.e. modified/added/
- * removed/ignored files, similar to "git status"
- * 
- * @author dominik.stadler at gmx.at
- */
-public class ShowStatus {
-
-    public static void main(String[] args) throws IOException, GitAPIException {
-        Repository repository = CookbookHelper.openJGitCookbookRepository();
-
-        Status status = new Git(repository).status().call();
-        System.out.println("Added: " + status.getAdded());
-        System.out.println("Changed: " + status.getChanged());
-        System.out.println("Conflicting: " + status.getConflicting());
-        System.out.println("ConflictingStageState: " + status.getConflictingStageState());
-        System.out.println("IgnoredNotInIndex: " + status.getIgnoredNotInIndex());
-        System.out.println("Missing: " + status.getMissing());
-        System.out.println("Modified: " + status.getModified());
-        System.out.println("Removed: " + status.getRemoved());
-        System.out.println("Untracked: " + status.getUntracked());
-        System.out.println("UntrackedFolders: " + status.getUntrackedFolders());
-
-        repository.close();
-    }
-}
+package org.dstadler.jgit.porcelain;
+
+/*
+   Copyright 2013, 2014 Dominik Stadler
+
+   Licensed under the Apache License, Version 2.0 (the "License");
+   you may not use this file except in compliance with the License.
+   You may obtain a copy of the License at
+
+     http://www.apache.org/licenses/LICENSE-2.0
+
+   Unless required by applicable law or agreed to in writing, software
+   distributed under the License is distributed on an "AS IS" BASIS,
+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+   See the License for the specific language governing permissions and
+   limitations under the License.
+ */
+
+import java.io.IOException;
+
+import org.dstadler.jgit.helper.CookbookHelper;
+import org.eclipse.jgit.api.Git;
+import org.eclipse.jgit.api.Status;
+import org.eclipse.jgit.api.errors.GitAPIException;
+import org.eclipse.jgit.lib.Repository;
+
+
+
+/**
+ * Simple snippet which prints the Status of a git repository, i.e. modified/added/
+ * removed/ignored files, similar to "git status"
+ * 
+ * @author dominik.stadler at gmx.at
+ */
+public class ShowStatus {
+
+    public static void main(String[] args) throws IOException, GitAPIException {
+        Repository repository = CookbookHelper.openJGitCookbookRepository();
+
+        Status status = new Git(repository).status().call();
+        System.out.println("Added: " + status.getAdded());
+        System.out.println("Changed: " + status.getChanged());
+        System.out.println("Conflicting: " + status.getConflicting());
+        System.out.println("ConflictingStageState: " + status.getConflictingStageState());
+        System.out.println("IgnoredNotInIndex: " + status.getIgnoredNotInIndex());
+        System.out.println("Missing: " + status.getMissing());
+        System.out.println("Modified: " + status.getModified());
+        System.out.println("Removed: " + status.getRemoved());
+        System.out.println("Untracked: " + status.getUntracked());
+        System.out.println("UntrackedFolders: " + status.getUntrackedFolders());
+
+        repository.close();
+    }
+}
diff --git a/src/main/java/org/dstadler/jgit/unfinished/ListRefLog.java b/src/main/java/org/dstadler/jgit/unfinished/ListRefLog.java
index 1a5c2c8..c4354a3 100755
--- a/src/main/java/org/dstadler/jgit/unfinished/ListRefLog.java
+++ b/src/main/java/org/dstadler/jgit/unfinished/ListRefLog.java
@@ -1,75 +1,75 @@
-package org.dstadler.jgit.unfinished;
-
-/*
-   Copyright 2013, 2014 Dominik Stadler
-
-   Licensed under the Apache License, Version 2.0 (the "License");
-   you may not use this file except in compliance with the License.
-   You may obtain a copy of the License at
-
-     http://www.apache.org/licenses/LICENSE-2.0
-
-   Unless required by applicable law or agreed to in writing, software
-   distributed under the License is distributed on an "AS IS" BASIS,
-   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-   See the License for the specific language governing permissions and
-   limitations under the License.
- */
-
-import java.io.IOException;
-import java.util.Collection;
-import java.util.Iterator;
-import java.util.List;
-
-import org.dstadler.jgit.helper.CookbookHelper;
-import org.eclipse.jgit.api.Git;
-import org.eclipse.jgit.api.errors.GitAPIException;
-import org.eclipse.jgit.api.errors.InvalidRefNameException;
-import org.eclipse.jgit.lib.Ref;
-import org.eclipse.jgit.lib.ReflogEntry;
-import org.eclipse.jgit.lib.Repository;
-
-
-
-/**
- * Simple snippet which shows how to list all Tags
- * 
- * @author dominik.stadler at gmx.at
- */
-public class ListRefLog {
-
-    public static void main(String[] args) throws IOException, GitAPIException {
-        Repository repository = CookbookHelper.openJGitCookbookRepository();
-
-        List<Ref> refs = new Git(repository).branchList().call();
-        for (Ref ref : refs) {
-            System.out.println("Branch: " + ref + " " + ref.getName() + " " + ref.getObjectId().getName());
-
-            listReflog(repository, ref);
-        }
-
-        List<Ref> call = new Git(repository).tagList().call();
-        for (Ref ref : call) {
-            System.out.println("Tag: " + ref + " " + ref.getName() + " " + ref.getObjectId().getName());
-
-            listReflog(repository, ref);
-        }
-
-        repository.close();
-    }
-
-    private static void listReflog(Repository repository, Ref ref) throws GitAPIException, InvalidRefNameException, IOException {
-        /*
-         * Ref head = repository.getRef(ref.getName());
-         * RevWalk walk = new RevWalk(repository);
-         * RevCommit commit = walk.parseCommit(head.getObjectId());
-         */
-
-        Collection<ReflogEntry> call = new Git(repository).reflog().setRef(ref.getName()).call();
-        Iterator<ReflogEntry> it = call.iterator();
-        while (it.hasNext()) {
-            ReflogEntry reflog = it.next();
-            System.out.println("Reflog: " + reflog);
-        }
-    }
-}
+package org.dstadler.jgit.unfinished;
+
+/*
+   Copyright 2013, 2014 Dominik Stadler
+
+   Licensed under the Apache License, Version 2.0 (the "License");
+   you may not use this file except in compliance with the License.
+   You may obtain a copy of the License at
+
+     http://www.apache.org/licenses/LICENSE-2.0
+
+   Unless required by applicable law or agreed to in writing, software
+   distributed under the License is distributed on an "AS IS" BASIS,
+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+   See the License for the specific language governing permissions and
+   limitations under the License.
+ */
+
+import java.io.IOException;
+import java.util.Collection;
+import java.util.Iterator;
+import java.util.List;
+
+import org.dstadler.jgit.helper.CookbookHelper;
+import org.eclipse.jgit.api.Git;
+import org.eclipse.jgit.api.errors.GitAPIException;
+import org.eclipse.jgit.api.errors.InvalidRefNameException;
+import org.eclipse.jgit.lib.Ref;
+import org.eclipse.jgit.lib.ReflogEntry;
+import org.eclipse.jgit.lib.Repository;
+
+
+
+/**
+ * Simple snippet which shows how to list all Tags
+ * 
+ * @author dominik.stadler at gmx.at
+ */
+public class ListRefLog {
+
+    public static void main(String[] args) throws IOException, GitAPIException {
+        Repository repository = CookbookHelper.openJGitCookbookRepository();
+
+        List<Ref> refs = new Git(repository).branchList().call();
+        for (Ref ref : refs) {
+            System.out.println("Branch: " + ref + " " + ref.getName() + " " + ref.getObjectId().getName());
+
+            listReflog(repository, ref);
+        }
+
+        List<Ref> call = new Git(repository).tagList().call();
+        for (Ref ref : call) {
+            System.out.println("Tag: " + ref + " " + ref.getName() + " " + ref.getObjectId().getName());
+
+            listReflog(repository, ref);
+        }
+
+        repository.close();
+    }
+
+    private static void listReflog(Repository repository, Ref ref) throws GitAPIException, InvalidRefNameException, IOException {
+        /*
+         * Ref head = repository.getRef(ref.getName());
+         * RevWalk walk = new RevWalk(repository);
+         * RevCommit commit = walk.parseCommit(head.getObjectId());
+         */
+
+        Collection<ReflogEntry> call = new Git(repository).reflog().setRef(ref.getName()).call();
+        Iterator<ReflogEntry> it = call.iterator();
+        while (it.hasNext()) {
+            ReflogEntry reflog = it.next();
+            System.out.println("Reflog: " + reflog);
+        }
+    }
+}
diff --git a/src/main/java/org/dstadler/jgit/unfinished/PullFromRemoteRepository.java b/src/main/java/org/dstadler/jgit/unfinished/PullFromRemoteRepository.java
index e08b2c2..5652bc7 100644
--- a/src/main/java/org/dstadler/jgit/unfinished/PullFromRemoteRepository.java
+++ b/src/main/java/org/dstadler/jgit/unfinished/PullFromRemoteRepository.java
@@ -1,67 +1,67 @@
-package org.dstadler.jgit.unfinished;
-
-/*
-   Copyright 2013, 2014 Dominik Stadler
-
-   Licensed under the Apache License, Version 2.0 (the "License");
-   you may not use this file except in compliance with the License.
-   You may obtain a copy of the License at
-
-     http://www.apache.org/licenses/LICENSE-2.0
-
-   Unless required by applicable law or agreed to in writing, software
-   distributed under the License is distributed on an "AS IS" BASIS,
-   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-   See the License for the specific language governing permissions and
-   limitations under the License.
- */
-
-import java.io.File;
-import java.io.IOException;
-
-import org.eclipse.jgit.api.Git;
-import org.eclipse.jgit.api.errors.GitAPIException;
-import org.eclipse.jgit.api.errors.InvalidRemoteException;
-import org.eclipse.jgit.api.errors.TransportException;
-import org.eclipse.jgit.lib.Repository;
-import org.eclipse.jgit.storage.file.FileRepositoryBuilder;
-
-
-
-/**
- * Simple snippet which shows how to clone a repository from a remote source
- * 
- * @author dominik.stadler at gmx.at
- */
-public class PullFromRemoteRepository {
-
-    private static final String REMOTE_URL = "https://github.com/github/testrepo.git";
-
-    public static void main(String[] args) throws IOException, InvalidRemoteException, TransportException, GitAPIException {
-        // prepare a new folder for the cloned repository
-        File localPath = File.createTempFile("TestGitRepository", "");
-        localPath.delete();
-
-        // then clone
-        System.out.println("Cloning from " + REMOTE_URL + " to " + localPath);
-        Git.cloneRepository()
-                .setURI(REMOTE_URL)
-                .setDirectory(localPath)
-                .call();
-
-        // now open the created repository
-        FileRepositoryBuilder builder = new FileRepositoryBuilder();
-        Repository repository = builder.setGitDir(localPath)
-                .readEnvironment() // scan environment GIT_* variables
-                .findGitDir() // scan up the file system tree
-                .build();
-
-        Git git = new Git(repository);
-        git.pull()
-                .call();
-
-        System.out.println("Pulled from remote repository to local repository at " + repository.getDirectory());
-
-        repository.close();
-    }
-}
+package org.dstadler.jgit.unfinished;
+
+/*
+   Copyright 2013, 2014 Dominik Stadler
+
+   Licensed under the Apache License, Version 2.0 (the "License");
+   you may not use this file except in compliance with the License.
+   You may obtain a copy of the License at
+
+     http://www.apache.org/licenses/LICENSE-2.0
+
+   Unless required by applicable law or agreed to in writing, software
+   distributed under the License is distributed on an "AS IS" BASIS,
+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+   See the License for the specific language governing permissions and
+   limitations under the License.
+ */
+
+import java.io.File;
+import java.io.IOException;
+
+import org.eclipse.jgit.api.Git;
+import org.eclipse.jgit.api.errors.GitAPIException;
+import org.eclipse.jgit.api.errors.InvalidRemoteException;
+import org.eclipse.jgit.api.errors.TransportException;
+import org.eclipse.jgit.lib.Repository;
+import org.eclipse.jgit.storage.file.FileRepositoryBuilder;
+
+
+
+/**
+ * Simple snippet which shows how to clone a repository from a remote source
+ * 
+ * @author dominik.stadler at gmx.at
+ */
+public class PullFromRemoteRepository {
+
+    private static final String REMOTE_URL = "https://github.com/github/testrepo.git";
+
+    public static void main(String[] args) throws IOException, InvalidRemoteException, TransportException, GitAPIException {
+        // prepare a new folder for the cloned repository
+        File localPath = File.createTempFile("TestGitRepository", "");
+        localPath.delete();
+
+        // then clone
+        System.out.println("Cloning from " + REMOTE_URL + " to " + localPath);
+        Git.cloneRepository()
+                .setURI(REMOTE_URL)
+                .setDirectory(localPath)
+                .call();
+
+        // now open the created repository
+        FileRepositoryBuilder builder = new FileRepositoryBuilder();
+        Repository repository = builder.setGitDir(localPath)
+                .readEnvironment() // scan environment GIT_* variables
+                .findGitDir() // scan up the file system tree
+                .build();
+
+        Git git = new Git(repository);
+        git.pull()
+                .call();
+
+        System.out.println("Pulled from remote repository to local repository at " + repository.getDirectory());
+
+        repository.close();
+    }
+}
diff --git a/src/main/java/org/dstadler/jgit/unfinished/PullRemoteRepository.java b/src/main/java/org/dstadler/jgit/unfinished/PullRemoteRepository.java
index 8becb13..ac4d038 100755
--- a/src/main/java/org/dstadler/jgit/unfinished/PullRemoteRepository.java
+++ b/src/main/java/org/dstadler/jgit/unfinished/PullRemoteRepository.java
@@ -1,79 +1,79 @@
-package org.dstadler.jgit.unfinished;
-
-/*
-   Copyright 2013, 2014 Dominik Stadler
-
-   Licensed under the Apache License, Version 2.0 (the "License");
-   you may not use this file except in compliance with the License.
-   You may obtain a copy of the License at
-
-     http://www.apache.org/licenses/LICENSE-2.0
-
-   Unless required by applicable law or agreed to in writing, software
-   distributed under the License is distributed on an "AS IS" BASIS,
-   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-   See the License for the specific language governing permissions and
-   limitations under the License.
- */
-
-import java.io.File;
-import java.io.IOException;
-
-import org.eclipse.jgit.api.Git;
-import org.eclipse.jgit.api.PullResult;
-import org.eclipse.jgit.api.errors.GitAPIException;
-import org.eclipse.jgit.api.errors.InvalidRemoteException;
-import org.eclipse.jgit.api.errors.TransportException;
-import org.eclipse.jgit.lib.Constants;
-import org.eclipse.jgit.lib.Repository;
-import org.eclipse.jgit.storage.file.FileRepositoryBuilder;
-
-
-
-/**
- * Simple snippet which shows how to poull from a remote repository from a remote source
- * 
- * @author dominik.stadler at gmx.at
- */
-public class PullRemoteRepository {
-
-    private static final String REMOTE_URL = "https://github.com/github/testrepo.git";
-
-    public static void main(String[] args) throws IOException, InvalidRemoteException, TransportException, GitAPIException {
-        Repository repository = cloneRepository();
-
-        System.out.println("Having repository: " + repository.getDirectory() + " with head: " +
-                repository.getRef(Constants.HEAD) + "/" + repository.resolve("HEAD") + "/" +
-                repository.resolve("refs/heads/master"));
-
-        // TODO: why do we get null here for HEAD?!? See also
-// http://stackoverflow.com/questions/17979660/jgit-pull-noheadexception
-
-        PullResult call = new Git(repository).pull().call();
-
-        System.out.println("Pulled from the remote repository: " + call);
-
-        repository.close();
-    }
-
-    private static Repository cloneRepository() throws IOException, GitAPIException, InvalidRemoteException, TransportException {
-        // prepare a new folder for the cloned repository
-        File localPath = File.createTempFile("TestGitRepository", "");
-        localPath.delete();
-
-        // then clone
-        System.out.println("Cloning from " + REMOTE_URL + " to " + localPath);
-        Git.cloneRepository()
-                .setURI(REMOTE_URL)
-                .setDirectory(localPath)
-                .call();
-
-        // now open the created repository
-        FileRepositoryBuilder builder = new FileRepositoryBuilder();
-        Repository repository = builder.setGitDir(localPath)
-                .readEnvironment() // scan environment GIT_* variables
-                .findGitDir() // scan up the file system tree
-                .build();
-        return repository;
-    }
-}
+package org.dstadler.jgit.unfinished;
+
+/*
+   Copyright 2013, 2014 Dominik Stadler
+
+   Licensed under the Apache License, Version 2.0 (the "License");
+   you may not use this file except in compliance with the License.
+   You may obtain a copy of the License at
+
+     http://www.apache.org/licenses/LICENSE-2.0
+
+   Unless required by applicable law or agreed to in writing, software
+   distributed under the License is distributed on an "AS IS" BASIS,
+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+   See the License for the specific language governing permissions and
+   limitations under the License.
+ */
+
+import java.io.File;
+import java.io.IOException;
+
+import org.eclipse.jgit.api.Git;
+import org.eclipse.jgit.api.PullResult;
+import org.eclipse.jgit.api.errors.GitAPIException;
+import org.eclipse.jgit.api.errors.InvalidRemoteException;
+import org.eclipse.jgit.api.errors.TransportException;
+import org.eclipse.jgit.lib.Constants;
+import org.eclipse.jgit.lib.Repository;
+import org.eclipse.jgit.storage.file.FileRepositoryBuilder;
+
+
+
+/**
+ * Simple snippet which shows how to poull from a remote repository from a remote source
+ * 
+ * @author dominik.stadler at gmx.at
+ */
+public class PullRemoteRepository {
+
+    private static final String REMOTE_URL = "https://github.com/github/testrepo.git";
+
+    public static void main(String[] args) throws IOException, InvalidRemoteException, TransportException, GitAPIException {
+        Repository repository = cloneRepository();
+
+        System.out.println("Having repository: " + repository.getDirectory() + " with head: " +
+                repository.getRef(Constants.HEAD) + "/" + repository.resolve("HEAD") + "/" +
+                repository.resolve("refs/heads/master"));
+
+        // TODO: why do we get null here for HEAD?!? See also
+// http://stackoverflow.com/questions/17979660/jgit-pull-noheadexception
+
+        PullResult call = new Git(repository).pull().call();
+
+        System.out.println("Pulled from the remote repository: " + call);
+
+        repository.close();
+    }
+
+    private static Repository cloneRepository() throws IOException, GitAPIException, InvalidRemoteException, TransportException {
+        // prepare a new folder for the cloned repository
+        File localPath = File.createTempFile("TestGitRepository", "");
+        localPath.delete();
+
+        // then clone
+        System.out.println("Cloning from " + REMOTE_URL + " to " + localPath);
+        Git.cloneRepository()
+                .setURI(REMOTE_URL)
+                .setDirectory(localPath)
+                .call();
+
+        // now open the created repository
+        FileRepositoryBuilder builder = new FileRepositoryBuilder();
+        Repository repository = builder.setGitDir(localPath)
+                .readEnvironment() // scan environment GIT_* variables
+                .findGitDir() // scan up the file system tree
+                .build();
+        return repository;
+    }
+}
diff --git a/src/main/java/org/dstadler/jgit/unfinished/PushToRemoteRepository.java b/src/main/java/org/dstadler/jgit/unfinished/PushToRemoteRepository.java
index c88ebf0..37e7e46 100644
--- a/src/main/java/org/dstadler/jgit/unfinished/PushToRemoteRepository.java
+++ b/src/main/java/org/dstadler/jgit/unfinished/PushToRemoteRepository.java
@@ -1,78 +1,78 @@
-package org.dstadler.jgit.unfinished;
-
-/*
-   Copyright 2013, 2014 Dominik Stadler
-
-   Licensed under the Apache License, Version 2.0 (the "License");
-   you may not use this file except in compliance with the License.
-   You may obtain a copy of the License at
-
-     http://www.apache.org/licenses/LICENSE-2.0
-
-   Unless required by applicable law or agreed to in writing, software
-   distributed under the License is distributed on an "AS IS" BASIS,
-   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-   See the License for the specific language governing permissions and
-   limitations under the License.
- */
-
-import java.io.File;
-import java.io.IOException;
-
-import org.eclipse.jgit.api.Git;
-import org.eclipse.jgit.api.errors.GitAPIException;
-import org.eclipse.jgit.api.errors.InvalidRemoteException;
-import org.eclipse.jgit.api.errors.TransportException;
-import org.eclipse.jgit.lib.Repository;
-import org.eclipse.jgit.storage.file.FileRepositoryBuilder;
-
-
-
-/**
- * Simple snippet which shows how to clone a repository from a remote source
- * 
- * @author dominik.stadler at gmx.at
- */
-public class PushToRemoteRepository {
-
-    private static final String REMOTE_URL = "https://github.com/github/testrepo.git";
-
-    public static void main(String[] args) throws IOException, InvalidRemoteException, TransportException, GitAPIException {
-        // prepare a new folder for the cloned repository
-        File localPath = File.createTempFile("TestGitRepository", "");
-        localPath.delete();
-
-        // then clone
-        System.out.println("Cloning from " + REMOTE_URL + " to " + localPath);
-        Git.cloneRepository()
-                .setURI(REMOTE_URL)
-                .setDirectory(localPath)
-                .call();
-
-        // prepare a second folder for the 2nd clone
-        File localPath2 = File.createTempFile("TestGitRepository", "");
-        localPath2.delete();
-
-        // then clone again
-        System.out.println("Cloning from file://" + localPath + " to " + localPath2);
-        Git.cloneRepository()
-                .setURI("file://" + localPath)
-                .setDirectory(localPath2)
-                .call();
-
-        // now open the created repository
-        FileRepositoryBuilder builder = new FileRepositoryBuilder();
-        Repository repository = builder.setGitDir(localPath2)
-                .readEnvironment() // scan environment GIT_* variables
-                .findGitDir() // scan up the file system tree
-                .build();
-
-        Git git = new Git(repository);
-        git.push()
-                .call();
-
-        System.out.println("Pushed from repository: " + repository.getDirectory() + " to remote repository at " + REMOTE_URL);
-
-        repository.close();
-    }
-}
+package org.dstadler.jgit.unfinished;
+
+/*
+   Copyright 2013, 2014 Dominik Stadler
+
+   Licensed under the Apache License, Version 2.0 (the "License");
+   you may not use this file except in compliance with the License.
+   You may obtain a copy of the License at
+
+     http://www.apache.org/licenses/LICENSE-2.0
+
+   Unless required by applicable law or agreed to in writing, software
+   distributed under the License is distributed on an "AS IS" BASIS,
+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+   See the License for the specific language governing permissions and
+   limitations under the License.
+ */
+
+import java.io.File;
+import java.io.IOException;
+
+import org.eclipse.jgit.api.Git;
+import org.eclipse.jgit.api.errors.GitAPIException;
+import org.eclipse.jgit.api.errors.InvalidRemoteException;
+import org.eclipse.jgit.api.errors.TransportException;
+import org.eclipse.jgit.lib.Repository;
+import org.eclipse.jgit.storage.file.FileRepositoryBuilder;
+
+
+
+/**
+ * Simple snippet which shows how to clone a repository from a remote source
+ * 
+ * @author dominik.stadler at gmx.at
+ */
+public class PushToRemoteRepository {
+
+    private static final String REMOTE_URL = "https://github.com/github/testrepo.git";
+
+    public static void main(String[] args) throws IOException, InvalidRemoteException, TransportException, GitAPIException {
+        // prepare a new folder for the cloned repository
+        File localPath = File.createTempFile("TestGitRepository", "");
+        localPath.delete();
+
+        // then clone
+        System.out.println("Cloning from " + REMOTE_URL + " to " + localPath);
+        Git.cloneRepository()
+                .setURI(REMOTE_URL)
+                .setDirectory(localPath)
+                .call();
+
+        // prepare a second folder for the 2nd clone
+        File localPath2 = File.createTempFile("TestGitRepository", "");
+        localPath2.delete();
+
+        // then clone again
+        System.out.println("Cloning from file://" + localPath + " to " + localPath2);
+        Git.cloneRepository()
+                .setURI("file://" + localPath)
+                .setDirectory(localPath2)
+                .call();
+
+        // now open the created repository
+        FileRepositoryBuilder builder = new FileRepositoryBuilder();
+        Repository repository = builder.setGitDir(localPath2)
+                .readEnvironment() // scan environment GIT_* variables
+                .findGitDir() // scan up the file system tree
+                .build();
+
+        Git git = new Git(repository);
+        git.push()
+                .call();
+
+        System.out.println("Pushed from repository: " + repository.getDirectory() + " to remote repository at " + REMOTE_URL);
+
+        repository.close();
+    }
+}
diff --git a/src/main/java/org/dstadler/jgit/unfinished/TrackMaster.java b/src/main/java/org/dstadler/jgit/unfinished/TrackMaster.java
index 9fca6c6..fd22f63 100644
--- a/src/main/java/org/dstadler/jgit/unfinished/TrackMaster.java
+++ b/src/main/java/org/dstadler/jgit/unfinished/TrackMaster.java
@@ -1,73 +1,73 @@
-package org.dstadler.jgit.unfinished;
-
-/*
-   Copyright 2013, 2014 Dominik Stadler
-
-   Licensed under the Apache License, Version 2.0 (the "License");
-   you may not use this file except in compliance with the License.
-   You may obtain a copy of the License at
-
-     http://www.apache.org/licenses/LICENSE-2.0
-
-   Unless required by applicable law or agreed to in writing, software
-   distributed under the License is distributed on an "AS IS" BASIS,
-   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-   See the License for the specific language governing permissions and
-   limitations under the License.
- */
-
-import java.io.File;
-import java.io.IOException;
-
-import org.eclipse.jgit.api.Git;
-import org.eclipse.jgit.api.errors.GitAPIException;
-import org.eclipse.jgit.api.errors.InvalidRemoteException;
-import org.eclipse.jgit.api.errors.TransportException;
-import org.eclipse.jgit.lib.Repository;
-import org.eclipse.jgit.storage.file.FileRepositoryBuilder;
-
-
-
-/**
- * Simple snippet which shows how to clone a repository from a remote source
- * 
- * @author dominik.stadler at gmx.at
- */
-public class TrackMaster {
-
-    private static final String REMOTE_URL = "https://github.com/github/testrepo.git";
-
-    public static void main(String[] args) throws IOException, InvalidRemoteException, TransportException, GitAPIException {
-        // prepare a new folder for the cloned repository
-        File localPath = File.createTempFile("TestGitRepository", "");
-        localPath.delete();
-
-        // then clone
-        System.out.println("Cloning from " + REMOTE_URL + " to " + localPath);
-        Git.cloneRepository()
-                .setURI(REMOTE_URL)
-                .setDirectory(localPath)
-                .call();
-
-        // now open the created repository
-        FileRepositoryBuilder builder = new FileRepositoryBuilder();
-        Repository repository = builder.setGitDir(localPath)
-                .readEnvironment() // scan environment GIT_* variables
-                .findGitDir() // scan up the file system tree
-                .build();
-
-        Git git = new Git(repository);
-
-        git.branchCreate()
-                .setName("master")
-                // ?!? .setUpstreamMode(SetupUpstreamMode.SET_UPSTREAM)
-                .setStartPoint("origin/master")
-                .setForce(true)
-                .call();
-
-        System.out.println("Now tracking master in repository at " + repository.getDirectory() + " from origin/master at " +
-                REMOTE_URL);
-
-        repository.close();
-    }
-}
+package org.dstadler.jgit.unfinished;
+
+/*
+   Copyright 2013, 2014 Dominik Stadler
+
+   Licensed under the Apache License, Version 2.0 (the "License");
+   you may not use this file except in compliance with the License.
+   You may obtain a copy of the License at
+
+     http://www.apache.org/licenses/LICENSE-2.0
+
+   Unless required by applicable law or agreed to in writing, software
+   distributed under the License is distributed on an "AS IS" BASIS,
+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+   See the License for the specific language governing permissions and
+   limitations under the License.
+ */
+
+import java.io.File;
+import java.io.IOException;
+
+import org.eclipse.jgit.api.Git;
+import org.eclipse.jgit.api.errors.GitAPIException;
+import org.eclipse.jgit.api.errors.InvalidRemoteException;
+import org.eclipse.jgit.api.errors.TransportException;
+import org.eclipse.jgit.lib.Repository;
+import org.eclipse.jgit.storage.file.FileRepositoryBuilder;
+
+
+
+/**
+ * Simple snippet which shows how to clone a repository from a remote source
+ * 
+ * @author dominik.stadler at gmx.at
+ */
+public class TrackMaster {
+
+    private static final String REMOTE_URL = "https://github.com/github/testrepo.git";
+
+    public static void main(String[] args) throws IOException, InvalidRemoteException, TransportException, GitAPIException {
+        // prepare a new folder for the cloned repository
+        File localPath = File.createTempFile("TestGitRepository", "");
+        localPath.delete();
+
+        // then clone
+        System.out.println("Cloning from " + REMOTE_URL + " to " + localPath);
+        Git.cloneRepository()
+                .setURI(REMOTE_URL)
+                .setDirectory(localPath)
+                .call();
+
+        // now open the created repository
+        FileRepositoryBuilder builder = new FileRepositoryBuilder();
+        Repository repository = builder.setGitDir(localPath)
+                .readEnvironment() // scan environment GIT_* variables
+                .findGitDir() // scan up the file system tree
+                .build();
+
+        Git git = new Git(repository);
+
+        git.branchCreate()
+                .setName("master")
+                // ?!? .setUpstreamMode(SetupUpstreamMode.SET_UPSTREAM)
+                .setStartPoint("origin/master")
+                .setForce(true)
+                .call();
+
+        System.out.println("Now tracking master in repository at " + repository.getDirectory() + " from origin/master at " +
+                REMOTE_URL);
+
+        repository.close();
+    }
+}
diff --git a/src/main/java/org/dstadler/jgit/unfinished/WalkTreeRecursive.java b/src/main/java/org/dstadler/jgit/unfinished/WalkTreeRecursive.java
index 337d0d2..1e1f28d 100644
--- a/src/main/java/org/dstadler/jgit/unfinished/WalkTreeRecursive.java
+++ b/src/main/java/org/dstadler/jgit/unfinished/WalkTreeRecursive.java
@@ -1,60 +1,60 @@
-package org.dstadler.jgit.unfinished;
-
-/*
-   Copyright 2013, 2014 Dominik Stadler
-
-   Licensed under the Apache License, Version 2.0 (the "License");
-   you may not use this file except in compliance with the License.
-   You may obtain a copy of the License at
-
-     http://www.apache.org/licenses/LICENSE-2.0
-
-   Unless required by applicable law or agreed to in writing, software
-   distributed under the License is distributed on an "AS IS" BASIS,
-   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-   See the License for the specific language governing permissions and
-   limitations under the License.
- */
-
-import java.io.IOException;
-
-import org.dstadler.jgit.helper.CookbookHelper;
-import org.eclipse.jgit.api.errors.GitAPIException;
-import org.eclipse.jgit.lib.Ref;
-import org.eclipse.jgit.lib.Repository;
-import org.eclipse.jgit.revwalk.RevCommit;
-import org.eclipse.jgit.revwalk.RevTree;
-import org.eclipse.jgit.revwalk.RevWalk;
-import org.eclipse.jgit.treewalk.TreeWalk;
-
-/**
- * Simple snippet which shows how to use RevWalk to iterate over items in a file-tree
- * 
- * @author dominik.stadler at gmx.at
- */
-public class WalkTreeRecursive {
-
-    public static void main(String[] args) throws IOException, GitAPIException {
-        Repository repository = CookbookHelper.openJGitCookbookRepository();
-
-        Ref head = repository.getRef("HEAD");
-
-        // a RevWalk allows to walk over commits based on some filtering that is defined
-        RevWalk walk = new RevWalk(repository);
-
-        RevCommit commit = walk.parseCommit(head.getObjectId());
-        RevTree tree = commit.getTree();
-        System.out.println("Having tree: " + tree);
-
-        // now use a TreeWalk to iterate over all files in the Tree recursively
-        // you can set Filters to narrow down the results if needed
-        TreeWalk treeWalk = new TreeWalk(repository);
-        treeWalk.addTree(tree);
-        treeWalk.setRecursive(true);
-        while (treeWalk.next()) {
-            System.out.println("found: " + treeWalk.getPathString());
-        }
-
-        repository.close();
-    }
-}
+package org.dstadler.jgit.unfinished;
+
+/*
+   Copyright 2013, 2014 Dominik Stadler
+
+   Licensed under the Apache License, Version 2.0 (the "License");
+   you may not use this file except in compliance with the License.
+   You may obtain a copy of the License at
+
+     http://www.apache.org/licenses/LICENSE-2.0
+
+   Unless required by applicable law or agreed to in writing, software
+   distributed under the License is distributed on an "AS IS" BASIS,
+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+   See the License for the specific language governing permissions and
+   limitations under the License.
+ */
+
+import java.io.IOException;
+
+import org.dstadler.jgit.helper.CookbookHelper;
+import org.eclipse.jgit.api.errors.GitAPIException;
+import org.eclipse.jgit.lib.Ref;
+import org.eclipse.jgit.lib.Repository;
+import org.eclipse.jgit.revwalk.RevCommit;
+import org.eclipse.jgit.revwalk.RevTree;
+import org.eclipse.jgit.revwalk.RevWalk;
+import org.eclipse.jgit.treewalk.TreeWalk;
+
+/**
+ * Simple snippet which shows how to use RevWalk to iterate over items in a file-tree
+ * 
+ * @author dominik.stadler at gmx.at
+ */
+public class WalkTreeRecursive {
+
+    public static void main(String[] args) throws IOException, GitAPIException {
+        Repository repository = CookbookHelper.openJGitCookbookRepository();
+
+        Ref head = repository.getRef("HEAD");
+
+        // a RevWalk allows to walk over commits based on some filtering that is defined
+        RevWalk walk = new RevWalk(repository);
+
+        RevCommit commit = walk.parseCommit(head.getObjectId());
+        RevTree tree = commit.getTree();
+        System.out.println("Having tree: " + tree);
+
+        // now use a TreeWalk to iterate over all files in the Tree recursively
+        // you can set Filters to narrow down the results if needed
+        TreeWalk treeWalk = new TreeWalk(repository);
+        treeWalk.addTree(tree);
+        treeWalk.setRecursive(true);
+        while (treeWalk.next()) {
+            System.out.println("found: " + treeWalk.getPathString());
+        }
+
+        repository.close();
+    }
+}
Diff Between 285db581ff0d53da89ee61a1bf236cbfeae7cb1d 5649e1573e9e49b675e2f30ce06875190cd53961diff --git a/src/main/java/org/dstadler/jgit/porcelain/ShowLog.java b/src/main/java/org/dstadler/jgit/porcelain/ShowLog.java
index d1c1512..ade6824 100755
--- a/src/main/java/org/dstadler/jgit/porcelain/ShowLog.java
+++ b/src/main/java/org/dstadler/jgit/porcelain/ShowLog.java
@@ -40 +39,0 @@
-                .all()
@@ -44 +43 @@
-            System.out.println("Commit: " + rev /* + ", name: " + rev.getName() + ", id: " + rev.getId().getName() */);
+            //System.out.println("Commit: " + rev /* + ", name: " + rev.getName() + ", id: " + rev.getId().getName() */);
@@ -48 +47,11 @@
-
+        
+        logs = new Git(repository).log()
+                .all()
+                .call();
+        count = 0;
+        for (RevCommit rev : logs) {
+            //System.out.println("Commit: " + rev /* + ", name: " + rev.getName() + ", id: " + rev.getId().getName() */);
+            count++;
+        }
+        System.out.println("Had " + count + " commits overall in repository");
+        
@@ -55 +64 @@
-            System.out.println("Commit: " + rev /* + ", name: " + rev.getName() + ", id: " + rev.getId().getName() */);
+            //System.out.println("Commit: " + rev /* + ", name: " + rev.getName() + ", id: " + rev.getId().getName() */);
@@ -66 +75 @@
-            System.out.println("Commit: " + rev /* + ", name: " + rev.getName() + ", id: " + rev.getId().getName() */);
+            //System.out.println("Commit: " + rev /* + ", name: " + rev.getName() + ", id: " + rev.getId().getName() */);
Diff Between 5649e1573e9e49b675e2f30ce06875190cd53961 860dce4e5d3a94da2203ce87a75e62349ac0cc4ediff --git a/src/main/java/org/dstadler/jgit/porcelain/ListBranches.java b/src/main/java/org/dstadler/jgit/porcelain/ListBranches.java
index 2e4413d..eb8b370 100644
--- a/src/main/java/org/dstadler/jgit/porcelain/ListBranches.java
+++ b/src/main/java/org/dstadler/jgit/porcelain/ListBranches.java
@@ -23,0 +24 @@
+import org.eclipse.jgit.api.ListBranchCommand.ListMode;
@@ -39,0 +41 @@
+        System.out.println("Listing local branches:");
@@ -44,0 +47,6 @@
+        System.out.println("Now including remote branches:");
+        call = new Git(repository).branchList().setListMode(ListMode.ALL).call();
+        for (Ref ref : call) {
+            System.out.println("Branch: " + ref + " " + ref.getName() + " " + ref.getObjectId().getName());
+        }
+        
Diff Between 860dce4e5d3a94da2203ce87a75e62349ac0cc4e 17440df387070ba392e1028130ad77bc3627feccdiff --git a/README.md b/README.md
index 87e872e..8b9fed3 100644
--- a/README.md
+++ b/README.md
@@ -50,0 +51 @@
+* [Create, list, apply and drop stashes](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/porcelain/CreateListApplyAndDropStash.java)
@@ -85 +85,0 @@
-* Stashes, see http://wiki.eclipse.org/JGit/New_and_Noteworthy/2.0#StashApplyCommand
@@ -115,0 +116 @@
+some more text
diff --git a/src/main/java/org/dstadler/jgit/porcelain/CreateListApplyAndDropStash.java b/src/main/java/org/dstadler/jgit/porcelain/CreateListApplyAndDropStash.java
new file mode 100644
index 0000000..9c3dcf2
--- /dev/null
+++ b/src/main/java/org/dstadler/jgit/porcelain/CreateListApplyAndDropStash.java
@@ -0,0 +1,95 @@
+package org.dstadler.jgit.porcelain;
+
+/*
+   Copyright 2013, 2014 Dominik Stadler
+
+   Licensed under the Apache License, Version 2.0 (the "License");
+   you may not use this file except in compliance with the License.
+   You may obtain a copy of the License at
+
+     http://www.apache.org/licenses/LICENSE-2.0
+
+   Unless required by applicable law or agreed to in writing, software
+   distributed under the License is distributed on an "AS IS" BASIS,
+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+   See the License for the specific language governing permissions and
+   limitations under the License.
+ */
+
+import java.io.File;
+import java.io.IOException;
+import java.util.Collection;
+
+import org.apache.commons.io.FileUtils;
+import org.dstadler.jgit.helper.CookbookHelper;
+import org.eclipse.jgit.api.Git;
+import org.eclipse.jgit.api.errors.GitAPIException;
+import org.eclipse.jgit.lib.ObjectId;
+import org.eclipse.jgit.lib.Repository;
+import org.eclipse.jgit.revwalk.RevCommit;
+
+
+
+/**
+ * Simple snippet which shows how to use commands for stashing changes.
+ * 
+ * @author dominik.stadler at gmx.at
+ */
+public class CreateListApplyAndDropStash {
+
+    public static void main(String[] args) throws IOException, GitAPIException {
+        // prepare a new test-repository
+        Repository repository = CookbookHelper.createNewRepository();
+        Git git = new Git(repository);
+
+        // create a file
+        File file1 = new File(repository.getDirectory().getParent(), "testfile");
+        FileUtils.writeStringToFile(file1, "some text");
+        File file2 = new File(repository.getDirectory().getParent(), "testfile2");
+        FileUtils.writeStringToFile(file2, "some text");
+        
+        // add and commit the file
+        git.add()
+                .addFilepattern("testfile")
+                .call();
+        git.add()
+                .addFilepattern("testfile2")
+                .call();
+        git.commit()
+                .setMessage("Added testfiles")
+                .call();
+
+        // then modify the file
+        FileUtils.writeStringToFile(file1, "some more text", true);
+        
+        // push the changes to a new stash
+        RevCommit stash = git.stashCreate()
+                .call();
+
+        System.out.println("Created stash " + stash);
+
+        // then modify the 2nd file
+        FileUtils.writeStringToFile(file2, "some more text", true);
+        
+        // push the changes to a new stash
+        stash = git.stashCreate()
+                .call();
+
+        System.out.println("Created stash " + stash);
+
+        // list the stashes
+        Collection<RevCommit> stashes = git.stashList().call();
+        for(RevCommit rev : stashes) {
+            System.out.println("Found stash: " + rev);
+        }
+        
+        // drop the 1st stash without applying it
+        ObjectId call = git.stashDrop().setStashRef(0).call();
+        System.out.println("StashDrop returned: " + call);
+        
+        ObjectId applied = git.stashApply().setStashRef(stash.getName()).call();
+        System.out.println("Applied 2nd stash as: " + applied);
+
+        repository.close();
+    }
+}
Diff Between 17440df387070ba392e1028130ad77bc3627fecc 653b211eff52a91b06714ce8e44e31a06e942ef9diff --git a/README.md b/README.md
index e140451..87e872e 100644
--- a/README.md
+++ b/README.md
@@ -27,0 +28 @@
+
@@ -47,0 +49 @@
+* [List available Notes](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/porcelain/ListNotes.java)
@@ -49,0 +52,2 @@
+##### Commands working with remote repositories
+
@@ -55,2 +58,0 @@
-* [List available Notes](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/porcelain/ListNotes.java)
-
Diff Between 653b211eff52a91b06714ce8e44e31a06e942ef9 1813172ad755522ee50650981db790f5dbeb14e3diff --git a/README.md b/README.md
index 06c023c..e140451 100644
--- a/README.md
+++ b/README.md
@@ -52,0 +53 @@
+* [Fetch from remote repositories](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/porcelain/FetchRemoteCommits.java)
diff --git a/src/main/java/org/dstadler/jgit/porcelain/FetchRemoteCommits.java b/src/main/java/org/dstadler/jgit/porcelain/FetchRemoteCommits.java
new file mode 100644
index 0000000..cb7c394
--- /dev/null
+++ b/src/main/java/org/dstadler/jgit/porcelain/FetchRemoteCommits.java
@@ -0,0 +1,45 @@
+package org.dstadler.jgit.porcelain;
+
+/*
+   Copyright 2013, 2014 Dominik Stadler
+
+   Licensed under the Apache License, Version 2.0 (the "License");
+   you may not use this file except in compliance with the License.
+   You may obtain a copy of the License at
+
+     http://www.apache.org/licenses/LICENSE-2.0
+
+   Unless required by applicable law or agreed to in writing, software
+   distributed under the License is distributed on an "AS IS" BASIS,
+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+   See the License for the specific language governing permissions and
+   limitations under the License.
+ */
+
+import java.io.IOException;
+
+import org.dstadler.jgit.helper.CookbookHelper;
+import org.eclipse.jgit.api.Git;
+import org.eclipse.jgit.api.errors.GitAPIException;
+import org.eclipse.jgit.lib.Repository;
+import org.eclipse.jgit.transport.FetchResult;
+
+
+
+/**
+ * Simple snippet which shows how to fetch commits from a remote Git repository
+ * 
+ * @author dominik.stadler at gmx.at
+ */
+public class FetchRemoteCommits {
+
+    public static void main(String[] args) throws IOException, GitAPIException {
+        Repository repository = CookbookHelper.openJGitCookbookRepository();
+
+        System.out.println("Starting fetch");
+        FetchResult result = new Git(repository).fetch().setCheckFetchedObjects(true).call();
+        System.out.println("Messages: " + result.getMessages());
+
+        repository.close();
+    }
+}
Diff Between 1813172ad755522ee50650981db790f5dbeb14e3 579254e864ebc2f7cc8ca06ab0feea66db901e06diff --git a/README.md b/README.md
index 5df6bda..06c023c 100644
--- a/README.md
+++ b/README.md
@@ -68,0 +69 @@
+* [Use class BranchTrackingStatus to retrieve number of commits ahead/behind compared to remote branches](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/api/ShowBranchTrackingStatus.java)
diff --git a/src/main/java/org/dstadler/jgit/api/ShowBranchTrackingStatus.java b/src/main/java/org/dstadler/jgit/api/ShowBranchTrackingStatus.java
new file mode 100644
index 0000000..ea8da5f
--- /dev/null
+++ b/src/main/java/org/dstadler/jgit/api/ShowBranchTrackingStatus.java
@@ -0,0 +1,67 @@
+package org.dstadler.jgit.api;
+
+/*
+ * Copyright 2013, 2014 Dominik Stadler
+ * 
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ * 
+ * http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+import java.io.IOException;
+import java.util.ArrayList;
+import java.util.List;
+
+import org.dstadler.jgit.helper.CookbookHelper;
+import org.eclipse.jgit.api.Git;
+import org.eclipse.jgit.api.errors.GitAPIException;
+import org.eclipse.jgit.lib.BranchTrackingStatus;
+import org.eclipse.jgit.lib.Ref;
+import org.eclipse.jgit.lib.Repository;
+
+/**
+ * Snippet which shows how to use BranchTrackingStatus to print
+ * how many commits away the local git repository is from the 
+ * remote branches.
+ * 
+ * @author dominik.stadler at gmx.at
+ */
+public class ShowBranchTrackingStatus {
+
+    public static void main(String[] args) throws IOException, GitAPIException {
+        Repository repository = CookbookHelper.openJGitCookbookRepository();
+
+        List<Ref> call = new Git(repository).branchList().call();
+        for (Ref ref : call) {
+            List<Integer> counts = getCounts(repository, ref.getName());
+            System.out.println("For branch: " + ref.getName());
+            System.out.println("Commits ahead : " + counts.get(0));
+            System.out.println("Commits behind : " + counts.get(1));
+            System.out.println();
+        }
+
+        repository.close();
+    }
+
+    private static List<Integer> getCounts(org.eclipse.jgit.lib.Repository repository, String branchName) throws IOException {
+        BranchTrackingStatus trackingStatus = BranchTrackingStatus.of(repository, branchName);
+        List<Integer> counts = new ArrayList<Integer>();
+        if (trackingStatus != null) {
+            counts.add(trackingStatus.getAheadCount());
+            counts.add(trackingStatus.getBehindCount());
+        } else {
+            System.out.println("Returned null, likely no remote tracking of branch " + branchName);
+            counts.add(0);
+            counts.add(0);
+        }
+        return counts;
+    }
+}
Diff Between 579254e864ebc2f7cc8ca06ab0feea66db901e06 650f618e287fef6a419e5c404c0ee3146ac1ec42diff --git a/README.md b/README.md
index 2a02941..5df6bda 100644
--- a/README.md
+++ b/README.md
@@ -95,0 +96,16 @@
+
+#### Licensing
+
+   Copyright 2013, 2014 Dominik Stadler
+
+   Licensed under the Apache License, Version 2.0 (the "License");
+   you may not use this file except in compliance with the License.
+   You may obtain a copy of the License at
+
+     http://www.apache.org/licenses/LICENSE-2.0
+
+   Unless required by applicable law or agreed to in writing, software
+   distributed under the License is distributed on an "AS IS" BASIS,
+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+   See the License for the specific language governing permissions and
+   limitations under the License.
diff --git a/src/main/java/org/dstadler/jgit/CreateNewRepository.java b/src/main/java/org/dstadler/jgit/CreateNewRepository.java
index 2926354..7101237 100644
--- a/src/main/java/org/dstadler/jgit/CreateNewRepository.java
+++ b/src/main/java/org/dstadler/jgit/CreateNewRepository.java
@@ -2,0 +3,16 @@
+/*
+   Copyright 2013, 2014 Dominik Stadler
+
+   Licensed under the Apache License, Version 2.0 (the "License");
+   you may not use this file except in compliance with the License.
+   You may obtain a copy of the License at
+
+     http://www.apache.org/licenses/LICENSE-2.0
+
+   Unless required by applicable law or agreed to in writing, software
+   distributed under the License is distributed on an "AS IS" BASIS,
+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+   See the License for the specific language governing permissions and
+   limitations under the License.
+ */
+
@@ -13 +29 @@
- * @author dominik.stadler@gmx.at
+ * @author dominik.stadler at gmx.at
diff --git a/src/main/java/org/dstadler/jgit/OpenRepository.java b/src/main/java/org/dstadler/jgit/OpenRepository.java
index 182331a..17c8423 100644
--- a/src/main/java/org/dstadler/jgit/OpenRepository.java
+++ b/src/main/java/org/dstadler/jgit/OpenRepository.java
@@ -2,0 +3,16 @@
+/*
+   Copyright 2013, 2014 Dominik Stadler
+
+   Licensed under the Apache License, Version 2.0 (the "License");
+   you may not use this file except in compliance with the License.
+   You may obtain a copy of the License at
+
+     http://www.apache.org/licenses/LICENSE-2.0
+
+   Unless required by applicable law or agreed to in writing, software
+   distributed under the License is distributed on an "AS IS" BASIS,
+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+   See the License for the specific language governing permissions and
+   limitations under the License.
+ */
+
@@ -14 +30 @@
- * @author dominik.stadler@gmx.at
+ * @author dominik.stadler at gmx.at
diff --git a/src/main/java/org/dstadler/jgit/api/GetFileAttributes.java b/src/main/java/org/dstadler/jgit/api/GetFileAttributes.java
index 978064b..9f67d2b 100755
--- a/src/main/java/org/dstadler/jgit/api/GetFileAttributes.java
+++ b/src/main/java/org/dstadler/jgit/api/GetFileAttributes.java
@@ -2,0 +3,16 @@
+/*
+   Copyright 2013, 2014 Dominik Stadler
+
+   Licensed under the Apache License, Version 2.0 (the "License");
+   you may not use this file except in compliance with the License.
+   You may obtain a copy of the License at
+
+     http://www.apache.org/licenses/LICENSE-2.0
+
+   Unless required by applicable law or agreed to in writing, software
+   distributed under the License is distributed on an "AS IS" BASIS,
+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+   See the License for the specific language governing permissions and
+   limitations under the License.
+ */
+
@@ -26 +42 @@
- * @author dominik.stadler@gmx.at
+ * @author dominik.stadler at gmx.at
diff --git a/src/main/java/org/dstadler/jgit/api/GetRefFromName.java b/src/main/java/org/dstadler/jgit/api/GetRefFromName.java
index 95be7df..cac3624 100644
--- a/src/main/java/org/dstadler/jgit/api/GetRefFromName.java
+++ b/src/main/java/org/dstadler/jgit/api/GetRefFromName.java
@@ -2,0 +3,16 @@
+/*
+   Copyright 2013, 2014 Dominik Stadler
+
+   Licensed under the Apache License, Version 2.0 (the "License");
+   you may not use this file except in compliance with the License.
+   You may obtain a copy of the License at
+
+     http://www.apache.org/licenses/LICENSE-2.0
+
+   Unless required by applicable law or agreed to in writing, software
+   distributed under the License is distributed on an "AS IS" BASIS,
+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+   See the License for the specific language governing permissions and
+   limitations under the License.
+ */
+
diff --git a/src/main/java/org/dstadler/jgit/api/GetRevCommitFromObjectId.java b/src/main/java/org/dstadler/jgit/api/GetRevCommitFromObjectId.java
index a0ce2ef..c72be00 100644
--- a/src/main/java/org/dstadler/jgit/api/GetRevCommitFromObjectId.java
+++ b/src/main/java/org/dstadler/jgit/api/GetRevCommitFromObjectId.java
@@ -2,0 +3,16 @@
+/*
+   Copyright 2013, 2014 Dominik Stadler
+
+   Licensed under the Apache License, Version 2.0 (the "License");
+   you may not use this file except in compliance with the License.
+   You may obtain a copy of the License at
+
+     http://www.apache.org/licenses/LICENSE-2.0
+
+   Unless required by applicable law or agreed to in writing, software
+   distributed under the License is distributed on an "AS IS" BASIS,
+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+   See the License for the specific language governing permissions and
+   limitations under the License.
+ */
+
diff --git a/src/main/java/org/dstadler/jgit/api/GetRevTreeFromObjectId.java b/src/main/java/org/dstadler/jgit/api/GetRevTreeFromObjectId.java
index 3a1ffd9..593ee58 100644
--- a/src/main/java/org/dstadler/jgit/api/GetRevTreeFromObjectId.java
+++ b/src/main/java/org/dstadler/jgit/api/GetRevTreeFromObjectId.java
@@ -2,0 +3,16 @@
+/*
+   Copyright 2013, 2014 Dominik Stadler
+
+   Licensed under the Apache License, Version 2.0 (the "License");
+   you may not use this file except in compliance with the License.
+   You may obtain a copy of the License at
+
+     http://www.apache.org/licenses/LICENSE-2.0
+
+   Unless required by applicable law or agreed to in writing, software
+   distributed under the License is distributed on an "AS IS" BASIS,
+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+   See the License for the specific language governing permissions and
+   limitations under the License.
+ */
+
diff --git a/src/main/java/org/dstadler/jgit/api/PrintRemotes.java b/src/main/java/org/dstadler/jgit/api/PrintRemotes.java
index db81d6d..c5476df 100755
--- a/src/main/java/org/dstadler/jgit/api/PrintRemotes.java
+++ b/src/main/java/org/dstadler/jgit/api/PrintRemotes.java
@@ -2,0 +3,16 @@
+/*
+   Copyright 2013, 2014 Dominik Stadler
+
+   Licensed under the Apache License, Version 2.0 (the "License");
+   you may not use this file except in compliance with the License.
+   You may obtain a copy of the License at
+
+     http://www.apache.org/licenses/LICENSE-2.0
+
+   Unless required by applicable law or agreed to in writing, software
+   distributed under the License is distributed on an "AS IS" BASIS,
+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+   See the License for the specific language governing permissions and
+   limitations under the License.
+ */
+
diff --git a/src/main/java/org/dstadler/jgit/api/ReadBlobContents.java b/src/main/java/org/dstadler/jgit/api/ReadBlobContents.java
index fe0f238..ef51cf1 100644
--- a/src/main/java/org/dstadler/jgit/api/ReadBlobContents.java
+++ b/src/main/java/org/dstadler/jgit/api/ReadBlobContents.java
@@ -2,0 +3,16 @@
+/*
+   Copyright 2013, 2014 Dominik Stadler
+
+   Licensed under the Apache License, Version 2.0 (the "License");
+   you may not use this file except in compliance with the License.
+   You may obtain a copy of the License at
+
+     http://www.apache.org/licenses/LICENSE-2.0
+
+   Unless required by applicable law or agreed to in writing, software
+   distributed under the License is distributed on an "AS IS" BASIS,
+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+   See the License for the specific language governing permissions and
+   limitations under the License.
+ */
+
diff --git a/src/main/java/org/dstadler/jgit/api/ReadFileFromCommit.java b/src/main/java/org/dstadler/jgit/api/ReadFileFromCommit.java
index 074f4a2..3d23d3f 100644
--- a/src/main/java/org/dstadler/jgit/api/ReadFileFromCommit.java
+++ b/src/main/java/org/dstadler/jgit/api/ReadFileFromCommit.java
@@ -2,0 +3,16 @@
+/*
+   Copyright 2013, 2014 Dominik Stadler
+
+   Licensed under the Apache License, Version 2.0 (the "License");
+   you may not use this file except in compliance with the License.
+   You may obtain a copy of the License at
+
+     http://www.apache.org/licenses/LICENSE-2.0
+
+   Unless required by applicable law or agreed to in writing, software
+   distributed under the License is distributed on an "AS IS" BASIS,
+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+   See the License for the specific language governing permissions and
+   limitations under the License.
+ */
+
@@ -21 +37 @@
- * @author dominik.stadler@gmx.at
+ * @author dominik.stadler at gmx.at
diff --git a/src/main/java/org/dstadler/jgit/api/ReadTagFromName.java b/src/main/java/org/dstadler/jgit/api/ReadTagFromName.java
index 2467038..b2c5a21 100644
--- a/src/main/java/org/dstadler/jgit/api/ReadTagFromName.java
+++ b/src/main/java/org/dstadler/jgit/api/ReadTagFromName.java
@@ -2,0 +3,16 @@
+/*
+   Copyright 2013, 2014 Dominik Stadler
+
+   Licensed under the Apache License, Version 2.0 (the "License");
+   you may not use this file except in compliance with the License.
+   You may obtain a copy of the License at
+
+     http://www.apache.org/licenses/LICENSE-2.0
+
+   Unless required by applicable law or agreed to in writing, software
+   distributed under the License is distributed on an "AS IS" BASIS,
+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+   See the License for the specific language governing permissions and
+   limitations under the License.
+ */
+
diff --git a/src/main/java/org/dstadler/jgit/api/ReadUserConfig.java b/src/main/java/org/dstadler/jgit/api/ReadUserConfig.java
index b7a1524..ac774a0 100755
--- a/src/main/java/org/dstadler/jgit/api/ReadUserConfig.java
+++ b/src/main/java/org/dstadler/jgit/api/ReadUserConfig.java
@@ -2,0 +3,16 @@
+/*
+   Copyright 2013, 2014 Dominik Stadler
+
+   Licensed under the Apache License, Version 2.0 (the "License");
+   you may not use this file except in compliance with the License.
+   You may obtain a copy of the License at
+
+     http://www.apache.org/licenses/LICENSE-2.0
+
+   Unless required by applicable law or agreed to in writing, software
+   distributed under the License is distributed on an "AS IS" BASIS,
+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+   See the License for the specific language governing permissions and
+   limitations under the License.
+ */
+
diff --git a/src/main/java/org/dstadler/jgit/api/ResolveRef.java b/src/main/java/org/dstadler/jgit/api/ResolveRef.java
index e3d4a13..d55b0fd 100644
--- a/src/main/java/org/dstadler/jgit/api/ResolveRef.java
+++ b/src/main/java/org/dstadler/jgit/api/ResolveRef.java
@@ -2,0 +3,16 @@
+/*
+   Copyright 2013, 2014 Dominik Stadler
+
+   Licensed under the Apache License, Version 2.0 (the "License");
+   you may not use this file except in compliance with the License.
+   You may obtain a copy of the License at
+
+     http://www.apache.org/licenses/LICENSE-2.0
+
+   Unless required by applicable law or agreed to in writing, software
+   distributed under the License is distributed on an "AS IS" BASIS,
+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+   See the License for the specific language governing permissions and
+   limitations under the License.
+ */
+
diff --git a/src/main/java/org/dstadler/jgit/api/WalkRev.java b/src/main/java/org/dstadler/jgit/api/WalkRev.java
index 726ca5a..3e9b3c7 100644
--- a/src/main/java/org/dstadler/jgit/api/WalkRev.java
+++ b/src/main/java/org/dstadler/jgit/api/WalkRev.java
@@ -2,0 +3,16 @@
+/*
+   Copyright 2013, 2014 Dominik Stadler
+
+   Licensed under the Apache License, Version 2.0 (the "License");
+   you may not use this file except in compliance with the License.
+   You may obtain a copy of the License at
+
+     http://www.apache.org/licenses/LICENSE-2.0
+
+   Unless required by applicable law or agreed to in writing, software
+   distributed under the License is distributed on an "AS IS" BASIS,
+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+   See the License for the specific language governing permissions and
+   limitations under the License.
+ */
+
diff --git a/src/main/java/org/dstadler/jgit/helper/CookbookHelper.java b/src/main/java/org/dstadler/jgit/helper/CookbookHelper.java
index 2dcd1a9..4f9976e 100644
--- a/src/main/java/org/dstadler/jgit/helper/CookbookHelper.java
+++ b/src/main/java/org/dstadler/jgit/helper/CookbookHelper.java
@@ -2,0 +3,16 @@
+/*
+   Copyright 2013, 2014 Dominik Stadler
+
+   Licensed under the Apache License, Version 2.0 (the "License");
+   you may not use this file except in compliance with the License.
+   You may obtain a copy of the License at
+
+     http://www.apache.org/licenses/LICENSE-2.0
+
+   Unless required by applicable law or agreed to in writing, software
+   distributed under the License is distributed on an "AS IS" BASIS,
+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+   See the License for the specific language governing permissions and
+   limitations under the License.
+ */
+
diff --git a/src/main/java/org/dstadler/jgit/porcelain/AddAndListNoteOfCommit.java b/src/main/java/org/dstadler/jgit/porcelain/AddAndListNoteOfCommit.java
index 413bd51..1b9020f 100755
--- a/src/main/java/org/dstadler/jgit/porcelain/AddAndListNoteOfCommit.java
+++ b/src/main/java/org/dstadler/jgit/porcelain/AddAndListNoteOfCommit.java
@@ -2,0 +3,16 @@
+/*
+   Copyright 2013, 2014 Dominik Stadler
+
+   Licensed under the Apache License, Version 2.0 (the "License");
+   you may not use this file except in compliance with the License.
+   You may obtain a copy of the License at
+
+     http://www.apache.org/licenses/LICENSE-2.0
+
+   Unless required by applicable law or agreed to in writing, software
+   distributed under the License is distributed on an "AS IS" BASIS,
+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+   See the License for the specific language governing permissions and
+   limitations under the License.
+ */
+
@@ -21 +37 @@
- * @author dominik.stadler@gmx.at
+ * @author dominik.stadler at gmx.at
diff --git a/src/main/java/org/dstadler/jgit/porcelain/AddFile.java b/src/main/java/org/dstadler/jgit/porcelain/AddFile.java
index c303f6e..c1f28aa 100644
--- a/src/main/java/org/dstadler/jgit/porcelain/AddFile.java
+++ b/src/main/java/org/dstadler/jgit/porcelain/AddFile.java
@@ -2,0 +3,16 @@
+/*
+   Copyright 2013, 2014 Dominik Stadler
+
+   Licensed under the Apache License, Version 2.0 (the "License");
+   you may not use this file except in compliance with the License.
+   You may obtain a copy of the License at
+
+     http://www.apache.org/licenses/LICENSE-2.0
+
+   Unless required by applicable law or agreed to in writing, software
+   distributed under the License is distributed on an "AS IS" BASIS,
+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+   See the License for the specific language governing permissions and
+   limitations under the License.
+ */
+
@@ -16 +32 @@
- * @author dominik.stadler@gmx.at
+ * @author dominik.stadler at gmx.at
diff --git a/src/main/java/org/dstadler/jgit/porcelain/CleanUntrackedFiles.java b/src/main/java/org/dstadler/jgit/porcelain/CleanUntrackedFiles.java
index e8707b6..e8a2350 100755
--- a/src/main/java/org/dstadler/jgit/porcelain/CleanUntrackedFiles.java
+++ b/src/main/java/org/dstadler/jgit/porcelain/CleanUntrackedFiles.java
@@ -2,0 +3,16 @@
+/*
+   Copyright 2013, 2014 Dominik Stadler
+
+   Licensed under the Apache License, Version 2.0 (the "License");
+   you may not use this file except in compliance with the License.
+   You may obtain a copy of the License at
+
+     http://www.apache.org/licenses/LICENSE-2.0
+
+   Unless required by applicable law or agreed to in writing, software
+   distributed under the License is distributed on an "AS IS" BASIS,
+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+   See the License for the specific language governing permissions and
+   limitations under the License.
+ */
+
@@ -17 +33 @@
- * @author dominik.stadler@gmx.at
+ * @author dominik.stadler at gmx.at
diff --git a/src/main/java/org/dstadler/jgit/porcelain/CloneRemoteRepository.java b/src/main/java/org/dstadler/jgit/porcelain/CloneRemoteRepository.java
index f1ddedf..72e96ed 100644
--- a/src/main/java/org/dstadler/jgit/porcelain/CloneRemoteRepository.java
+++ b/src/main/java/org/dstadler/jgit/porcelain/CloneRemoteRepository.java
@@ -2,0 +3,16 @@
+/*
+   Copyright 2013, 2014 Dominik Stadler
+
+   Licensed under the Apache License, Version 2.0 (the "License");
+   you may not use this file except in compliance with the License.
+   You may obtain a copy of the License at
+
+     http://www.apache.org/licenses/LICENSE-2.0
+
+   Unless required by applicable law or agreed to in writing, software
+   distributed under the License is distributed on an "AS IS" BASIS,
+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+   See the License for the specific language governing permissions and
+   limitations under the License.
+ */
+
@@ -18 +34 @@
- * @author dominik.stadler@gmx.at
+ * @author dominik.stadler at gmx.at
diff --git a/src/main/java/org/dstadler/jgit/porcelain/CommitFile.java b/src/main/java/org/dstadler/jgit/porcelain/CommitFile.java
index c8d22b7..9e91b69 100644
--- a/src/main/java/org/dstadler/jgit/porcelain/CommitFile.java
+++ b/src/main/java/org/dstadler/jgit/porcelain/CommitFile.java
@@ -2,0 +3,16 @@
+/*
+   Copyright 2013, 2014 Dominik Stadler
+
+   Licensed under the Apache License, Version 2.0 (the "License");
+   you may not use this file except in compliance with the License.
+   You may obtain a copy of the License at
+
+     http://www.apache.org/licenses/LICENSE-2.0
+
+   Unless required by applicable law or agreed to in writing, software
+   distributed under the License is distributed on an "AS IS" BASIS,
+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+   See the License for the specific language governing permissions and
+   limitations under the License.
+ */
+
@@ -16 +32 @@
- * @author dominik.stadler@gmx.at
+ * @author dominik.stadler at gmx.at
diff --git a/src/main/java/org/dstadler/jgit/porcelain/CreateAndDeleteBranch.java b/src/main/java/org/dstadler/jgit/porcelain/CreateAndDeleteBranch.java
index 6b9d58a..eb00114 100755
--- a/src/main/java/org/dstadler/jgit/porcelain/CreateAndDeleteBranch.java
+++ b/src/main/java/org/dstadler/jgit/porcelain/CreateAndDeleteBranch.java
@@ -2,0 +3,16 @@
+/*
+   Copyright 2013, 2014 Dominik Stadler
+
+   Licensed under the Apache License, Version 2.0 (the "License");
+   you may not use this file except in compliance with the License.
+   You may obtain a copy of the License at
+
+     http://www.apache.org/licenses/LICENSE-2.0
+
+   Unless required by applicable law or agreed to in writing, software
+   distributed under the License is distributed on an "AS IS" BASIS,
+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+   See the License for the specific language governing permissions and
+   limitations under the License.
+ */
+
@@ -17 +33 @@
- * @author dominik.stadler@gmx.at
+ * @author dominik.stadler at gmx.at
diff --git a/src/main/java/org/dstadler/jgit/porcelain/CreateAndDeleteTag.java b/src/main/java/org/dstadler/jgit/porcelain/CreateAndDeleteTag.java
index 53570a5..8648603 100755
--- a/src/main/java/org/dstadler/jgit/porcelain/CreateAndDeleteTag.java
+++ b/src/main/java/org/dstadler/jgit/porcelain/CreateAndDeleteTag.java
@@ -2,0 +3,16 @@
+/*
+   Copyright 2013, 2014 Dominik Stadler
+
+   Licensed under the Apache License, Version 2.0 (the "License");
+   you may not use this file except in compliance with the License.
+   You may obtain a copy of the License at
+
+     http://www.apache.org/licenses/LICENSE-2.0
+
+   Unless required by applicable law or agreed to in writing, software
+   distributed under the License is distributed on an "AS IS" BASIS,
+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+   See the License for the specific language governing permissions and
+   limitations under the License.
+ */
+
@@ -19 +35 @@
- * @author dominik.stadler@gmx.at
+ * @author dominik.stadler at gmx.at
diff --git a/src/main/java/org/dstadler/jgit/porcelain/CreateArchive.java b/src/main/java/org/dstadler/jgit/porcelain/CreateArchive.java
index 6e60a22..c09c1b7 100644
--- a/src/main/java/org/dstadler/jgit/porcelain/CreateArchive.java
+++ b/src/main/java/org/dstadler/jgit/porcelain/CreateArchive.java
@@ -2,0 +3,16 @@
+/*
+   Copyright 2013, 2014 Dominik Stadler
+
+   Licensed under the Apache License, Version 2.0 (the "License");
+   you may not use this file except in compliance with the License.
+   You may obtain a copy of the License at
+
+     http://www.apache.org/licenses/LICENSE-2.0
+
+   Unless required by applicable law or agreed to in writing, software
+   distributed under the License is distributed on an "AS IS" BASIS,
+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+   See the License for the specific language governing permissions and
+   limitations under the License.
+ */
+
@@ -25 +41 @@
- * @author dominik.stadler@gmx.at
+ * @author dominik.stadler at gmx.at
diff --git a/src/main/java/org/dstadler/jgit/porcelain/InitRepository.java b/src/main/java/org/dstadler/jgit/porcelain/InitRepository.java
index 520d248..98b893a 100755
--- a/src/main/java/org/dstadler/jgit/porcelain/InitRepository.java
+++ b/src/main/java/org/dstadler/jgit/porcelain/InitRepository.java
@@ -2,0 +3,16 @@
+/*
+   Copyright 2013, 2014 Dominik Stadler
+
+   Licensed under the Apache License, Version 2.0 (the "License");
+   you may not use this file except in compliance with the License.
+   You may obtain a copy of the License at
+
+     http://www.apache.org/licenses/LICENSE-2.0
+
+   Unless required by applicable law or agreed to in writing, software
+   distributed under the License is distributed on an "AS IS" BASIS,
+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+   See the License for the specific language governing permissions and
+   limitations under the License.
+ */
+
@@ -16 +32 @@
- * @author dominik.stadler@gmx.at
+ * @author dominik.stadler at gmx.at
diff --git a/src/main/java/org/dstadler/jgit/porcelain/ListBranches.java b/src/main/java/org/dstadler/jgit/porcelain/ListBranches.java
index 78f2670..2e4413d 100644
--- a/src/main/java/org/dstadler/jgit/porcelain/ListBranches.java
+++ b/src/main/java/org/dstadler/jgit/porcelain/ListBranches.java
@@ -2,0 +3,16 @@
+/*
+   Copyright 2013, 2014 Dominik Stadler
+
+   Licensed under the Apache License, Version 2.0 (the "License");
+   you may not use this file except in compliance with the License.
+   You may obtain a copy of the License at
+
+     http://www.apache.org/licenses/LICENSE-2.0
+
+   Unless required by applicable law or agreed to in writing, software
+   distributed under the License is distributed on an "AS IS" BASIS,
+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+   See the License for the specific language governing permissions and
+   limitations under the License.
+ */
+
@@ -17 +33 @@
- * @author dominik.stadler@gmx.at
+ * @author dominik.stadler at gmx.at
diff --git a/src/main/java/org/dstadler/jgit/porcelain/ListNotes.java b/src/main/java/org/dstadler/jgit/porcelain/ListNotes.java
index 8dfcdd3..a4788dd 100644
--- a/src/main/java/org/dstadler/jgit/porcelain/ListNotes.java
+++ b/src/main/java/org/dstadler/jgit/porcelain/ListNotes.java
@@ -2,0 +3,16 @@
+/*
+   Copyright 2013, 2014 Dominik Stadler
+
+   Licensed under the Apache License, Version 2.0 (the "License");
+   you may not use this file except in compliance with the License.
+   You may obtain a copy of the License at
+
+     http://www.apache.org/licenses/LICENSE-2.0
+
+   Unless required by applicable law or agreed to in writing, software
+   distributed under the License is distributed on an "AS IS" BASIS,
+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+   See the License for the specific language governing permissions and
+   limitations under the License.
+ */
+
@@ -18 +34 @@
- * @author dominik.stadler@gmx.at
+ * @author dominik.stadler at gmx.at
diff --git a/src/main/java/org/dstadler/jgit/porcelain/ListRemoteRepository.java b/src/main/java/org/dstadler/jgit/porcelain/ListRemoteRepository.java
index 8dc7465..b88fce0 100644
--- a/src/main/java/org/dstadler/jgit/porcelain/ListRemoteRepository.java
+++ b/src/main/java/org/dstadler/jgit/porcelain/ListRemoteRepository.java
@@ -2,0 +3,16 @@
+/*
+   Copyright 2013, 2014 Dominik Stadler
+
+   Licensed under the Apache License, Version 2.0 (the "License");
+   you may not use this file except in compliance with the License.
+   You may obtain a copy of the License at
+
+     http://www.apache.org/licenses/LICENSE-2.0
+
+   Unless required by applicable law or agreed to in writing, software
+   distributed under the License is distributed on an "AS IS" BASIS,
+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+   See the License for the specific language governing permissions and
+   limitations under the License.
+ */
+
@@ -18 +34 @@
- * @author dominik.stadler@gmx.at
+ * @author dominik.stadler at gmx.at
diff --git a/src/main/java/org/dstadler/jgit/porcelain/ListRemotes.java b/src/main/java/org/dstadler/jgit/porcelain/ListRemotes.java
index 7b8367c..1b8ff78 100755
--- a/src/main/java/org/dstadler/jgit/porcelain/ListRemotes.java
+++ b/src/main/java/org/dstadler/jgit/porcelain/ListRemotes.java
@@ -2,0 +3,16 @@
+/*
+   Copyright 2013, 2014 Dominik Stadler
+
+   Licensed under the Apache License, Version 2.0 (the "License");
+   you may not use this file except in compliance with the License.
+   You may obtain a copy of the License at
+
+     http://www.apache.org/licenses/LICENSE-2.0
+
+   Unless required by applicable law or agreed to in writing, software
+   distributed under the License is distributed on an "AS IS" BASIS,
+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+   See the License for the specific language governing permissions and
+   limitations under the License.
+ */
+
@@ -15 +31 @@
- * @author dominik.stadler@gmx.at
+ * @author dominik.stadler at gmx.at
diff --git a/src/main/java/org/dstadler/jgit/porcelain/ListTags.java b/src/main/java/org/dstadler/jgit/porcelain/ListTags.java
index d1df6ea..82a73af 100644
--- a/src/main/java/org/dstadler/jgit/porcelain/ListTags.java
+++ b/src/main/java/org/dstadler/jgit/porcelain/ListTags.java
@@ -2,0 +3,16 @@
+/*
+   Copyright 2013, 2014 Dominik Stadler
+
+   Licensed under the Apache License, Version 2.0 (the "License");
+   you may not use this file except in compliance with the License.
+   You may obtain a copy of the License at
+
+     http://www.apache.org/licenses/LICENSE-2.0
+
+   Unless required by applicable law or agreed to in writing, software
+   distributed under the License is distributed on an "AS IS" BASIS,
+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+   See the License for the specific language governing permissions and
+   limitations under the License.
+ */
+
@@ -17 +33 @@
- * @author dominik.stadler@gmx.at
+ * @author dominik.stadler at gmx.at
diff --git a/src/main/java/org/dstadler/jgit/porcelain/ShowBlame.java b/src/main/java/org/dstadler/jgit/porcelain/ShowBlame.java
index 625f6e9..c10da7f 100644
--- a/src/main/java/org/dstadler/jgit/porcelain/ShowBlame.java
+++ b/src/main/java/org/dstadler/jgit/porcelain/ShowBlame.java
@@ -2,0 +3,15 @@
+/*
+    Copyright 2013, 2014 Dominik Stadler
+    
+    Licensed under the Apache License, Version 2.0 (the "License");
+    you may not use this file except in compliance with the License.
+    You may obtain a copy of the License at
+    
+      http://www.apache.org/licenses/LICENSE-2.0
+    
+    Unless required by applicable law or agreed to in writing, software
+    distributed under the License is distributed on an "AS IS" BASIS,
+    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+    See the License for the specific language governing permissions and
+    limitations under the License.
+*/
@@ -28 +43 @@
- * @author dominik.stadler@gmx.at
+ * @author dominik.stadler at gmx.at
diff --git a/src/main/java/org/dstadler/jgit/porcelain/ShowBranchDiff.java b/src/main/java/org/dstadler/jgit/porcelain/ShowBranchDiff.java
index ea59b43..34f8f8a 100755
--- a/src/main/java/org/dstadler/jgit/porcelain/ShowBranchDiff.java
+++ b/src/main/java/org/dstadler/jgit/porcelain/ShowBranchDiff.java
@@ -2,0 +3,16 @@
+/*
+   Copyright 2013, 2014 Dominik Stadler
+
+   Licensed under the Apache License, Version 2.0 (the "License");
+   you may not use this file except in compliance with the License.
+   You may obtain a copy of the License at
+
+     http://www.apache.org/licenses/LICENSE-2.0
+
+   Unless required by applicable law or agreed to in writing, software
+   distributed under the License is distributed on an "AS IS" BASIS,
+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+   See the License for the specific language governing permissions and
+   limitations under the License.
+ */
+
@@ -26 +42 @@
- * @author dominik.stadler@gmx.at
+ * @author dominik.stadler at gmx.at
diff --git a/src/main/java/org/dstadler/jgit/porcelain/ShowFileDiff.java b/src/main/java/org/dstadler/jgit/porcelain/ShowFileDiff.java
index 5936fb4..1aeb98a 100644
--- a/src/main/java/org/dstadler/jgit/porcelain/ShowFileDiff.java
+++ b/src/main/java/org/dstadler/jgit/porcelain/ShowFileDiff.java
@@ -2,0 +3,16 @@
+/*
+   Copyright 2013, 2014 Dominik Stadler
+
+   Licensed under the Apache License, Version 2.0 (the "License");
+   you may not use this file except in compliance with the License.
+   You may obtain a copy of the License at
+
+     http://www.apache.org/licenses/LICENSE-2.0
+
+   Unless required by applicable law or agreed to in writing, software
+   distributed under the License is distributed on an "AS IS" BASIS,
+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+   See the License for the specific language governing permissions and
+   limitations under the License.
+ */
+
@@ -28 +44 @@
- * @author dominik.stadler@gmx.at
+ * @author dominik.stadler at gmx.at
diff --git a/src/main/java/org/dstadler/jgit/porcelain/ShowLog.java b/src/main/java/org/dstadler/jgit/porcelain/ShowLog.java
index 0795246..d1c1512 100755
--- a/src/main/java/org/dstadler/jgit/porcelain/ShowLog.java
+++ b/src/main/java/org/dstadler/jgit/porcelain/ShowLog.java
@@ -2,0 +3,16 @@
+/*
+   Copyright 2013, 2014 Dominik Stadler
+
+   Licensed under the Apache License, Version 2.0 (the "License");
+   you may not use this file except in compliance with the License.
+   You may obtain a copy of the License at
+
+     http://www.apache.org/licenses/LICENSE-2.0
+
+   Unless required by applicable law or agreed to in writing, software
+   distributed under the License is distributed on an "AS IS" BASIS,
+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+   See the License for the specific language governing permissions and
+   limitations under the License.
+ */
+
@@ -16 +32 @@
- * @author dominik.stadler@gmx.at
+ * @author dominik.stadler at gmx.at
diff --git a/src/main/java/org/dstadler/jgit/porcelain/ShowStatus.java b/src/main/java/org/dstadler/jgit/porcelain/ShowStatus.java
index 397b9f9..0dd5ca7 100644
--- a/src/main/java/org/dstadler/jgit/porcelain/ShowStatus.java
+++ b/src/main/java/org/dstadler/jgit/porcelain/ShowStatus.java
@@ -2,0 +3,16 @@
+/*
+   Copyright 2013, 2014 Dominik Stadler
+
+   Licensed under the Apache License, Version 2.0 (the "License");
+   you may not use this file except in compliance with the License.
+   You may obtain a copy of the License at
+
+     http://www.apache.org/licenses/LICENSE-2.0
+
+   Unless required by applicable law or agreed to in writing, software
+   distributed under the License is distributed on an "AS IS" BASIS,
+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+   See the License for the specific language governing permissions and
+   limitations under the License.
+ */
+
@@ -17 +33 @@
- * @author dominik.stadler@gmx.at
+ * @author dominik.stadler at gmx.at
diff --git a/src/main/java/org/dstadler/jgit/porcelain/WalkAllCommits.java b/src/main/java/org/dstadler/jgit/porcelain/WalkAllCommits.java
index 9aed281..be06a4a 100644
--- a/src/main/java/org/dstadler/jgit/porcelain/WalkAllCommits.java
+++ b/src/main/java/org/dstadler/jgit/porcelain/WalkAllCommits.java
@@ -2,0 +3,16 @@
+/*
+   Copyright 2013, 2014 Dominik Stadler
+
+   Licensed under the Apache License, Version 2.0 (the "License");
+   you may not use this file except in compliance with the License.
+   You may obtain a copy of the License at
+
+     http://www.apache.org/licenses/LICENSE-2.0
+
+   Unless required by applicable law or agreed to in writing, software
+   distributed under the License is distributed on an "AS IS" BASIS,
+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+   See the License for the specific language governing permissions and
+   limitations under the License.
+ */
+
diff --git a/src/main/java/org/dstadler/jgit/unfinished/BrowseTree.java b/src/main/java/org/dstadler/jgit/unfinished/BrowseTree.java
index 08c5d3c..57b3531 100644
--- a/src/main/java/org/dstadler/jgit/unfinished/BrowseTree.java
+++ b/src/main/java/org/dstadler/jgit/unfinished/BrowseTree.java
@@ -2,0 +3,16 @@
+/*
+   Copyright 2013, 2014 Dominik Stadler
+
+   Licensed under the Apache License, Version 2.0 (the "License");
+   you may not use this file except in compliance with the License.
+   You may obtain a copy of the License at
+
+     http://www.apache.org/licenses/LICENSE-2.0
+
+   Unless required by applicable law or agreed to in writing, software
+   distributed under the License is distributed on an "AS IS" BASIS,
+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+   See the License for the specific language governing permissions and
+   limitations under the License.
+ */
+
@@ -17 +33 @@
- * @author dominik.stadler@gmx.at
+ * @author dominik.stadler at gmx.at
diff --git a/src/main/java/org/dstadler/jgit/unfinished/ListChildrenOfCommit.java b/src/main/java/org/dstadler/jgit/unfinished/ListChildrenOfCommit.java
index 226dfb6..1ad54fc 100755
--- a/src/main/java/org/dstadler/jgit/unfinished/ListChildrenOfCommit.java
+++ b/src/main/java/org/dstadler/jgit/unfinished/ListChildrenOfCommit.java
@@ -2,0 +3,16 @@
+/*
+   Copyright 2013, 2014 Dominik Stadler
+
+   Licensed under the Apache License, Version 2.0 (the "License");
+   you may not use this file except in compliance with the License.
+   You may obtain a copy of the License at
+
+     http://www.apache.org/licenses/LICENSE-2.0
+
+   Unless required by applicable law or agreed to in writing, software
+   distributed under the License is distributed on an "AS IS" BASIS,
+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+   See the License for the specific language governing permissions and
+   limitations under the License.
+ */
+
@@ -17 +33 @@
- * @author dominik.stadler@gmx.at
+ * @author dominik.stadler at gmx.at
diff --git a/src/main/java/org/dstadler/jgit/unfinished/ListIndex.java b/src/main/java/org/dstadler/jgit/unfinished/ListIndex.java
index 3f684a3..f3f06c6 100755
--- a/src/main/java/org/dstadler/jgit/unfinished/ListIndex.java
+++ b/src/main/java/org/dstadler/jgit/unfinished/ListIndex.java
@@ -2,0 +3,16 @@
+/*
+   Copyright 2013, 2014 Dominik Stadler
+
+   Licensed under the Apache License, Version 2.0 (the "License");
+   you may not use this file except in compliance with the License.
+   You may obtain a copy of the License at
+
+     http://www.apache.org/licenses/LICENSE-2.0
+
+   Unless required by applicable law or agreed to in writing, software
+   distributed under the License is distributed on an "AS IS" BASIS,
+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+   See the License for the specific language governing permissions and
+   limitations under the License.
+ */
+
@@ -14 +30 @@
- * @author dominik.stadler@gmx.at
+ * @author dominik.stadler at gmx.at
diff --git a/src/main/java/org/dstadler/jgit/unfinished/ListRefLog.java b/src/main/java/org/dstadler/jgit/unfinished/ListRefLog.java
index 9d1c4a8..1a5c2c8 100755
--- a/src/main/java/org/dstadler/jgit/unfinished/ListRefLog.java
+++ b/src/main/java/org/dstadler/jgit/unfinished/ListRefLog.java
@@ -2,0 +3,16 @@
+/*
+   Copyright 2013, 2014 Dominik Stadler
+
+   Licensed under the Apache License, Version 2.0 (the "License");
+   you may not use this file except in compliance with the License.
+   You may obtain a copy of the License at
+
+     http://www.apache.org/licenses/LICENSE-2.0
+
+   Unless required by applicable law or agreed to in writing, software
+   distributed under the License is distributed on an "AS IS" BASIS,
+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+   See the License for the specific language governing permissions and
+   limitations under the License.
+ */
+
@@ -21 +37 @@
- * @author dominik.stadler@gmx.at
+ * @author dominik.stadler at gmx.at
diff --git a/src/main/java/org/dstadler/jgit/unfinished/PullFromRemoteRepository.java b/src/main/java/org/dstadler/jgit/unfinished/PullFromRemoteRepository.java
index 53dea0f..e08b2c2 100644
--- a/src/main/java/org/dstadler/jgit/unfinished/PullFromRemoteRepository.java
+++ b/src/main/java/org/dstadler/jgit/unfinished/PullFromRemoteRepository.java
@@ -2,0 +3,16 @@
+/*
+   Copyright 2013, 2014 Dominik Stadler
+
+   Licensed under the Apache License, Version 2.0 (the "License");
+   you may not use this file except in compliance with the License.
+   You may obtain a copy of the License at
+
+     http://www.apache.org/licenses/LICENSE-2.0
+
+   Unless required by applicable law or agreed to in writing, software
+   distributed under the License is distributed on an "AS IS" BASIS,
+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+   See the License for the specific language governing permissions and
+   limitations under the License.
+ */
+
@@ -18 +34 @@
- * @author dominik.stadler@gmx.at
+ * @author dominik.stadler at gmx.at
diff --git a/src/main/java/org/dstadler/jgit/unfinished/PullRemoteRepository.java b/src/main/java/org/dstadler/jgit/unfinished/PullRemoteRepository.java
index d7686e4..8becb13 100755
--- a/src/main/java/org/dstadler/jgit/unfinished/PullRemoteRepository.java
+++ b/src/main/java/org/dstadler/jgit/unfinished/PullRemoteRepository.java
@@ -2,0 +3,16 @@
+/*
+   Copyright 2013, 2014 Dominik Stadler
+
+   Licensed under the Apache License, Version 2.0 (the "License");
+   you may not use this file except in compliance with the License.
+   You may obtain a copy of the License at
+
+     http://www.apache.org/licenses/LICENSE-2.0
+
+   Unless required by applicable law or agreed to in writing, software
+   distributed under the License is distributed on an "AS IS" BASIS,
+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+   See the License for the specific language governing permissions and
+   limitations under the License.
+ */
+
@@ -20 +36 @@
- * @author dominik.stadler@gmx.at
+ * @author dominik.stadler at gmx.at
diff --git a/src/main/java/org/dstadler/jgit/unfinished/PushToRemoteRepository.java b/src/main/java/org/dstadler/jgit/unfinished/PushToRemoteRepository.java
index 994bee1..c88ebf0 100644
--- a/src/main/java/org/dstadler/jgit/unfinished/PushToRemoteRepository.java
+++ b/src/main/java/org/dstadler/jgit/unfinished/PushToRemoteRepository.java
@@ -2,0 +3,16 @@
+/*
+   Copyright 2013, 2014 Dominik Stadler
+
+   Licensed under the Apache License, Version 2.0 (the "License");
+   you may not use this file except in compliance with the License.
+   You may obtain a copy of the License at
+
+     http://www.apache.org/licenses/LICENSE-2.0
+
+   Unless required by applicable law or agreed to in writing, software
+   distributed under the License is distributed on an "AS IS" BASIS,
+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+   See the License for the specific language governing permissions and
+   limitations under the License.
+ */
+
@@ -18 +34 @@
- * @author dominik.stadler@gmx.at
+ * @author dominik.stadler at gmx.at
diff --git a/src/main/java/org/dstadler/jgit/unfinished/TrackMaster.java b/src/main/java/org/dstadler/jgit/unfinished/TrackMaster.java
index 2aa1438..9fca6c6 100644
--- a/src/main/java/org/dstadler/jgit/unfinished/TrackMaster.java
+++ b/src/main/java/org/dstadler/jgit/unfinished/TrackMaster.java
@@ -2,0 +3,16 @@
+/*
+   Copyright 2013, 2014 Dominik Stadler
+
+   Licensed under the Apache License, Version 2.0 (the "License");
+   you may not use this file except in compliance with the License.
+   You may obtain a copy of the License at
+
+     http://www.apache.org/licenses/LICENSE-2.0
+
+   Unless required by applicable law or agreed to in writing, software
+   distributed under the License is distributed on an "AS IS" BASIS,
+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+   See the License for the specific language governing permissions and
+   limitations under the License.
+ */
+
@@ -18 +34 @@
- * @author dominik.stadler@gmx.at
+ * @author dominik.stadler at gmx.at
diff --git a/src/main/java/org/dstadler/jgit/unfinished/UpdateIndex.java b/src/main/java/org/dstadler/jgit/unfinished/UpdateIndex.java
index ddd540d..c9b259e 100644
--- a/src/main/java/org/dstadler/jgit/unfinished/UpdateIndex.java
+++ b/src/main/java/org/dstadler/jgit/unfinished/UpdateIndex.java
@@ -2,0 +3,16 @@
+/*
+   Copyright 2013, 2014 Dominik Stadler
+
+   Licensed under the Apache License, Version 2.0 (the "License");
+   you may not use this file except in compliance with the License.
+   You may obtain a copy of the License at
+
+     http://www.apache.org/licenses/LICENSE-2.0
+
+   Unless required by applicable law or agreed to in writing, software
+   distributed under the License is distributed on an "AS IS" BASIS,
+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+   See the License for the specific language governing permissions and
+   limitations under the License.
+ */
+
diff --git a/src/main/java/org/dstadler/jgit/unfinished/WalkTreeNonRecursive.java b/src/main/java/org/dstadler/jgit/unfinished/WalkTreeNonRecursive.java
index f87c826..b7d3f8e 100644
--- a/src/main/java/org/dstadler/jgit/unfinished/WalkTreeNonRecursive.java
+++ b/src/main/java/org/dstadler/jgit/unfinished/WalkTreeNonRecursive.java
@@ -2,0 +3,16 @@
+/*
+   Copyright 2013, 2014 Dominik Stadler
+
+   Licensed under the Apache License, Version 2.0 (the "License");
+   you may not use this file except in compliance with the License.
+   You may obtain a copy of the License at
+
+     http://www.apache.org/licenses/LICENSE-2.0
+
+   Unless required by applicable law or agreed to in writing, software
+   distributed under the License is distributed on an "AS IS" BASIS,
+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+   See the License for the specific language governing permissions and
+   limitations under the License.
+ */
+
@@ -17 +33 @@
- * @author dominik.stadler@gmx.at
+ * @author dominik.stadler at gmx.at
diff --git a/src/main/java/org/dstadler/jgit/unfinished/WalkTreeRecursive.java b/src/main/java/org/dstadler/jgit/unfinished/WalkTreeRecursive.java
index 82debfe..337d0d2 100644
--- a/src/main/java/org/dstadler/jgit/unfinished/WalkTreeRecursive.java
+++ b/src/main/java/org/dstadler/jgit/unfinished/WalkTreeRecursive.java
@@ -2,0 +3,16 @@
+/*
+   Copyright 2013, 2014 Dominik Stadler
+
+   Licensed under the Apache License, Version 2.0 (the "License");
+   you may not use this file except in compliance with the License.
+   You may obtain a copy of the License at
+
+     http://www.apache.org/licenses/LICENSE-2.0
+
+   Unless required by applicable law or agreed to in writing, software
+   distributed under the License is distributed on an "AS IS" BASIS,
+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+   See the License for the specific language governing permissions and
+   limitations under the License.
+ */
+
@@ -17 +33 @@
- * @author dominik.stadler@gmx.at
+ * @author dominik.stadler at gmx.at
Diff Between 650f618e287fef6a419e5c404c0ee3146ac1ec42 7ee07307d52e4c9a1bd2c0760672e295f5195eeddiff --git a/README.md b/README.md
index e00853d..2a02941 100644
--- a/README.md
+++ b/README.md
@@ -42,0 +43 @@
+* [Show diff of changes to a file between two revs](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/porcelain/ShowFileDiff.java)
diff --git a/src/main/java/org/dstadler/jgit/porcelain/ShowFileDiff.java b/src/main/java/org/dstadler/jgit/porcelain/ShowFileDiff.java
new file mode 100644
index 0000000..5936fb4
--- /dev/null
+++ b/src/main/java/org/dstadler/jgit/porcelain/ShowFileDiff.java
@@ -0,0 +1,72 @@
+package org.dstadler.jgit.porcelain;
+
+import java.io.IOException;
+import java.util.List;
+
+import org.dstadler.jgit.helper.CookbookHelper;
+import org.eclipse.jgit.api.Git;
+import org.eclipse.jgit.api.errors.GitAPIException;
+import org.eclipse.jgit.diff.DiffEntry;
+import org.eclipse.jgit.diff.DiffFormatter;
+import org.eclipse.jgit.errors.IncorrectObjectTypeException;
+import org.eclipse.jgit.errors.MissingObjectException;
+import org.eclipse.jgit.lib.ObjectId;
+import org.eclipse.jgit.lib.ObjectReader;
+import org.eclipse.jgit.lib.Repository;
+import org.eclipse.jgit.revwalk.RevCommit;
+import org.eclipse.jgit.revwalk.RevTree;
+import org.eclipse.jgit.revwalk.RevWalk;
+import org.eclipse.jgit.treewalk.AbstractTreeIterator;
+import org.eclipse.jgit.treewalk.CanonicalTreeParser;
+import org.eclipse.jgit.treewalk.filter.PathFilter;
+
+
+
+/**
+ * Simple snippet which shows how to show diffs between branches
+ * 
+ * @author dominik.stadler@gmx.at
+ */
+public class ShowFileDiff {
+
+    public static void main(String[] args) throws IOException, GitAPIException {
+        Repository repository = CookbookHelper.openJGitCookbookRepository();
+
+        // the diff works on TreeIterators, we prepare two for the two branches
+        AbstractTreeIterator oldTreeParser = prepareTreeParser(repository, "09c65401f3730eb3e619c33bf31e2376fb393727");
+        AbstractTreeIterator newTreeParser = prepareTreeParser(repository, "aa31703b65774e4a06010824601e56375a70078c");
+
+        // then the procelain diff-command returns a list of diff entries
+        List<DiffEntry> diff = new Git(repository).diff().
+                setOldTree(oldTreeParser).
+                setNewTree(newTreeParser).
+                setPathFilter(PathFilter.create("README.md")).
+                call();
+        for (DiffEntry entry : diff) {
+            System.out.println("Entry: " + entry + ", from: " + entry.getOldId() + ", to: " + entry.getNewId());
+            DiffFormatter formatter = new DiffFormatter(System.out);
+            formatter.setRepository(repository);
+            formatter.format(entry);
+        }
+
+        repository.close();
+    }
+
+    private static AbstractTreeIterator prepareTreeParser(Repository repository, String objectId) throws IOException,
+            MissingObjectException,
+            IncorrectObjectTypeException {
+        // from the commit we can build the tree which allows us to construct the TreeParser
+        RevWalk walk = new RevWalk(repository);
+        RevCommit commit = walk.parseCommit(ObjectId.fromString(objectId));
+        RevTree tree = walk.parseTree(commit.getTree().getId());
+
+        CanonicalTreeParser oldTreeParser = new CanonicalTreeParser();
+        ObjectReader oldReader = repository.newObjectReader();
+        try {
+            oldTreeParser.reset(oldReader, tree.getId());
+        } finally {
+            oldReader.release();
+        }
+        return oldTreeParser;
+    }
+}
Diff Between 7ee07307d52e4c9a1bd2c0760672e295f5195eed f5f9f79005efaa190ab27545a300f4b0a3e96607diff --git a/pom.xml b/pom.xml
index 49e2b24..5fc9327 100644
--- a/pom.xml
+++ b/pom.xml
@@ -23 +23 @@
-      <version>3.2.0.201312181205-r</version>
+      <version>3.3.2.201404171909-r</version>
Diff Between f5f9f79005efaa190ab27545a300f4b0a3e96607 d8d720aff09b92a2af15c79f9cab1647def0970cdiff --git a/README.md b/README.md
index d067115..e00853d 100644
--- a/README.md
+++ b/README.md
@@ -81,0 +82 @@
+* Rebase - http://stackoverflow.com/questions/22945257/jgit-how-to-squash-commits
Diff Between d8d720aff09b92a2af15c79f9cab1647def0970c 8feb550f8f7e4a49a2d8080174fe25c385e24f3bdiff --git a/src/main/java/org/dstadler/jgit/porcelain/ShowBranchDiff.java b/src/main/java/org/dstadler/jgit/porcelain/ShowBranchDiff.java
index 027098b..ea59b43 100755
--- a/src/main/java/org/dstadler/jgit/porcelain/ShowBranchDiff.java
+++ b/src/main/java/org/dstadler/jgit/porcelain/ShowBranchDiff.java
@@ -34 +34 @@
-        AbstractTreeIterator oldTreeParser = prepareTreeParser(repository, "refs/heads/oldbranch");
+        AbstractTreeIterator oldTreeParser = prepareTreeParser(repository, "refs/heads/testbranch");
Diff Between 8feb550f8f7e4a49a2d8080174fe25c385e24f3b 1e153d3261b5929212b1ecbd3173ead76ade2036Diff Between 1e153d3261b5929212b1ecbd3173ead76ade2036 aa31703b65774e4a06010824601e56375a70078cdiff --git a/src/main/java/org/dstadler/jgit/unfinished/UpdateIndex.java b/src/main/java/org/dstadler/jgit/unfinished/UpdateIndex.java
new file mode 100644
index 0000000..ddd540d
--- /dev/null
+++ b/src/main/java/org/dstadler/jgit/unfinished/UpdateIndex.java
@@ -0,0 +1,83 @@
+package org.dstadler.jgit.unfinished;
+
+import java.io.File;
+import java.io.IOException;
+import java.util.Date;
+import java.util.Set;
+
+import org.apache.commons.io.FileUtils;
+import org.dstadler.jgit.helper.CookbookHelper;
+import org.eclipse.jgit.api.Git;
+import org.eclipse.jgit.api.GitCommand;
+import org.eclipse.jgit.api.Status;
+import org.eclipse.jgit.api.errors.GitAPIException;
+import org.eclipse.jgit.api.errors.JGitInternalException;
+import org.eclipse.jgit.dircache.DirCache;
+import org.eclipse.jgit.dircache.DirCacheEntry;
+import org.eclipse.jgit.errors.NoWorkTreeException;
+import org.eclipse.jgit.lib.Repository;
+
+/**
+ * Snippet which shows how to mark files as assumed-unchanged (git update-index --assume-unchanged)
+ */
+public class UpdateIndex {
+
+	public static void main(String[] args) throws IOException, GitAPIException {
+		final Repository repo = CookbookHelper.openJGitCookbookRepository();
+		final Git git = new Git(repo);
+		final String testFile = "README.md";
+		
+		try {
+			// Modify the file
+			FileUtils.write(new File(testFile), new Date().toString());			
+			System.out.println("Modified files: " + getModifiedFiles(git));
+			
+			new AssumeChangedCommand(repo, testFile, true).call();
+			System.out.println("Modified files after assume-changed: " + getModifiedFiles(git));
+
+			new AssumeChangedCommand(repo, testFile, false).call();
+			System.out.println("Modified files after no-assume-changed: " + getModifiedFiles(git));
+
+			git.checkout().addPath(testFile).call();
+			System.out.println("Modified files after reset: " + getModifiedFiles(git));
+		} finally {
+			repo.close();
+		}
+	}
+
+	private static Set<String> getModifiedFiles(Git git) throws NoWorkTreeException, GitAPIException {
+		Status status = git.status().call();
+		return status.getModified();
+	}
+
+	static class AssumeChangedCommand extends GitCommand<String> {
+		private final String fileName;
+		private final boolean assumeUnchanged;
+
+		AssumeChangedCommand(Repository repository, String fileName, boolean assumedUnchanged) {
+			super(repository);
+
+			this.fileName = fileName;
+			this.assumeUnchanged = assumedUnchanged;
+		}
+
+		@Override
+		public String call() throws GitAPIException {
+			try {
+				DirCache index = repo.lockDirCache();
+				DirCacheEntry entry = index.getEntry(fileName);
+
+				if (entry != null) {
+					entry.setAssumeValid(assumeUnchanged);
+					index.write();
+					index.commit();
+					return entry.getPathString();
+				}
+			} catch (IOException e) {
+				throw new JGitInternalException(e.getMessage(), e);
+			}
+
+			return null;
+		}
+	}
+}
Diff Between aa31703b65774e4a06010824601e56375a70078c 93686e5c8b9f61f73126d6691be899d2cba0fc0bdiff --git a/README.md b/README.md
index be47433..d067115 100644
--- a/README.md
+++ b/README.md
@@ -46,0 +47 @@
+* [Clean all untracked files](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/porcelain/CleanUntrackedFiles.java)
diff --git a/src/main/java/org/dstadler/jgit/porcelain/CleanUntrackedFiles.java b/src/main/java/org/dstadler/jgit/porcelain/CleanUntrackedFiles.java
new file mode 100755
index 0000000..e8707b6
--- /dev/null
+++ b/src/main/java/org/dstadler/jgit/porcelain/CleanUntrackedFiles.java
@@ -0,0 +1,43 @@
+package org.dstadler.jgit.porcelain;
+
+import java.io.File;
+import java.io.IOException;
+import java.util.Set;
+
+import org.dstadler.jgit.helper.CookbookHelper;
+import org.eclipse.jgit.api.Git;
+import org.eclipse.jgit.api.errors.GitAPIException;
+import org.eclipse.jgit.lib.Repository;
+
+
+
+/**
+ * Simple snippet which shows how to list all Tags
+ *
+ * @author dominik.stadler@gmx.at
+ */
+public class CleanUntrackedFiles {
+
+    public static void main(String[] args) throws IOException, GitAPIException {
+        Repository repository = CookbookHelper.createNewRepository();
+
+        System.out.println("Repository at " + repository.getWorkTree());
+
+        File untrackedFile = File.createTempFile("untracked", ".txt", repository.getWorkTree());
+        File untrackedDir = File.createTempFile("untrackedDir", "", repository.getWorkTree());
+        untrackedDir.delete();
+        untrackedDir.mkdirs();
+
+        System.out.println("Untracked exists: " + untrackedFile.exists() + " Dir: " + untrackedDir.exists() + "/" + untrackedDir.isDirectory());
+
+        Set<String> removed = new Git(repository).clean().setCleanDirectories(true).call();
+        for(String item : removed) {
+        	System.out.println("Removed: " + item);
+        }
+        System.out.println("Removed " + removed.size() + " items");
+
+        System.out.println("Untracked after: " + untrackedFile.exists() + " Dir: " + untrackedDir.exists() + "/" + untrackedDir.isDirectory());
+
+        repository.close();
+    }
+}
Diff Between 93686e5c8b9f61f73126d6691be899d2cba0fc0b f148a699e8330b95263e560a56353bf81bc57670diff --git a/pom.xml b/pom.xml
index 331444f..49e2b24 100644
--- a/pom.xml
+++ b/pom.xml
@@ -23 +23 @@
-      <version>3.1.0.201310021548-r</version>
+      <version>3.2.0.201312181205-r</version>
Diff Between f148a699e8330b95263e560a56353bf81bc57670 b58a1865e5cb27c59d478fb0940bf172dc18ab90Diff Between b58a1865e5cb27c59d478fb0940bf172dc18ab90 786b4e863ec046d62de2e2a321826b71c0b06946diff --git a/src/main/java/org/dstadler/jgit/porcelain/CommitFile.java b/src/main/java/org/dstadler/jgit/porcelain/CommitFile.java
index 87fab90..c8d22b7 100644
--- a/src/main/java/org/dstadler/jgit/porcelain/CommitFile.java
+++ b/src/main/java/org/dstadler/jgit/porcelain/CommitFile.java
@@ -14 +14 @@
- * Simple snippet which shows how to list all Tags
+ * Simple snippet which shows how to commit a file
Diff Between 786b4e863ec046d62de2e2a321826b71c0b06946 6c49c3c7e09eea30777986540d58e55bb1af39dbdiff --git a/README.md b/README.md
index d87b551..be47433 100644
--- a/README.md
+++ b/README.md
@@ -45,0 +46 @@
+* [Add and list Notes attached to commits](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/porcelain/AddAndListNoteOfCommit.java)
diff --git a/src/main/java/org/dstadler/jgit/porcelain/AddAndListNoteOfCommit.java b/src/main/java/org/dstadler/jgit/porcelain/AddAndListNoteOfCommit.java
new file mode 100755
index 0000000..413bd51
--- /dev/null
+++ b/src/main/java/org/dstadler/jgit/porcelain/AddAndListNoteOfCommit.java
@@ -0,0 +1,55 @@
+package org.dstadler.jgit.porcelain;
+
+import java.io.IOException;
+import java.util.List;
+
+import org.dstadler.jgit.helper.CookbookHelper;
+import org.eclipse.jgit.api.Git;
+import org.eclipse.jgit.api.errors.GitAPIException;
+import org.eclipse.jgit.lib.ObjectLoader;
+import org.eclipse.jgit.lib.Ref;
+import org.eclipse.jgit.lib.Repository;
+import org.eclipse.jgit.notes.Note;
+import org.eclipse.jgit.revwalk.RevCommit;
+import org.eclipse.jgit.revwalk.RevWalk;
+
+
+
+/**
+ * Simple snippet which shows how to load Notes in a Git repository
+ *
+ * @author dominik.stadler@gmx.at
+ */
+public class AddAndListNoteOfCommit {
+
+	public static void main(String[] args) throws IOException, GitAPIException {
+		Repository repository = CookbookHelper.openJGitCookbookRepository();
+
+		Ref head = repository.getRef("refs/heads/master");
+		System.out.println("Found head: " + head);
+
+        RevWalk walk = new RevWalk(repository);
+        RevCommit commit = walk.parseCommit(head.getObjectId());
+        System.out.println("Found Commit: " + commit);
+
+        new Git(repository).notesAdd().setMessage("some note message").setObjectId(commit).call();
+        System.out.println("Added Note to commit " + commit);
+
+		List<Note> call = new Git(repository).notesList().call();
+		System.out.println("Listing " + call.size() + " notes");
+		for(Note note : call) {
+			// check if we found the note for this commit
+			if(!note.getName().equals(head.getObjectId().getName())) {
+				System.out.println("Note " + note + " did not match commit " + head);
+				continue;
+			}
+			System.out.println("Found note: " + note + " for commit " + head);
+
+			// displaying the contents of the note is done via a simple blob-read
+			ObjectLoader loader = repository.open(note.getData());
+			loader.copyTo(System.out);
+		}
+
+		repository.close();
+	}
+}
Diff Between 6c49c3c7e09eea30777986540d58e55bb1af39db 685ea854b74e59acd1a1e18cd0ea1e5868fc8723diff --git a/src/main/java/org/dstadler/jgit/CreateNewRepository.java b/src/main/java/org/dstadler/jgit/CreateNewRepository.java
index 5f00b7c..2926354 100644
--- a/src/main/java/org/dstadler/jgit/CreateNewRepository.java
+++ b/src/main/java/org/dstadler/jgit/CreateNewRepository.java
@@ -12 +12 @@
- *
+ * 
@@ -16,4 +15,0 @@
-	public static void main(String[] args) throws IOException {
-		// prepare a new folder
-		File localPath = File.createTempFile("TestGitRepository", "");
-		localPath.delete();
@@ -21 +17,6 @@
-		// create the directory
+    public static void main(String[] args) throws IOException {
+        // prepare a new folder
+        File localPath = File.createTempFile("TestGitRepository", "");
+        localPath.delete();
+
+        // create the directory
@@ -25 +26 @@
-		System.out.println("Having repository: " + repository.getDirectory());
+        System.out.println("Having repository: " + repository.getDirectory());
@@ -27 +28 @@
-		repository.close();
+        repository.close();
@@ -29,2 +30,2 @@
-		FileUtils.deleteDirectory(localPath);
-	}
+        FileUtils.deleteDirectory(localPath);
+    }
diff --git a/src/main/java/org/dstadler/jgit/OpenRepository.java b/src/main/java/org/dstadler/jgit/OpenRepository.java
index 86bb967..182331a 100644
--- a/src/main/java/org/dstadler/jgit/OpenRepository.java
+++ b/src/main/java/org/dstadler/jgit/OpenRepository.java
@@ -13 +13 @@
- *
+ * 
@@ -17,6 +16,0 @@
-	public static void main(String[] args) throws IOException {
-		FileRepositoryBuilder builder = new FileRepositoryBuilder();
-		Repository repository = builder.setGitDir(new File("/my/git/directory"))
-		  .readEnvironment() // scan environment GIT_* variables
-		  .findGitDir() // scan up the file system tree
-		  .build();
@@ -24 +18,6 @@
-		System.out.println("Having repository: " + repository.getDirectory());
+    public static void main(String[] args) throws IOException {
+        FileRepositoryBuilder builder = new FileRepositoryBuilder();
+        Repository repository = builder.setGitDir(new File("/my/git/directory"))
+                .readEnvironment() // scan environment GIT_* variables
+                .findGitDir() // scan up the file system tree
+                .build();
@@ -26,2 +25,4 @@
-		repository.close();
-	}
+        System.out.println("Having repository: " + repository.getDirectory());
+
+        repository.close();
+    }
diff --git a/src/main/java/org/dstadler/jgit/api/GetFileAttributes.java b/src/main/java/org/dstadler/jgit/api/GetFileAttributes.java
index ad504b2..978064b 100755
--- a/src/main/java/org/dstadler/jgit/api/GetFileAttributes.java
+++ b/src/main/java/org/dstadler/jgit/api/GetFileAttributes.java
@@ -25 +25 @@
- *
+ * 
@@ -30,2 +30,2 @@
-	public static void main(String[] args) throws IOException, GitAPIException {
-		Repository repository = CookbookHelper.openJGitCookbookRepository();
+    public static void main(String[] args) throws IOException, GitAPIException {
+        Repository repository = CookbookHelper.openJGitCookbookRepository();
@@ -33,2 +33,2 @@
-		// find the Tree for current HEAD
-		RevTree tree = getTree(repository);
+        // find the Tree for current HEAD
+        RevTree tree = getTree(repository);
@@ -36 +36 @@
-		printFile(repository, tree);
+        printFile(repository, tree);
@@ -38 +38 @@
-		printDirectory(repository, tree);
+        printDirectory(repository, tree);
@@ -40 +40 @@
-		// there is also FileMode.SYMLINK for symbolic links, but this is not handled here yet
+        // there is also FileMode.SYMLINK for symbolic links, but this is not handled here yet
@@ -42,2 +42,2 @@
-		repository.close();
-	}
+        repository.close();
+    }
@@ -45,3 +45,3 @@
-	private static RevTree getTree(Repository repository) throws AmbiguousObjectException, IncorrectObjectTypeException,
-			IOException, MissingObjectException {
-		ObjectId lastCommitId = repository.resolve(Constants.HEAD);
+    private static RevTree getTree(Repository repository) throws AmbiguousObjectException, IncorrectObjectTypeException,
+            IOException, MissingObjectException {
+        ObjectId lastCommitId = repository.resolve(Constants.HEAD);
@@ -49,3 +49,3 @@
-		// a RevWalk allows to walk over commits based on some filtering
-		RevWalk revWalk = new RevWalk(repository);
-		RevCommit commit = revWalk.parseCommit(lastCommitId);
+        // a RevWalk allows to walk over commits based on some filtering
+        RevWalk revWalk = new RevWalk(repository);
+        RevCommit commit = revWalk.parseCommit(lastCommitId);
@@ -53 +53 @@
-		System.out.println("Time of commit (seconds since epoch): " + commit.getCommitTime());
+        System.out.println("Time of commit (seconds since epoch): " + commit.getCommitTime());
@@ -55,5 +55,5 @@
-		// and using commit's tree find the path
-		RevTree tree = commit.getTree();
-		System.out.println("Having tree: " + tree);
-		return tree;
-	}
+        // and using commit's tree find the path
+        RevTree tree = commit.getTree();
+        System.out.println("Having tree: " + tree);
+        return tree;
+    }
@@ -61,10 +61,10 @@
-	private static void printFile(Repository repository, RevTree tree) throws MissingObjectException,
-			IncorrectObjectTypeException, CorruptObjectException, IOException {
-		// now try to find a specific file
-		TreeWalk treeWalk = new TreeWalk(repository);
-		treeWalk.addTree(tree);
-		treeWalk.setRecursive(false);
-		treeWalk.setFilter(PathFilter.create("README.md"));
-		if (!treeWalk.next()) {
-		  throw new IllegalStateException("Did not find expected file 'README.md'");
-		}
+    private static void printFile(Repository repository, RevTree tree) throws MissingObjectException,
+            IncorrectObjectTypeException, CorruptObjectException, IOException {
+        // now try to find a specific file
+        TreeWalk treeWalk = new TreeWalk(repository);
+        treeWalk.addTree(tree);
+        treeWalk.setRecursive(false);
+        treeWalk.setFilter(PathFilter.create("README.md"));
+        if (!treeWalk.next()) {
+            throw new IllegalStateException("Did not find expected file 'README.md'");
+        }
@@ -72,5 +72,7 @@
-		// FileMode specifies the type of file, FileMode.REGULAR_FILE for normal file, FileMode.EXECUTABLE_FILE for executable bit set
-		FileMode fileMode = treeWalk.getFileMode(0);
-		ObjectLoader loader = repository.open(treeWalk.getObjectId(0));
-		System.out.println("README.md: " + getFileMode(fileMode) + ", type: " + fileMode.getObjectType() + ", mode: " + fileMode + " size: " + loader.getSize());
-	}
+        // FileMode specifies the type of file, FileMode.REGULAR_FILE for normal file, FileMode.EXECUTABLE_FILE for executable bit
+// set
+        FileMode fileMode = treeWalk.getFileMode(0);
+        ObjectLoader loader = repository.open(treeWalk.getObjectId(0));
+        System.out.println("README.md: " + getFileMode(fileMode) + ", type: " + fileMode.getObjectType() + ", mode: " + fileMode +
+                " size: " + loader.getSize());
+    }
@@ -78,10 +80,10 @@
-	private static void printDirectory(Repository repository, RevTree tree) throws MissingObjectException,
-			IncorrectObjectTypeException, CorruptObjectException, IOException {
-		// look at directory, this has FileMode.TREE
-		TreeWalk treeWalk = new TreeWalk(repository);
-		treeWalk.addTree(tree);
-		treeWalk.setRecursive(false);
-		treeWalk.setFilter(PathFilter.create("src"));
-		if (!treeWalk.next()) {
-			  throw new IllegalStateException("Did not find expected file 'README.md'");
-		}
+    private static void printDirectory(Repository repository, RevTree tree) throws MissingObjectException,
+            IncorrectObjectTypeException, CorruptObjectException, IOException {
+        // look at directory, this has FileMode.TREE
+        TreeWalk treeWalk = new TreeWalk(repository);
+        treeWalk.addTree(tree);
+        treeWalk.setRecursive(false);
+        treeWalk.setFilter(PathFilter.create("src"));
+        if (!treeWalk.next()) {
+            throw new IllegalStateException("Did not find expected file 'README.md'");
+        }
@@ -89,4 +91,4 @@
-		//  FileMode now indicates that this is a directory, i.e. FileMode.TREE.equals(fileMode) holds true
-		FileMode fileMode = treeWalk.getFileMode(0);
-		System.out.println("src: " + getFileMode(fileMode) + ", type: " + fileMode.getObjectType() + ", mode: " + fileMode);
-	}
+        // FileMode now indicates that this is a directory, i.e. FileMode.TREE.equals(fileMode) holds true
+        FileMode fileMode = treeWalk.getFileMode(0);
+        System.out.println("src: " + getFileMode(fileMode) + ", type: " + fileMode.getObjectType() + ", mode: " + fileMode);
+    }
@@ -94,14 +96,14 @@
-	private static String getFileMode(FileMode fileMode) {
-		if(fileMode.equals(FileMode.EXECUTABLE_FILE)) {
-			return "Executable File";
-		} else if(fileMode.equals(FileMode.REGULAR_FILE)) {
-			return "Normal File";
-		} else if(fileMode.equals(FileMode.TREE)) {
-			return "Directory";
-		} else if(fileMode.equals(FileMode.SYMLINK)) {
-			return "Symlink";
-		} else {
-			// there are a few others, see FileMode javadoc for details
-			throw new IllegalArgumentException("Unknown type of file encountered: " + fileMode);
-		}
-	}
+    private static String getFileMode(FileMode fileMode) {
+        if (fileMode.equals(FileMode.EXECUTABLE_FILE)) {
+            return "Executable File";
+        } else if (fileMode.equals(FileMode.REGULAR_FILE)) {
+            return "Normal File";
+        } else if (fileMode.equals(FileMode.TREE)) {
+            return "Directory";
+        } else if (fileMode.equals(FileMode.SYMLINK)) {
+            return "Symlink";
+        } else {
+            // there are a few others, see FileMode javadoc for details
+            throw new IllegalArgumentException("Unknown type of file encountered: " + fileMode);
+        }
+    }
diff --git a/src/main/java/org/dstadler/jgit/api/GetRefFromName.java b/src/main/java/org/dstadler/jgit/api/GetRefFromName.java
index 9361eb2..95be7df 100644
--- a/src/main/java/org/dstadler/jgit/api/GetRefFromName.java
+++ b/src/main/java/org/dstadler/jgit/api/GetRefFromName.java
@@ -13,2 +12,0 @@
-	public static void main(String[] args) throws IOException {
-		Repository repository = CookbookHelper.openJGitCookbookRepository();
@@ -16,3 +14,2 @@
-		// the Ref holds an ObjectId for any type of object (tree, commit, blob, tree)
-		Ref head = repository.getRef("refs/heads/master");
-		System.out.println("Ref of refs/heads/master: " + head);
+    public static void main(String[] args) throws IOException {
+        Repository repository = CookbookHelper.openJGitCookbookRepository();
@@ -20,2 +17,6 @@
-		repository.close();
-	}
+        // the Ref holds an ObjectId for any type of object (tree, commit, blob, tree)
+        Ref head = repository.getRef("refs/heads/master");
+        System.out.println("Ref of refs/heads/master: " + head);
+
+        repository.close();
+    }
diff --git a/src/main/java/org/dstadler/jgit/api/GetRevCommitFromObjectId.java b/src/main/java/org/dstadler/jgit/api/GetRevCommitFromObjectId.java
index f76380a..a0ce2ef 100644
--- a/src/main/java/org/dstadler/jgit/api/GetRevCommitFromObjectId.java
+++ b/src/main/java/org/dstadler/jgit/api/GetRevCommitFromObjectId.java
@@ -15,2 +14,0 @@
-	public static void main(String[] args) throws IOException {
-		Repository repository = CookbookHelper.openJGitCookbookRepository();
@@ -18,2 +16,2 @@
-		Ref head = repository.getRef("refs/heads/master");
-		System.out.println("Found head: " + head);
+    public static void main(String[] args) throws IOException {
+        Repository repository = CookbookHelper.openJGitCookbookRepository();
@@ -21,4 +19,2 @@
-		// a RevWalk allows to walk over commits based on some filtering that is defined
-		RevWalk walk = new RevWalk(repository);
-		RevCommit commit = walk.parseCommit(head.getObjectId());
-		System.out.println("Found Commit: " + commit);
+        Ref head = repository.getRef("refs/heads/master");
+        System.out.println("Found head: " + head);
@@ -26,2 +22,7 @@
-		repository.close();
-	}
+        // a RevWalk allows to walk over commits based on some filtering that is defined
+        RevWalk walk = new RevWalk(repository);
+        RevCommit commit = walk.parseCommit(head.getObjectId());
+        System.out.println("Found Commit: " + commit);
+
+        repository.close();
+    }
diff --git a/src/main/java/org/dstadler/jgit/api/GetRevTreeFromObjectId.java b/src/main/java/org/dstadler/jgit/api/GetRevTreeFromObjectId.java
index 84759b8..3a1ffd9 100644
--- a/src/main/java/org/dstadler/jgit/api/GetRevTreeFromObjectId.java
+++ b/src/main/java/org/dstadler/jgit/api/GetRevTreeFromObjectId.java
@@ -18,2 +18,2 @@
-	public static void main(String[] args) throws IOException, GitAPIException {
-		Repository repository = CookbookHelper.openJGitCookbookRepository();
+    public static void main(String[] args) throws IOException, GitAPIException {
+        Repository repository = CookbookHelper.openJGitCookbookRepository();
@@ -21 +21 @@
-		Ref head = repository.getRef("HEAD");
+        Ref head = repository.getRef("HEAD");
@@ -23,2 +23,2 @@
-		// a RevWalk allows to walk over commits based on some filtering that is defined
-		RevWalk walk = new RevWalk(repository);
+        // a RevWalk allows to walk over commits based on some filtering that is defined
+        RevWalk walk = new RevWalk(repository);
@@ -26,2 +26,2 @@
-		RevCommit commit = walk.parseCommit(head.getObjectId());
-		System.out.println("Commit: " + commit);
+        RevCommit commit = walk.parseCommit(head.getObjectId());
+        System.out.println("Commit: " + commit);
@@ -29,3 +29,3 @@
-		// a commit points to a tree
-		RevTree tree = walk.parseTree(commit.getTree().getId());
-		System.out.println("Found Tree: " + tree);
+        // a commit points to a tree
+        RevTree tree = walk.parseTree(commit.getTree().getId());
+        System.out.println("Found Tree: " + tree);
@@ -33,2 +33,2 @@
-		repository.close();
-	}
+        repository.close();
+    }
diff --git a/src/main/java/org/dstadler/jgit/api/PrintRemotes.java b/src/main/java/org/dstadler/jgit/api/PrintRemotes.java
index 1752bd5..db81d6d 100755
--- a/src/main/java/org/dstadler/jgit/api/PrintRemotes.java
+++ b/src/main/java/org/dstadler/jgit/api/PrintRemotes.java
@@ -15,2 +15,2 @@
-	public static void main(String[] args) throws IOException {
-		Repository repository = CookbookHelper.openJGitCookbookRepository();
+    public static void main(String[] args) throws IOException {
+        Repository repository = CookbookHelper.openJGitCookbookRepository();
@@ -18,2 +18,2 @@
-		Config storedConfig = repository.getConfig();
-		Set<String> remotes = storedConfig.getSubsections("remote");
+        Config storedConfig = repository.getConfig();
+        Set<String> remotes = storedConfig.getSubsections("remote");
@@ -21,4 +21,4 @@
-		for (String remoteName : remotes) {
-			String url = storedConfig.getString("remote", remoteName, "url");
-			System.out.println(remoteName + " " + url);
-		}
+        for (String remoteName : remotes) {
+            String url = storedConfig.getString("remote", remoteName, "url");
+            System.out.println(remoteName + " " + url);
+        }
@@ -26,2 +26,2 @@
-		repository.close();
-	}
+        repository.close();
+    }
diff --git a/src/main/java/org/dstadler/jgit/api/ReadBlobContents.java b/src/main/java/org/dstadler/jgit/api/ReadBlobContents.java
index 181d0f8..fe0f238 100644
--- a/src/main/java/org/dstadler/jgit/api/ReadBlobContents.java
+++ b/src/main/java/org/dstadler/jgit/api/ReadBlobContents.java
@@ -17,2 +16,0 @@
-	public static void main(String[] args) throws IOException {
-		Repository repository = CookbookHelper.openJGitCookbookRepository();
@@ -20,3 +18,2 @@
-		// the Ref holds an ObjectId for any type of object (tree, commit, blob, tree)
-		Ref head = repository.getRef("refs/heads/master");
-		System.out.println("Ref of refs/heads/master: " + head);
+    public static void main(String[] args) throws IOException {
+        Repository repository = CookbookHelper.openJGitCookbookRepository();
@@ -24,3 +21,3 @@
-		System.out.println("Print contents of head of master branch, i.e. the latest commit information");
-		ObjectLoader loader = repository.open(head.getObjectId());
-		loader.copyTo(System.out);
+        // the Ref holds an ObjectId for any type of object (tree, commit, blob, tree)
+        Ref head = repository.getRef("refs/heads/master");
+        System.out.println("Ref of refs/heads/master: " + head);
@@ -28 +25,3 @@
-		System.out.println("Print contents of tree of head of master branch, i.e. the latest binary tree information");
+        System.out.println("Print contents of head of master branch, i.e. the latest commit information");
+        ObjectLoader loader = repository.open(head.getObjectId());
+        loader.copyTo(System.out);
@@ -30,7 +29 @@
-		// a commit points to a tree
-		RevWalk walk = new RevWalk(repository);
-		RevCommit commit = walk.parseCommit(head.getObjectId());
-		RevTree tree = walk.parseTree(commit.getTree().getId());
-		System.out.println("Found Tree: " + tree);
-		loader = repository.open(tree.getId());
-		loader.copyTo(System.out);
+        System.out.println("Print contents of tree of head of master branch, i.e. the latest binary tree information");
@@ -38,2 +31,10 @@
-		repository.close();
-	}
+        // a commit points to a tree
+        RevWalk walk = new RevWalk(repository);
+        RevCommit commit = walk.parseCommit(head.getObjectId());
+        RevTree tree = walk.parseTree(commit.getTree().getId());
+        System.out.println("Found Tree: " + tree);
+        loader = repository.open(tree.getId());
+        loader.copyTo(System.out);
+
+        repository.close();
+    }
diff --git a/src/main/java/org/dstadler/jgit/api/ReadFileFromCommit.java b/src/main/java/org/dstadler/jgit/api/ReadFileFromCommit.java
index 4991745..074f4a2 100644
--- a/src/main/java/org/dstadler/jgit/api/ReadFileFromCommit.java
+++ b/src/main/java/org/dstadler/jgit/api/ReadFileFromCommit.java
@@ -18 +18 @@
- * Snippet which shows how to use RevWalk and TreeWalk to read the contents 
+ * Snippet which shows how to use RevWalk and TreeWalk to read the contents
@@ -20 +20 @@
- *
+ * 
@@ -25,2 +25,2 @@
-	public static void main(String[] args) throws IOException, GitAPIException {
-		Repository repository = CookbookHelper.openJGitCookbookRepository();
+    public static void main(String[] args) throws IOException, GitAPIException {
+        Repository repository = CookbookHelper.openJGitCookbookRepository();
@@ -28,2 +28,2 @@
-		// find the HEAD
-		ObjectId lastCommitId = repository.resolve(Constants.HEAD);
+        // find the HEAD
+        ObjectId lastCommitId = repository.resolve(Constants.HEAD);
@@ -31,6 +31,6 @@
-		// a RevWalk allows to walk over commits based on some filtering that is defined
-		RevWalk revWalk = new RevWalk(repository);
-		RevCommit commit = revWalk.parseCommit(lastCommitId);
-		// and using commit's tree find the path
-		RevTree tree = commit.getTree();
-		System.out.println("Having tree: " + tree);
+        // a RevWalk allows to walk over commits based on some filtering that is defined
+        RevWalk revWalk = new RevWalk(repository);
+        RevCommit commit = revWalk.parseCommit(lastCommitId);
+        // and using commit's tree find the path
+        RevTree tree = commit.getTree();
+        System.out.println("Having tree: " + tree);
@@ -38,8 +38,8 @@
-		// now try to find a specific file
-		TreeWalk treeWalk = new TreeWalk(repository);
-		treeWalk.addTree(tree);
-		treeWalk.setRecursive(true);
-		treeWalk.setFilter(PathFilter.create("README.md"));
-		if (!treeWalk.next()) {
-		  throw new IllegalStateException("Did not find expected file 'README.md'");
-		}
+        // now try to find a specific file
+        TreeWalk treeWalk = new TreeWalk(repository);
+        treeWalk.addTree(tree);
+        treeWalk.setRecursive(true);
+        treeWalk.setFilter(PathFilter.create("README.md"));
+        if (!treeWalk.next()) {
+            throw new IllegalStateException("Did not find expected file 'README.md'");
+        }
@@ -47,2 +47,2 @@
-		ObjectId objectId = treeWalk.getObjectId(0);
-		ObjectLoader loader = repository.open(objectId);
+        ObjectId objectId = treeWalk.getObjectId(0);
+        ObjectLoader loader = repository.open(objectId);
@@ -50,5 +50,5 @@
-		// and then one can the loader to read the file
-		loader.copyTo(System.out);
-		
-		repository.close();
-	}
+        // and then one can the loader to read the file
+        loader.copyTo(System.out);
+
+        repository.close();
+    }
diff --git a/src/main/java/org/dstadler/jgit/api/ReadTagFromName.java b/src/main/java/org/dstadler/jgit/api/ReadTagFromName.java
index 38f3023..2467038 100644
--- a/src/main/java/org/dstadler/jgit/api/ReadTagFromName.java
+++ b/src/main/java/org/dstadler/jgit/api/ReadTagFromName.java
@@ -18,2 +18,2 @@
-	public static void main(String[] args) throws IOException, GitAPIException {
-		Repository repository = CookbookHelper.openJGitCookbookRepository();
+    public static void main(String[] args) throws IOException, GitAPIException {
+        Repository repository = CookbookHelper.openJGitCookbookRepository();
@@ -21,2 +21,2 @@
-		// a RevWalk allows to retrieve information from the repository
-		RevWalk walk = new RevWalk(repository);
+        // a RevWalk allows to retrieve information from the repository
+        RevWalk walk = new RevWalk(repository);
@@ -24,4 +24,4 @@
-		// a simple tag that is not annotated
-		Ref simpleTag = repository.getRef("initialtag");
-		RevObject any = walk.parseAny(simpleTag.getObjectId());
-		System.out.println("Commit: " + any);
+        // a simple tag that is not annotated
+        Ref simpleTag = repository.getRef("initialtag");
+        RevObject any = walk.parseAny(simpleTag.getObjectId());
+        System.out.println("Commit: " + any);
@@ -29,4 +29,4 @@
-		// an annotated tag
-		Ref annotatedTag = repository.getRef("secondtag");
-		any = walk.parseAny(annotatedTag.getObjectId());
-		System.out.println("Tag: " + any);
+        // an annotated tag
+        Ref annotatedTag = repository.getRef("secondtag");
+        any = walk.parseAny(annotatedTag.getObjectId());
+        System.out.println("Tag: " + any);
@@ -34,4 +34,4 @@
-		// finally try to print out the tag-content
-		System.out.println("\nTag-Content: \n");
-		ObjectLoader loader = repository.open(annotatedTag.getObjectId());
-		loader.copyTo(System.out);
+        // finally try to print out the tag-content
+        System.out.println("\nTag-Content: \n");
+        ObjectLoader loader = repository.open(annotatedTag.getObjectId());
+        loader.copyTo(System.out);
@@ -39,2 +39,2 @@
-		repository.close();
-	}
+        repository.close();
+    }
diff --git a/src/main/java/org/dstadler/jgit/api/ReadUserConfig.java b/src/main/java/org/dstadler/jgit/api/ReadUserConfig.java
index 4a33411..b7a1524 100755
--- a/src/main/java/org/dstadler/jgit/api/ReadUserConfig.java
+++ b/src/main/java/org/dstadler/jgit/api/ReadUserConfig.java
@@ -14,2 +14,2 @@
-	public static void main(String[] args) throws IOException {
-		Repository repository = CookbookHelper.openJGitCookbookRepository();
+    public static void main(String[] args) throws IOException {
+        Repository repository = CookbookHelper.openJGitCookbookRepository();
@@ -17,10 +17,10 @@
-		Config config = repository.getConfig();
-		String name = config.getString("user", null, "name");
-		String email = config.getString("user", null, "email");
-		if (name == null || email == null) {
-		        System.out.println("User identity is unknown!");
-		} else {
-		        System.out.println("User identity is " + name + " <" + email + ">");
-		}
-		repository.close();
-	}
+        Config config = repository.getConfig();
+        String name = config.getString("user", null, "name");
+        String email = config.getString("user", null, "email");
+        if (name == null || email == null) {
+            System.out.println("User identity is unknown!");
+        } else {
+            System.out.println("User identity is " + name + " <" + email + ">");
+        }
+        repository.close();
+    }
diff --git a/src/main/java/org/dstadler/jgit/api/ResolveRef.java b/src/main/java/org/dstadler/jgit/api/ResolveRef.java
index f2c74c8..e3d4a13 100644
--- a/src/main/java/org/dstadler/jgit/api/ResolveRef.java
+++ b/src/main/java/org/dstadler/jgit/api/ResolveRef.java
@@ -15,2 +14,0 @@
-	public static void main(String[] args) throws IOException {
-		Repository repository = CookbookHelper.openJGitCookbookRepository();
@@ -18,3 +16,2 @@
-		// basic syntax is similar to getRef()
-		ObjectId id = repository.resolve("HEAD");
-		System.out.println("ObjectId of HEAD: " + id);
+    public static void main(String[] args) throws IOException {
+        Repository repository = CookbookHelper.openJGitCookbookRepository();
@@ -22,3 +19,3 @@
-		// however resolve() supports almost all of the git-syntax, where getRef() only works on names
-		id = repository.resolve("HEAD^1");
-		System.out.println("ObjectId of HEAD: " + id);
+        // basic syntax is similar to getRef()
+        ObjectId id = repository.resolve("HEAD");
+        System.out.println("ObjectId of HEAD: " + id);
@@ -26,2 +23,6 @@
-		repository.close();
-	}
+        // however resolve() supports almost all of the git-syntax, where getRef() only works on names
+        id = repository.resolve("HEAD^1");
+        System.out.println("ObjectId of HEAD: " + id);
+
+        repository.close();
+    }
diff --git a/src/main/java/org/dstadler/jgit/api/WalkRev.java b/src/main/java/org/dstadler/jgit/api/WalkRev.java
index eabb491..726ca5a 100644
--- a/src/main/java/org/dstadler/jgit/api/WalkRev.java
+++ b/src/main/java/org/dstadler/jgit/api/WalkRev.java
@@ -17,2 +16,0 @@
-	public static void main(String[] args) throws IOException {
-		Repository repository = CookbookHelper.openJGitCookbookRepository();
@@ -20 +18,2 @@
-		Ref head = repository.getRef("refs/heads/master");
+    public static void main(String[] args) throws IOException {
+        Repository repository = CookbookHelper.openJGitCookbookRepository();
@@ -22,2 +21 @@
-		// a RevWalk allows to walk over commits based on some filtering that is defined
-		RevWalk walk = new RevWalk(repository);
+        Ref head = repository.getRef("refs/heads/master");
@@ -25,2 +23,2 @@
-		RevCommit commit = walk.parseCommit(head.getObjectId());
-		System.out.println("Start-Commit: " + commit);
+        // a RevWalk allows to walk over commits based on some filtering that is defined
+        RevWalk walk = new RevWalk(repository);
@@ -28,8 +26,2 @@
-		System.out.println("Walking all commits starting at HEAD");
-		walk.markStart(commit);
-		int count = 0;
-		for(RevCommit rev : walk) {
-			System.out.println("Commit: " + rev);
-			count++;
-		}
-		System.out.println(count);
+        RevCommit commit = walk.parseCommit(head.getObjectId());
+        System.out.println("Start-Commit: " + commit);
@@ -37,2 +29,11 @@
-		repository.close();
-	}
+        System.out.println("Walking all commits starting at HEAD");
+        walk.markStart(commit);
+        int count = 0;
+        for (RevCommit rev : walk) {
+            System.out.println("Commit: " + rev);
+            count++;
+        }
+        System.out.println(count);
+
+        repository.close();
+    }
diff --git a/src/main/java/org/dstadler/jgit/helper/CookbookHelper.java b/src/main/java/org/dstadler/jgit/helper/CookbookHelper.java
index f8926e0..2dcd1a9 100644
--- a/src/main/java/org/dstadler/jgit/helper/CookbookHelper.java
+++ b/src/main/java/org/dstadler/jgit/helper/CookbookHelper.java
@@ -12,8 +12,8 @@
-	public static Repository openJGitCookbookRepository() throws IOException {
-		FileRepositoryBuilder builder = new FileRepositoryBuilder();
-		Repository repository = builder
-		  .readEnvironment() // scan environment GIT_* variables
-		  .findGitDir() // scan up the file system tree
-		  .build();
-		return repository;
-	}
+    public static Repository openJGitCookbookRepository() throws IOException {
+        FileRepositoryBuilder builder = new FileRepositoryBuilder();
+        Repository repository = builder
+                .readEnvironment() // scan environment GIT_* variables
+                .findGitDir() // scan up the file system tree
+                .build();
+        return repository;
+    }
@@ -21,4 +21,4 @@
-	public static Repository createNewRepository() throws IOException {
-		// prepare a new folder
-		File localPath = File.createTempFile("TestGitRepository", "");
-		localPath.delete();
+    public static Repository createNewRepository() throws IOException {
+        // prepare a new folder
+        File localPath = File.createTempFile("TestGitRepository", "");
+        localPath.delete();
@@ -26 +26 @@
-		// create the directory
+        // create the directory
@@ -31 +31 @@
-	}
+    }
diff --git a/src/main/java/org/dstadler/jgit/porcelain/AddFile.java b/src/main/java/org/dstadler/jgit/porcelain/AddFile.java
index 8484fcf..c303f6e 100644
--- a/src/main/java/org/dstadler/jgit/porcelain/AddFile.java
+++ b/src/main/java/org/dstadler/jgit/porcelain/AddFile.java
@@ -15 +15 @@
- *
+ * 
@@ -20,4 +20,4 @@
-	public static void main(String[] args) throws IOException, GitAPIException {
-		// prepare a new test-repository
-		Repository repository = CookbookHelper.createNewRepository();
-		Git git = new Git(repository);
+    public static void main(String[] args) throws IOException, GitAPIException {
+        // prepare a new test-repository
+        Repository repository = CookbookHelper.createNewRepository();
+        Git git = new Git(repository);
@@ -25 +25 @@
-		// create the file
+        // create the file
@@ -31,2 +31,2 @@
-           .addFilepattern("testfile")
-           .call();
+                .addFilepattern("testfile")
+                .call();
@@ -36,2 +36,2 @@
-		repository.close();
-	}
+        repository.close();
+    }
diff --git a/src/main/java/org/dstadler/jgit/porcelain/CloneRemoteRepository.java b/src/main/java/org/dstadler/jgit/porcelain/CloneRemoteRepository.java
index ade11ba..f1ddedf 100644
--- a/src/main/java/org/dstadler/jgit/porcelain/CloneRemoteRepository.java
+++ b/src/main/java/org/dstadler/jgit/porcelain/CloneRemoteRepository.java
@@ -17 +17 @@
- *
+ * 
@@ -21 +20,0 @@
-	private static final String REMOTE_URL = "https://github.com/github/testrepo.git";
@@ -23,4 +22 @@
-	public static void main(String[] args) throws IOException, InvalidRemoteException, TransportException, GitAPIException {
-		// prepare a new folder for the cloned repository
-		File localPath = File.createTempFile("TestGitRepository", "");
-		localPath.delete();
+    private static final String REMOTE_URL = "https://github.com/github/testrepo.git";
@@ -28,2 +24,7 @@
-		// then clone
-		System.out.println("Cloning from " + REMOTE_URL + " to " + localPath);
+    public static void main(String[] args) throws IOException, InvalidRemoteException, TransportException, GitAPIException {
+        // prepare a new folder for the cloned repository
+        File localPath = File.createTempFile("TestGitRepository", "");
+        localPath.delete();
+
+        // then clone
+        System.out.println("Cloning from " + REMOTE_URL + " to " + localPath);
@@ -31,3 +32,3 @@
-        .setURI(REMOTE_URL)
-        .setDirectory(localPath)
-        .call();
+                .setURI(REMOTE_URL)
+                .setDirectory(localPath)
+                .call();
@@ -36,5 +37,5 @@
-		FileRepositoryBuilder builder = new FileRepositoryBuilder();
-		Repository repository = builder.setGitDir(localPath)
-		  .readEnvironment() // scan environment GIT_* variables
-		  .findGitDir() // scan up the file system tree
-		  .build();
+        FileRepositoryBuilder builder = new FileRepositoryBuilder();
+        Repository repository = builder.setGitDir(localPath)
+                .readEnvironment() // scan environment GIT_* variables
+                .findGitDir() // scan up the file system tree
+                .build();
@@ -42 +43 @@
-		System.out.println("Having repository: " + repository.getDirectory());
+        System.out.println("Having repository: " + repository.getDirectory());
@@ -44,2 +45,2 @@
-		repository.close();
-	}
+        repository.close();
+    }
diff --git a/src/main/java/org/dstadler/jgit/porcelain/CommitFile.java b/src/main/java/org/dstadler/jgit/porcelain/CommitFile.java
index 6a9c09d..87fab90 100644
--- a/src/main/java/org/dstadler/jgit/porcelain/CommitFile.java
+++ b/src/main/java/org/dstadler/jgit/porcelain/CommitFile.java
@@ -15 +15 @@
- *
+ * 
@@ -20,4 +20,4 @@
-	public static void main(String[] args) throws IOException, GitAPIException {
-		// prepare a new test-repository
-		Repository repository = CookbookHelper.createNewRepository();
-		Git git = new Git(repository);
+    public static void main(String[] args) throws IOException, GitAPIException {
+        // prepare a new test-repository
+        Repository repository = CookbookHelper.createNewRepository();
+        Git git = new Git(repository);
@@ -25 +25 @@
-		// create the file
+        // create the file
@@ -31,2 +31,2 @@
-           .addFilepattern("testfile")
-           .call();
+                .addFilepattern("testfile")
+                .call();
@@ -36,2 +36,2 @@
-	        .setMessage("Added testfile")
-	        .call();
+                .setMessage("Added testfile")
+                .call();
@@ -41,2 +41,2 @@
-		repository.close();
-	}
+        repository.close();
+    }
diff --git a/src/main/java/org/dstadler/jgit/porcelain/CreateAndDeleteBranch.java b/src/main/java/org/dstadler/jgit/porcelain/CreateAndDeleteBranch.java
index 155a22f..6b9d58a 100755
--- a/src/main/java/org/dstadler/jgit/porcelain/CreateAndDeleteBranch.java
+++ b/src/main/java/org/dstadler/jgit/porcelain/CreateAndDeleteBranch.java
@@ -16 +16 @@
- *
+ * 
@@ -21,4 +21,4 @@
-	public static void main(String[] args) throws IOException, GitAPIException {
-		// prepare test-repository
-		Repository repository = CookbookHelper.openJGitCookbookRepository();
-		Git git = new Git(repository);
+    public static void main(String[] args) throws IOException, GitAPIException {
+        // prepare test-repository
+        Repository repository = CookbookHelper.openJGitCookbookRepository();
+        Git git = new Git(repository);
@@ -26,4 +26,4 @@
-		List<Ref> call = new Git(repository).branchList().call();
-		for(Ref ref : call) {
-			System.out.println("Branch-Before: " + ref + " " + ref.getName() + " " + ref.getObjectId().getName());
-		}
+        List<Ref> call = new Git(repository).branchList().call();
+        for (Ref ref : call) {
+            System.out.println("Branch-Before: " + ref + " " + ref.getName() + " " + ref.getObjectId().getName());
+        }
@@ -33,2 +33,2 @@
-			.setName("testbranch")
-			.call();
+                .setName("testbranch")
+                .call();
@@ -36,4 +36,4 @@
-		call = new Git(repository).branchList().call();
-		for(Ref ref : call) {
-			System.out.println("Branch-Created: " + ref + " " + ref.getName() + " " + ref.getObjectId().getName());
-		}
+        call = new Git(repository).branchList().call();
+        for (Ref ref : call) {
+            System.out.println("Branch-Created: " + ref + " " + ref.getName() + " " + ref.getObjectId().getName());
+        }
@@ -41,4 +41,4 @@
-		// run the delete-call
-		git.branchDelete()
-			.setBranchNames("testbranch")
-			.call();
+        // run the delete-call
+        git.branchDelete()
+                .setBranchNames("testbranch")
+                .call();
@@ -46,4 +46,4 @@
-		call = new Git(repository).branchList().call();
-		for(Ref ref : call) {
-			System.out.println("Branch-After: " + ref + " " + ref.getName() + " " + ref.getObjectId().getName());
-		}
+        call = new Git(repository).branchList().call();
+        for (Ref ref : call) {
+            System.out.println("Branch-After: " + ref + " " + ref.getName() + " " + ref.getObjectId().getName());
+        }
@@ -51,2 +51,2 @@
-		repository.close();
-	}
+        repository.close();
+    }
diff --git a/src/main/java/org/dstadler/jgit/porcelain/CreateAndDeleteTag.java b/src/main/java/org/dstadler/jgit/porcelain/CreateAndDeleteTag.java
index 7a913ef..53570a5 100755
--- a/src/main/java/org/dstadler/jgit/porcelain/CreateAndDeleteTag.java
+++ b/src/main/java/org/dstadler/jgit/porcelain/CreateAndDeleteTag.java
@@ -18 +18 @@
- *
+ * 
@@ -23,4 +23,4 @@
-	public static void main(String[] args) throws IOException, GitAPIException {
-		// prepare test-repository
-		Repository repository = CookbookHelper.openJGitCookbookRepository();
-		Git git = new Git(repository);
+    public static void main(String[] args) throws IOException, GitAPIException {
+        // prepare test-repository
+        Repository repository = CookbookHelper.openJGitCookbookRepository();
+        Git git = new Git(repository);
@@ -31,2 +31,2 @@
-		// set it on the current HEAD
-		Ref tag = git.tag().setName("tag_for_testing").call();
+        // set it on the current HEAD
+        Ref tag = git.tag().setName("tag_for_testing").call();
@@ -40,3 +40,3 @@
-		RevWalk walk = new RevWalk(repository);
-		RevCommit commit = walk.parseCommit(id);
-		tag = git.tag().setObjectId(commit).setName("tag_for_testing").call();
+        RevWalk walk = new RevWalk(repository);
+        RevCommit commit = walk.parseCommit(id);
+        tag = git.tag().setObjectId(commit).setName("tag_for_testing").call();
@@ -56 +56 @@
-	}
+    }
diff --git a/src/main/java/org/dstadler/jgit/porcelain/InitRepository.java b/src/main/java/org/dstadler/jgit/porcelain/InitRepository.java
index efe214d..520d248 100755
--- a/src/main/java/org/dstadler/jgit/porcelain/InitRepository.java
+++ b/src/main/java/org/dstadler/jgit/porcelain/InitRepository.java
@@ -15 +15 @@
- *
+ * 
@@ -20 +20 @@
-	public static void main(String[] args) throws IOException, GitAPIException {
+    public static void main(String[] args) throws IOException, GitAPIException {
@@ -25,3 +25,3 @@
-		Git.init()
-			.setDirectory(dir)
-           .call();
+        Git.init()
+                .setDirectory(dir)
+                .call();
@@ -29 +29 @@
-		Repository repository = FileRepositoryBuilder.create(new File(dir.getAbsolutePath(), ".git"));
+        Repository repository = FileRepositoryBuilder.create(new File(dir.getAbsolutePath(), ".git"));
@@ -33,2 +33,2 @@
-		repository.close();
-	}
+        repository.close();
+    }
diff --git a/src/main/java/org/dstadler/jgit/porcelain/ListBranches.java b/src/main/java/org/dstadler/jgit/porcelain/ListBranches.java
index eb4d7a6..78f2670 100644
--- a/src/main/java/org/dstadler/jgit/porcelain/ListBranches.java
+++ b/src/main/java/org/dstadler/jgit/porcelain/ListBranches.java
@@ -16 +16 @@
- *
+ * 
@@ -21,2 +21,2 @@
-	public static void main(String[] args) throws IOException, GitAPIException {
-		Repository repository = CookbookHelper.openJGitCookbookRepository();
+    public static void main(String[] args) throws IOException, GitAPIException {
+        Repository repository = CookbookHelper.openJGitCookbookRepository();
@@ -24,4 +24,4 @@
-		List<Ref> call = new Git(repository).branchList().call();
-		for(Ref ref : call) {
-			System.out.println("Branch: " + ref + " " + ref.getName() + " " + ref.getObjectId().getName());
-		}
+        List<Ref> call = new Git(repository).branchList().call();
+        for (Ref ref : call) {
+            System.out.println("Branch: " + ref + " " + ref.getName() + " " + ref.getObjectId().getName());
+        }
@@ -29,2 +29,2 @@
-		repository.close();
-	}
+        repository.close();
+    }
diff --git a/src/main/java/org/dstadler/jgit/porcelain/ListNotes.java b/src/main/java/org/dstadler/jgit/porcelain/ListNotes.java
index 13de51a..8dfcdd3 100644
--- a/src/main/java/org/dstadler/jgit/porcelain/ListNotes.java
+++ b/src/main/java/org/dstadler/jgit/porcelain/ListNotes.java
@@ -17 +17 @@
- *
+ * 
@@ -22,2 +22,2 @@
-	public static void main(String[] args) throws IOException, GitAPIException {
-		Repository repository = CookbookHelper.openJGitCookbookRepository();
+    public static void main(String[] args) throws IOException, GitAPIException {
+        Repository repository = CookbookHelper.openJGitCookbookRepository();
@@ -25,4 +25,4 @@
-		List<Note> call = new Git(repository).notesList().call();
-		System.out.println("Listing " + call.size() + " notes");
-		for(Note note : call) {
-			System.out.println("Note: " + note + " " + note.getName() + " " + note.getData().getName() + "\nContent: ");
+        List<Note> call = new Git(repository).notesList().call();
+        System.out.println("Listing " + call.size() + " notes");
+        for (Note note : call) {
+            System.out.println("Note: " + note + " " + note.getName() + " " + note.getData().getName() + "\nContent: ");
@@ -30,4 +30,4 @@
-			// displaying the contents of the note is done via a simple blob-read
-			ObjectLoader loader = repository.open(note.getData());
-			loader.copyTo(System.out);
-		}
+            // displaying the contents of the note is done via a simple blob-read
+            ObjectLoader loader = repository.open(note.getData());
+            loader.copyTo(System.out);
+        }
@@ -35,2 +35,2 @@
-		repository.close();
-	}
+        repository.close();
+    }
diff --git a/src/main/java/org/dstadler/jgit/porcelain/ListRemoteRepository.java b/src/main/java/org/dstadler/jgit/porcelain/ListRemoteRepository.java
index 875b761..8dc7465 100644
--- a/src/main/java/org/dstadler/jgit/porcelain/ListRemoteRepository.java
+++ b/src/main/java/org/dstadler/jgit/porcelain/ListRemoteRepository.java
@@ -15 +15 @@
- * Simple snippet which shows how to list heads/tags of remote repositories without 
+ * Simple snippet which shows how to list heads/tags of remote repositories without
@@ -17 +17 @@
- *
+ * 
@@ -21 +20,0 @@
-	private static final String REMOTE_URL = "https://github.com/github/testrepo.git";
@@ -23,3 +22,5 @@
-	public static void main(String[] args) throws IOException, InvalidRemoteException, TransportException, GitAPIException {
-		// then clone
-		System.out.println("Listing remote repository " + REMOTE_URL);
+    private static final String REMOTE_URL = "https://github.com/github/testrepo.git";
+
+    public static void main(String[] args) throws IOException, InvalidRemoteException, TransportException, GitAPIException {
+        // then clone
+        System.out.println("Listing remote repository " + REMOTE_URL);
@@ -27,6 +28,6 @@
-            .setHeads(true)
-            .setTags(true)
-            .setRemote(REMOTE_URL)
-            .call();
-        
-        for(Ref ref : refs) {
+                .setHeads(true)
+                .setTags(true)
+                .setRemote(REMOTE_URL)
+                .call();
+
+        for (Ref ref : refs) {
@@ -35 +36 @@
-	}
+    }
diff --git a/src/main/java/org/dstadler/jgit/porcelain/ListRemotes.java b/src/main/java/org/dstadler/jgit/porcelain/ListRemotes.java
index f50b0fa..7b8367c 100755
--- a/src/main/java/org/dstadler/jgit/porcelain/ListRemotes.java
+++ b/src/main/java/org/dstadler/jgit/porcelain/ListRemotes.java
@@ -14 +14 @@
- *
+ * 
@@ -19,2 +19,2 @@
-	public static void main(String[] args) throws IOException, GitAPIException {
-		Repository repository = CookbookHelper.openJGitCookbookRepository();
+    public static void main(String[] args) throws IOException, GitAPIException {
+        Repository repository = CookbookHelper.openJGitCookbookRepository();
@@ -22,5 +22,5 @@
-		// all refs
-		Collection<Ref> refs = new Git(repository).lsRemote().call();
-		for(Ref ref : refs) {
-			System.out.println("Ref: " + ref);
-		}
+        // all refs
+        Collection<Ref> refs = new Git(repository).lsRemote().call();
+        for (Ref ref : refs) {
+            System.out.println("Ref: " + ref);
+        }
@@ -28,5 +28,5 @@
-		// heads only
-		refs = new Git(repository).lsRemote().setHeads(true).call();
-		for(Ref ref : refs) {
-			System.out.println("Head: " + ref);
-		}
+        // heads only
+        refs = new Git(repository).lsRemote().setHeads(true).call();
+        for (Ref ref : refs) {
+            System.out.println("Head: " + ref);
+        }
@@ -34,5 +34,5 @@
-		// tags only
-		refs = new Git(repository).lsRemote().setTags(true).call();
-		for(Ref ref : refs) {
-			System.out.println("Remote tag: " + ref);
-		}
+        // tags only
+        refs = new Git(repository).lsRemote().setTags(true).call();
+        for (Ref ref : refs) {
+            System.out.println("Remote tag: " + ref);
+        }
@@ -40,2 +40,2 @@
-		repository.close();
-	}
+        repository.close();
+    }
diff --git a/src/main/java/org/dstadler/jgit/porcelain/ListTags.java b/src/main/java/org/dstadler/jgit/porcelain/ListTags.java
index c3de7ab..d1df6ea 100644
--- a/src/main/java/org/dstadler/jgit/porcelain/ListTags.java
+++ b/src/main/java/org/dstadler/jgit/porcelain/ListTags.java
@@ -16 +16 @@
- *
+ * 
@@ -21,2 +21,2 @@
-	public static void main(String[] args) throws IOException, GitAPIException {
-		Repository repository = CookbookHelper.openJGitCookbookRepository();
+    public static void main(String[] args) throws IOException, GitAPIException {
+        Repository repository = CookbookHelper.openJGitCookbookRepository();
@@ -24,4 +24,4 @@
-		List<Ref> call = new Git(repository).tagList().call();
-		for(Ref ref : call) {
-			System.out.println("Tag: " + ref + " " + ref.getName() + " " + ref.getObjectId().getName());
-		}
+        List<Ref> call = new Git(repository).tagList().call();
+        for (Ref ref : call) {
+            System.out.println("Tag: " + ref + " " + ref.getName() + " " + ref.getObjectId().getName());
+        }
@@ -29,2 +29,2 @@
-		repository.close();
-	}
+        repository.close();
+    }
diff --git a/src/main/java/org/dstadler/jgit/porcelain/ShowBlame.java b/src/main/java/org/dstadler/jgit/porcelain/ShowBlame.java
index 17689d1..625f6e9 100644
--- a/src/main/java/org/dstadler/jgit/porcelain/ShowBlame.java
+++ b/src/main/java/org/dstadler/jgit/porcelain/ShowBlame.java
@@ -25,3 +25,3 @@
- * Simple snippet which shows how to get a diff showing who 
- * changed which line in a file 
- *
+ * Simple snippet which shows how to get a diff showing who
+ * changed which line in a file
+ * 
@@ -32,2 +32,2 @@
-	public static void main(String[] args) throws IOException, GitAPIException {
-		// prepare a new test-repository
+    public static void main(String[] args) throws IOException, GitAPIException {
+        // prepare a new test-repository
@@ -36,12 +36,12 @@
-		BlameCommand blamer = new BlameCommand(repository);
-		ObjectId commitID = repository.resolve("HEAD");
-		blamer.setStartCommit(commitID);
-		blamer.setFilePath("README.md");
-		BlameResult blame = blamer.call();
-		
-		// read the number of lines from the commit to not look at changes in the working copy
-		int lines = countFiles(repository, commitID, "README.md");
-		for(int i = 0 ; i < lines; i++) {
-		    RevCommit commit = blame.getSourceCommit(i);
-		    System.out.println("Line: " + i + ": " + commit);
-		}
+        BlameCommand blamer = new BlameCommand(repository);
+        ObjectId commitID = repository.resolve("HEAD");
+        blamer.setStartCommit(commitID);
+        blamer.setFilePath("README.md");
+        BlameResult blame = blamer.call();
+
+        // read the number of lines from the commit to not look at changes in the working copy
+        int lines = countFiles(repository, commitID, "README.md");
+        for (int i = 0; i < lines; i++) {
+            RevCommit commit = blame.getSourceCommit(i);
+            System.out.println("Line: " + i + ": " + commit);
+        }
@@ -51,4 +51,4 @@
-		repository.close();
-	}
-	
-	private static int countFiles(Repository repository, ObjectId commitID, String name) throws IOException {
+        repository.close();
+    }
+
+    private static int countFiles(Repository repository, ObjectId commitID, String name) throws IOException {
@@ -66 +66 @@
-          throw new IllegalStateException("Did not find expected file 'README.md'");
+            throw new IllegalStateException("Did not find expected file 'README.md'");
@@ -75 +75 @@
-        
+
@@ -77 +77 @@
-	}
+    }
diff --git a/src/main/java/org/dstadler/jgit/porcelain/ShowBranchDiff.java b/src/main/java/org/dstadler/jgit/porcelain/ShowBranchDiff.java
index def0c19..027098b 100755
--- a/src/main/java/org/dstadler/jgit/porcelain/ShowBranchDiff.java
+++ b/src/main/java/org/dstadler/jgit/porcelain/ShowBranchDiff.java
@@ -25 +25 @@
- *
+ * 
@@ -30,2 +30,2 @@
-	public static void main(String[] args) throws IOException, GitAPIException {
-		Repository repository = CookbookHelper.openJGitCookbookRepository();
+    public static void main(String[] args) throws IOException, GitAPIException {
+        Repository repository = CookbookHelper.openJGitCookbookRepository();
@@ -33,3 +33,3 @@
-		// the diff works on TreeIterators, we prepare two for the two branches
-		AbstractTreeIterator oldTreeParser = prepareTreeParser(repository, "refs/heads/oldbranch");
-		AbstractTreeIterator newTreeParser = prepareTreeParser(repository, "refs/heads/master");
+        // the diff works on TreeIterators, we prepare two for the two branches
+        AbstractTreeIterator oldTreeParser = prepareTreeParser(repository, "refs/heads/oldbranch");
+        AbstractTreeIterator newTreeParser = prepareTreeParser(repository, "refs/heads/master");
@@ -37,5 +37,5 @@
-		// then the procelain diff-command returns a list of diff entries
-		List<DiffEntry> diff = new Git(repository).diff().setOldTree(oldTreeParser).setNewTree(newTreeParser).call();
-		for(DiffEntry entry : diff) {
-			System.out.println("Entry: " + entry);
-		}
+        // then the procelain diff-command returns a list of diff entries
+        List<DiffEntry> diff = new Git(repository).diff().setOldTree(oldTreeParser).setNewTree(newTreeParser).call();
+        for (DiffEntry entry : diff) {
+            System.out.println("Entry: " + entry);
+        }
@@ -43,2 +43,2 @@
-		repository.close();
-	}
+        repository.close();
+    }
@@ -46,7 +46,8 @@
-	private static AbstractTreeIterator prepareTreeParser(Repository repository, String ref) throws IOException, MissingObjectException,
-			IncorrectObjectTypeException {
-		// from the commit we can build the tree which allows us to construct the TreeParser
-		Ref head = repository.getRef(ref);
-		RevWalk walk = new RevWalk(repository);
-		RevCommit commit = walk.parseCommit(head.getObjectId());
-		RevTree tree = walk.parseTree(commit.getTree().getId());
+    private static AbstractTreeIterator prepareTreeParser(Repository repository, String ref) throws IOException,
+            MissingObjectException,
+            IncorrectObjectTypeException {
+        // from the commit we can build the tree which allows us to construct the TreeParser
+        Ref head = repository.getRef(ref);
+        RevWalk walk = new RevWalk(repository);
+        RevCommit commit = walk.parseCommit(head.getObjectId());
+        RevTree tree = walk.parseTree(commit.getTree().getId());
@@ -54,9 +55,9 @@
-		CanonicalTreeParser oldTreeParser = new CanonicalTreeParser();
-		ObjectReader oldReader = repository.newObjectReader();
-		try {
-			oldTreeParser.reset(oldReader, tree.getId());
-		} finally {
-			oldReader.release();
-		}
-		return oldTreeParser;
-	}
+        CanonicalTreeParser oldTreeParser = new CanonicalTreeParser();
+        ObjectReader oldReader = repository.newObjectReader();
+        try {
+            oldTreeParser.reset(oldReader, tree.getId());
+        } finally {
+            oldReader.release();
+        }
+        return oldTreeParser;
+    }
diff --git a/src/main/java/org/dstadler/jgit/porcelain/ShowLog.java b/src/main/java/org/dstadler/jgit/porcelain/ShowLog.java
index edd6f17..0795246 100755
--- a/src/main/java/org/dstadler/jgit/porcelain/ShowLog.java
+++ b/src/main/java/org/dstadler/jgit/porcelain/ShowLog.java
@@ -15 +15 @@
- *
+ * 
@@ -20,2 +20,2 @@
-	public static void main(String[] args) throws IOException, GitAPIException {
-		Repository repository = CookbookHelper.openJGitCookbookRepository();
+    public static void main(String[] args) throws IOException, GitAPIException {
+        Repository repository = CookbookHelper.openJGitCookbookRepository();
@@ -23,9 +23,9 @@
-		Iterable<RevCommit> logs = new Git(repository).log()
-				.all()
-				.call();
-		int count = 0;
-		for(RevCommit rev : logs) {
-			System.out.println("Commit: " + rev /*+ ", name: " + rev.getName() + ", id: " + rev.getId().getName()*/);
-			count++;
-		}
-		System.out.println("Had " + count + " commits overall on current branch");
+        Iterable<RevCommit> logs = new Git(repository).log()
+                .all()
+                .call();
+        int count = 0;
+        for (RevCommit rev : logs) {
+            System.out.println("Commit: " + rev /* + ", name: " + rev.getName() + ", id: " + rev.getId().getName() */);
+            count++;
+        }
+        System.out.println("Had " + count + " commits overall on current branch");
@@ -33,10 +33,10 @@
-		logs = new Git(repository).log()
-				// for all log.all()
-				.addPath("README.md")
-				.call();
-		count = 0;
-		for(RevCommit rev : logs) {
-			System.out.println("Commit: " + rev /*+ ", name: " + rev.getName() + ", id: " + rev.getId().getName()*/);
-			count++;
-		}
-		System.out.println("Had " + count + " commits on README.md");
+        logs = new Git(repository).log()
+                // for all log.all()
+                .addPath("README.md")
+                .call();
+        count = 0;
+        for (RevCommit rev : logs) {
+            System.out.println("Commit: " + rev /* + ", name: " + rev.getName() + ", id: " + rev.getId().getName() */);
+            count++;
+        }
+        System.out.println("Had " + count + " commits on README.md");
@@ -44,10 +44,10 @@
-		logs = new Git(repository).log()
-			// for all log.all()
-			.addPath("pom.xml")
-			.call();
-		count = 0;
-		for(RevCommit rev : logs) {
-			System.out.println("Commit: " + rev /*+ ", name: " + rev.getName() + ", id: " + rev.getId().getName()*/);
-			count++;
-		}
-		System.out.println("Had " + count + " commits on pom.xml");
+        logs = new Git(repository).log()
+                // for all log.all()
+                .addPath("pom.xml")
+                .call();
+        count = 0;
+        for (RevCommit rev : logs) {
+            System.out.println("Commit: " + rev /* + ", name: " + rev.getName() + ", id: " + rev.getId().getName() */);
+            count++;
+        }
+        System.out.println("Had " + count + " commits on pom.xml");
@@ -55,2 +55,2 @@
-		repository.close();
-	}
+        repository.close();
+    }
diff --git a/src/main/java/org/dstadler/jgit/porcelain/ShowStatus.java b/src/main/java/org/dstadler/jgit/porcelain/ShowStatus.java
index 00dccc7..397b9f9 100644
--- a/src/main/java/org/dstadler/jgit/porcelain/ShowStatus.java
+++ b/src/main/java/org/dstadler/jgit/porcelain/ShowStatus.java
@@ -16 +16 @@
- *
+ * 
@@ -21,2 +21,2 @@
-	public static void main(String[] args) throws IOException, GitAPIException {
-		Repository repository = CookbookHelper.openJGitCookbookRepository();
+    public static void main(String[] args) throws IOException, GitAPIException {
+        Repository repository = CookbookHelper.openJGitCookbookRepository();
@@ -24,2 +24,2 @@
-		Status status = new Git(repository).status().call();
-		System.out.println("Added: " + status.getAdded());
+        Status status = new Git(repository).status().call();
+        System.out.println("Added: " + status.getAdded());
@@ -35,3 +35,3 @@
-		
-		repository.close();
-	}
+
+        repository.close();
+    }
diff --git a/src/main/java/org/dstadler/jgit/porcelain/WalkAllCommits.java b/src/main/java/org/dstadler/jgit/porcelain/WalkAllCommits.java
index b703f00..9aed281 100644
--- a/src/main/java/org/dstadler/jgit/porcelain/WalkAllCommits.java
+++ b/src/main/java/org/dstadler/jgit/porcelain/WalkAllCommits.java
@@ -15,2 +15,2 @@
- * Simple snippet which shows how to use RevWalk to quickly iterate over all available commits, 
- * not just the ones on the current branch 
+ * Simple snippet which shows how to use RevWalk to quickly iterate over all available commits,
+ * not just the ones on the current branch
@@ -19,2 +18,0 @@
-	public static void main(String[] args) throws IOException, InvalidRefNameException, GitAPIException {
-		Repository repository = CookbookHelper.openJGitCookbookRepository();
@@ -22,8 +20,2 @@
-		Git git = new Git(repository);
-		Iterable<RevCommit> commits = git.log().all().call();
-		int count = 0;
-		for (RevCommit commit : commits) {
-			System.out.println("LogCommit: " + commit);
-			count++;
-		}
-		System.out.println(count);
+    public static void main(String[] args) throws IOException, InvalidRefNameException, GitAPIException {
+        Repository repository = CookbookHelper.openJGitCookbookRepository();
@@ -31,2 +23,11 @@
-		repository.close();
-	}
+        Git git = new Git(repository);
+        Iterable<RevCommit> commits = git.log().all().call();
+        int count = 0;
+        for (RevCommit commit : commits) {
+            System.out.println("LogCommit: " + commit);
+            count++;
+        }
+        System.out.println(count);
+
+        repository.close();
+    }
diff --git a/src/main/java/org/dstadler/jgit/unfinished/BrowseTree.java b/src/main/java/org/dstadler/jgit/unfinished/BrowseTree.java
index ba70921..08c5d3c 100644
--- a/src/main/java/org/dstadler/jgit/unfinished/BrowseTree.java
+++ b/src/main/java/org/dstadler/jgit/unfinished/BrowseTree.java
@@ -16 +16 @@
- *
+ * 
@@ -21,2 +21,2 @@
-	public static void main(String[] args) throws IOException, GitAPIException {
-		Repository repository = CookbookHelper.openJGitCookbookRepository();
+    public static void main(String[] args) throws IOException, GitAPIException {
+        Repository repository = CookbookHelper.openJGitCookbookRepository();
@@ -24,2 +24,2 @@
-		ObjectId revId = repository.resolve(Constants.HEAD);
-		TreeWalk treeWalk = new TreeWalk(repository);
+        ObjectId revId = repository.resolve(Constants.HEAD);
+        TreeWalk treeWalk = new TreeWalk(repository);
@@ -27 +27 @@
-		treeWalk.addTree(new RevWalk(repository).parseTree(revId));
+        treeWalk.addTree(new RevWalk(repository).parseTree(revId));
@@ -29,5 +29,5 @@
-		while (treeWalk.next())
-		{
-			System.out.println("---------------------------");
-			System.out.append("name: ").println(treeWalk.getNameString());
-			System.out.append("path: ").println(treeWalk.getPathString());
+        while (treeWalk.next())
+        {
+            System.out.println("---------------------------");
+            System.out.append("name: ").println(treeWalk.getNameString());
+            System.out.append("path: ").println(treeWalk.getPathString());
@@ -35 +35 @@
-			ObjectLoader loader = repository.open(treeWalk.getObjectId(0));
+            ObjectLoader loader = repository.open(treeWalk.getObjectId(0));
@@ -37,4 +37,4 @@
-			System.out.append("directory: ").println(loader.getType()
-					== Constants.OBJ_TREE);
-			System.out.append("size: ").println(loader.getSize());
-		}
+            System.out.append("directory: ").println(loader.getType()
+                    == Constants.OBJ_TREE);
+            System.out.append("size: ").println(loader.getSize());
+        }
@@ -42,2 +42,2 @@
-		repository.close();
-	}
+        repository.close();
+    }
diff --git a/src/main/java/org/dstadler/jgit/unfinished/ListChildrenOfCommit.java b/src/main/java/org/dstadler/jgit/unfinished/ListChildrenOfCommit.java
index 287d4a3..226dfb6 100755
--- a/src/main/java/org/dstadler/jgit/unfinished/ListChildrenOfCommit.java
+++ b/src/main/java/org/dstadler/jgit/unfinished/ListChildrenOfCommit.java
@@ -16 +16 @@
- *
+ * 
@@ -21,2 +21,2 @@
-	public static void main(String[] args) throws IOException, GitAPIException {
-		Repository repository = CookbookHelper.openJGitCookbookRepository();
+    public static void main(String[] args) throws IOException, GitAPIException {
+        Repository repository = CookbookHelper.openJGitCookbookRepository();
@@ -24,7 +24,7 @@
-		PlotWalk revWalk = new PlotWalk(repository);
-		ObjectId rootId = repository.resolve("refs/heads/master");
-		RevCommit root = revWalk.parseCommit(rootId);
-		revWalk.markStart(root);
-		PlotCommitList<PlotLane> plotCommitList = new PlotCommitList<PlotLane>();
-		plotCommitList.source(revWalk);
-		plotCommitList.fillTo(Integer.MAX_VALUE);
+        PlotWalk revWalk = new PlotWalk(repository);
+        ObjectId rootId = repository.resolve("refs/heads/master");
+        RevCommit root = revWalk.parseCommit(rootId);
+        revWalk.markStart(root);
+        PlotCommitList<PlotLane> plotCommitList = new PlotCommitList<PlotLane>();
+        plotCommitList.source(revWalk);
+        plotCommitList.fillTo(Integer.MAX_VALUE);
@@ -32,4 +32,4 @@
-		System.out.println("Printing children of commit " + root);
-		for(RevCommit com : revWalk) {
-			System.out.println("Child: " + com);
-		}
+        System.out.println("Printing children of commit " + root);
+        for (RevCommit com : revWalk) {
+            System.out.println("Child: " + com);
+        }
@@ -37,2 +37,2 @@
-		System.out.println("Printing with next()");
-		System.out.println("next: " + revWalk.next());
+        System.out.println("Printing with next()");
+        System.out.println("next: " + revWalk.next());
@@ -40,2 +40,2 @@
-		repository.close();
-	}
+        repository.close();
+    }
diff --git a/src/main/java/org/dstadler/jgit/unfinished/ListIndex.java b/src/main/java/org/dstadler/jgit/unfinished/ListIndex.java
index cf4ebbc..3f684a3 100755
--- a/src/main/java/org/dstadler/jgit/unfinished/ListIndex.java
+++ b/src/main/java/org/dstadler/jgit/unfinished/ListIndex.java
@@ -13 +13 @@
- *
+ * 
@@ -18,2 +18,2 @@
-	public static void main(String[] args) throws IOException, GitAPIException {
-		Repository repository = CookbookHelper.openJGitCookbookRepository();
+    public static void main(String[] args) throws IOException, GitAPIException {
+        Repository repository = CookbookHelper.openJGitCookbookRepository();
@@ -21,7 +21,7 @@
-		// DirCache contains all files of the repository
-		DirCache index = DirCache.read(repository);
-		System.out.println("DirCache has " + index.getEntryCount() + " items");
-		for(int i = 0; i < index.getEntryCount();i++) {
-			// the number after the AnyObjectId is the "stage", see the constants in DirCacheEntry
-			System.out.println("Item " + i + ": " + index.getEntry(i));
-		}
+        // DirCache contains all files of the repository
+        DirCache index = DirCache.read(repository);
+        System.out.println("DirCache has " + index.getEntryCount() + " items");
+        for (int i = 0; i < index.getEntryCount(); i++) {
+            // the number after the AnyObjectId is the "stage", see the constants in DirCacheEntry
+            System.out.println("Item " + i + ": " + index.getEntry(i));
+        }
@@ -29,8 +29,8 @@
-		//
-		System.out.println("Now printing staged items...");
-		for(int i = 0; i < index.getEntryCount();i++) {
-			DirCacheEntry entry = index.getEntry(i);
-			if(entry.getStage() != DirCacheEntry.STAGE_0) {
-				System.out.println("Item " + i + ": " + entry);
-			}
-		}
+        //
+        System.out.println("Now printing staged items...");
+        for (int i = 0; i < index.getEntryCount(); i++) {
+            DirCacheEntry entry = index.getEntry(i);
+            if (entry.getStage() != DirCacheEntry.STAGE_0) {
+                System.out.println("Item " + i + ": " + entry);
+            }
+        }
@@ -38,2 +38,2 @@
-		repository.close();
-	}
+        repository.close();
+    }
diff --git a/src/main/java/org/dstadler/jgit/unfinished/ListRefLog.java b/src/main/java/org/dstadler/jgit/unfinished/ListRefLog.java
index 5304d2e..9d1c4a8 100755
--- a/src/main/java/org/dstadler/jgit/unfinished/ListRefLog.java
+++ b/src/main/java/org/dstadler/jgit/unfinished/ListRefLog.java
@@ -20 +20 @@
- *
+ * 
@@ -25,2 +25,2 @@
-	public static void main(String[] args) throws IOException, GitAPIException {
-		Repository repository = CookbookHelper.openJGitCookbookRepository();
+    public static void main(String[] args) throws IOException, GitAPIException {
+        Repository repository = CookbookHelper.openJGitCookbookRepository();
@@ -28,3 +28,3 @@
-		List<Ref> refs = new Git(repository).branchList().call();
-		for(Ref ref : refs) {
-			System.out.println("Branch: " + ref + " " + ref.getName() + " " + ref.getObjectId().getName());
+        List<Ref> refs = new Git(repository).branchList().call();
+        for (Ref ref : refs) {
+            System.out.println("Branch: " + ref + " " + ref.getName() + " " + ref.getObjectId().getName());
@@ -32,2 +32,2 @@
-			listReflog(repository, ref);
-		}
+            listReflog(repository, ref);
+        }
@@ -35,3 +35,3 @@
-		List<Ref> call = new Git(repository).tagList().call();
-		for(Ref ref : call) {
-			System.out.println("Tag: " + ref + " " + ref.getName() + " " + ref.getObjectId().getName());
+        List<Ref> call = new Git(repository).tagList().call();
+        for (Ref ref : call) {
+            System.out.println("Tag: " + ref + " " + ref.getName() + " " + ref.getObjectId().getName());
@@ -39,2 +39,2 @@
-			listReflog(repository, ref);
-		}
+            listReflog(repository, ref);
+        }
@@ -42,2 +42,2 @@
-		repository.close();
-	}
+        repository.close();
+    }
@@ -45,4 +45,6 @@
-	private static void listReflog(Repository repository, Ref ref) throws GitAPIException, InvalidRefNameException, IOException {
-		/*Ref head = repository.getRef(ref.getName());
-		RevWalk walk = new RevWalk(repository);
-		RevCommit commit = walk.parseCommit(head.getObjectId());*/
+    private static void listReflog(Repository repository, Ref ref) throws GitAPIException, InvalidRefNameException, IOException {
+        /*
+         * Ref head = repository.getRef(ref.getName());
+         * RevWalk walk = new RevWalk(repository);
+         * RevCommit commit = walk.parseCommit(head.getObjectId());
+         */
@@ -50,7 +52,7 @@
-		Collection<ReflogEntry> call = new Git(repository).reflog().setRef(ref.getName()).call();
-		Iterator<ReflogEntry> it = call.iterator();
-		while(it.hasNext()) {
-			ReflogEntry reflog = it.next();
-			System.out.println("Reflog: " + reflog);
-		}
-	}
+        Collection<ReflogEntry> call = new Git(repository).reflog().setRef(ref.getName()).call();
+        Iterator<ReflogEntry> it = call.iterator();
+        while (it.hasNext()) {
+            ReflogEntry reflog = it.next();
+            System.out.println("Reflog: " + reflog);
+        }
+    }
diff --git a/src/main/java/org/dstadler/jgit/unfinished/PullFromRemoteRepository.java b/src/main/java/org/dstadler/jgit/unfinished/PullFromRemoteRepository.java
index be91bf0..53dea0f 100644
--- a/src/main/java/org/dstadler/jgit/unfinished/PullFromRemoteRepository.java
+++ b/src/main/java/org/dstadler/jgit/unfinished/PullFromRemoteRepository.java
@@ -17 +17 @@
- *
+ * 
@@ -21 +20,0 @@
-	private static final String REMOTE_URL = "https://github.com/github/testrepo.git";
@@ -23,4 +22 @@
-	public static void main(String[] args) throws IOException, InvalidRemoteException, TransportException, GitAPIException {
-		// prepare a new folder for the cloned repository
-		File localPath = File.createTempFile("TestGitRepository", "");
-		localPath.delete();
+    private static final String REMOTE_URL = "https://github.com/github/testrepo.git";
@@ -28,2 +24,7 @@
-		// then clone
-		System.out.println("Cloning from " + REMOTE_URL + " to " + localPath);
+    public static void main(String[] args) throws IOException, InvalidRemoteException, TransportException, GitAPIException {
+        // prepare a new folder for the cloned repository
+        File localPath = File.createTempFile("TestGitRepository", "");
+        localPath.delete();
+
+        // then clone
+        System.out.println("Cloning from " + REMOTE_URL + " to " + localPath);
@@ -31,3 +32,3 @@
-        .setURI(REMOTE_URL)
-        .setDirectory(localPath)
-        .call();
+                .setURI(REMOTE_URL)
+                .setDirectory(localPath)
+                .call();
@@ -36,5 +37,5 @@
-		FileRepositoryBuilder builder = new FileRepositoryBuilder();
-		Repository repository = builder.setGitDir(localPath)
-		  .readEnvironment() // scan environment GIT_* variables
-		  .findGitDir() // scan up the file system tree
-		  .build();
+        FileRepositoryBuilder builder = new FileRepositoryBuilder();
+        Repository repository = builder.setGitDir(localPath)
+                .readEnvironment() // scan environment GIT_* variables
+                .findGitDir() // scan up the file system tree
+                .build();
@@ -42 +43 @@
-		Git git = new Git(repository);
+        Git git = new Git(repository);
@@ -44 +45 @@
-        .call();
+                .call();
@@ -49 +50 @@
-	}
+    }
diff --git a/src/main/java/org/dstadler/jgit/unfinished/PullRemoteRepository.java b/src/main/java/org/dstadler/jgit/unfinished/PullRemoteRepository.java
index 89a1501..d7686e4 100755
--- a/src/main/java/org/dstadler/jgit/unfinished/PullRemoteRepository.java
+++ b/src/main/java/org/dstadler/jgit/unfinished/PullRemoteRepository.java
@@ -19 +19 @@
- *
+ * 
@@ -23 +22,0 @@
-	private static final String REMOTE_URL = "https://github.com/github/testrepo.git";
@@ -25,2 +24 @@
-	public static void main(String[] args) throws IOException, InvalidRemoteException, TransportException, GitAPIException {
-		Repository repository = cloneRepository();
+    private static final String REMOTE_URL = "https://github.com/github/testrepo.git";
@@ -28,2 +26,2 @@
-		System.out.println("Having repository: " + repository.getDirectory() + " with head: " +
-				repository.getRef(Constants.HEAD) + "/" + repository.resolve("HEAD") + "/" + repository.resolve("refs/heads/master"));
+    public static void main(String[] args) throws IOException, InvalidRemoteException, TransportException, GitAPIException {
+        Repository repository = cloneRepository();
@@ -31 +29,3 @@
-		// TODO: why do we get null here for HEAD?!? See also http://stackoverflow.com/questions/17979660/jgit-pull-noheadexception
+        System.out.println("Having repository: " + repository.getDirectory() + " with head: " +
+                repository.getRef(Constants.HEAD) + "/" + repository.resolve("HEAD") + "/" +
+                repository.resolve("refs/heads/master"));
@@ -33 +33,2 @@
-		PullResult call = new Git(repository).pull().call();
+        // TODO: why do we get null here for HEAD?!? See also
+// http://stackoverflow.com/questions/17979660/jgit-pull-noheadexception
@@ -35 +36 @@
-		System.out.println("Pulled from the remote repository: " + call);
+        PullResult call = new Git(repository).pull().call();
@@ -37,2 +38 @@
-		repository.close();
-	}
+        System.out.println("Pulled from the remote repository: " + call);
@@ -40,4 +40,2 @@
-	private static Repository cloneRepository() throws IOException, GitAPIException, InvalidRemoteException, TransportException {
-		// prepare a new folder for the cloned repository
-		File localPath = File.createTempFile("TestGitRepository", "");
-		localPath.delete();
+        repository.close();
+    }
@@ -45,2 +43,7 @@
-		// then clone
-		System.out.println("Cloning from " + REMOTE_URL + " to " + localPath);
+    private static Repository cloneRepository() throws IOException, GitAPIException, InvalidRemoteException, TransportException {
+        // prepare a new folder for the cloned repository
+        File localPath = File.createTempFile("TestGitRepository", "");
+        localPath.delete();
+
+        // then clone
+        System.out.println("Cloning from " + REMOTE_URL + " to " + localPath);
@@ -48,3 +51,3 @@
-        .setURI(REMOTE_URL)
-        .setDirectory(localPath)
-        .call();
+                .setURI(REMOTE_URL)
+                .setDirectory(localPath)
+                .call();
@@ -53,7 +56,7 @@
-		FileRepositoryBuilder builder = new FileRepositoryBuilder();
-		Repository repository = builder.setGitDir(localPath)
-		  .readEnvironment() // scan environment GIT_* variables
-		  .findGitDir() // scan up the file system tree
-		  .build();
-		return repository;
-	}
+        FileRepositoryBuilder builder = new FileRepositoryBuilder();
+        Repository repository = builder.setGitDir(localPath)
+                .readEnvironment() // scan environment GIT_* variables
+                .findGitDir() // scan up the file system tree
+                .build();
+        return repository;
+    }
diff --git a/src/main/java/org/dstadler/jgit/unfinished/PushToRemoteRepository.java b/src/main/java/org/dstadler/jgit/unfinished/PushToRemoteRepository.java
index 4ad4c8e..994bee1 100644
--- a/src/main/java/org/dstadler/jgit/unfinished/PushToRemoteRepository.java
+++ b/src/main/java/org/dstadler/jgit/unfinished/PushToRemoteRepository.java
@@ -17 +17 @@
- *
+ * 
@@ -21 +20,0 @@
-	private static final String REMOTE_URL = "https://github.com/github/testrepo.git";
@@ -23,4 +22 @@
-	public static void main(String[] args) throws IOException, InvalidRemoteException, TransportException, GitAPIException {
-		// prepare a new folder for the cloned repository
-		File localPath = File.createTempFile("TestGitRepository", "");
-		localPath.delete();
+    private static final String REMOTE_URL = "https://github.com/github/testrepo.git";
@@ -28,2 +24,7 @@
-		// then clone
-		System.out.println("Cloning from " + REMOTE_URL + " to " + localPath);
+    public static void main(String[] args) throws IOException, InvalidRemoteException, TransportException, GitAPIException {
+        // prepare a new folder for the cloned repository
+        File localPath = File.createTempFile("TestGitRepository", "");
+        localPath.delete();
+
+        // then clone
+        System.out.println("Cloning from " + REMOTE_URL + " to " + localPath);
@@ -31,3 +32,3 @@
-        .setURI(REMOTE_URL)
-        .setDirectory(localPath)
-        .call();
+                .setURI(REMOTE_URL)
+                .setDirectory(localPath)
+                .call();
@@ -35,3 +36,3 @@
-		// prepare a second folder for the 2nd clone
-		File localPath2 = File.createTempFile("TestGitRepository", "");
-		localPath2.delete();
+        // prepare a second folder for the 2nd clone
+        File localPath2 = File.createTempFile("TestGitRepository", "");
+        localPath2.delete();
@@ -39,2 +40,2 @@
-		// then clone again
-		System.out.println("Cloning from file://" + localPath + " to " + localPath2);
+        // then clone again
+        System.out.println("Cloning from file://" + localPath + " to " + localPath2);
@@ -42,3 +43,3 @@
-        .setURI("file://" + localPath)
-        .setDirectory(localPath2)
-        .call();
+                .setURI("file://" + localPath)
+                .setDirectory(localPath2)
+                .call();
@@ -47,5 +48,5 @@
-		FileRepositoryBuilder builder = new FileRepositoryBuilder();
-		Repository repository = builder.setGitDir(localPath2)
-		  .readEnvironment() // scan environment GIT_* variables
-		  .findGitDir() // scan up the file system tree
-		  .build();
+        FileRepositoryBuilder builder = new FileRepositoryBuilder();
+        Repository repository = builder.setGitDir(localPath2)
+                .readEnvironment() // scan environment GIT_* variables
+                .findGitDir() // scan up the file system tree
+                .build();
@@ -53,3 +54,3 @@
-		Git git = new Git(repository);
-		git.push()
-        	.call();
+        Git git = new Git(repository);
+        git.push()
+                .call();
@@ -57 +58 @@
-		System.out.println("Pushed from repository: " + repository.getDirectory() + " to remote repository at " + REMOTE_URL);
+        System.out.println("Pushed from repository: " + repository.getDirectory() + " to remote repository at " + REMOTE_URL);
@@ -59,2 +60,2 @@
-		repository.close();
-	}
+        repository.close();
+    }
diff --git a/src/main/java/org/dstadler/jgit/unfinished/TrackMaster.java b/src/main/java/org/dstadler/jgit/unfinished/TrackMaster.java
index 696047e..2aa1438 100644
--- a/src/main/java/org/dstadler/jgit/unfinished/TrackMaster.java
+++ b/src/main/java/org/dstadler/jgit/unfinished/TrackMaster.java
@@ -17 +17 @@
- *
+ * 
@@ -21 +20,0 @@
-	private static final String REMOTE_URL = "https://github.com/github/testrepo.git";
@@ -23,4 +22 @@
-	public static void main(String[] args) throws IOException, InvalidRemoteException, TransportException, GitAPIException {
-		// prepare a new folder for the cloned repository
-		File localPath = File.createTempFile("TestGitRepository", "");
-		localPath.delete();
+    private static final String REMOTE_URL = "https://github.com/github/testrepo.git";
@@ -28,2 +24,7 @@
-		// then clone
-		System.out.println("Cloning from " + REMOTE_URL + " to " + localPath);
+    public static void main(String[] args) throws IOException, InvalidRemoteException, TransportException, GitAPIException {
+        // prepare a new folder for the cloned repository
+        File localPath = File.createTempFile("TestGitRepository", "");
+        localPath.delete();
+
+        // then clone
+        System.out.println("Cloning from " + REMOTE_URL + " to " + localPath);
@@ -31,3 +32,3 @@
-        .setURI(REMOTE_URL)
-        .setDirectory(localPath)
-        .call();
+                .setURI(REMOTE_URL)
+                .setDirectory(localPath)
+                .call();
@@ -36,5 +37,5 @@
-		FileRepositoryBuilder builder = new FileRepositoryBuilder();
-		Repository repository = builder.setGitDir(localPath)
-		  .readEnvironment() // scan environment GIT_* variables
-		  .findGitDir() // scan up the file system tree
-		  .build();
+        FileRepositoryBuilder builder = new FileRepositoryBuilder();
+        Repository repository = builder.setGitDir(localPath)
+                .readEnvironment() // scan environment GIT_* variables
+                .findGitDir() // scan up the file system tree
+                .build();
@@ -42 +43 @@
-		Git git = new Git(repository);
+        Git git = new Git(repository);
@@ -44,6 +45,6 @@
-		git.branchCreate()
-	        .setName("master")
-	        // ?!? .setUpstreamMode(SetupUpstreamMode.SET_UPSTREAM)
-	        .setStartPoint("origin/master")
-	        .setForce(true)
-	        .call();
+        git.branchCreate()
+                .setName("master")
+                // ?!? .setUpstreamMode(SetupUpstreamMode.SET_UPSTREAM)
+                .setStartPoint("origin/master")
+                .setForce(true)
+                .call();
@@ -51 +52,2 @@
-        System.out.println("Now tracking master in repository at " + repository.getDirectory() + " from origin/master at " + REMOTE_URL);
+        System.out.println("Now tracking master in repository at " + repository.getDirectory() + " from origin/master at " +
+                REMOTE_URL);
@@ -54 +56 @@
-	}
+    }
diff --git a/src/main/java/org/dstadler/jgit/unfinished/WalkTreeNonRecursive.java b/src/main/java/org/dstadler/jgit/unfinished/WalkTreeNonRecursive.java
index 7a65ea7..f87c826 100644
--- a/src/main/java/org/dstadler/jgit/unfinished/WalkTreeNonRecursive.java
+++ b/src/main/java/org/dstadler/jgit/unfinished/WalkTreeNonRecursive.java
@@ -16 +16 @@
- *
+ * 
@@ -21,2 +21,2 @@
-	public static void main(String[] args) throws IOException, GitAPIException {
-		Repository repository = CookbookHelper.openJGitCookbookRepository();
+    public static void main(String[] args) throws IOException, GitAPIException {
+        Repository repository = CookbookHelper.openJGitCookbookRepository();
@@ -24 +24 @@
-		Ref head = repository.getRef("HEAD");
+        Ref head = repository.getRef("HEAD");
@@ -26,2 +26,2 @@
-		// a RevWalk allows to walk over commits based on some filtering that is defined
-		RevWalk walk = new RevWalk(repository);
+        // a RevWalk allows to walk over commits based on some filtering that is defined
+        RevWalk walk = new RevWalk(repository);
@@ -29,3 +29,3 @@
-		RevCommit commit = walk.parseCommit(head.getObjectId());
-		RevTree tree = commit.getTree();
-		System.out.println("Having tree: " + tree);
+        RevCommit commit = walk.parseCommit(head.getObjectId());
+        RevTree tree = commit.getTree();
+        System.out.println("Having tree: " + tree);
@@ -33,10 +33,8 @@
-		// now use a TreeWalk to iterate over all files in the Tree recursively
-		// you can set Filters to narrow down the results if needed
-		TreeWalk treeWalk = new TreeWalk(repository);
-		treeWalk.addTree(tree);
-		treeWalk.setRecursive(false);
-		while(treeWalk.next()) {
-			System.out.println("found: " + treeWalk.getPathString());
-		}
-		
-		
+        // now use a TreeWalk to iterate over all files in the Tree recursively
+        // you can set Filters to narrow down the results if needed
+        TreeWalk treeWalk = new TreeWalk(repository);
+        treeWalk.addTree(tree);
+        treeWalk.setRecursive(false);
+        while (treeWalk.next()) {
+            System.out.println("found: " + treeWalk.getPathString());
+        }
@@ -44,2 +42,4 @@
-		repository.close();
-	}
+
+
+        repository.close();
+    }
diff --git a/src/main/java/org/dstadler/jgit/unfinished/WalkTreeRecursive.java b/src/main/java/org/dstadler/jgit/unfinished/WalkTreeRecursive.java
index b37157b..82debfe 100644
--- a/src/main/java/org/dstadler/jgit/unfinished/WalkTreeRecursive.java
+++ b/src/main/java/org/dstadler/jgit/unfinished/WalkTreeRecursive.java
@@ -16 +16 @@
- *
+ * 
@@ -21,2 +21,2 @@
-	public static void main(String[] args) throws IOException, GitAPIException {
-		Repository repository = CookbookHelper.openJGitCookbookRepository();
+    public static void main(String[] args) throws IOException, GitAPIException {
+        Repository repository = CookbookHelper.openJGitCookbookRepository();
@@ -24 +24 @@
-		Ref head = repository.getRef("HEAD");
+        Ref head = repository.getRef("HEAD");
@@ -26,2 +26,2 @@
-		// a RevWalk allows to walk over commits based on some filtering that is defined
-		RevWalk walk = new RevWalk(repository);
+        // a RevWalk allows to walk over commits based on some filtering that is defined
+        RevWalk walk = new RevWalk(repository);
@@ -29,3 +29,3 @@
-		RevCommit commit = walk.parseCommit(head.getObjectId());
-		RevTree tree = commit.getTree();
-		System.out.println("Having tree: " + tree);
+        RevCommit commit = walk.parseCommit(head.getObjectId());
+        RevTree tree = commit.getTree();
+        System.out.println("Having tree: " + tree);
@@ -33,8 +33,8 @@
-		// now use a TreeWalk to iterate over all files in the Tree recursively
-		// you can set Filters to narrow down the results if needed
-		TreeWalk treeWalk = new TreeWalk(repository);
-		treeWalk.addTree(tree);
-		treeWalk.setRecursive(true);
-		while(treeWalk.next()) {
-			System.out.println("found: " + treeWalk.getPathString());
-		}
+        // now use a TreeWalk to iterate over all files in the Tree recursively
+        // you can set Filters to narrow down the results if needed
+        TreeWalk treeWalk = new TreeWalk(repository);
+        treeWalk.addTree(tree);
+        treeWalk.setRecursive(true);
+        while (treeWalk.next()) {
+            System.out.println("found: " + treeWalk.getPathString());
+        }
@@ -42,2 +42,2 @@
-		repository.close();
-	}
+        repository.close();
+    }
Diff Between 685ea854b74e59acd1a1e18cd0ea1e5868fc8723 62b318658265ec602f3173bbff350f1361d8c8aediff --git a/README.md b/README.md
index c8c4da0..d87b551 100644
--- a/README.md
+++ b/README.md
@@ -44,0 +45 @@
+* [Blame, i.e. find out which commit changed specific lines in a file](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/porcelain/ShowBlame.java)
diff --git a/src/main/java/org/dstadler/jgit/porcelain/ShowBlame.java b/src/main/java/org/dstadler/jgit/porcelain/ShowBlame.java
new file mode 100644
index 0000000..17689d1
--- /dev/null
+++ b/src/main/java/org/dstadler/jgit/porcelain/ShowBlame.java
@@ -0,0 +1,78 @@
+package org.dstadler.jgit.porcelain;
+
+
+import java.io.ByteArrayInputStream;
+import java.io.ByteArrayOutputStream;
+import java.io.IOException;
+
+import org.apache.commons.io.IOUtils;
+import org.dstadler.jgit.helper.CookbookHelper;
+import org.eclipse.jgit.api.BlameCommand;
+import org.eclipse.jgit.api.errors.GitAPIException;
+import org.eclipse.jgit.blame.BlameResult;
+import org.eclipse.jgit.lib.ObjectId;
+import org.eclipse.jgit.lib.ObjectLoader;
+import org.eclipse.jgit.lib.Repository;
+import org.eclipse.jgit.revwalk.RevCommit;
+import org.eclipse.jgit.revwalk.RevTree;
+import org.eclipse.jgit.revwalk.RevWalk;
+import org.eclipse.jgit.treewalk.TreeWalk;
+import org.eclipse.jgit.treewalk.filter.PathFilter;
+
+
+
+/**
+ * Simple snippet which shows how to get a diff showing who 
+ * changed which line in a file 
+ *
+ * @author dominik.stadler@gmx.at
+ */
+public class ShowBlame {
+
+	public static void main(String[] args) throws IOException, GitAPIException {
+		// prepare a new test-repository
+        Repository repository = CookbookHelper.openJGitCookbookRepository();
+
+		BlameCommand blamer = new BlameCommand(repository);
+		ObjectId commitID = repository.resolve("HEAD");
+		blamer.setStartCommit(commitID);
+		blamer.setFilePath("README.md");
+		BlameResult blame = blamer.call();
+		
+		// read the number of lines from the commit to not look at changes in the working copy
+		int lines = countFiles(repository, commitID, "README.md");
+		for(int i = 0 ; i < lines; i++) {
+		    RevCommit commit = blame.getSourceCommit(i);
+		    System.out.println("Line: " + i + ": " + commit);
+		}
+
+        System.out.println("Displayed commits responsible for " + lines + " lines of README.md");
+
+		repository.close();
+	}
+	
+	private static int countFiles(Repository repository, ObjectId commitID, String name) throws IOException {
+        RevWalk revWalk = new RevWalk(repository);
+        RevCommit commit = revWalk.parseCommit(commitID);
+        RevTree tree = commit.getTree();
+        System.out.println("Having tree: " + tree);
+
+        // now try to find a specific file
+        TreeWalk treeWalk = new TreeWalk(repository);
+        treeWalk.addTree(tree);
+        treeWalk.setRecursive(true);
+        treeWalk.setFilter(PathFilter.create(name));
+        if (!treeWalk.next()) {
+          throw new IllegalStateException("Did not find expected file 'README.md'");
+        }
+
+        ObjectId objectId = treeWalk.getObjectId(0);
+        ObjectLoader loader = repository.open(objectId);
+
+        ByteArrayOutputStream stream = new ByteArrayOutputStream();
+        // and then one can the loader to read the file
+        loader.copyTo(stream);
+        
+        return IOUtils.readLines(new ByteArrayInputStream(stream.toByteArray())).size();
+	}
+}
Diff Between 62b318658265ec602f3173bbff350f1361d8c8ae 2f9eb53592d42003164443567a11d028f0530f52diff --git a/README.md b/README.md
index b079620..c8c4da0 100644
--- a/README.md
+++ b/README.md
@@ -42,0 +43,2 @@
+* [Show Status](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/porcelain/ShowStatus.java)
+* [Write contents of branch into an compressed file](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/porcelain/CreateArchive.java)
@@ -45 +47,2 @@
-* [Iterate remote references like heads and tags](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/porcelain/ListRemoteReferences.java)
+* [Iterate remote references in a repository](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/porcelain/ListRemotes.java)
+* [List remote heads/tags without a local clone](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/porcelain/ListRemoteRepository.java)
@@ -74,0 +78 @@
+* CherryPick
diff --git a/src/main/java/org/dstadler/jgit/porcelain/CreateArchive.java b/src/main/java/org/dstadler/jgit/porcelain/CreateArchive.java
new file mode 100644
index 0000000..6e60a22
--- /dev/null
+++ b/src/main/java/org/dstadler/jgit/porcelain/CreateArchive.java
@@ -0,0 +1,83 @@
+package org.dstadler.jgit.porcelain;
+
+import java.io.File;
+import java.io.FileOutputStream;
+import java.io.IOException;
+import java.io.OutputStream;
+import java.util.Collections;
+import java.util.zip.ZipEntry;
+import java.util.zip.ZipOutputStream;
+
+import org.dstadler.jgit.helper.CookbookHelper;
+import org.eclipse.jgit.api.ArchiveCommand;
+import org.eclipse.jgit.api.ArchiveCommand.Format;
+import org.eclipse.jgit.api.Git;
+import org.eclipse.jgit.api.errors.GitAPIException;
+import org.eclipse.jgit.lib.FileMode;
+import org.eclipse.jgit.lib.ObjectLoader;
+import org.eclipse.jgit.lib.Repository;
+
+
+
+/**
+ * Simple snippet which shows how to package the contents of a branch into an archive file.
+ * 
+ * @author dominik.stadler@gmx.at
+ */
+public class CreateArchive {
+
+    /**
+     * A custom format for Zip-files, unfortunately JGit does not come with any pre-defined ones
+     */
+    private static final class ZipArchiveFormat implements Format<ZipOutputStream> {
+
+        public ZipOutputStream createArchiveOutputStream(OutputStream s) throws IOException {
+            return new ZipOutputStream(s);
+        }
+
+        public void putEntry(ZipOutputStream out, String path, FileMode mode, ObjectLoader loader) throws IOException {
+            ZipEntry entry = new ZipEntry(path);
+            out.putNextEntry(entry);
+            out.write(loader.getBytes());
+            out.closeEntry();
+        }
+
+        public Iterable<String> suffixes() {
+            return Collections.singleton(".zip");
+        }
+    }
+
+    public static void main(String[] args) throws IOException, GitAPIException {
+        Repository repository = CookbookHelper.openJGitCookbookRepository();
+
+
+        File file = File.createTempFile("test", ".zip");
+        try {
+
+            // make the archive format known
+            ArchiveCommand.registerFormat("zip", new ZipArchiveFormat());
+            try {
+                // this is the file that we write the archive to
+                OutputStream out = new FileOutputStream(file);
+                try {
+                    // finally call the ArchiveCommand to write out using the given format
+                    new Git(repository).archive()
+                            .setTree(repository.resolve("master"))
+                            .setFormat("zip")
+                            .setOutputStream(out)
+                            .call();
+                } finally {
+                    out.close();
+                }
+            } finally {
+                ArchiveCommand.unregisterFormat("zip");
+            }
+
+            System.out.println("Wrote " + file.length() + " bytes to " + file);
+        } finally {
+            file.delete();
+        }
+
+        repository.close();
+    }
+}
diff --git a/src/main/java/org/dstadler/jgit/porcelain/ListRemoteReferences.java b/src/main/java/org/dstadler/jgit/porcelain/ListRemoteReferences.java
deleted file mode 100755
index 890b20c..0000000
--- a/src/main/java/org/dstadler/jgit/porcelain/ListRemoteReferences.java
+++ /dev/null
@@ -1,42 +0,0 @@
-package org.dstadler.jgit.porcelain;
-
-import java.io.IOException;
-import java.util.Collection;
-
-import org.dstadler.jgit.helper.CookbookHelper;
-import org.eclipse.jgit.api.Git;
-import org.eclipse.jgit.api.errors.GitAPIException;
-import org.eclipse.jgit.lib.Ref;
-import org.eclipse.jgit.lib.Repository;
-
-/**
- * Snippet which shows how to iterate remotes, i.e. "git ls-remote"
- *
- * @author dominik.stadler@gmx.at
- */
-public class ListRemoteReferences {
-
-	public static void main(String[] args) throws IOException, GitAPIException {
-		Repository repository = CookbookHelper.openJGitCookbookRepository();
-
-		// all refs
-		Collection<Ref> refs = new Git(repository).lsRemote().call();
-		for(Ref ref : refs) {
-			System.out.println("Ref: " + ref);
-		}
-
-		// heads only
-		refs = new Git(repository).lsRemote().setHeads(true).call();
-		for(Ref ref : refs) {
-			System.out.println("Head: " + ref);
-		}
-
-		// tags only
-		refs = new Git(repository).lsRemote().setTags(true).call();
-		for(Ref ref : refs) {
-			System.out.println("Remote tag: " + ref);
-		}
-
-		repository.close();
-	}
-}
diff --git a/src/main/java/org/dstadler/jgit/porcelain/ListRemoteRepository.java b/src/main/java/org/dstadler/jgit/porcelain/ListRemoteRepository.java
new file mode 100644
index 0000000..875b761
--- /dev/null
+++ b/src/main/java/org/dstadler/jgit/porcelain/ListRemoteRepository.java
@@ -0,0 +1,36 @@
+package org.dstadler.jgit.porcelain;
+
+import java.io.IOException;
+import java.util.Collection;
+
+import org.eclipse.jgit.api.Git;
+import org.eclipse.jgit.api.errors.GitAPIException;
+import org.eclipse.jgit.api.errors.InvalidRemoteException;
+import org.eclipse.jgit.api.errors.TransportException;
+import org.eclipse.jgit.lib.Ref;
+
+
+
+/**
+ * Simple snippet which shows how to list heads/tags of remote repositories without 
+ * a local repository
+ *
+ * @author dominik.stadler@gmx.at
+ */
+public class ListRemoteRepository {
+	private static final String REMOTE_URL = "https://github.com/github/testrepo.git";
+
+	public static void main(String[] args) throws IOException, InvalidRemoteException, TransportException, GitAPIException {
+		// then clone
+		System.out.println("Listing remote repository " + REMOTE_URL);
+        Collection<Ref> refs = Git.lsRemoteRepository()
+            .setHeads(true)
+            .setTags(true)
+            .setRemote(REMOTE_URL)
+            .call();
+        
+        for(Ref ref : refs) {
+            System.out.println("Ref: " + ref);
+        }
+	}
+}
diff --git a/src/main/java/org/dstadler/jgit/porcelain/ListRemotes.java b/src/main/java/org/dstadler/jgit/porcelain/ListRemotes.java
new file mode 100755
index 0000000..f50b0fa
--- /dev/null
+++ b/src/main/java/org/dstadler/jgit/porcelain/ListRemotes.java
@@ -0,0 +1,42 @@
+package org.dstadler.jgit.porcelain;
+
+import java.io.IOException;
+import java.util.Collection;
+
+import org.dstadler.jgit.helper.CookbookHelper;
+import org.eclipse.jgit.api.Git;
+import org.eclipse.jgit.api.errors.GitAPIException;
+import org.eclipse.jgit.lib.Ref;
+import org.eclipse.jgit.lib.Repository;
+
+/**
+ * Snippet which shows how to iterate remotes, i.e. "git ls-remote"
+ *
+ * @author dominik.stadler@gmx.at
+ */
+public class ListRemotes {
+
+	public static void main(String[] args) throws IOException, GitAPIException {
+		Repository repository = CookbookHelper.openJGitCookbookRepository();
+
+		// all refs
+		Collection<Ref> refs = new Git(repository).lsRemote().call();
+		for(Ref ref : refs) {
+			System.out.println("Ref: " + ref);
+		}
+
+		// heads only
+		refs = new Git(repository).lsRemote().setHeads(true).call();
+		for(Ref ref : refs) {
+			System.out.println("Head: " + ref);
+		}
+
+		// tags only
+		refs = new Git(repository).lsRemote().setTags(true).call();
+		for(Ref ref : refs) {
+			System.out.println("Remote tag: " + ref);
+		}
+
+		repository.close();
+	}
+}
diff --git a/src/main/java/org/dstadler/jgit/porcelain/ShowStatus.java b/src/main/java/org/dstadler/jgit/porcelain/ShowStatus.java
new file mode 100644
index 0000000..00dccc7
--- /dev/null
+++ b/src/main/java/org/dstadler/jgit/porcelain/ShowStatus.java
@@ -0,0 +1,38 @@
+package org.dstadler.jgit.porcelain;
+
+import java.io.IOException;
+
+import org.dstadler.jgit.helper.CookbookHelper;
+import org.eclipse.jgit.api.Git;
+import org.eclipse.jgit.api.Status;
+import org.eclipse.jgit.api.errors.GitAPIException;
+import org.eclipse.jgit.lib.Repository;
+
+
+
+/**
+ * Simple snippet which prints the Status of a git repository, i.e. modified/added/
+ * removed/ignored files, similar to "git status"
+ *
+ * @author dominik.stadler@gmx.at
+ */
+public class ShowStatus {
+
+	public static void main(String[] args) throws IOException, GitAPIException {
+		Repository repository = CookbookHelper.openJGitCookbookRepository();
+
+		Status status = new Git(repository).status().call();
+		System.out.println("Added: " + status.getAdded());
+        System.out.println("Changed: " + status.getChanged());
+        System.out.println("Conflicting: " + status.getConflicting());
+        System.out.println("ConflictingStageState: " + status.getConflictingStageState());
+        System.out.println("IgnoredNotInIndex: " + status.getIgnoredNotInIndex());
+        System.out.println("Missing: " + status.getMissing());
+        System.out.println("Modified: " + status.getModified());
+        System.out.println("Removed: " + status.getRemoved());
+        System.out.println("Untracked: " + status.getUntracked());
+        System.out.println("UntrackedFolders: " + status.getUntrackedFolders());
+		
+		repository.close();
+	}
+}
Diff Between 2f9eb53592d42003164443567a11d028f0530f52 1ad10d8e952e5dc9e95eb2974d607a3af821a4a9diff --git a/pom.xml b/pom.xml
index 611fd6c..331444f 100644
--- a/pom.xml
+++ b/pom.xml
@@ -23 +23 @@
-      <version>3.0.3.201309161630-r</version>
+      <version>3.1.0.201310021548-r</version>
Diff Between 1ad10d8e952e5dc9e95eb2974d607a3af821a4a9 97be4ab881639c81deda4cbc07baf0a47903eb4bdiff --git a/README.md b/README.md
index 575e651..b079620 100644
--- a/README.md
+++ b/README.md
@@ -35,0 +36 @@
+* [List commits (i.e. Log)](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/porcelain/ShowLog.java)
diff --git a/src/main/java/org/dstadler/jgit/porcelain/ShowLog.java b/src/main/java/org/dstadler/jgit/porcelain/ShowLog.java
new file mode 100755
index 0000000..edd6f17
--- /dev/null
+++ b/src/main/java/org/dstadler/jgit/porcelain/ShowLog.java
@@ -0,0 +1,57 @@
+package org.dstadler.jgit.porcelain;
+
+import java.io.IOException;
+
+import org.dstadler.jgit.helper.CookbookHelper;
+import org.eclipse.jgit.api.Git;
+import org.eclipse.jgit.api.errors.GitAPIException;
+import org.eclipse.jgit.lib.Repository;
+import org.eclipse.jgit.revwalk.RevCommit;
+
+
+
+/**
+ * Simple snippet which shows how to get the commit-ids for a file to provide log information.
+ *
+ * @author dominik.stadler@gmx.at
+ */
+public class ShowLog {
+
+	public static void main(String[] args) throws IOException, GitAPIException {
+		Repository repository = CookbookHelper.openJGitCookbookRepository();
+
+		Iterable<RevCommit> logs = new Git(repository).log()
+				.all()
+				.call();
+		int count = 0;
+		for(RevCommit rev : logs) {
+			System.out.println("Commit: " + rev /*+ ", name: " + rev.getName() + ", id: " + rev.getId().getName()*/);
+			count++;
+		}
+		System.out.println("Had " + count + " commits overall on current branch");
+
+		logs = new Git(repository).log()
+				// for all log.all()
+				.addPath("README.md")
+				.call();
+		count = 0;
+		for(RevCommit rev : logs) {
+			System.out.println("Commit: " + rev /*+ ", name: " + rev.getName() + ", id: " + rev.getId().getName()*/);
+			count++;
+		}
+		System.out.println("Had " + count + " commits on README.md");
+
+		logs = new Git(repository).log()
+			// for all log.all()
+			.addPath("pom.xml")
+			.call();
+		count = 0;
+		for(RevCommit rev : logs) {
+			System.out.println("Commit: " + rev /*+ ", name: " + rev.getName() + ", id: " + rev.getId().getName()*/);
+			count++;
+		}
+		System.out.println("Had " + count + " commits on pom.xml");
+
+		repository.close();
+	}
+}
diff --git a/src/main/java/org/dstadler/jgit/unfinished/ShowLog.java b/src/main/java/org/dstadler/jgit/unfinished/ShowLog.java
deleted file mode 100755
index da1dd09..0000000
--- a/src/main/java/org/dstadler/jgit/unfinished/ShowLog.java
+++ /dev/null
@@ -1,32 +0,0 @@
-package org.dstadler.jgit.unfinished;
-
-import java.io.IOException;
-
-import org.dstadler.jgit.helper.CookbookHelper;
-import org.eclipse.jgit.api.Git;
-import org.eclipse.jgit.api.errors.GitAPIException;
-import org.eclipse.jgit.lib.Repository;
-import org.eclipse.jgit.revwalk.RevCommit;
-
-
-
-/**
- * Simple snippet which shows how to list log entries
- *
- * @author dominik.stadler@gmx.at
- */
-public class ShowLog {
-
-	public static void main(String[] args) throws IOException, GitAPIException {
-		Repository repository = CookbookHelper.openJGitCookbookRepository();
-
-		Iterable<RevCommit> logs = new Git(repository).log()
-			.all()
-			.call();
-		for(RevCommit rev : logs) {
-			System.out.println("Commit: " + rev + " " + rev.getName() + " " + rev.getId().getName());
-		}
-
-		repository.close();
-	}
-}
Diff Between 97be4ab881639c81deda4cbc07baf0a47903eb4b 2312c14b71f9b3869993f25c87c0d8e1522a6989diff --git a/README.md b/README.md
index 28e71d3..575e651 100644
--- a/README.md
+++ b/README.md
@@ -72,0 +73 @@
+* Stashes, see http://wiki.eclipse.org/JGit/New_and_Noteworthy/2.0#StashApplyCommand
diff --git a/pom.xml b/pom.xml
index 6a0539b..611fd6c 100644
--- a/pom.xml
+++ b/pom.xml
@@ -9,0 +10 @@
+
@@ -13 +14 @@
-      <url>http://download.eclipse.org/jgit/maven</url>
+      <url>https://repo.eclipse.org/content/groups/releases/</url>
@@ -22 +23 @@
-      <version>3.0.0.201306101825-r</version>
+      <version>3.0.3.201309161630-r</version>
Diff Between 2312c14b71f9b3869993f25c87c0d8e1522a6989 14f530427b18b2c64dd5aa95cb3f810f3496a540diff --git a/src/main/java/org/dstadler/jgit/porcelain/ListNotes.java b/src/main/java/org/dstadler/jgit/porcelain/ListNotes.java
index ffdc2f3..13de51a 100644
--- a/src/main/java/org/dstadler/jgit/porcelain/ListNotes.java
+++ b/src/main/java/org/dstadler/jgit/porcelain/ListNotes.java
@@ -8,0 +9 @@
+import org.eclipse.jgit.lib.ObjectLoader;
@@ -27 +28,5 @@
-			System.out.println("Note: " + note + " " + note.getName() + " " + note.getData().getName());
+			System.out.println("Note: " + note + " " + note.getName() + " " + note.getData().getName() + "\nContent: ");
+
+			// displaying the contents of the note is done via a simple blob-read
+			ObjectLoader loader = repository.open(note.getData());
+			loader.copyTo(System.out);
Diff Between 14f530427b18b2c64dd5aa95cb3f810f3496a540 ddd7561cb532f5d9808740f475cbb1aab0a3356ddiff --git a/README.md b/README.md
index e6cc362..28e71d3 100644
--- a/README.md
+++ b/README.md
@@ -66,0 +67,6 @@
+* SubModules: http://stackoverflow.com/questions/13426798/jgit-read-gitmodules
+* Diffing: http://stackoverflow.com/questions/12987364/how-to-diff-with-two-files-by-jgit-without-creating-repo
+* Ammend a previous commit: http://stackoverflow.com/questions/4772142/jgit-unstaging-files-removing-files-from-the-index-and-ammending-a-commit
+* Remove a file from the index: http://stackoverflow.com/questions/4803462/jgit-java-git-library-unstaging-files
+* Git repo on Amazon S3: http://stackoverflow.com/questions/8744611/git-repository-on-s3-as-origin-not-as-backup http://stackoverflow.com/questions/7031729/publish-to-s3-using-git http://www.fancybeans.com/blog/2012/08/24/how-to-use-s3-as-a-private-git-repository/
+* Doing stuff without local storage: Using org.eclipse.jgit.storage.dfs.InMemoryRepository to clone a Git repo in-memory and work from there
Diff Between ddd7561cb532f5d9808740f475cbb1aab0a3356d 8d39bdf523254c2f86c14035c75c1c51d715c9d9diff --git a/README.md b/README.md
index 374e95a..e6cc362 100644
--- a/README.md
+++ b/README.md
@@ -46 +46 @@
-* [List available Notes|](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/porcelain/ListNotes.java)
+* [List available Notes](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/porcelain/ListNotes.java)
Diff Between 8d39bdf523254c2f86c14035c75c1c51d715c9d9 09c65401f3730eb3e619c33bf31e2376fb393727diff --git a/README.md b/README.md
index b23f1c7..374e95a 100644
--- a/README.md
+++ b/README.md
@@ -45,0 +46,2 @@
+* [List available Notes|](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/porcelain/ListNotes.java)
+
@@ -63,0 +66 @@
+* Add/Remove/Read Notes
diff --git a/src/main/java/org/dstadler/jgit/porcelain/ListNotes.java b/src/main/java/org/dstadler/jgit/porcelain/ListNotes.java
new file mode 100644
index 0000000..ffdc2f3
--- /dev/null
+++ b/src/main/java/org/dstadler/jgit/porcelain/ListNotes.java
@@ -0,0 +1,32 @@
+package org.dstadler.jgit.porcelain;
+
+import java.io.IOException;
+import java.util.List;
+
+import org.dstadler.jgit.helper.CookbookHelper;
+import org.eclipse.jgit.api.Git;
+import org.eclipse.jgit.api.errors.GitAPIException;
+import org.eclipse.jgit.lib.Repository;
+import org.eclipse.jgit.notes.Note;
+
+
+
+/**
+ * Simple snippet which shows how to load Notes in a Git repository
+ *
+ * @author dominik.stadler@gmx.at
+ */
+public class ListNotes {
+
+	public static void main(String[] args) throws IOException, GitAPIException {
+		Repository repository = CookbookHelper.openJGitCookbookRepository();
+
+		List<Note> call = new Git(repository).notesList().call();
+		System.out.println("Listing " + call.size() + " notes");
+		for(Note note : call) {
+			System.out.println("Note: " + note + " " + note.getName() + " " + note.getData().getName());
+		}
+
+		repository.close();
+	}
+}
Diff Between 09c65401f3730eb3e619c33bf31e2376fb393727 9703d65ac6986eb79811032cf13d35d9da9734cfdiff --git a/README.md b/README.md
index 16da2b3..b23f1c7 100644
--- a/README.md
+++ b/README.md
@@ -40,0 +41 @@
+* [Return diff between two branches](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/porcelain/ShowBranchDiff.java)
diff --git a/src/main/java/org/dstadler/jgit/porcelain/ShowBranchDiff.java b/src/main/java/org/dstadler/jgit/porcelain/ShowBranchDiff.java
new file mode 100755
index 0000000..def0c19
--- /dev/null
+++ b/src/main/java/org/dstadler/jgit/porcelain/ShowBranchDiff.java
@@ -0,0 +1,63 @@
+package org.dstadler.jgit.porcelain;
+
+import java.io.IOException;
+import java.util.List;
+
+import org.dstadler.jgit.helper.CookbookHelper;
+import org.eclipse.jgit.api.Git;
+import org.eclipse.jgit.api.errors.GitAPIException;
+import org.eclipse.jgit.diff.DiffEntry;
+import org.eclipse.jgit.errors.IncorrectObjectTypeException;
+import org.eclipse.jgit.errors.MissingObjectException;
+import org.eclipse.jgit.lib.ObjectReader;
+import org.eclipse.jgit.lib.Ref;
+import org.eclipse.jgit.lib.Repository;
+import org.eclipse.jgit.revwalk.RevCommit;
+import org.eclipse.jgit.revwalk.RevTree;
+import org.eclipse.jgit.revwalk.RevWalk;
+import org.eclipse.jgit.treewalk.AbstractTreeIterator;
+import org.eclipse.jgit.treewalk.CanonicalTreeParser;
+
+
+
+/**
+ * Simple snippet which shows how to show diffs between branches
+ *
+ * @author dominik.stadler@gmx.at
+ */
+public class ShowBranchDiff {
+
+	public static void main(String[] args) throws IOException, GitAPIException {
+		Repository repository = CookbookHelper.openJGitCookbookRepository();
+
+		// the diff works on TreeIterators, we prepare two for the two branches
+		AbstractTreeIterator oldTreeParser = prepareTreeParser(repository, "refs/heads/oldbranch");
+		AbstractTreeIterator newTreeParser = prepareTreeParser(repository, "refs/heads/master");
+
+		// then the procelain diff-command returns a list of diff entries
+		List<DiffEntry> diff = new Git(repository).diff().setOldTree(oldTreeParser).setNewTree(newTreeParser).call();
+		for(DiffEntry entry : diff) {
+			System.out.println("Entry: " + entry);
+		}
+
+		repository.close();
+	}
+
+	private static AbstractTreeIterator prepareTreeParser(Repository repository, String ref) throws IOException, MissingObjectException,
+			IncorrectObjectTypeException {
+		// from the commit we can build the tree which allows us to construct the TreeParser
+		Ref head = repository.getRef(ref);
+		RevWalk walk = new RevWalk(repository);
+		RevCommit commit = walk.parseCommit(head.getObjectId());
+		RevTree tree = walk.parseTree(commit.getTree().getId());
+
+		CanonicalTreeParser oldTreeParser = new CanonicalTreeParser();
+		ObjectReader oldReader = repository.newObjectReader();
+		try {
+			oldTreeParser.reset(oldReader, tree.getId());
+		} finally {
+			oldReader.release();
+		}
+		return oldTreeParser;
+	}
+}
Diff Between 9703d65ac6986eb79811032cf13d35d9da9734cf 54a9901d27162a867e3fdff9d58b0d553ef51aeediff --git a/README.md b/README.md
index b0321e5..16da2b3 100644
--- a/README.md
+++ b/README.md
@@ -56,0 +57 @@
+* [Read file attributes, e.g. executeable state, file or directory, size, ...](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/api/GetFileAttributes.java)
@@ -61 +61,0 @@
-* Read file attributes, e.g. executeable state
diff --git a/src/main/java/org/dstadler/jgit/api/GetFileAttributes.java b/src/main/java/org/dstadler/jgit/api/GetFileAttributes.java
new file mode 100755
index 0000000..ad504b2
--- /dev/null
+++ b/src/main/java/org/dstadler/jgit/api/GetFileAttributes.java
@@ -0,0 +1,108 @@
+package org.dstadler.jgit.api;
+
+import java.io.IOException;
+
+import org.dstadler.jgit.helper.CookbookHelper;
+import org.eclipse.jgit.api.errors.GitAPIException;
+import org.eclipse.jgit.errors.AmbiguousObjectException;
+import org.eclipse.jgit.errors.CorruptObjectException;
+import org.eclipse.jgit.errors.IncorrectObjectTypeException;
+import org.eclipse.jgit.errors.MissingObjectException;
+import org.eclipse.jgit.lib.Constants;
+import org.eclipse.jgit.lib.FileMode;
+import org.eclipse.jgit.lib.ObjectId;
+import org.eclipse.jgit.lib.ObjectLoader;
+import org.eclipse.jgit.lib.Repository;
+import org.eclipse.jgit.revwalk.RevCommit;
+import org.eclipse.jgit.revwalk.RevTree;
+import org.eclipse.jgit.revwalk.RevWalk;
+import org.eclipse.jgit.treewalk.TreeWalk;
+import org.eclipse.jgit.treewalk.filter.PathFilter;
+
+/**
+ * Snippet which shows how to use RevWalk and TreeWalk to read the file
+ * attributes like execution-bit and type of file/directory/...
+ *
+ * @author dominik.stadler@gmx.at
+ */
+public class GetFileAttributes {
+
+	public static void main(String[] args) throws IOException, GitAPIException {
+		Repository repository = CookbookHelper.openJGitCookbookRepository();
+
+		// find the Tree for current HEAD
+		RevTree tree = getTree(repository);
+
+		printFile(repository, tree);
+
+		printDirectory(repository, tree);
+
+		// there is also FileMode.SYMLINK for symbolic links, but this is not handled here yet
+
+		repository.close();
+	}
+
+	private static RevTree getTree(Repository repository) throws AmbiguousObjectException, IncorrectObjectTypeException,
+			IOException, MissingObjectException {
+		ObjectId lastCommitId = repository.resolve(Constants.HEAD);
+
+		// a RevWalk allows to walk over commits based on some filtering
+		RevWalk revWalk = new RevWalk(repository);
+		RevCommit commit = revWalk.parseCommit(lastCommitId);
+
+		System.out.println("Time of commit (seconds since epoch): " + commit.getCommitTime());
+
+		// and using commit's tree find the path
+		RevTree tree = commit.getTree();
+		System.out.println("Having tree: " + tree);
+		return tree;
+	}
+
+	private static void printFile(Repository repository, RevTree tree) throws MissingObjectException,
+			IncorrectObjectTypeException, CorruptObjectException, IOException {
+		// now try to find a specific file
+		TreeWalk treeWalk = new TreeWalk(repository);
+		treeWalk.addTree(tree);
+		treeWalk.setRecursive(false);
+		treeWalk.setFilter(PathFilter.create("README.md"));
+		if (!treeWalk.next()) {
+		  throw new IllegalStateException("Did not find expected file 'README.md'");
+		}
+
+		// FileMode specifies the type of file, FileMode.REGULAR_FILE for normal file, FileMode.EXECUTABLE_FILE for executable bit set
+		FileMode fileMode = treeWalk.getFileMode(0);
+		ObjectLoader loader = repository.open(treeWalk.getObjectId(0));
+		System.out.println("README.md: " + getFileMode(fileMode) + ", type: " + fileMode.getObjectType() + ", mode: " + fileMode + " size: " + loader.getSize());
+	}
+
+	private static void printDirectory(Repository repository, RevTree tree) throws MissingObjectException,
+			IncorrectObjectTypeException, CorruptObjectException, IOException {
+		// look at directory, this has FileMode.TREE
+		TreeWalk treeWalk = new TreeWalk(repository);
+		treeWalk.addTree(tree);
+		treeWalk.setRecursive(false);
+		treeWalk.setFilter(PathFilter.create("src"));
+		if (!treeWalk.next()) {
+			  throw new IllegalStateException("Did not find expected file 'README.md'");
+		}
+
+		//  FileMode now indicates that this is a directory, i.e. FileMode.TREE.equals(fileMode) holds true
+		FileMode fileMode = treeWalk.getFileMode(0);
+		System.out.println("src: " + getFileMode(fileMode) + ", type: " + fileMode.getObjectType() + ", mode: " + fileMode);
+	}
+
+	private static String getFileMode(FileMode fileMode) {
+		if(fileMode.equals(FileMode.EXECUTABLE_FILE)) {
+			return "Executable File";
+		} else if(fileMode.equals(FileMode.REGULAR_FILE)) {
+			return "Normal File";
+		} else if(fileMode.equals(FileMode.TREE)) {
+			return "Directory";
+		} else if(fileMode.equals(FileMode.SYMLINK)) {
+			return "Symlink";
+		} else {
+			// there are a few others, see FileMode javadoc for details
+			throw new IllegalArgumentException("Unknown type of file encountered: " + fileMode);
+		}
+	}
+}
Diff Between 54a9901d27162a867e3fdff9d58b0d553ef51aee bdc1121a9cb79e17a4fb5cf431301c65d6fb8ed6diff --git a/README.md b/README.md
index 55bb56d..b0321e5 100644
--- a/README.md
+++ b/README.md
@@ -42,0 +43 @@
+* [Iterate remote references like heads and tags](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/porcelain/ListRemoteReferences.java)
diff --git a/src/main/java/org/dstadler/jgit/porcelain/ListRemoteReferences.java b/src/main/java/org/dstadler/jgit/porcelain/ListRemoteReferences.java
new file mode 100755
index 0000000..890b20c
--- /dev/null
+++ b/src/main/java/org/dstadler/jgit/porcelain/ListRemoteReferences.java
@@ -0,0 +1,42 @@
+package org.dstadler.jgit.porcelain;
+
+import java.io.IOException;
+import java.util.Collection;
+
+import org.dstadler.jgit.helper.CookbookHelper;
+import org.eclipse.jgit.api.Git;
+import org.eclipse.jgit.api.errors.GitAPIException;
+import org.eclipse.jgit.lib.Ref;
+import org.eclipse.jgit.lib.Repository;
+
+/**
+ * Snippet which shows how to iterate remotes, i.e. "git ls-remote"
+ *
+ * @author dominik.stadler@gmx.at
+ */
+public class ListRemoteReferences {
+
+	public static void main(String[] args) throws IOException, GitAPIException {
+		Repository repository = CookbookHelper.openJGitCookbookRepository();
+
+		// all refs
+		Collection<Ref> refs = new Git(repository).lsRemote().call();
+		for(Ref ref : refs) {
+			System.out.println("Ref: " + ref);
+		}
+
+		// heads only
+		refs = new Git(repository).lsRemote().setHeads(true).call();
+		for(Ref ref : refs) {
+			System.out.println("Head: " + ref);
+		}
+
+		// tags only
+		refs = new Git(repository).lsRemote().setTags(true).call();
+		for(Ref ref : refs) {
+			System.out.println("Remote tag: " + ref);
+		}
+
+		repository.close();
+	}
+}
Diff Between bdc1121a9cb79e17a4fb5cf431301c65d6fb8ed6 4d69157a25ad89cdfa51dc1e5dc2ef50b8548145diff --git a/src/main/java/org/dstadler/jgit/unfinished/PullRemoteRepository.java b/src/main/java/org/dstadler/jgit/unfinished/PullRemoteRepository.java
new file mode 100755
index 0000000..89a1501
--- /dev/null
+++ b/src/main/java/org/dstadler/jgit/unfinished/PullRemoteRepository.java
@@ -0,0 +1,60 @@
+package org.dstadler.jgit.unfinished;
+
+import java.io.File;
+import java.io.IOException;
+
+import org.eclipse.jgit.api.Git;
+import org.eclipse.jgit.api.PullResult;
+import org.eclipse.jgit.api.errors.GitAPIException;
+import org.eclipse.jgit.api.errors.InvalidRemoteException;
+import org.eclipse.jgit.api.errors.TransportException;
+import org.eclipse.jgit.lib.Constants;
+import org.eclipse.jgit.lib.Repository;
+import org.eclipse.jgit.storage.file.FileRepositoryBuilder;
+
+
+
+/**
+ * Simple snippet which shows how to poull from a remote repository from a remote source
+ *
+ * @author dominik.stadler@gmx.at
+ */
+public class PullRemoteRepository {
+	private static final String REMOTE_URL = "https://github.com/github/testrepo.git";
+
+	public static void main(String[] args) throws IOException, InvalidRemoteException, TransportException, GitAPIException {
+		Repository repository = cloneRepository();
+
+		System.out.println("Having repository: " + repository.getDirectory() + " with head: " +
+				repository.getRef(Constants.HEAD) + "/" + repository.resolve("HEAD") + "/" + repository.resolve("refs/heads/master"));
+
+		// TODO: why do we get null here for HEAD?!? See also http://stackoverflow.com/questions/17979660/jgit-pull-noheadexception
+
+		PullResult call = new Git(repository).pull().call();
+
+		System.out.println("Pulled from the remote repository: " + call);
+
+		repository.close();
+	}
+
+	private static Repository cloneRepository() throws IOException, GitAPIException, InvalidRemoteException, TransportException {
+		// prepare a new folder for the cloned repository
+		File localPath = File.createTempFile("TestGitRepository", "");
+		localPath.delete();
+
+		// then clone
+		System.out.println("Cloning from " + REMOTE_URL + " to " + localPath);
+        Git.cloneRepository()
+        .setURI(REMOTE_URL)
+        .setDirectory(localPath)
+        .call();
+
+        // now open the created repository
+		FileRepositoryBuilder builder = new FileRepositoryBuilder();
+		Repository repository = builder.setGitDir(localPath)
+		  .readEnvironment() // scan environment GIT_* variables
+		  .findGitDir() // scan up the file system tree
+		  .build();
+		return repository;
+	}
+}
Diff Between 4d69157a25ad89cdfa51dc1e5dc2ef50b8548145 3d0f9ccab8e2b92c4e19486e9306c6f32d19bcf2diff --git a/README.md b/README.md
index a86264e..55bb56d 100644
--- a/README.md
+++ b/README.md
@@ -39,0 +40 @@
+* [Create and delete tags](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/porcelain/CreateAndDeleteTag.java)
diff --git a/src/main/java/org/dstadler/jgit/porcelain/CreateAndDeleteBranch.java b/src/main/java/org/dstadler/jgit/porcelain/CreateAndDeleteBranch.java
index 49d5424..155a22f 100755
--- a/src/main/java/org/dstadler/jgit/porcelain/CreateAndDeleteBranch.java
+++ b/src/main/java/org/dstadler/jgit/porcelain/CreateAndDeleteBranch.java
@@ -22 +22 @@
-		// prepare a new test-repository
+		// prepare test-repository
diff --git a/src/main/java/org/dstadler/jgit/porcelain/CreateAndDeleteTag.java b/src/main/java/org/dstadler/jgit/porcelain/CreateAndDeleteTag.java
new file mode 100755
index 0000000..7a913ef
--- /dev/null
+++ b/src/main/java/org/dstadler/jgit/porcelain/CreateAndDeleteTag.java
@@ -0,0 +1,57 @@
+package org.dstadler.jgit.porcelain;
+
+import java.io.IOException;
+
+import org.dstadler.jgit.helper.CookbookHelper;
+import org.eclipse.jgit.api.Git;
+import org.eclipse.jgit.api.errors.GitAPIException;
+import org.eclipse.jgit.lib.ObjectId;
+import org.eclipse.jgit.lib.Ref;
+import org.eclipse.jgit.lib.Repository;
+import org.eclipse.jgit.revwalk.RevCommit;
+import org.eclipse.jgit.revwalk.RevWalk;
+
+
+
+/**
+ * Simple snippet which shows how to create a tag
+ *
+ * @author dominik.stadler@gmx.at
+ */
+public class CreateAndDeleteTag {
+
+	public static void main(String[] args) throws IOException, GitAPIException {
+		// prepare test-repository
+		Repository repository = CookbookHelper.openJGitCookbookRepository();
+		Git git = new Git(repository);
+
+        // remove the tag before creating it
+        git.tagDelete().setTags("tag_for_testing").call();
+
+		// set it on the current HEAD
+		Ref tag = git.tag().setName("tag_for_testing").call();
+        System.out.println("Created/moved tag " + tag + " to repository at " + repository.getDirectory());
+
+        // remove the tag again
+        git.tagDelete().setTags("tag_for_testing").call();
+
+        // read some other commit and set the tag on it
+        ObjectId id = repository.resolve("HEAD^");
+		RevWalk walk = new RevWalk(repository);
+		RevCommit commit = walk.parseCommit(id);
+		tag = git.tag().setObjectId(commit).setName("tag_for_testing").call();
+        System.out.println("Created/moved tag " + tag + " to repository at " + repository.getDirectory());
+
+        // remove the tag again
+        git.tagDelete().setTags("tag_for_testing").call();
+
+        // create an annotated tag
+        tag = git.tag().setName("tag_for_testing").setAnnotated(true).call();
+        System.out.println("Created/moved tag " + tag + " to repository at " + repository.getDirectory());
+
+        // remove the tag again
+        git.tagDelete().setTags("tag_for_testing").call();
+
+        repository.close();
+	}
+}
Diff Between 3d0f9ccab8e2b92c4e19486e9306c6f32d19bcf2 ff47f2d901d827ead60f4817f83380c6841e677fdiff --git a/src/main/java/org/dstadler/jgit/unfinished/ListChildrenOfCommit.java b/src/main/java/org/dstadler/jgit/unfinished/ListChildrenOfCommit.java
index c1540a6..287d4a3 100755
--- a/src/main/java/org/dstadler/jgit/unfinished/ListChildrenOfCommit.java
+++ b/src/main/java/org/dstadler/jgit/unfinished/ListChildrenOfCommit.java
@@ -15,2 +15 @@
- * Snippet which shows how to use RevWalk and TreeWalk to read the contents
- * of a specific file from a specific commit.
+ * Snippet which shows how to use PlotWalk to read from a specific commit.
diff --git a/src/main/java/org/dstadler/jgit/unfinished/ListIndex.java b/src/main/java/org/dstadler/jgit/unfinished/ListIndex.java
new file mode 100755
index 0000000..cf4ebbc
--- /dev/null
+++ b/src/main/java/org/dstadler/jgit/unfinished/ListIndex.java
@@ -0,0 +1,40 @@
+package org.dstadler.jgit.unfinished;
+
+import java.io.IOException;
+
+import org.dstadler.jgit.helper.CookbookHelper;
+import org.eclipse.jgit.api.errors.GitAPIException;
+import org.eclipse.jgit.dircache.DirCache;
+import org.eclipse.jgit.dircache.DirCacheEntry;
+import org.eclipse.jgit.lib.Repository;
+
+/**
+ * Snippet which shows how to work with the Index
+ *
+ * @author dominik.stadler@gmx.at
+ */
+public class ListIndex {
+
+	public static void main(String[] args) throws IOException, GitAPIException {
+		Repository repository = CookbookHelper.openJGitCookbookRepository();
+
+		// DirCache contains all files of the repository
+		DirCache index = DirCache.read(repository);
+		System.out.println("DirCache has " + index.getEntryCount() + " items");
+		for(int i = 0; i < index.getEntryCount();i++) {
+			// the number after the AnyObjectId is the "stage", see the constants in DirCacheEntry
+			System.out.println("Item " + i + ": " + index.getEntry(i));
+		}
+
+		//
+		System.out.println("Now printing staged items...");
+		for(int i = 0; i < index.getEntryCount();i++) {
+			DirCacheEntry entry = index.getEntry(i);
+			if(entry.getStage() != DirCacheEntry.STAGE_0) {
+				System.out.println("Item " + i + ": " + entry);
+			}
+		}
+
+		repository.close();
+	}
+}
Diff Between ff47f2d901d827ead60f4817f83380c6841e677f 99df5aad97ac66e59ece97cede6213643d1349dcdiff --git a/src/main/java/org/dstadler/jgit/unfinished/ListChildrenOfCommit.java b/src/main/java/org/dstadler/jgit/unfinished/ListChildrenOfCommit.java
new file mode 100755
index 0000000..c1540a6
--- /dev/null
+++ b/src/main/java/org/dstadler/jgit/unfinished/ListChildrenOfCommit.java
@@ -0,0 +1,43 @@
+package org.dstadler.jgit.unfinished;
+
+import java.io.IOException;
+
+import org.dstadler.jgit.helper.CookbookHelper;
+import org.eclipse.jgit.api.errors.GitAPIException;
+import org.eclipse.jgit.lib.ObjectId;
+import org.eclipse.jgit.lib.Repository;
+import org.eclipse.jgit.revplot.PlotCommitList;
+import org.eclipse.jgit.revplot.PlotLane;
+import org.eclipse.jgit.revplot.PlotWalk;
+import org.eclipse.jgit.revwalk.RevCommit;
+
+/**
+ * Snippet which shows how to use RevWalk and TreeWalk to read the contents
+ * of a specific file from a specific commit.
+ *
+ * @author dominik.stadler@gmx.at
+ */
+public class ListChildrenOfCommit {
+
+	public static void main(String[] args) throws IOException, GitAPIException {
+		Repository repository = CookbookHelper.openJGitCookbookRepository();
+
+		PlotWalk revWalk = new PlotWalk(repository);
+		ObjectId rootId = repository.resolve("refs/heads/master");
+		RevCommit root = revWalk.parseCommit(rootId);
+		revWalk.markStart(root);
+		PlotCommitList<PlotLane> plotCommitList = new PlotCommitList<PlotLane>();
+		plotCommitList.source(revWalk);
+		plotCommitList.fillTo(Integer.MAX_VALUE);
+
+		System.out.println("Printing children of commit " + root);
+		for(RevCommit com : revWalk) {
+			System.out.println("Child: " + com);
+		}
+
+		System.out.println("Printing with next()");
+		System.out.println("next: " + revWalk.next());
+
+		repository.close();
+	}
+}
Diff Between 99df5aad97ac66e59ece97cede6213643d1349dc 936b91c339a6754be573f072897f627d26f75b66diff --git a/README.md b/README.md
index d54f926..a86264e 100644
--- a/README.md
+++ b/README.md
@@ -59,0 +60 @@
+* Take some of the unit tests as example: https://github.com/eclipse/jgit/tree/master/org.eclipse.jgit.test/tst/org/eclipse/jgit/api
Diff Between 936b91c339a6754be573f072897f627d26f75b66 7ad52f0f27e76548fb107a68bf8948e4fa54401cdiff --git a/README.md b/README.md
index b817fb1..d54f926 100644
--- a/README.md
+++ b/README.md
@@ -53,0 +54 @@
+* [Print out user information from Git](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/api/ReadUserConfig.java)
diff --git a/src/main/java/org/dstadler/jgit/api/ReadUserConfig.java b/src/main/java/org/dstadler/jgit/api/ReadUserConfig.java
new file mode 100755
index 0000000..4a33411
--- /dev/null
+++ b/src/main/java/org/dstadler/jgit/api/ReadUserConfig.java
@@ -0,0 +1,27 @@
+package org.dstadler.jgit.api;
+
+import java.io.IOException;
+
+import org.dstadler.jgit.helper.CookbookHelper;
+import org.eclipse.jgit.lib.Config;
+import org.eclipse.jgit.lib.Repository;
+
+/**
+ * Simple snippet which shows how to retrieve the user name and email that is configured in Git.
+ */
+public class ReadUserConfig {
+
+	public static void main(String[] args) throws IOException {
+		Repository repository = CookbookHelper.openJGitCookbookRepository();
+
+		Config config = repository.getConfig();
+		String name = config.getString("user", null, "name");
+		String email = config.getString("user", null, "email");
+		if (name == null || email == null) {
+		        System.out.println("User identity is unknown!");
+		} else {
+		        System.out.println("User identity is " + name + " <" + email + ">");
+		}
+		repository.close();
+	}
+}
Diff Between 7ad52f0f27e76548fb107a68bf8948e4fa54401c ca6072823d770027a2a24fe83ad3b01069348d97diff --git a/README.md b/README.md
index 80d5a52..b817fb1 100644
--- a/README.md
+++ b/README.md
@@ -52,0 +53 @@
+* [List remotes configured for the current repository](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/api/PrintRemotes.java)
diff --git a/src/main/java/org/dstadler/jgit/api/PrintRemotes.java b/src/main/java/org/dstadler/jgit/api/PrintRemotes.java
new file mode 100755
index 0000000..1752bd5
--- /dev/null
+++ b/src/main/java/org/dstadler/jgit/api/PrintRemotes.java
@@ -0,0 +1,28 @@
+package org.dstadler.jgit.api;
+
+import java.io.IOException;
+import java.util.Set;
+
+import org.dstadler.jgit.helper.CookbookHelper;
+import org.eclipse.jgit.lib.Config;
+import org.eclipse.jgit.lib.Repository;
+
+/**
+ * Simple snippet which shows how to retrieve the list of remotes from the configuration
+ */
+public class PrintRemotes {
+
+	public static void main(String[] args) throws IOException {
+		Repository repository = CookbookHelper.openJGitCookbookRepository();
+
+		Config storedConfig = repository.getConfig();
+		Set<String> remotes = storedConfig.getSubsections("remote");
+
+		for (String remoteName : remotes) {
+			String url = storedConfig.getString("remote", remoteName, "url");
+			System.out.println(remoteName + " " + url);
+		}
+
+		repository.close();
+	}
+}
Diff Between ca6072823d770027a2a24fe83ad3b01069348d97 bddaec0dbda5a617dcff7f9acb290bbf19319420diff --git a/README.md b/README.md
index 5a89699..80d5a52 100644
--- a/README.md
+++ b/README.md
@@ -10,0 +11,14 @@
+#### Getting started
+
+##### Grab it
+
+    git clone git://github.com/centic9/jgit-cookbook
+
+##### Build it and create Eclipse project files
+
+	mvn dependency:sources eclipse:eclipse package
+
+#### Run it
+
+    Import the project into an Eclipse workspace and execute the snippets there.
+
Diff Between bddaec0dbda5a617dcff7f9acb290bbf19319420 4f05e893cf583dc9e837470ecf65ce89b6258c6bdiff --git a/pom.xml b/pom.xml
index 1ac360b..6a0539b 100644
--- a/pom.xml
+++ b/pom.xml
@@ -22 +22 @@
-      <version>2.3.1.201302201838-r</version>
+      <version>3.0.0.201306101825-r</version>
diff --git a/src/main/java/org/dstadler/jgit/CreateNewRepository.java b/src/main/java/org/dstadler/jgit/CreateNewRepository.java
index b808199..5f00b7c 100644
--- a/src/main/java/org/dstadler/jgit/CreateNewRepository.java
+++ b/src/main/java/org/dstadler/jgit/CreateNewRepository.java
@@ -8 +8 @@
-import org.eclipse.jgit.storage.file.FileRepository;
+import org.eclipse.jgit.storage.file.FileRepositoryBuilder;
@@ -22 +22 @@
-        Repository repository = new FileRepository(new File(localPath, ".git"));
+        Repository repository = FileRepositoryBuilder.create(new File(localPath, ".git"));
diff --git a/src/main/java/org/dstadler/jgit/helper/CookbookHelper.java b/src/main/java/org/dstadler/jgit/helper/CookbookHelper.java
index 951c93b..f8926e0 100644
--- a/src/main/java/org/dstadler/jgit/helper/CookbookHelper.java
+++ b/src/main/java/org/dstadler/jgit/helper/CookbookHelper.java
@@ -7 +6,0 @@
-import org.eclipse.jgit.storage.file.FileRepository;
@@ -28 +27 @@
-        Repository repository = new FileRepository(localPath + "/.git");
+        Repository repository = FileRepositoryBuilder.create(new File(localPath, ".git"));
diff --git a/src/main/java/org/dstadler/jgit/porcelain/InitRepository.java b/src/main/java/org/dstadler/jgit/porcelain/InitRepository.java
index 5f4eaf8..efe214d 100755
--- a/src/main/java/org/dstadler/jgit/porcelain/InitRepository.java
+++ b/src/main/java/org/dstadler/jgit/porcelain/InitRepository.java
@@ -9 +9 @@
-import org.eclipse.jgit.storage.file.FileRepository;
+import org.eclipse.jgit.storage.file.FileRepositoryBuilder;
@@ -29 +29 @@
-		Repository repository = new FileRepository(dir.getAbsolutePath() + "/.git");
+		Repository repository = FileRepositoryBuilder.create(new File(dir.getAbsolutePath(), ".git"));
diff --git a/src/main/java/org/dstadler/jgit/unfinished/ListRefLog.java b/src/main/java/org/dstadler/jgit/unfinished/ListRefLog.java
index 25775b4..5304d2e 100755
--- a/src/main/java/org/dstadler/jgit/unfinished/ListRefLog.java
+++ b/src/main/java/org/dstadler/jgit/unfinished/ListRefLog.java
@@ -12,0 +13 @@
+import org.eclipse.jgit.lib.ReflogEntry;
@@ -14 +14,0 @@
-import org.eclipse.jgit.storage.file.ReflogEntry;
Diff Between 4f05e893cf583dc9e837470ecf65ce89b6258c6b 6bd0faf290078b3e43dd6c6ee46fc4284430d634diff --git a/README.md b/README.md
index 6402614..5a89699 100644
--- a/README.md
+++ b/README.md
@@ -18,0 +19 @@
+* [Initialize a new repository](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/porcelain/InitRepository.java)
@@ -23,0 +25 @@
+* [Create and delete branches](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/porcelain/CreateAndDeleteBranch.java)
diff --git a/src/main/java/org/dstadler/jgit/api/GetRevCommitFromObjectId.java b/src/main/java/org/dstadler/jgit/api/GetRevCommitFromObjectId.java
index 7e959e7..f76380a 100644
--- a/src/main/java/org/dstadler/jgit/api/GetRevCommitFromObjectId.java
+++ b/src/main/java/org/dstadler/jgit/api/GetRevCommitFromObjectId.java
@@ -18,0 +19 @@
+		System.out.println("Found head: " + head);
diff --git a/src/main/java/org/dstadler/jgit/porcelain/AddFile.java b/src/main/java/org/dstadler/jgit/porcelain/AddFile.java
index 7e766d1..8484fcf 100644
--- a/src/main/java/org/dstadler/jgit/porcelain/AddFile.java
+++ b/src/main/java/org/dstadler/jgit/porcelain/AddFile.java
@@ -14 +14 @@
- * Simple snippet which shows how to list all Tags
+ * Simple snippet which shows how to add a file to the index
diff --git a/src/main/java/org/dstadler/jgit/porcelain/CreateAndDeleteBranch.java b/src/main/java/org/dstadler/jgit/porcelain/CreateAndDeleteBranch.java
new file mode 100755
index 0000000..49d5424
--- /dev/null
+++ b/src/main/java/org/dstadler/jgit/porcelain/CreateAndDeleteBranch.java
@@ -0,0 +1,53 @@
+package org.dstadler.jgit.porcelain;
+
+import java.io.IOException;
+import java.util.List;
+
+import org.dstadler.jgit.helper.CookbookHelper;
+import org.eclipse.jgit.api.Git;
+import org.eclipse.jgit.api.errors.GitAPIException;
+import org.eclipse.jgit.lib.Ref;
+import org.eclipse.jgit.lib.Repository;
+
+
+
+/**
+ * Simple snippet which shows how to create and delete branches
+ *
+ * @author dominik.stadler@gmx.at
+ */
+public class CreateAndDeleteBranch {
+
+	public static void main(String[] args) throws IOException, GitAPIException {
+		// prepare a new test-repository
+		Repository repository = CookbookHelper.openJGitCookbookRepository();
+		Git git = new Git(repository);
+
+		List<Ref> call = new Git(repository).branchList().call();
+		for(Ref ref : call) {
+			System.out.println("Branch-Before: " + ref + " " + ref.getName() + " " + ref.getObjectId().getName());
+		}
+
+        // run the add-call
+        git.branchCreate()
+			.setName("testbranch")
+			.call();
+
+		call = new Git(repository).branchList().call();
+		for(Ref ref : call) {
+			System.out.println("Branch-Created: " + ref + " " + ref.getName() + " " + ref.getObjectId().getName());
+		}
+
+		// run the delete-call
+		git.branchDelete()
+			.setBranchNames("testbranch")
+			.call();
+
+		call = new Git(repository).branchList().call();
+		for(Ref ref : call) {
+			System.out.println("Branch-After: " + ref + " " + ref.getName() + " " + ref.getObjectId().getName());
+		}
+
+		repository.close();
+	}
+}
diff --git a/src/main/java/org/dstadler/jgit/porcelain/InitRepository.java b/src/main/java/org/dstadler/jgit/porcelain/InitRepository.java
new file mode 100755
index 0000000..5f4eaf8
--- /dev/null
+++ b/src/main/java/org/dstadler/jgit/porcelain/InitRepository.java
@@ -0,0 +1,35 @@
+package org.dstadler.jgit.porcelain;
+
+import java.io.File;
+import java.io.IOException;
+
+import org.eclipse.jgit.api.Git;
+import org.eclipse.jgit.api.errors.GitAPIException;
+import org.eclipse.jgit.lib.Repository;
+import org.eclipse.jgit.storage.file.FileRepository;
+
+
+
+/**
+ * Simple snippet which shows how to initialize a new repository
+ *
+ * @author dominik.stadler@gmx.at
+ */
+public class InitRepository {
+
+	public static void main(String[] args) throws IOException, GitAPIException {
+        // run the init-call
+        File dir = File.createTempFile("gitinit", ".test");
+        dir.delete();
+
+		Git.init()
+			.setDirectory(dir)
+           .call();
+
+		Repository repository = new FileRepository(dir.getAbsolutePath() + "/.git");
+
+        System.out.println("Created a new repository at " + repository.getDirectory());
+
+		repository.close();
+	}
+}
diff --git a/src/main/java/org/dstadler/jgit/porcelain/ListBranches.java b/src/main/java/org/dstadler/jgit/porcelain/ListBranches.java
index e847ebd..eb4d7a6 100644
--- a/src/main/java/org/dstadler/jgit/porcelain/ListBranches.java
+++ b/src/main/java/org/dstadler/jgit/porcelain/ListBranches.java
@@ -25,2 +25,2 @@
-		for(Ref rev : call) {
-			System.out.println("Branch: " + rev + " " + rev.getName() + " " + rev.getObjectId().getName());
+		for(Ref ref : call) {
+			System.out.println("Branch: " + ref + " " + ref.getName() + " " + ref.getObjectId().getName());
diff --git a/src/main/java/org/dstadler/jgit/porcelain/ListTags.java b/src/main/java/org/dstadler/jgit/porcelain/ListTags.java
index e7c694c..c3de7ab 100644
--- a/src/main/java/org/dstadler/jgit/porcelain/ListTags.java
+++ b/src/main/java/org/dstadler/jgit/porcelain/ListTags.java
@@ -25,2 +25,2 @@
-		for(Ref rev : call) {
-			System.out.println("Tag: " + rev + " " + rev.getName() + " " + rev.getObjectId().getName());
+		for(Ref ref : call) {
+			System.out.println("Tag: " + ref + " " + ref.getName() + " " + ref.getObjectId().getName());
diff --git a/src/main/java/org/dstadler/jgit/unfinished/ListRefLog.java b/src/main/java/org/dstadler/jgit/unfinished/ListRefLog.java
new file mode 100755
index 0000000..25775b4
--- /dev/null
+++ b/src/main/java/org/dstadler/jgit/unfinished/ListRefLog.java
@@ -0,0 +1,57 @@
+package org.dstadler.jgit.unfinished;
+
+import java.io.IOException;
+import java.util.Collection;
+import java.util.Iterator;
+import java.util.List;
+
+import org.dstadler.jgit.helper.CookbookHelper;
+import org.eclipse.jgit.api.Git;
+import org.eclipse.jgit.api.errors.GitAPIException;
+import org.eclipse.jgit.api.errors.InvalidRefNameException;
+import org.eclipse.jgit.lib.Ref;
+import org.eclipse.jgit.lib.Repository;
+import org.eclipse.jgit.storage.file.ReflogEntry;
+
+
+
+/**
+ * Simple snippet which shows how to list all Tags
+ *
+ * @author dominik.stadler@gmx.at
+ */
+public class ListRefLog {
+
+	public static void main(String[] args) throws IOException, GitAPIException {
+		Repository repository = CookbookHelper.openJGitCookbookRepository();
+
+		List<Ref> refs = new Git(repository).branchList().call();
+		for(Ref ref : refs) {
+			System.out.println("Branch: " + ref + " " + ref.getName() + " " + ref.getObjectId().getName());
+
+			listReflog(repository, ref);
+		}
+
+		List<Ref> call = new Git(repository).tagList().call();
+		for(Ref ref : call) {
+			System.out.println("Tag: " + ref + " " + ref.getName() + " " + ref.getObjectId().getName());
+
+			listReflog(repository, ref);
+		}
+
+		repository.close();
+	}
+
+	private static void listReflog(Repository repository, Ref ref) throws GitAPIException, InvalidRefNameException, IOException {
+		/*Ref head = repository.getRef(ref.getName());
+		RevWalk walk = new RevWalk(repository);
+		RevCommit commit = walk.parseCommit(head.getObjectId());*/
+
+		Collection<ReflogEntry> call = new Git(repository).reflog().setRef(ref.getName()).call();
+		Iterator<ReflogEntry> it = call.iterator();
+		while(it.hasNext()) {
+			ReflogEntry reflog = it.next();
+			System.out.println("Reflog: " + reflog);
+		}
+	}
+}
diff --git a/src/main/java/org/dstadler/jgit/unfinished/ShowLog.java b/src/main/java/org/dstadler/jgit/unfinished/ShowLog.java
new file mode 100755
index 0000000..da1dd09
--- /dev/null
+++ b/src/main/java/org/dstadler/jgit/unfinished/ShowLog.java
@@ -0,0 +1,32 @@
+package org.dstadler.jgit.unfinished;
+
+import java.io.IOException;
+
+import org.dstadler.jgit.helper.CookbookHelper;
+import org.eclipse.jgit.api.Git;
+import org.eclipse.jgit.api.errors.GitAPIException;
+import org.eclipse.jgit.lib.Repository;
+import org.eclipse.jgit.revwalk.RevCommit;
+
+
+
+/**
+ * Simple snippet which shows how to list log entries
+ *
+ * @author dominik.stadler@gmx.at
+ */
+public class ShowLog {
+
+	public static void main(String[] args) throws IOException, GitAPIException {
+		Repository repository = CookbookHelper.openJGitCookbookRepository();
+
+		Iterable<RevCommit> logs = new Git(repository).log()
+			.all()
+			.call();
+		for(RevCommit rev : logs) {
+			System.out.println("Commit: " + rev + " " + rev.getName() + " " + rev.getId().getName());
+		}
+
+		repository.close();
+	}
+}
Diff Between 6bd0faf290078b3e43dd6c6ee46fc4284430d634 95b243037e90117c1a5718edd2cb5057f99ab09bdiff --git a/pom.xml b/pom.xml
old mode 100755
new mode 100644
diff --git a/src/main/java/org/dstadler/jgit/CreateNewRepository.java b/src/main/java/org/dstadler/jgit/CreateNewRepository.java
old mode 100755
new mode 100644
diff --git a/src/main/java/org/dstadler/jgit/OpenRepository.java b/src/main/java/org/dstadler/jgit/OpenRepository.java
old mode 100755
new mode 100644
diff --git a/src/main/java/org/dstadler/jgit/api/GetRefFromName.java b/src/main/java/org/dstadler/jgit/api/GetRefFromName.java
old mode 100755
new mode 100644
diff --git a/src/main/java/org/dstadler/jgit/api/GetRevCommitFromObjectId.java b/src/main/java/org/dstadler/jgit/api/GetRevCommitFromObjectId.java
old mode 100755
new mode 100644
diff --git a/src/main/java/org/dstadler/jgit/api/GetRevTreeFromObjectId.java b/src/main/java/org/dstadler/jgit/api/GetRevTreeFromObjectId.java
old mode 100755
new mode 100644
diff --git a/src/main/java/org/dstadler/jgit/api/ReadBlobContents.java b/src/main/java/org/dstadler/jgit/api/ReadBlobContents.java
old mode 100755
new mode 100644
diff --git a/src/main/java/org/dstadler/jgit/api/ReadFileFromCommit.java b/src/main/java/org/dstadler/jgit/api/ReadFileFromCommit.java
index 8f39bb3..4991745 100644
--- a/src/main/java/org/dstadler/jgit/api/ReadFileFromCommit.java
+++ b/src/main/java/org/dstadler/jgit/api/ReadFileFromCommit.java
@@ -1,55 +1,55 @@
-package org.dstadler.jgit.api;
-
-import java.io.IOException;
-
-import org.dstadler.jgit.helper.CookbookHelper;
-import org.eclipse.jgit.api.errors.GitAPIException;
-import org.eclipse.jgit.lib.Constants;
-import org.eclipse.jgit.lib.ObjectId;
-import org.eclipse.jgit.lib.ObjectLoader;
-import org.eclipse.jgit.lib.Repository;
-import org.eclipse.jgit.revwalk.RevCommit;
-import org.eclipse.jgit.revwalk.RevTree;
-import org.eclipse.jgit.revwalk.RevWalk;
-import org.eclipse.jgit.treewalk.TreeWalk;
-import org.eclipse.jgit.treewalk.filter.PathFilter;
-
-/**
- * Snippet which shows how to use RevWalk and TreeWalk to read the contents 
- * of a specific file from a specific commit.
- *
- * @author dominik.stadler@gmx.at
- */
-public class ReadFileFromCommit {
-
-	public static void main(String[] args) throws IOException, GitAPIException {
-		Repository repository = CookbookHelper.openJGitCookbookRepository();
-
-		// find the HEAD
-		ObjectId lastCommitId = repository.resolve(Constants.HEAD);
-
-		// a RevWalk allows to walk over commits based on some filtering that is defined
-		RevWalk revWalk = new RevWalk(repository);
-		RevCommit commit = revWalk.parseCommit(lastCommitId);
-		// and using commit's tree find the path
-		RevTree tree = commit.getTree();
-		System.out.println("Having tree: " + tree);
-
-		// now try to find a specific file
-		TreeWalk treeWalk = new TreeWalk(repository);
-		treeWalk.addTree(tree);
-		treeWalk.setRecursive(true);
-		treeWalk.setFilter(PathFilter.create("README.md"));
-		if (!treeWalk.next()) {
-		  throw new IllegalStateException("Did not find expected file 'README.md'");
-		}
-
-		ObjectId objectId = treeWalk.getObjectId(0);
-		ObjectLoader loader = repository.open(objectId);
-
-		// and then one can the loader to read the file
-		loader.copyTo(System.out);
-		
-		repository.close();
-	}
-}
+package org.dstadler.jgit.api;
+
+import java.io.IOException;
+
+import org.dstadler.jgit.helper.CookbookHelper;
+import org.eclipse.jgit.api.errors.GitAPIException;
+import org.eclipse.jgit.lib.Constants;
+import org.eclipse.jgit.lib.ObjectId;
+import org.eclipse.jgit.lib.ObjectLoader;
+import org.eclipse.jgit.lib.Repository;
+import org.eclipse.jgit.revwalk.RevCommit;
+import org.eclipse.jgit.revwalk.RevTree;
+import org.eclipse.jgit.revwalk.RevWalk;
+import org.eclipse.jgit.treewalk.TreeWalk;
+import org.eclipse.jgit.treewalk.filter.PathFilter;
+
+/**
+ * Snippet which shows how to use RevWalk and TreeWalk to read the contents 
+ * of a specific file from a specific commit.
+ *
+ * @author dominik.stadler@gmx.at
+ */
+public class ReadFileFromCommit {
+
+	public static void main(String[] args) throws IOException, GitAPIException {
+		Repository repository = CookbookHelper.openJGitCookbookRepository();
+
+		// find the HEAD
+		ObjectId lastCommitId = repository.resolve(Constants.HEAD);
+
+		// a RevWalk allows to walk over commits based on some filtering that is defined
+		RevWalk revWalk = new RevWalk(repository);
+		RevCommit commit = revWalk.parseCommit(lastCommitId);
+		// and using commit's tree find the path
+		RevTree tree = commit.getTree();
+		System.out.println("Having tree: " + tree);
+
+		// now try to find a specific file
+		TreeWalk treeWalk = new TreeWalk(repository);
+		treeWalk.addTree(tree);
+		treeWalk.setRecursive(true);
+		treeWalk.setFilter(PathFilter.create("README.md"));
+		if (!treeWalk.next()) {
+		  throw new IllegalStateException("Did not find expected file 'README.md'");
+		}
+
+		ObjectId objectId = treeWalk.getObjectId(0);
+		ObjectLoader loader = repository.open(objectId);
+
+		// and then one can the loader to read the file
+		loader.copyTo(System.out);
+		
+		repository.close();
+	}
+}
diff --git a/src/main/java/org/dstadler/jgit/api/ReadTagFromName.java b/src/main/java/org/dstadler/jgit/api/ReadTagFromName.java
old mode 100755
new mode 100644
diff --git a/src/main/java/org/dstadler/jgit/api/ResolveRef.java b/src/main/java/org/dstadler/jgit/api/ResolveRef.java
old mode 100755
new mode 100644
diff --git a/src/main/java/org/dstadler/jgit/api/WalkRev.java b/src/main/java/org/dstadler/jgit/api/WalkRev.java
old mode 100755
new mode 100644
diff --git a/src/main/java/org/dstadler/jgit/helper/CookbookHelper.java b/src/main/java/org/dstadler/jgit/helper/CookbookHelper.java
old mode 100755
new mode 100644
diff --git a/src/main/java/org/dstadler/jgit/porcelain/AddFile.java b/src/main/java/org/dstadler/jgit/porcelain/AddFile.java
old mode 100755
new mode 100644
diff --git a/src/main/java/org/dstadler/jgit/porcelain/CloneRemoteRepository.java b/src/main/java/org/dstadler/jgit/porcelain/CloneRemoteRepository.java
old mode 100755
new mode 100644
diff --git a/src/main/java/org/dstadler/jgit/porcelain/CommitFile.java b/src/main/java/org/dstadler/jgit/porcelain/CommitFile.java
old mode 100755
new mode 100644
diff --git a/src/main/java/org/dstadler/jgit/porcelain/ListBranches.java b/src/main/java/org/dstadler/jgit/porcelain/ListBranches.java
index 3dfe805..e847ebd 100644
--- a/src/main/java/org/dstadler/jgit/porcelain/ListBranches.java
+++ b/src/main/java/org/dstadler/jgit/porcelain/ListBranches.java
@@ -1,31 +1,31 @@
-package org.dstadler.jgit.porcelain;
-
-import java.io.IOException;
-import java.util.List;
-
-import org.dstadler.jgit.helper.CookbookHelper;
-import org.eclipse.jgit.api.Git;
-import org.eclipse.jgit.api.errors.GitAPIException;
-import org.eclipse.jgit.lib.Ref;
-import org.eclipse.jgit.lib.Repository;
-
-
-
-/**
- * Simple snippet which shows how to list all Branches in a Git repository
- *
- * @author dominik.stadler@gmx.at
- */
-public class ListBranches {
-
-	public static void main(String[] args) throws IOException, GitAPIException {
-		Repository repository = CookbookHelper.openJGitCookbookRepository();
-
-		List<Ref> call = new Git(repository).branchList().call();
-		for(Ref rev : call) {
-			System.out.println("Branch: " + rev + " " + rev.getName() + " " + rev.getObjectId().getName());
-		}
-
-		repository.close();
-	}
-}
+package org.dstadler.jgit.porcelain;
+
+import java.io.IOException;
+import java.util.List;
+
+import org.dstadler.jgit.helper.CookbookHelper;
+import org.eclipse.jgit.api.Git;
+import org.eclipse.jgit.api.errors.GitAPIException;
+import org.eclipse.jgit.lib.Ref;
+import org.eclipse.jgit.lib.Repository;
+
+
+
+/**
+ * Simple snippet which shows how to list all Branches in a Git repository
+ *
+ * @author dominik.stadler@gmx.at
+ */
+public class ListBranches {
+
+	public static void main(String[] args) throws IOException, GitAPIException {
+		Repository repository = CookbookHelper.openJGitCookbookRepository();
+
+		List<Ref> call = new Git(repository).branchList().call();
+		for(Ref rev : call) {
+			System.out.println("Branch: " + rev + " " + rev.getName() + " " + rev.getObjectId().getName());
+		}
+
+		repository.close();
+	}
+}
diff --git a/src/main/java/org/dstadler/jgit/porcelain/ListTags.java b/src/main/java/org/dstadler/jgit/porcelain/ListTags.java
old mode 100755
new mode 100644
diff --git a/src/main/java/org/dstadler/jgit/porcelain/WalkAllCommits.java b/src/main/java/org/dstadler/jgit/porcelain/WalkAllCommits.java
index d28febb..b703f00 100644
--- a/src/main/java/org/dstadler/jgit/porcelain/WalkAllCommits.java
+++ b/src/main/java/org/dstadler/jgit/porcelain/WalkAllCommits.java
@@ -1,33 +1,33 @@
-package org.dstadler.jgit.porcelain;
-
-import java.io.IOException;
-
-import org.dstadler.jgit.helper.CookbookHelper;
-import org.eclipse.jgit.api.Git;
-import org.eclipse.jgit.api.errors.GitAPIException;
-import org.eclipse.jgit.api.errors.InvalidRefNameException;
-import org.eclipse.jgit.lib.Repository;
-import org.eclipse.jgit.revwalk.RevCommit;
-
-
-
-/**
- * Simple snippet which shows how to use RevWalk to quickly iterate over all available commits, 
- * not just the ones on the current branch 
- */
-public class WalkAllCommits {
-	public static void main(String[] args) throws IOException, InvalidRefNameException, GitAPIException {
-		Repository repository = CookbookHelper.openJGitCookbookRepository();
-
-		Git git = new Git(repository);
-		Iterable<RevCommit> commits = git.log().all().call();
-		int count = 0;
-		for (RevCommit commit : commits) {
-			System.out.println("LogCommit: " + commit);
-			count++;
-		}
-		System.out.println(count);
-
-		repository.close();
-	}
-}
+package org.dstadler.jgit.porcelain;
+
+import java.io.IOException;
+
+import org.dstadler.jgit.helper.CookbookHelper;
+import org.eclipse.jgit.api.Git;
+import org.eclipse.jgit.api.errors.GitAPIException;
+import org.eclipse.jgit.api.errors.InvalidRefNameException;
+import org.eclipse.jgit.lib.Repository;
+import org.eclipse.jgit.revwalk.RevCommit;
+
+
+
+/**
+ * Simple snippet which shows how to use RevWalk to quickly iterate over all available commits, 
+ * not just the ones on the current branch 
+ */
+public class WalkAllCommits {
+	public static void main(String[] args) throws IOException, InvalidRefNameException, GitAPIException {
+		Repository repository = CookbookHelper.openJGitCookbookRepository();
+
+		Git git = new Git(repository);
+		Iterable<RevCommit> commits = git.log().all().call();
+		int count = 0;
+		for (RevCommit commit : commits) {
+			System.out.println("LogCommit: " + commit);
+			count++;
+		}
+		System.out.println(count);
+
+		repository.close();
+	}
+}
diff --git a/src/main/java/org/dstadler/jgit/unfinished/BrowseTree.java b/src/main/java/org/dstadler/jgit/unfinished/BrowseTree.java
index d87bafb..ba70921 100644
--- a/src/main/java/org/dstadler/jgit/unfinished/BrowseTree.java
+++ b/src/main/java/org/dstadler/jgit/unfinished/BrowseTree.java
@@ -1,44 +1,44 @@
-package org.dstadler.jgit.unfinished;
-
-import java.io.IOException;
-
-import org.dstadler.jgit.helper.CookbookHelper;
-import org.eclipse.jgit.api.errors.GitAPIException;
-import org.eclipse.jgit.lib.Constants;
-import org.eclipse.jgit.lib.ObjectId;
-import org.eclipse.jgit.lib.ObjectLoader;
-import org.eclipse.jgit.lib.Repository;
-import org.eclipse.jgit.revwalk.RevWalk;
-import org.eclipse.jgit.treewalk.TreeWalk;
-
-/**
- * Simple snippet which shows how to use RevWalk to iterate over items in a file-tree
- *
- * @author dominik.stadler@gmx.at
- */
-public class BrowseTree {
-
-	public static void main(String[] args) throws IOException, GitAPIException {
-		Repository repository = CookbookHelper.openJGitCookbookRepository();
-
-		ObjectId revId = repository.resolve(Constants.HEAD);
-		TreeWalk treeWalk = new TreeWalk(repository);
-
-		treeWalk.addTree(new RevWalk(repository).parseTree(revId));
-
-		while (treeWalk.next())
-		{
-			System.out.println("---------------------------");
-			System.out.append("name: ").println(treeWalk.getNameString());
-			System.out.append("path: ").println(treeWalk.getPathString());
-
-			ObjectLoader loader = repository.open(treeWalk.getObjectId(0));
-
-			System.out.append("directory: ").println(loader.getType()
-					== Constants.OBJ_TREE);
-			System.out.append("size: ").println(loader.getSize());
-		}
-
-		repository.close();
-	}
-}
+package org.dstadler.jgit.unfinished;
+
+import java.io.IOException;
+
+import org.dstadler.jgit.helper.CookbookHelper;
+import org.eclipse.jgit.api.errors.GitAPIException;
+import org.eclipse.jgit.lib.Constants;
+import org.eclipse.jgit.lib.ObjectId;
+import org.eclipse.jgit.lib.ObjectLoader;
+import org.eclipse.jgit.lib.Repository;
+import org.eclipse.jgit.revwalk.RevWalk;
+import org.eclipse.jgit.treewalk.TreeWalk;
+
+/**
+ * Simple snippet which shows how to use RevWalk to iterate over items in a file-tree
+ *
+ * @author dominik.stadler@gmx.at
+ */
+public class BrowseTree {
+
+	public static void main(String[] args) throws IOException, GitAPIException {
+		Repository repository = CookbookHelper.openJGitCookbookRepository();
+
+		ObjectId revId = repository.resolve(Constants.HEAD);
+		TreeWalk treeWalk = new TreeWalk(repository);
+
+		treeWalk.addTree(new RevWalk(repository).parseTree(revId));
+
+		while (treeWalk.next())
+		{
+			System.out.println("---------------------------");
+			System.out.append("name: ").println(treeWalk.getNameString());
+			System.out.append("path: ").println(treeWalk.getPathString());
+
+			ObjectLoader loader = repository.open(treeWalk.getObjectId(0));
+
+			System.out.append("directory: ").println(loader.getType()
+					== Constants.OBJ_TREE);
+			System.out.append("size: ").println(loader.getSize());
+		}
+
+		repository.close();
+	}
+}
diff --git a/src/main/java/org/dstadler/jgit/unfinished/PullFromRemoteRepository.java b/src/main/java/org/dstadler/jgit/unfinished/PullFromRemoteRepository.java
old mode 100755
new mode 100644
diff --git a/src/main/java/org/dstadler/jgit/unfinished/PushToRemoteRepository.java b/src/main/java/org/dstadler/jgit/unfinished/PushToRemoteRepository.java
old mode 100755
new mode 100644
diff --git a/src/main/java/org/dstadler/jgit/unfinished/TrackMaster.java b/src/main/java/org/dstadler/jgit/unfinished/TrackMaster.java
old mode 100755
new mode 100644
diff --git a/src/main/java/org/dstadler/jgit/unfinished/WalkTreeNonRecursive.java b/src/main/java/org/dstadler/jgit/unfinished/WalkTreeNonRecursive.java
index a24fc34..7a65ea7 100644
--- a/src/main/java/org/dstadler/jgit/unfinished/WalkTreeNonRecursive.java
+++ b/src/main/java/org/dstadler/jgit/unfinished/WalkTreeNonRecursive.java
@@ -1,46 +1,46 @@
-package org.dstadler.jgit.unfinished;
-
-import java.io.IOException;
-
-import org.dstadler.jgit.helper.CookbookHelper;
-import org.eclipse.jgit.api.errors.GitAPIException;
-import org.eclipse.jgit.lib.Ref;
-import org.eclipse.jgit.lib.Repository;
-import org.eclipse.jgit.revwalk.RevCommit;
-import org.eclipse.jgit.revwalk.RevTree;
-import org.eclipse.jgit.revwalk.RevWalk;
-import org.eclipse.jgit.treewalk.TreeWalk;
-
-/**
- * Simple snippet which shows how to use RevWalk to iterate over items in a file-tree
- *
- * @author dominik.stadler@gmx.at
- */
-public class WalkTreeNonRecursive {
-
-	public static void main(String[] args) throws IOException, GitAPIException {
-		Repository repository = CookbookHelper.openJGitCookbookRepository();
-
-		Ref head = repository.getRef("HEAD");
-
-		// a RevWalk allows to walk over commits based on some filtering that is defined
-		RevWalk walk = new RevWalk(repository);
-
-		RevCommit commit = walk.parseCommit(head.getObjectId());
-		RevTree tree = commit.getTree();
-		System.out.println("Having tree: " + tree);
-
-		// now use a TreeWalk to iterate over all files in the Tree recursively
-		// you can set Filters to narrow down the results if needed
-		TreeWalk treeWalk = new TreeWalk(repository);
-		treeWalk.addTree(tree);
-		treeWalk.setRecursive(false);
-		while(treeWalk.next()) {
-			System.out.println("found: " + treeWalk.getPathString());
-		}
-		
-		
-
-		repository.close();
-	}
-}
+package org.dstadler.jgit.unfinished;
+
+import java.io.IOException;
+
+import org.dstadler.jgit.helper.CookbookHelper;
+import org.eclipse.jgit.api.errors.GitAPIException;
+import org.eclipse.jgit.lib.Ref;
+import org.eclipse.jgit.lib.Repository;
+import org.eclipse.jgit.revwalk.RevCommit;
+import org.eclipse.jgit.revwalk.RevTree;
+import org.eclipse.jgit.revwalk.RevWalk;
+import org.eclipse.jgit.treewalk.TreeWalk;
+
+/**
+ * Simple snippet which shows how to use RevWalk to iterate over items in a file-tree
+ *
+ * @author dominik.stadler@gmx.at
+ */
+public class WalkTreeNonRecursive {
+
+	public static void main(String[] args) throws IOException, GitAPIException {
+		Repository repository = CookbookHelper.openJGitCookbookRepository();
+
+		Ref head = repository.getRef("HEAD");
+
+		// a RevWalk allows to walk over commits based on some filtering that is defined
+		RevWalk walk = new RevWalk(repository);
+
+		RevCommit commit = walk.parseCommit(head.getObjectId());
+		RevTree tree = commit.getTree();
+		System.out.println("Having tree: " + tree);
+
+		// now use a TreeWalk to iterate over all files in the Tree recursively
+		// you can set Filters to narrow down the results if needed
+		TreeWalk treeWalk = new TreeWalk(repository);
+		treeWalk.addTree(tree);
+		treeWalk.setRecursive(false);
+		while(treeWalk.next()) {
+			System.out.println("found: " + treeWalk.getPathString());
+		}
+		
+		
+
+		repository.close();
+	}
+}
diff --git a/src/main/java/org/dstadler/jgit/unfinished/WalkTreeRecursive.java b/src/main/java/org/dstadler/jgit/unfinished/WalkTreeRecursive.java
old mode 100755
new mode 100644
Diff Between 95b243037e90117c1a5718edd2cb5057f99ab09b ada52b53122eef6545f5fd225d46f697cde91867diff --git a/README.md b/README.md
index 072e369..6402614 100644
--- a/README.md
+++ b/README.md
@@ -35,0 +36 @@
+* [Read contents of a specific file from a specific commit](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/api/ReadFileFromCommit.java)
diff --git a/src/main/java/org/dstadler/jgit/api/ReadFileFromCommit.java b/src/main/java/org/dstadler/jgit/api/ReadFileFromCommit.java
new file mode 100644
index 0000000..8f39bb3
--- /dev/null
+++ b/src/main/java/org/dstadler/jgit/api/ReadFileFromCommit.java
@@ -0,0 +1,55 @@
+package org.dstadler.jgit.api;
+
+import java.io.IOException;
+
+import org.dstadler.jgit.helper.CookbookHelper;
+import org.eclipse.jgit.api.errors.GitAPIException;
+import org.eclipse.jgit.lib.Constants;
+import org.eclipse.jgit.lib.ObjectId;
+import org.eclipse.jgit.lib.ObjectLoader;
+import org.eclipse.jgit.lib.Repository;
+import org.eclipse.jgit.revwalk.RevCommit;
+import org.eclipse.jgit.revwalk.RevTree;
+import org.eclipse.jgit.revwalk.RevWalk;
+import org.eclipse.jgit.treewalk.TreeWalk;
+import org.eclipse.jgit.treewalk.filter.PathFilter;
+
+/**
+ * Snippet which shows how to use RevWalk and TreeWalk to read the contents 
+ * of a specific file from a specific commit.
+ *
+ * @author dominik.stadler@gmx.at
+ */
+public class ReadFileFromCommit {
+
+	public static void main(String[] args) throws IOException, GitAPIException {
+		Repository repository = CookbookHelper.openJGitCookbookRepository();
+
+		// find the HEAD
+		ObjectId lastCommitId = repository.resolve(Constants.HEAD);
+
+		// a RevWalk allows to walk over commits based on some filtering that is defined
+		RevWalk revWalk = new RevWalk(repository);
+		RevCommit commit = revWalk.parseCommit(lastCommitId);
+		// and using commit's tree find the path
+		RevTree tree = commit.getTree();
+		System.out.println("Having tree: " + tree);
+
+		// now try to find a specific file
+		TreeWalk treeWalk = new TreeWalk(repository);
+		treeWalk.addTree(tree);
+		treeWalk.setRecursive(true);
+		treeWalk.setFilter(PathFilter.create("README.md"));
+		if (!treeWalk.next()) {
+		  throw new IllegalStateException("Did not find expected file 'README.md'");
+		}
+
+		ObjectId objectId = treeWalk.getObjectId(0);
+		ObjectLoader loader = repository.open(objectId);
+
+		// and then one can the loader to read the file
+		loader.copyTo(System.out);
+		
+		repository.close();
+	}
+}
diff --git a/src/main/java/org/dstadler/jgit/porcelain/ListTags.java b/src/main/java/org/dstadler/jgit/porcelain/ListTags.java
index cb05d7b..e7c694c 100755
--- a/src/main/java/org/dstadler/jgit/porcelain/ListTags.java
+++ b/src/main/java/org/dstadler/jgit/porcelain/ListTags.java
@@ -26 +26 @@
-			System.out.println("Tag: " + rev);
+			System.out.println("Tag: " + rev + " " + rev.getName() + " " + rev.getObjectId().getName());
diff --git a/src/main/java/org/dstadler/jgit/unfinished/BrowseTree.java b/src/main/java/org/dstadler/jgit/unfinished/BrowseTree.java
new file mode 100644
index 0000000..d87bafb
--- /dev/null
+++ b/src/main/java/org/dstadler/jgit/unfinished/BrowseTree.java
@@ -0,0 +1,44 @@
+package org.dstadler.jgit.unfinished;
+
+import java.io.IOException;
+
+import org.dstadler.jgit.helper.CookbookHelper;
+import org.eclipse.jgit.api.errors.GitAPIException;
+import org.eclipse.jgit.lib.Constants;
+import org.eclipse.jgit.lib.ObjectId;
+import org.eclipse.jgit.lib.ObjectLoader;
+import org.eclipse.jgit.lib.Repository;
+import org.eclipse.jgit.revwalk.RevWalk;
+import org.eclipse.jgit.treewalk.TreeWalk;
+
+/**
+ * Simple snippet which shows how to use RevWalk to iterate over items in a file-tree
+ *
+ * @author dominik.stadler@gmx.at
+ */
+public class BrowseTree {
+
+	public static void main(String[] args) throws IOException, GitAPIException {
+		Repository repository = CookbookHelper.openJGitCookbookRepository();
+
+		ObjectId revId = repository.resolve(Constants.HEAD);
+		TreeWalk treeWalk = new TreeWalk(repository);
+
+		treeWalk.addTree(new RevWalk(repository).parseTree(revId));
+
+		while (treeWalk.next())
+		{
+			System.out.println("---------------------------");
+			System.out.append("name: ").println(treeWalk.getNameString());
+			System.out.append("path: ").println(treeWalk.getPathString());
+
+			ObjectLoader loader = repository.open(treeWalk.getObjectId(0));
+
+			System.out.append("directory: ").println(loader.getType()
+					== Constants.OBJ_TREE);
+			System.out.append("size: ").println(loader.getSize());
+		}
+
+		repository.close();
+	}
+}
diff --git a/src/main/java/org/dstadler/jgit/unfinished/WalkTree.java b/src/main/java/org/dstadler/jgit/unfinished/WalkTree.java
deleted file mode 100755
index 8a2f9aa..0000000
--- a/src/main/java/org/dstadler/jgit/unfinished/WalkTree.java
+++ /dev/null
@@ -1,36 +0,0 @@
-package org.dstadler.jgit.unfinished;
-
-import java.io.IOException;
-
-import org.dstadler.jgit.helper.CookbookHelper;
-import org.eclipse.jgit.api.errors.GitAPIException;
-import org.eclipse.jgit.lib.Ref;
-import org.eclipse.jgit.lib.Repository;
-import org.eclipse.jgit.revwalk.RevCommit;
-import org.eclipse.jgit.revwalk.RevTree;
-import org.eclipse.jgit.revwalk.RevWalk;
-
-/**
- * Simple snippet which shows how to use RevWalk to iterate over items in a file-tree
- *
- * @author dominik.stadler@gmx.at
- */
-public class WalkTree {
-
-	public static void main(String[] args) throws IOException, GitAPIException {
-		Repository repository = CookbookHelper.openJGitCookbookRepository();
-
-		Ref head = repository.getRef("HEAD");
-
-		// a RevWalk allows to walk over commits based on some filtering that is defined
-		RevWalk walk = new RevWalk(repository);
-
-		RevCommit commit = walk.parseCommit(head.getObjectId());
-		RevTree tree = commit.getTree();
-		System.out.println("Having tree: " + tree);
-
-		// TODO: how to look at all files/sub-trees of this Tree now?
-
-		repository.close();
-	}
-}
diff --git a/src/main/java/org/dstadler/jgit/unfinished/WalkTreeNonRecursive.java b/src/main/java/org/dstadler/jgit/unfinished/WalkTreeNonRecursive.java
new file mode 100644
index 0000000..a24fc34
--- /dev/null
+++ b/src/main/java/org/dstadler/jgit/unfinished/WalkTreeNonRecursive.java
@@ -0,0 +1,46 @@
+package org.dstadler.jgit.unfinished;
+
+import java.io.IOException;
+
+import org.dstadler.jgit.helper.CookbookHelper;
+import org.eclipse.jgit.api.errors.GitAPIException;
+import org.eclipse.jgit.lib.Ref;
+import org.eclipse.jgit.lib.Repository;
+import org.eclipse.jgit.revwalk.RevCommit;
+import org.eclipse.jgit.revwalk.RevTree;
+import org.eclipse.jgit.revwalk.RevWalk;
+import org.eclipse.jgit.treewalk.TreeWalk;
+
+/**
+ * Simple snippet which shows how to use RevWalk to iterate over items in a file-tree
+ *
+ * @author dominik.stadler@gmx.at
+ */
+public class WalkTreeNonRecursive {
+
+	public static void main(String[] args) throws IOException, GitAPIException {
+		Repository repository = CookbookHelper.openJGitCookbookRepository();
+
+		Ref head = repository.getRef("HEAD");
+
+		// a RevWalk allows to walk over commits based on some filtering that is defined
+		RevWalk walk = new RevWalk(repository);
+
+		RevCommit commit = walk.parseCommit(head.getObjectId());
+		RevTree tree = commit.getTree();
+		System.out.println("Having tree: " + tree);
+
+		// now use a TreeWalk to iterate over all files in the Tree recursively
+		// you can set Filters to narrow down the results if needed
+		TreeWalk treeWalk = new TreeWalk(repository);
+		treeWalk.addTree(tree);
+		treeWalk.setRecursive(false);
+		while(treeWalk.next()) {
+			System.out.println("found: " + treeWalk.getPathString());
+		}
+		
+		
+
+		repository.close();
+	}
+}
diff --git a/src/main/java/org/dstadler/jgit/unfinished/WalkTreeRecursive.java b/src/main/java/org/dstadler/jgit/unfinished/WalkTreeRecursive.java
new file mode 100755
index 0000000..b37157b
--- /dev/null
+++ b/src/main/java/org/dstadler/jgit/unfinished/WalkTreeRecursive.java
@@ -0,0 +1,44 @@
+package org.dstadler.jgit.unfinished;
+
+import java.io.IOException;
+
+import org.dstadler.jgit.helper.CookbookHelper;
+import org.eclipse.jgit.api.errors.GitAPIException;
+import org.eclipse.jgit.lib.Ref;
+import org.eclipse.jgit.lib.Repository;
+import org.eclipse.jgit.revwalk.RevCommit;
+import org.eclipse.jgit.revwalk.RevTree;
+import org.eclipse.jgit.revwalk.RevWalk;
+import org.eclipse.jgit.treewalk.TreeWalk;
+
+/**
+ * Simple snippet which shows how to use RevWalk to iterate over items in a file-tree
+ *
+ * @author dominik.stadler@gmx.at
+ */
+public class WalkTreeRecursive {
+
+	public static void main(String[] args) throws IOException, GitAPIException {
+		Repository repository = CookbookHelper.openJGitCookbookRepository();
+
+		Ref head = repository.getRef("HEAD");
+
+		// a RevWalk allows to walk over commits based on some filtering that is defined
+		RevWalk walk = new RevWalk(repository);
+
+		RevCommit commit = walk.parseCommit(head.getObjectId());
+		RevTree tree = commit.getTree();
+		System.out.println("Having tree: " + tree);
+
+		// now use a TreeWalk to iterate over all files in the Tree recursively
+		// you can set Filters to narrow down the results if needed
+		TreeWalk treeWalk = new TreeWalk(repository);
+		treeWalk.addTree(tree);
+		treeWalk.setRecursive(true);
+		while(treeWalk.next()) {
+			System.out.println("found: " + treeWalk.getPathString());
+		}
+
+		repository.close();
+	}
+}
Diff Between ada52b53122eef6545f5fd225d46f697cde91867 ae70dd60a7423eb07893d833600f096617f450d2diff --git a/README.md b/README.md
index f38ad02..072e369 100644
--- a/README.md
+++ b/README.md
@@ -2,2 +1,0 @@
-
-
@@ -5,2 +2,0 @@
-
-
@@ -9,2 +4,0 @@
-
-
@@ -13,2 +6,0 @@
-
-
@@ -30,0 +23 @@
+* [List all commits in a repository](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/porcelain/WalkAllCommits.java)
diff --git a/src/main/java/org/dstadler/jgit/api/WalkRev.java b/src/main/java/org/dstadler/jgit/api/WalkRev.java
index e89be16..eabb491 100755
--- a/src/main/java/org/dstadler/jgit/api/WalkRev.java
+++ b/src/main/java/org/dstadler/jgit/api/WalkRev.java
@@ -26 +26 @@
-		System.out.println("Commit: " + commit);
+		System.out.println("Start-Commit: " + commit);
@@ -29,0 +30 @@
+		int count = 0;
@@ -31,0 +33 @@
+			count++;
@@ -32,0 +35 @@
+		System.out.println(count);
diff --git a/src/main/java/org/dstadler/jgit/porcelain/WalkAllCommits.java b/src/main/java/org/dstadler/jgit/porcelain/WalkAllCommits.java
new file mode 100644
index 0000000..d28febb
--- /dev/null
+++ b/src/main/java/org/dstadler/jgit/porcelain/WalkAllCommits.java
@@ -0,0 +1,33 @@
+package org.dstadler.jgit.porcelain;
+
+import java.io.IOException;
+
+import org.dstadler.jgit.helper.CookbookHelper;
+import org.eclipse.jgit.api.Git;
+import org.eclipse.jgit.api.errors.GitAPIException;
+import org.eclipse.jgit.api.errors.InvalidRefNameException;
+import org.eclipse.jgit.lib.Repository;
+import org.eclipse.jgit.revwalk.RevCommit;
+
+
+
+/**
+ * Simple snippet which shows how to use RevWalk to quickly iterate over all available commits, 
+ * not just the ones on the current branch 
+ */
+public class WalkAllCommits {
+	public static void main(String[] args) throws IOException, InvalidRefNameException, GitAPIException {
+		Repository repository = CookbookHelper.openJGitCookbookRepository();
+
+		Git git = new Git(repository);
+		Iterable<RevCommit> commits = git.log().all().call();
+		int count = 0;
+		for (RevCommit commit : commits) {
+			System.out.println("LogCommit: " + commit);
+			count++;
+		}
+		System.out.println(count);
+
+		repository.close();
+	}
+}
diff --git a/src/main/java/org/dstadler/jgit/unfinished/WalkTree.java b/src/main/java/org/dstadler/jgit/unfinished/WalkTree.java
index 732f804..8a2f9aa 100755
--- a/src/main/java/org/dstadler/jgit/unfinished/WalkTree.java
+++ b/src/main/java/org/dstadler/jgit/unfinished/WalkTree.java
@@ -14 +14 @@
- * Simple snippet which shows how to use RevWalk to iterate over objects
+ * Simple snippet which shows how to use RevWalk to iterate over items in a file-tree
Diff Between ae70dd60a7423eb07893d833600f096617f450d2 3fb7a1887b2fe9b17358a3e89f034a062cfba605diff --git a/README.md b/README.md
index b254f72..f38ad02 100644
--- a/README.md
+++ b/README.md
@@ -1,0 +2,2 @@
+
+
@@ -2,0 +5,2 @@
+
+
@@ -4,0 +9,2 @@
+
+
@@ -6,0 +13,2 @@
+
+
Diff Between 3fb7a1887b2fe9b17358a3e89f034a062cfba605 01101d26e25c295d73f7fbf8eb51890dbe1de6f1diff --git a/README.md b/README.md
index 15975f2..b254f72 100644
--- a/README.md
+++ b/README.md
@@ -21,0 +22 @@
+* [List all branches in a repository](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/porcelain/ListBranches.java)
diff --git a/src/main/java/org/dstadler/jgit/porcelain/ListBranches.java b/src/main/java/org/dstadler/jgit/porcelain/ListBranches.java
new file mode 100644
index 0000000..3dfe805
--- /dev/null
+++ b/src/main/java/org/dstadler/jgit/porcelain/ListBranches.java
@@ -0,0 +1,31 @@
+package org.dstadler.jgit.porcelain;
+
+import java.io.IOException;
+import java.util.List;
+
+import org.dstadler.jgit.helper.CookbookHelper;
+import org.eclipse.jgit.api.Git;
+import org.eclipse.jgit.api.errors.GitAPIException;
+import org.eclipse.jgit.lib.Ref;
+import org.eclipse.jgit.lib.Repository;
+
+
+
+/**
+ * Simple snippet which shows how to list all Branches in a Git repository
+ *
+ * @author dominik.stadler@gmx.at
+ */
+public class ListBranches {
+
+	public static void main(String[] args) throws IOException, GitAPIException {
+		Repository repository = CookbookHelper.openJGitCookbookRepository();
+
+		List<Ref> call = new Git(repository).branchList().call();
+		for(Ref rev : call) {
+			System.out.println("Branch: " + rev + " " + rev.getName() + " " + rev.getObjectId().getName());
+		}
+
+		repository.close();
+	}
+}
Diff Between 01101d26e25c295d73f7fbf8eb51890dbe1de6f1 dea9b88e46f58f00b26fee7a3a16964cfc1cfac2diff --git a/.gitignore b/.gitignore
index d9f145c..3f7c223 100644
--- a/.gitignore
+++ b/.gitignore
@@ -4,0 +5 @@
+.settings
diff --git a/pom.xml b/pom.xml
index f3f7a93..1ac360b 100755
--- a/pom.xml
+++ b/pom.xml
@@ -30,0 +31,14 @@
+
+  <build>
+    <plugins>
+      <plugin>
+        <groupId>org.apache.maven.plugins</groupId>
+        <artifactId>maven-compiler-plugin</artifactId>
+        <version>3.1</version>
+        <configuration>
+          <source>1.5</source>
+          <target>1.5</target>
+        </configuration>
+      </plugin>
+    </plugins>
+  </build>
Diff Between dea9b88e46f58f00b26fee7a3a16964cfc1cfac2 8ec1d15d938d2b7520385b95b9422d6a292f4831diff --git a/README.md b/README.md
index 175b06c..15975f2 100644
--- a/README.md
+++ b/README.md
@@ -37 +37 @@
-* Iterate all commits of a repository
+* Iterate all commits of a repository - https://gerrit.googlesource.com/plugins/branch-network/+log/refs/heads/master/src/main/java/com/googlesource/gerrit/plugins/branchnetwork/data/JGitFacade.java
Diff Between 8ec1d15d938d2b7520385b95b9422d6a292f4831 b139e6c5553e18ed1f015b7c3535a55c44bc0444diff --git a/README.md b/README.md
index 73d4497..175b06c 100644
--- a/README.md
+++ b/README.md
@@ -2,0 +3 @@
+[![Build Status](https://buildhive.cloudbees.com/job/centic9/job/jgit-cookbook/badge/icon)](https://buildhive.cloudbees.com/job/centic9/job/jgit-cookbook/)
Diff Between b139e6c5553e18ed1f015b7c3535a55c44bc0444 779e5dd0757c3521f055b8c10fbfcc708d4fce12diff --git a/README.md b/README.md
index 6d4a80d..73d4497 100644
--- a/README.md
+++ b/README.md
@@ -33,0 +34,5 @@
+#### Missing snippets
+
+* Iterate all commits of a repository
+* Read file attributes, e.g. executeable state
+
@@ -36 +41 @@
-The following sources were used to 
+The following sources were used to build the snippets
Diff Between 779e5dd0757c3521f055b8c10fbfcc708d4fce12 1983de8af824b7813ff61ac9cd67139b398399afdiff --git a/README.md b/README.md
index 66cf9a4..6d4a80d 100644
--- a/README.md
+++ b/README.md
@@ -4 +4,41 @@
-Provides examples and code snippets for jgit Java Git implementation
+Provides examples and code snippets for the [JGit](http://wiki.eclipse.org/JGit/) Java Git implementation. 
+
+The JGit framework is rich and diverse, it has two layers, a low-level _api_ and a higher-level set of _porcelain_ commands. 
+
+This project tries to provide a collection of ready-to-run snippets which try to augment the existing [JavaDoc](http://download.eclipse.org/jgit/docs/latest/apidocs/) and the [User Guide](http://wiki.eclipse.org/JGit/User_Guide)
+
+#### Currently the following snippets are available
+
+##### General Repository handling
+* [Open an existing repository](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/OpenRepository.java)
+* [Create a new repository](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/CreateNewRepository.java)
+
+##### Porcelain commands
+
+* [Add a new file to the index](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/porcelain/AddFile.java)
+* [Commit a file to an existing repository](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/porcelain/CommitFile.java)
+* [List all tags in a repository](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/porcelain/ListTags.java)
+
+* [Clone a remote reppository into a new local directory](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/porcelain/CloneRemoteRepository.java)
+
+##### Low-level API
+
+* [Get the SHA-1 ref from a name, e.g. refs/heads/master](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/api/GetRefFromName.java)
+* [Get the commit-object from a name or a SHA-1](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/api/GetRevCommitFromObjectId.java)
+* [Get the tree-object from a commit-object, name or SHA-1](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/api/GetRevTreeFromObjectId.java)
+* [Read the contents of a file/blob](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/api/ReadBlobContents.java)
+* [Get the tag-object from a name or a SHA-1](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/api/ReadTagFromName.java)
+* [Resolve complex references, e.g. HEAD^^ to a SHA-1](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/api/ResolveRef.java)
+* [Iterate over the commits on a branch](https://github.com/centic9/jgit-cookbook/blob/master/src/main/java/org/dstadler/jgit/api/WalkRev.java)
+
+#### Sources
+
+The following sources were used to 
+
+* [JGit JavaDoc](http://download.eclipse.org/jgit/docs/latest/apidocs/)
+* [JGit User Guide](http://wiki.eclipse.org/JGit/User_Guide)
+* [JGit related questions on Stackoverflow](http://stackoverflow.com/questions/tagged/jgit)
+
+#### Contribute
+
+Please note that the list of snippets is not yet complete, probably never will. If you are missing things or have suggestions how to improve or add snippets, please either send pull requests or create [issues](https://github.com/centic9/jgit-cookbook/issues).
Diff Between 1983de8af824b7813ff61ac9cd67139b398399af 65e0ed3a55c7a2295e7340c1f503e22de36f3081diff --git a/src/main/java/org/dstadler/jgit/CreateNewRepository.java b/src/main/java/org/dstadler/jgit/CreateNewRepository.java
index 55136aa..b808199 100755
--- a/src/main/java/org/dstadler/jgit/CreateNewRepository.java
+++ b/src/main/java/org/dstadler/jgit/CreateNewRepository.java
@@ -22 +22 @@
-        Repository repository = new FileRepository(localPath + ".git");
+        Repository repository = new FileRepository(new File(localPath, ".git"));
diff --git a/src/main/java/org/dstadler/jgit/helper/CookbookHelper.java b/src/main/java/org/dstadler/jgit/helper/CookbookHelper.java
index b2cf947..951c93b 100755
--- a/src/main/java/org/dstadler/jgit/helper/CookbookHelper.java
+++ b/src/main/java/org/dstadler/jgit/helper/CookbookHelper.java
@@ -2,0 +3 @@
+import java.io.File;
@@ -5,0 +7 @@
+import org.eclipse.jgit.storage.file.FileRepository;
@@ -18,0 +21,12 @@
+
+	public static Repository createNewRepository() throws IOException {
+		// prepare a new folder
+		File localPath = File.createTempFile("TestGitRepository", "");
+		localPath.delete();
+
+		// create the directory
+        Repository repository = new FileRepository(localPath + "/.git");
+        repository.create();
+
+        return repository;
+	}
diff --git a/src/main/java/org/dstadler/jgit/porcelain/AddFile.java b/src/main/java/org/dstadler/jgit/porcelain/AddFile.java
new file mode 100755
index 0000000..7e766d1
--- /dev/null
+++ b/src/main/java/org/dstadler/jgit/porcelain/AddFile.java
@@ -0,0 +1,38 @@
+package org.dstadler.jgit.porcelain;
+
+import java.io.File;
+import java.io.IOException;
+
+import org.dstadler.jgit.helper.CookbookHelper;
+import org.eclipse.jgit.api.Git;
+import org.eclipse.jgit.api.errors.GitAPIException;
+import org.eclipse.jgit.lib.Repository;
+
+
+
+/**
+ * Simple snippet which shows how to list all Tags
+ *
+ * @author dominik.stadler@gmx.at
+ */
+public class AddFile {
+
+	public static void main(String[] args) throws IOException, GitAPIException {
+		// prepare a new test-repository
+		Repository repository = CookbookHelper.createNewRepository();
+		Git git = new Git(repository);
+
+		// create the file
+        File myfile = new File(repository.getDirectory().getParent(), "testfile");
+        myfile.createNewFile();
+
+        // run the add-call
+        git.add()
+           .addFilepattern("testfile")
+           .call();
+
+        System.out.println("Added file " + myfile + " to repository at " + repository.getDirectory());
+
+		repository.close();
+	}
+}
diff --git a/src/main/java/org/dstadler/jgit/porcelain/CloneRemoteRepository.java b/src/main/java/org/dstadler/jgit/porcelain/CloneRemoteRepository.java
new file mode 100755
index 0000000..ade11ba
--- /dev/null
+++ b/src/main/java/org/dstadler/jgit/porcelain/CloneRemoteRepository.java
@@ -0,0 +1,46 @@
+package org.dstadler.jgit.porcelain;
+
+import java.io.File;
+import java.io.IOException;
+
+import org.eclipse.jgit.api.Git;
+import org.eclipse.jgit.api.errors.GitAPIException;
+import org.eclipse.jgit.api.errors.InvalidRemoteException;
+import org.eclipse.jgit.api.errors.TransportException;
+import org.eclipse.jgit.lib.Repository;
+import org.eclipse.jgit.storage.file.FileRepositoryBuilder;
+
+
+
+/**
+ * Simple snippet which shows how to clone a repository from a remote source
+ *
+ * @author dominik.stadler@gmx.at
+ */
+public class CloneRemoteRepository {
+	private static final String REMOTE_URL = "https://github.com/github/testrepo.git";
+
+	public static void main(String[] args) throws IOException, InvalidRemoteException, TransportException, GitAPIException {
+		// prepare a new folder for the cloned repository
+		File localPath = File.createTempFile("TestGitRepository", "");
+		localPath.delete();
+
+		// then clone
+		System.out.println("Cloning from " + REMOTE_URL + " to " + localPath);
+        Git.cloneRepository()
+        .setURI(REMOTE_URL)
+        .setDirectory(localPath)
+        .call();
+
+        // now open the created repository
+		FileRepositoryBuilder builder = new FileRepositoryBuilder();
+		Repository repository = builder.setGitDir(localPath)
+		  .readEnvironment() // scan environment GIT_* variables
+		  .findGitDir() // scan up the file system tree
+		  .build();
+
+		System.out.println("Having repository: " + repository.getDirectory());
+
+		repository.close();
+	}
+}
diff --git a/src/main/java/org/dstadler/jgit/porcelain/CloneRepository.java b/src/main/java/org/dstadler/jgit/porcelain/CloneRepository.java
deleted file mode 100755
index b312cdd..0000000
--- a/src/main/java/org/dstadler/jgit/porcelain/CloneRepository.java
+++ /dev/null
@@ -1,44 +0,0 @@
-package org.dstadler.jgit.porcelain;
-
-import java.io.File;
-import java.io.IOException;
-
-import org.eclipse.jgit.api.Git;
-import org.eclipse.jgit.api.errors.GitAPIException;
-import org.eclipse.jgit.api.errors.InvalidRemoteException;
-import org.eclipse.jgit.api.errors.TransportException;
-import org.eclipse.jgit.lib.Repository;
-import org.eclipse.jgit.storage.file.FileRepositoryBuilder;
-
-
-
-/**
- * Simple snippet which shows how to clone a repository from a remote source
- *
- * @author dominik.stadler@gmx.at
- */
-public class CloneRepository {
-	public static void main(String[] args) throws IOException, InvalidRemoteException, TransportException, GitAPIException {
-		// prepare a new folder for the cloned repository
-		File localPath = File.createTempFile("TestGitRepository", "");
-		localPath.delete();
-
-		// then clone
-		System.out.println("Cloning directory");
-        Git.cloneRepository()
-        .setURI("https://github.com/github/testrepo.git")
-        .setDirectory(localPath)
-        .call();
-
-        // now open the created repository
-		FileRepositoryBuilder builder = new FileRepositoryBuilder();
-		Repository repository = builder.setGitDir(localPath)
-		  .readEnvironment() // scan environment GIT_* variables
-		  .findGitDir() // scan up the file system tree
-		  .build();
-
-		System.out.println("Having repository: " + repository.getDirectory());
-
-		repository.close();
-	}
-}
diff --git a/src/main/java/org/dstadler/jgit/porcelain/CommitFile.java b/src/main/java/org/dstadler/jgit/porcelain/CommitFile.java
new file mode 100755
index 0000000..6a9c09d
--- /dev/null
+++ b/src/main/java/org/dstadler/jgit/porcelain/CommitFile.java
@@ -0,0 +1,43 @@
+package org.dstadler.jgit.porcelain;
+
+import java.io.File;
+import java.io.IOException;
+
+import org.dstadler.jgit.helper.CookbookHelper;
+import org.eclipse.jgit.api.Git;
+import org.eclipse.jgit.api.errors.GitAPIException;
+import org.eclipse.jgit.lib.Repository;
+
+
+
+/**
+ * Simple snippet which shows how to list all Tags
+ *
+ * @author dominik.stadler@gmx.at
+ */
+public class CommitFile {
+
+	public static void main(String[] args) throws IOException, GitAPIException {
+		// prepare a new test-repository
+		Repository repository = CookbookHelper.createNewRepository();
+		Git git = new Git(repository);
+
+		// create the file
+        File myfile = new File(repository.getDirectory().getParent(), "testfile");
+        myfile.createNewFile();
+
+        // run the add
+        git.add()
+           .addFilepattern("testfile")
+           .call();
+
+        // and then commit the changes
+        git.commit()
+	        .setMessage("Added testfile")
+	        .call();
+
+        System.out.println("Committed file " + myfile + " to repository at " + repository.getDirectory());
+
+		repository.close();
+	}
+}
diff --git a/src/main/java/org/dstadler/jgit/unfinished/PullFromRemoteRepository.java b/src/main/java/org/dstadler/jgit/unfinished/PullFromRemoteRepository.java
new file mode 100755
index 0000000..be91bf0
--- /dev/null
+++ b/src/main/java/org/dstadler/jgit/unfinished/PullFromRemoteRepository.java
@@ -0,0 +1,50 @@
+package org.dstadler.jgit.unfinished;
+
+import java.io.File;
+import java.io.IOException;
+
+import org.eclipse.jgit.api.Git;
+import org.eclipse.jgit.api.errors.GitAPIException;
+import org.eclipse.jgit.api.errors.InvalidRemoteException;
+import org.eclipse.jgit.api.errors.TransportException;
+import org.eclipse.jgit.lib.Repository;
+import org.eclipse.jgit.storage.file.FileRepositoryBuilder;
+
+
+
+/**
+ * Simple snippet which shows how to clone a repository from a remote source
+ *
+ * @author dominik.stadler@gmx.at
+ */
+public class PullFromRemoteRepository {
+	private static final String REMOTE_URL = "https://github.com/github/testrepo.git";
+
+	public static void main(String[] args) throws IOException, InvalidRemoteException, TransportException, GitAPIException {
+		// prepare a new folder for the cloned repository
+		File localPath = File.createTempFile("TestGitRepository", "");
+		localPath.delete();
+
+		// then clone
+		System.out.println("Cloning from " + REMOTE_URL + " to " + localPath);
+        Git.cloneRepository()
+        .setURI(REMOTE_URL)
+        .setDirectory(localPath)
+        .call();
+
+        // now open the created repository
+		FileRepositoryBuilder builder = new FileRepositoryBuilder();
+		Repository repository = builder.setGitDir(localPath)
+		  .readEnvironment() // scan environment GIT_* variables
+		  .findGitDir() // scan up the file system tree
+		  .build();
+
+		Git git = new Git(repository);
+        git.pull()
+        .call();
+
+        System.out.println("Pulled from remote repository to local repository at " + repository.getDirectory());
+
+        repository.close();
+	}
+}
diff --git a/src/main/java/org/dstadler/jgit/unfinished/PushToRemoteRepository.java b/src/main/java/org/dstadler/jgit/unfinished/PushToRemoteRepository.java
new file mode 100755
index 0000000..4ad4c8e
--- /dev/null
+++ b/src/main/java/org/dstadler/jgit/unfinished/PushToRemoteRepository.java
@@ -0,0 +1,61 @@
+package org.dstadler.jgit.unfinished;
+
+import java.io.File;
+import java.io.IOException;
+
+import org.eclipse.jgit.api.Git;
+import org.eclipse.jgit.api.errors.GitAPIException;
+import org.eclipse.jgit.api.errors.InvalidRemoteException;
+import org.eclipse.jgit.api.errors.TransportException;
+import org.eclipse.jgit.lib.Repository;
+import org.eclipse.jgit.storage.file.FileRepositoryBuilder;
+
+
+
+/**
+ * Simple snippet which shows how to clone a repository from a remote source
+ *
+ * @author dominik.stadler@gmx.at
+ */
+public class PushToRemoteRepository {
+	private static final String REMOTE_URL = "https://github.com/github/testrepo.git";
+
+	public static void main(String[] args) throws IOException, InvalidRemoteException, TransportException, GitAPIException {
+		// prepare a new folder for the cloned repository
+		File localPath = File.createTempFile("TestGitRepository", "");
+		localPath.delete();
+
+		// then clone
+		System.out.println("Cloning from " + REMOTE_URL + " to " + localPath);
+        Git.cloneRepository()
+        .setURI(REMOTE_URL)
+        .setDirectory(localPath)
+        .call();
+
+		// prepare a second folder for the 2nd clone
+		File localPath2 = File.createTempFile("TestGitRepository", "");
+		localPath2.delete();
+
+		// then clone again
+		System.out.println("Cloning from file://" + localPath + " to " + localPath2);
+        Git.cloneRepository()
+        .setURI("file://" + localPath)
+        .setDirectory(localPath2)
+        .call();
+
+        // now open the created repository
+		FileRepositoryBuilder builder = new FileRepositoryBuilder();
+		Repository repository = builder.setGitDir(localPath2)
+		  .readEnvironment() // scan environment GIT_* variables
+		  .findGitDir() // scan up the file system tree
+		  .build();
+
+		Git git = new Git(repository);
+		git.push()
+        	.call();
+
+		System.out.println("Pushed from repository: " + repository.getDirectory() + " to remote repository at " + REMOTE_URL);
+
+		repository.close();
+	}
+}
diff --git a/src/main/java/org/dstadler/jgit/unfinished/TrackMaster.java b/src/main/java/org/dstadler/jgit/unfinished/TrackMaster.java
new file mode 100755
index 0000000..696047e
--- /dev/null
+++ b/src/main/java/org/dstadler/jgit/unfinished/TrackMaster.java
@@ -0,0 +1,55 @@
+package org.dstadler.jgit.unfinished;
+
+import java.io.File;
+import java.io.IOException;
+
+import org.eclipse.jgit.api.Git;
+import org.eclipse.jgit.api.errors.GitAPIException;
+import org.eclipse.jgit.api.errors.InvalidRemoteException;
+import org.eclipse.jgit.api.errors.TransportException;
+import org.eclipse.jgit.lib.Repository;
+import org.eclipse.jgit.storage.file.FileRepositoryBuilder;
+
+
+
+/**
+ * Simple snippet which shows how to clone a repository from a remote source
+ *
+ * @author dominik.stadler@gmx.at
+ */
+public class TrackMaster {
+	private static final String REMOTE_URL = "https://github.com/github/testrepo.git";
+
+	public static void main(String[] args) throws IOException, InvalidRemoteException, TransportException, GitAPIException {
+		// prepare a new folder for the cloned repository
+		File localPath = File.createTempFile("TestGitRepository", "");
+		localPath.delete();
+
+		// then clone
+		System.out.println("Cloning from " + REMOTE_URL + " to " + localPath);
+        Git.cloneRepository()
+        .setURI(REMOTE_URL)
+        .setDirectory(localPath)
+        .call();
+
+        // now open the created repository
+		FileRepositoryBuilder builder = new FileRepositoryBuilder();
+		Repository repository = builder.setGitDir(localPath)
+		  .readEnvironment() // scan environment GIT_* variables
+		  .findGitDir() // scan up the file system tree
+		  .build();
+
+		Git git = new Git(repository);
+
+		git.branchCreate()
+	        .setName("master")
+	        // ?!? .setUpstreamMode(SetupUpstreamMode.SET_UPSTREAM)
+	        .setStartPoint("origin/master")
+	        .setForce(true)
+	        .call();
+
+        System.out.println("Now tracking master in repository at " + repository.getDirectory() + " from origin/master at " + REMOTE_URL);
+
+        repository.close();
+	}
+}
Diff Between 65e0ed3a55c7a2295e7340c1f503e22de36f3081 c899b99408c682ce66f228cb3ae0850d1e926573diff --git a/pom.xml b/pom.xml
index a171bf4..f3f7a93 100755
--- a/pom.xml
+++ b/pom.xml
@@ -25,6 +25,5 @@
-    <dependency>
-      <groupId>junit</groupId>
-      <artifactId>junit</artifactId>
-      <version>4.11</version>
-      <scope>test</scope>
-    </dependency>
+	<dependency>
+		<groupId>commons-io</groupId>
+		<artifactId>commons-io</artifactId>
+		<version>2.4</version>
+	</dependency>
diff --git a/src/main/java/org/dstadler/jgit/CreateNewRepository.java b/src/main/java/org/dstadler/jgit/CreateNewRepository.java
new file mode 100755
index 0000000..55136aa
--- /dev/null
+++ b/src/main/java/org/dstadler/jgit/CreateNewRepository.java
@@ -0,0 +1,31 @@
+package org.dstadler.jgit;
+
+import java.io.File;
+import java.io.IOException;
+
+import org.apache.commons.io.FileUtils;
+import org.eclipse.jgit.lib.Repository;
+import org.eclipse.jgit.storage.file.FileRepository;
+
+/**
+ * Simple snippet which shows how to create a new repository
+ *
+ * @author dominik.stadler@gmx.at
+ */
+public class CreateNewRepository {
+	public static void main(String[] args) throws IOException {
+		// prepare a new folder
+		File localPath = File.createTempFile("TestGitRepository", "");
+		localPath.delete();
+
+		// create the directory
+        Repository repository = new FileRepository(localPath + ".git");
+        repository.create();
+
+		System.out.println("Having repository: " + repository.getDirectory());
+
+		repository.close();
+
+		FileUtils.deleteDirectory(localPath);
+	}
+}
diff --git a/src/main/java/org/dstadler/jgit/OpenRepository.java b/src/main/java/org/dstadler/jgit/OpenRepository.java
new file mode 100755
index 0000000..86bb967
--- /dev/null
+++ b/src/main/java/org/dstadler/jgit/OpenRepository.java
@@ -0,0 +1,28 @@
+package org.dstadler.jgit;
+
+import java.io.File;
+import java.io.IOException;
+
+import org.eclipse.jgit.lib.Repository;
+import org.eclipse.jgit.storage.file.FileRepositoryBuilder;
+
+
+
+/**
+ * Simple snippet which shows how to open an existing repository
+ *
+ * @author dominik.stadler@gmx.at
+ */
+public class OpenRepository {
+	public static void main(String[] args) throws IOException {
+		FileRepositoryBuilder builder = new FileRepositoryBuilder();
+		Repository repository = builder.setGitDir(new File("/my/git/directory"))
+		  .readEnvironment() // scan environment GIT_* variables
+		  .findGitDir() // scan up the file system tree
+		  .build();
+
+		System.out.println("Having repository: " + repository.getDirectory());
+
+		repository.close();
+	}
+}
diff --git a/src/main/java/org/dstadler/jgit/RepositoryOpen.java b/src/main/java/org/dstadler/jgit/RepositoryOpen.java
deleted file mode 100755
index f97ce2f..0000000
--- a/src/main/java/org/dstadler/jgit/RepositoryOpen.java
+++ /dev/null
@@ -1,28 +0,0 @@
-package org.dstadler.jgit;
-
-import java.io.File;
-import java.io.IOException;
-
-import org.eclipse.jgit.lib.Repository;
-import org.eclipse.jgit.storage.file.FileRepositoryBuilder;
-
-
-
-/**
- * Simple snippet which shows how to open an existing repository
- *
- * @author dominik.stadler@gmx.at
- */
-public class RepositoryOpen {
-	public static void main(String[] args) throws IOException {
-		FileRepositoryBuilder builder = new FileRepositoryBuilder();
-		Repository repository = builder.setGitDir(new File("/my/git/directory"))
-		  .readEnvironment() // scan environment GIT_* variables
-		  .findGitDir() // scan up the file system tree
-		  .build();
-
-		System.out.println("Having repository: " + repository.getDirectory());
-
-		repository.close();
-	}
-}
diff --git a/src/main/java/org/dstadler/jgit/api/GetRef.java b/src/main/java/org/dstadler/jgit/api/GetRef.java
deleted file mode 100755
index b52addb..0000000
--- a/src/main/java/org/dstadler/jgit/api/GetRef.java
+++ /dev/null
@@ -1,30 +0,0 @@
-package org.dstadler.jgit.api;
-
-import java.io.IOException;
-
-import org.eclipse.jgit.lib.Ref;
-import org.eclipse.jgit.lib.Repository;
-import org.eclipse.jgit.storage.file.FileRepositoryBuilder;
-
-
-
-/**
- * Simple snippet which shows how to retrieve a Ref for some reference string.
- *
- * @author dominik.stadler@gmx.at
- */
-public class GetRef {
-	public static void main(String[] args) throws IOException {
-		FileRepositoryBuilder builder = new FileRepositoryBuilder();
-		Repository repository = builder
-		  .readEnvironment() // scan environment GIT_* variables
-		  .findGitDir() // scan up the file system tree
-		  .build();
-
-		// the Ref holds an ObjectId for any type of object (tree, commit, blob, tree)
-		Ref head = repository.getRef("refs/heads/master");
-		System.out.println("Ref of refs/heads/master: " + head);
-
-		repository.close();
-	}
-}
diff --git a/src/main/java/org/dstadler/jgit/api/GetRefFromName.java b/src/main/java/org/dstadler/jgit/api/GetRefFromName.java
new file mode 100755
index 0000000..9361eb2
--- /dev/null
+++ b/src/main/java/org/dstadler/jgit/api/GetRefFromName.java
@@ -0,0 +1,22 @@
+package org.dstadler.jgit.api;
+
+import java.io.IOException;
+
+import org.dstadler.jgit.helper.CookbookHelper;
+import org.eclipse.jgit.lib.Ref;
+import org.eclipse.jgit.lib.Repository;
+
+/**
+ * Simple snippet which shows how to retrieve a Ref for some reference string.
+ */
+public class GetRefFromName {
+	public static void main(String[] args) throws IOException {
+		Repository repository = CookbookHelper.openJGitCookbookRepository();
+
+		// the Ref holds an ObjectId for any type of object (tree, commit, blob, tree)
+		Ref head = repository.getRef("refs/heads/master");
+		System.out.println("Ref of refs/heads/master: " + head);
+
+		repository.close();
+	}
+}
diff --git a/src/main/java/org/dstadler/jgit/api/GetRevCommitFromObjectId.java b/src/main/java/org/dstadler/jgit/api/GetRevCommitFromObjectId.java
index b8fc07b..7e959e7 100755
--- a/src/main/java/org/dstadler/jgit/api/GetRevCommitFromObjectId.java
+++ b/src/main/java/org/dstadler/jgit/api/GetRevCommitFromObjectId.java
@@ -4,0 +5 @@
+import org.dstadler.jgit.helper.CookbookHelper;
@@ -9,3 +9,0 @@
-import org.eclipse.jgit.storage.file.FileRepositoryBuilder;
-
-
@@ -15,2 +12,0 @@
- *
- * @author dominik.stadler@gmx.at
@@ -20,5 +16 @@
-		FileRepositoryBuilder builder = new FileRepositoryBuilder();
-		Repository repository = builder
-		  .readEnvironment() // scan environment GIT_* variables
-		  .findGitDir() // scan up the file system tree
-		  .build();
+		Repository repository = CookbookHelper.openJGitCookbookRepository();
diff --git a/src/main/java/org/dstadler/jgit/api/GetRevTreeFromObjectId.java b/src/main/java/org/dstadler/jgit/api/GetRevTreeFromObjectId.java
index d8b3e3d..84759b8 100755
--- a/src/main/java/org/dstadler/jgit/api/GetRevTreeFromObjectId.java
+++ b/src/main/java/org/dstadler/jgit/api/GetRevTreeFromObjectId.java
@@ -4,0 +5 @@
+import org.dstadler.jgit.helper.CookbookHelper;
@@ -11,3 +11,0 @@
-import org.eclipse.jgit.storage.file.FileRepositoryBuilder;
-
-
@@ -17,2 +14,0 @@
- *
- * @author dominik.stadler@gmx.at
@@ -23,5 +19 @@
-		FileRepositoryBuilder builder = new FileRepositoryBuilder();
-		Repository repository = builder
-		  .readEnvironment() // scan environment GIT_* variables
-		  .findGitDir() // scan up the file system tree
-		  .build();
+		Repository repository = CookbookHelper.openJGitCookbookRepository();
diff --git a/src/main/java/org/dstadler/jgit/api/ReadBlobContents.java b/src/main/java/org/dstadler/jgit/api/ReadBlobContents.java
index a221cb6..181d0f8 100755
--- a/src/main/java/org/dstadler/jgit/api/ReadBlobContents.java
+++ b/src/main/java/org/dstadler/jgit/api/ReadBlobContents.java
@@ -4,0 +5 @@
+import org.dstadler.jgit.helper.CookbookHelper;
@@ -8,3 +9,3 @@
-import org.eclipse.jgit.storage.file.FileRepositoryBuilder;
-
-
+import org.eclipse.jgit.revwalk.RevCommit;
+import org.eclipse.jgit.revwalk.RevTree;
+import org.eclipse.jgit.revwalk.RevWalk;
@@ -14,2 +14,0 @@
- *
- * @author dominik.stadler@gmx.at
@@ -19,5 +18 @@
-		FileRepositoryBuilder builder = new FileRepositoryBuilder();
-		Repository repository = builder
-		  .readEnvironment() // scan environment GIT_* variables
-		  .findGitDir() // scan up the file system tree
-		  .build();
+		Repository repository = CookbookHelper.openJGitCookbookRepository();
@@ -32,0 +28,10 @@
+		System.out.println("Print contents of tree of head of master branch, i.e. the latest binary tree information");
+
+		// a commit points to a tree
+		RevWalk walk = new RevWalk(repository);
+		RevCommit commit = walk.parseCommit(head.getObjectId());
+		RevTree tree = walk.parseTree(commit.getTree().getId());
+		System.out.println("Found Tree: " + tree);
+		loader = repository.open(tree.getId());
+		loader.copyTo(System.out);
+
diff --git a/src/main/java/org/dstadler/jgit/api/ReadTagFromName.java b/src/main/java/org/dstadler/jgit/api/ReadTagFromName.java
new file mode 100755
index 0000000..38f3023
--- /dev/null
+++ b/src/main/java/org/dstadler/jgit/api/ReadTagFromName.java
@@ -0,0 +1,41 @@
+package org.dstadler.jgit.api;
+
+import java.io.IOException;
+
+import org.dstadler.jgit.helper.CookbookHelper;
+import org.eclipse.jgit.api.errors.GitAPIException;
+import org.eclipse.jgit.lib.ObjectLoader;
+import org.eclipse.jgit.lib.Ref;
+import org.eclipse.jgit.lib.Repository;
+import org.eclipse.jgit.revwalk.RevObject;
+import org.eclipse.jgit.revwalk.RevWalk;
+
+/**
+ * Simple snippet which shows how to use RevWalk to read tags
+ */
+public class ReadTagFromName {
+
+	public static void main(String[] args) throws IOException, GitAPIException {
+		Repository repository = CookbookHelper.openJGitCookbookRepository();
+
+		// a RevWalk allows to retrieve information from the repository
+		RevWalk walk = new RevWalk(repository);
+
+		// a simple tag that is not annotated
+		Ref simpleTag = repository.getRef("initialtag");
+		RevObject any = walk.parseAny(simpleTag.getObjectId());
+		System.out.println("Commit: " + any);
+
+		// an annotated tag
+		Ref annotatedTag = repository.getRef("secondtag");
+		any = walk.parseAny(annotatedTag.getObjectId());
+		System.out.println("Tag: " + any);
+
+		// finally try to print out the tag-content
+		System.out.println("\nTag-Content: \n");
+		ObjectLoader loader = repository.open(annotatedTag.getObjectId());
+		loader.copyTo(System.out);
+
+		repository.close();
+	}
+}
diff --git a/src/main/java/org/dstadler/jgit/api/ResolveRef.java b/src/main/java/org/dstadler/jgit/api/ResolveRef.java
index 36089f7..f2c74c8 100755
--- a/src/main/java/org/dstadler/jgit/api/ResolveRef.java
+++ b/src/main/java/org/dstadler/jgit/api/ResolveRef.java
@@ -4,0 +5 @@
+import org.dstadler.jgit.helper.CookbookHelper;
@@ -7 +7,0 @@
-import org.eclipse.jgit.storage.file.FileRepositoryBuilder;
@@ -13,2 +12,0 @@
- *
- * @author dominik.stadler@gmx.at
@@ -18,5 +16 @@
-		FileRepositoryBuilder builder = new FileRepositoryBuilder();
-		Repository repository = builder
-		  .readEnvironment() // scan environment GIT_* variables
-		  .findGitDir() // scan up the file system tree
-		  .build();
+		Repository repository = CookbookHelper.openJGitCookbookRepository();
@@ -24,2 +18,8 @@
-		ObjectId head = repository.resolve("HEAD");
-		System.out.println("ObjectId of HEAD: " + head);
+		// basic syntax is similar to getRef()
+		ObjectId id = repository.resolve("HEAD");
+		System.out.println("ObjectId of HEAD: " + id);
+
+		// however resolve() supports almost all of the git-syntax, where getRef() only works on names
+		id = repository.resolve("HEAD^1");
+		System.out.println("ObjectId of HEAD: " + id);
+
diff --git a/src/main/java/org/dstadler/jgit/api/WalkRev.java b/src/main/java/org/dstadler/jgit/api/WalkRev.java
index 3c57a5f..e89be16 100755
--- a/src/main/java/org/dstadler/jgit/api/WalkRev.java
+++ b/src/main/java/org/dstadler/jgit/api/WalkRev.java
@@ -4,0 +5 @@
+import org.dstadler.jgit.helper.CookbookHelper;
@@ -9 +9,0 @@
-import org.eclipse.jgit.storage.file.FileRepositoryBuilder;
@@ -15,2 +14,0 @@
- *
- * @author dominik.stadler@gmx.at
@@ -20,5 +18 @@
-		FileRepositoryBuilder builder = new FileRepositoryBuilder();
-		Repository repository = builder
-		  .readEnvironment() // scan environment GIT_* variables
-		  .findGitDir() // scan up the file system tree
-		  .build();
+		Repository repository = CookbookHelper.openJGitCookbookRepository();
diff --git a/src/main/java/org/dstadler/jgit/helper/CookbookHelper.java b/src/main/java/org/dstadler/jgit/helper/CookbookHelper.java
new file mode 100755
index 0000000..b2cf947
--- /dev/null
+++ b/src/main/java/org/dstadler/jgit/helper/CookbookHelper.java
@@ -0,0 +1,19 @@
+package org.dstadler.jgit.helper;
+
+import java.io.IOException;
+
+import org.eclipse.jgit.lib.Repository;
+import org.eclipse.jgit.storage.file.FileRepositoryBuilder;
+
+
+public class CookbookHelper {
+
+	public static Repository openJGitCookbookRepository() throws IOException {
+		FileRepositoryBuilder builder = new FileRepositoryBuilder();
+		Repository repository = builder
+		  .readEnvironment() // scan environment GIT_* variables
+		  .findGitDir() // scan up the file system tree
+		  .build();
+		return repository;
+	}
+}
diff --git a/src/main/java/org/dstadler/jgit/porcelain/CloneRepository.java b/src/main/java/org/dstadler/jgit/porcelain/CloneRepository.java
new file mode 100755
index 0000000..b312cdd
--- /dev/null
+++ b/src/main/java/org/dstadler/jgit/porcelain/CloneRepository.java
@@ -0,0 +1,44 @@
+package org.dstadler.jgit.porcelain;
+
+import java.io.File;
+import java.io.IOException;
+
+import org.eclipse.jgit.api.Git;
+import org.eclipse.jgit.api.errors.GitAPIException;
+import org.eclipse.jgit.api.errors.InvalidRemoteException;
+import org.eclipse.jgit.api.errors.TransportException;
+import org.eclipse.jgit.lib.Repository;
+import org.eclipse.jgit.storage.file.FileRepositoryBuilder;
+
+
+
+/**
+ * Simple snippet which shows how to clone a repository from a remote source
+ *
+ * @author dominik.stadler@gmx.at
+ */
+public class CloneRepository {
+	public static void main(String[] args) throws IOException, InvalidRemoteException, TransportException, GitAPIException {
+		// prepare a new folder for the cloned repository
+		File localPath = File.createTempFile("TestGitRepository", "");
+		localPath.delete();
+
+		// then clone
+		System.out.println("Cloning directory");
+        Git.cloneRepository()
+        .setURI("https://github.com/github/testrepo.git")
+        .setDirectory(localPath)
+        .call();
+
+        // now open the created repository
+		FileRepositoryBuilder builder = new FileRepositoryBuilder();
+		Repository repository = builder.setGitDir(localPath)
+		  .readEnvironment() // scan environment GIT_* variables
+		  .findGitDir() // scan up the file system tree
+		  .build();
+
+		System.out.println("Having repository: " + repository.getDirectory());
+
+		repository.close();
+	}
+}
diff --git a/src/main/java/org/dstadler/jgit/porcelain/ListTags.java b/src/main/java/org/dstadler/jgit/porcelain/ListTags.java
new file mode 100755
index 0000000..cb05d7b
--- /dev/null
+++ b/src/main/java/org/dstadler/jgit/porcelain/ListTags.java
@@ -0,0 +1,31 @@
+package org.dstadler.jgit.porcelain;
+
+import java.io.IOException;
+import java.util.List;
+
+import org.dstadler.jgit.helper.CookbookHelper;
+import org.eclipse.jgit.api.Git;
+import org.eclipse.jgit.api.errors.GitAPIException;
+import org.eclipse.jgit.lib.Ref;
+import org.eclipse.jgit.lib.Repository;
+
+
+
+/**
+ * Simple snippet which shows how to list all Tags
+ *
+ * @author dominik.stadler@gmx.at
+ */
+public class ListTags {
+
+	public static void main(String[] args) throws IOException, GitAPIException {
+		Repository repository = CookbookHelper.openJGitCookbookRepository();
+
+		List<Ref> call = new Git(repository).tagList().call();
+		for(Ref rev : call) {
+			System.out.println("Tag: " + rev);
+		}
+
+		repository.close();
+	}
+}
diff --git a/src/main/java/org/dstadler/jgit/unfinished/GetRevTagFromObjectId.java b/src/main/java/org/dstadler/jgit/unfinished/GetRevTagFromObjectId.java
deleted file mode 100755
index e3e56d9..0000000
--- a/src/main/java/org/dstadler/jgit/unfinished/GetRevTagFromObjectId.java
+++ /dev/null
@@ -1,49 +0,0 @@
-package org.dstadler.jgit.unfinished;
-
-import java.io.IOException;
-import java.util.List;
-
-import org.eclipse.jgit.api.Git;
-import org.eclipse.jgit.api.errors.GitAPIException;
-import org.eclipse.jgit.lib.Ref;
-import org.eclipse.jgit.lib.Repository;
-import org.eclipse.jgit.revwalk.RevObject;
-import org.eclipse.jgit.revwalk.RevTag;
-import org.eclipse.jgit.revwalk.RevWalk;
-import org.eclipse.jgit.storage.file.FileRepositoryBuilder;
-
-
-
-/**
- * Simple snippet which shows how to use RevWalk to iterate over objects
- *
- * @author dominik.stadler@gmx.at
- */
-public class GetRevTagFromObjectId {
-
-	public static void main(String[] args) throws IOException, GitAPIException {
-		FileRepositoryBuilder builder = new FileRepositoryBuilder();
-		Repository repository = builder
-		  .readEnvironment() // scan environment GIT_* variables
-		  .findGitDir() // scan up the file system tree
-		  .build();
-
-		List<Ref> call = new Git(repository).tagList().call();
-		for(Ref rev : call) {
-			System.out.println("Tag: " + rev);
-		}
-
-		//Ref head = repository.getRef("refs/tags/initialtag");
-
-		// a RevWalk allows to walk over commits based on some filtering that is defined
-		RevWalk walk = new RevWalk(repository);
-
-		RevObject any = walk.parseAny(call.get(0).getObjectId());
-		System.out.println("Any: " + any);
-
-		RevTag tag = walk.parseTag(call.get(0).getObjectId());
-		System.out.println("Found Tag: " + tag);
-
-		repository.close();
-	}
-}
diff --git a/src/main/java/org/dstadler/jgit/unfinished/WalkTree.java b/src/main/java/org/dstadler/jgit/unfinished/WalkTree.java
index 7480e1e..732f804 100755
--- a/src/main/java/org/dstadler/jgit/unfinished/WalkTree.java
+++ b/src/main/java/org/dstadler/jgit/unfinished/WalkTree.java
@@ -4,0 +5 @@
+import org.dstadler.jgit.helper.CookbookHelper;
@@ -11,3 +11,0 @@
-import org.eclipse.jgit.storage.file.FileRepositoryBuilder;
-
-
@@ -23,5 +21 @@
-		FileRepositoryBuilder builder = new FileRepositoryBuilder();
-		Repository repository = builder
-		  .readEnvironment() // scan environment GIT_* variables
-		  .findGitDir() // scan up the file system tree
-		  .build();
+		Repository repository = CookbookHelper.openJGitCookbookRepository();
Diff Between c899b99408c682ce66f228cb3ae0850d1e926573 084582b985d889be334f0f6a806e1a7d7b6eafb6diff --git a/pom.xml b/pom.xml
old mode 100644
new mode 100755
diff --git a/src/main/java/org/dstadler/jgit/RepositoryOpen.java b/src/main/java/org/dstadler/jgit/RepositoryOpen.java
old mode 100644
new mode 100755
diff --git a/src/main/java/org/dstadler/jgit/api/GetRef.java b/src/main/java/org/dstadler/jgit/api/GetRef.java
old mode 100644
new mode 100755
diff --git a/src/main/java/org/dstadler/jgit/api/GetRevCommitFromObjectId.java b/src/main/java/org/dstadler/jgit/api/GetRevCommitFromObjectId.java
old mode 100644
new mode 100755
diff --git a/src/main/java/org/dstadler/jgit/api/GetRevTreeFromObjectId.java b/src/main/java/org/dstadler/jgit/api/GetRevTreeFromObjectId.java
old mode 100644
new mode 100755
diff --git a/src/main/java/org/dstadler/jgit/api/ReadBlobContents.java b/src/main/java/org/dstadler/jgit/api/ReadBlobContents.java
old mode 100644
new mode 100755
diff --git a/src/main/java/org/dstadler/jgit/api/ResolveRef.java b/src/main/java/org/dstadler/jgit/api/ResolveRef.java
old mode 100644
new mode 100755
diff --git a/src/main/java/org/dstadler/jgit/api/WalkRev.java b/src/main/java/org/dstadler/jgit/api/WalkRev.java
old mode 100644
new mode 100755
diff --git a/src/main/java/org/dstadler/jgit/unfinished/GetRevTagFromObjectId.java b/src/main/java/org/dstadler/jgit/unfinished/GetRevTagFromObjectId.java
old mode 100644
new mode 100755
diff --git a/src/main/java/org/dstadler/jgit/unfinished/WalkTree.java b/src/main/java/org/dstadler/jgit/unfinished/WalkTree.java
old mode 100644
new mode 100755
Diff Between 084582b985d889be334f0f6a806e1a7d7b6eafb6 b86eb54c7f09f907a0c897761a91507e029821d2diff --git a/pom.xml b/pom.xml
old mode 100755
new mode 100644
diff --git a/src/main/java/org/dstadler/jgit/RepositoryOpen.java b/src/main/java/org/dstadler/jgit/RepositoryOpen.java
old mode 100755
new mode 100644
diff --git a/src/main/java/org/dstadler/jgit/api/GetRef.java b/src/main/java/org/dstadler/jgit/api/GetRef.java
old mode 100755
new mode 100644
diff --git a/src/main/java/org/dstadler/jgit/api/GetRevCommitFromObjectId.java b/src/main/java/org/dstadler/jgit/api/GetRevCommitFromObjectId.java
old mode 100755
new mode 100644
diff --git a/src/main/java/org/dstadler/jgit/api/GetRevTreeFromObjectId.java b/src/main/java/org/dstadler/jgit/api/GetRevTreeFromObjectId.java
old mode 100755
new mode 100644
diff --git a/src/main/java/org/dstadler/jgit/api/ReadBlobContents.java b/src/main/java/org/dstadler/jgit/api/ReadBlobContents.java
new file mode 100644
index 0000000..a221cb6
--- /dev/null
+++ b/src/main/java/org/dstadler/jgit/api/ReadBlobContents.java
@@ -0,0 +1,35 @@
+package org.dstadler.jgit.api;
+
+import java.io.IOException;
+
+import org.eclipse.jgit.lib.ObjectLoader;
+import org.eclipse.jgit.lib.Ref;
+import org.eclipse.jgit.lib.Repository;
+import org.eclipse.jgit.storage.file.FileRepositoryBuilder;
+
+
+
+/**
+ * Simple snippet which shows how to retrieve a Ref for some reference string.
+ *
+ * @author dominik.stadler@gmx.at
+ */
+public class ReadBlobContents {
+	public static void main(String[] args) throws IOException {
+		FileRepositoryBuilder builder = new FileRepositoryBuilder();
+		Repository repository = builder
+		  .readEnvironment() // scan environment GIT_* variables
+		  .findGitDir() // scan up the file system tree
+		  .build();
+
+		// the Ref holds an ObjectId for any type of object (tree, commit, blob, tree)
+		Ref head = repository.getRef("refs/heads/master");
+		System.out.println("Ref of refs/heads/master: " + head);
+
+		System.out.println("Print contents of head of master branch, i.e. the latest commit information");
+		ObjectLoader loader = repository.open(head.getObjectId());
+		loader.copyTo(System.out);
+
+		repository.close();
+	}
+}
diff --git a/src/main/java/org/dstadler/jgit/api/ResolveRef.java b/src/main/java/org/dstadler/jgit/api/ResolveRef.java
old mode 100755
new mode 100644
diff --git a/src/main/java/org/dstadler/jgit/api/WalkRev.java b/src/main/java/org/dstadler/jgit/api/WalkRev.java
old mode 100755
new mode 100644
diff --git a/src/main/java/org/dstadler/jgit/unfinished/GetRevTagFromObjectId.java b/src/main/java/org/dstadler/jgit/unfinished/GetRevTagFromObjectId.java
old mode 100755
new mode 100644
diff --git a/src/main/java/org/dstadler/jgit/unfinished/WalkTree.java b/src/main/java/org/dstadler/jgit/unfinished/WalkTree.java
old mode 100755
new mode 100644
Diff Between b86eb54c7f09f907a0c897761a91507e029821d2 d52a1031cd359a5941d0e047aa7ab82053f7f7c3diff --git a/pom.xml b/pom.xml
old mode 100644
new mode 100755
diff --git a/src/main/java/org/dstadler/jgit/RepositoryOpen.java b/src/main/java/org/dstadler/jgit/RepositoryOpen.java
old mode 100644
new mode 100755
diff --git a/src/main/java/org/dstadler/jgit/api/GetRef.java b/src/main/java/org/dstadler/jgit/api/GetRef.java
old mode 100644
new mode 100755
diff --git a/src/main/java/org/dstadler/jgit/api/GetRevCommitFromObjectId.java b/src/main/java/org/dstadler/jgit/api/GetRevCommitFromObjectId.java
old mode 100644
new mode 100755
diff --git a/src/main/java/org/dstadler/jgit/api/GetRevTreeFromObjectId.java b/src/main/java/org/dstadler/jgit/api/GetRevTreeFromObjectId.java
old mode 100644
new mode 100755
diff --git a/src/main/java/org/dstadler/jgit/api/ResolveRef.java b/src/main/java/org/dstadler/jgit/api/ResolveRef.java
old mode 100644
new mode 100755
diff --git a/src/main/java/org/dstadler/jgit/api/WalkRev.java b/src/main/java/org/dstadler/jgit/api/WalkRev.java
old mode 100644
new mode 100755
diff --git a/src/main/java/org/dstadler/jgit/unfinished/GetRevTagFromObjectId.java b/src/main/java/org/dstadler/jgit/unfinished/GetRevTagFromObjectId.java
old mode 100644
new mode 100755
diff --git a/src/main/java/org/dstadler/jgit/unfinished/WalkTree.java b/src/main/java/org/dstadler/jgit/unfinished/WalkTree.java
old mode 100644
new mode 100755
Diff Between d52a1031cd359a5941d0e047aa7ab82053f7f7c3 12f09b3075c30ee14508076fdd3aa979e1a19947diff --git a/pom.xml b/pom.xml
old mode 100755
new mode 100644
diff --git a/src/main/java/org/dstadler/jgit/GetRef.java b/src/main/java/org/dstadler/jgit/GetRef.java
deleted file mode 100755
index c8abf02..0000000
--- a/src/main/java/org/dstadler/jgit/GetRef.java
+++ /dev/null
@@ -1,30 +0,0 @@
-package org.dstadler.jgit;
-
-import java.io.IOException;
-
-import org.eclipse.jgit.lib.Ref;
-import org.eclipse.jgit.lib.Repository;
-import org.eclipse.jgit.storage.file.FileRepositoryBuilder;
-
-
-
-/**
- * Simple snippet which shows how to retrieve a Ref for some reference string.
- *
- * @author dominik.stadler@gmx.at
- */
-public class GetRef {
-	public static void main(String[] args) throws IOException {
-		FileRepositoryBuilder builder = new FileRepositoryBuilder();
-		Repository repository = builder
-		  .readEnvironment() // scan environment GIT_* variables
-		  .findGitDir() // scan up the file system tree
-		  .build();
-
-		// the Ref holds an ObjectId for any type of object (tree, commit, blob, tree)
-		Ref head = repository.getRef("refs/heads/master");
-		System.out.println("Ref of refs/heads/master: " + head);
-
-		repository.close();
-	}
-}
diff --git a/src/main/java/org/dstadler/jgit/GetRevCommitFromObjectId.java b/src/main/java/org/dstadler/jgit/GetRevCommitFromObjectId.java
deleted file mode 100755
index 41b3036..0000000
--- a/src/main/java/org/dstadler/jgit/GetRevCommitFromObjectId.java
+++ /dev/null
@@ -1,35 +0,0 @@
-package org.dstadler.jgit;
-
-import java.io.IOException;
-
-import org.eclipse.jgit.lib.Ref;
-import org.eclipse.jgit.lib.Repository;
-import org.eclipse.jgit.revwalk.RevCommit;
-import org.eclipse.jgit.revwalk.RevWalk;
-import org.eclipse.jgit.storage.file.FileRepositoryBuilder;
-
-
-
-/**
- * Simple snippet which shows how to use RevWalk to iterate over objects
- *
- * @author dominik.stadler@gmx.at
- */
-public class GetRevCommitFromObjectId {
-	public static void main(String[] args) throws IOException {
-		FileRepositoryBuilder builder = new FileRepositoryBuilder();
-		Repository repository = builder
-		  .readEnvironment() // scan environment GIT_* variables
-		  .findGitDir() // scan up the file system tree
-		  .build();
-
-		Ref head = repository.getRef("refs/heads/master");
-
-		// a RevWalk allows to walk over commits based on some filtering that is defined
-		RevWalk walk = new RevWalk(repository);
-		RevCommit commit = walk.parseCommit(head.getObjectId());
-		System.out.println("Found Commit: " + commit);
-
-		repository.close();
-	}
-}
diff --git a/src/main/java/org/dstadler/jgit/GetRevTreeFromObjectId.java b/src/main/java/org/dstadler/jgit/GetRevTreeFromObjectId.java
deleted file mode 100755
index cf6d4da..0000000
--- a/src/main/java/org/dstadler/jgit/GetRevTreeFromObjectId.java
+++ /dev/null
@@ -1,43 +0,0 @@
-package org.dstadler.jgit;
-
-import java.io.IOException;
-
-import org.eclipse.jgit.api.errors.GitAPIException;
-import org.eclipse.jgit.lib.Ref;
-import org.eclipse.jgit.lib.Repository;
-import org.eclipse.jgit.revwalk.RevCommit;
-import org.eclipse.jgit.revwalk.RevTree;
-import org.eclipse.jgit.revwalk.RevWalk;
-import org.eclipse.jgit.storage.file.FileRepositoryBuilder;
-
-
-
-/**
- * Simple snippet which shows how to use RevWalk to iterate over objects
- *
- * @author dominik.stadler@gmx.at
- */
-public class GetRevTreeFromObjectId {
-
-	public static void main(String[] args) throws IOException, GitAPIException {
-		FileRepositoryBuilder builder = new FileRepositoryBuilder();
-		Repository repository = builder
-		  .readEnvironment() // scan environment GIT_* variables
-		  .findGitDir() // scan up the file system tree
-		  .build();
-
-		Ref head = repository.getRef("HEAD");
-
-		// a RevWalk allows to walk over commits based on some filtering that is defined
-		RevWalk walk = new RevWalk(repository);
-
-		RevCommit commit = walk.parseCommit(head.getObjectId());
-		System.out.println("Commit: " + commit);
-
-		// a commit points to a tree
-		RevTree tree = walk.parseTree(commit.getTree().getId());
-		System.out.println("Found Tree: " + tree);
-
-		repository.close();
-	}
-}
diff --git a/src/main/java/org/dstadler/jgit/RepositoryOpen.java b/src/main/java/org/dstadler/jgit/RepositoryOpen.java
old mode 100755
new mode 100644
diff --git a/src/main/java/org/dstadler/jgit/ResolveRef.java b/src/main/java/org/dstadler/jgit/ResolveRef.java
deleted file mode 100755
index e801d7e..0000000
--- a/src/main/java/org/dstadler/jgit/ResolveRef.java
+++ /dev/null
@@ -1,28 +0,0 @@
-package org.dstadler.jgit;
-
-import java.io.IOException;
-
-import org.eclipse.jgit.lib.ObjectId;
-import org.eclipse.jgit.lib.Repository;
-import org.eclipse.jgit.storage.file.FileRepositoryBuilder;
-
-
-
-/**
- * Simple snippet which shows how to retrieve an ObjectId for some name.
- *
- * @author dominik.stadler@gmx.at
- */
-public class ResolveRef {
-	public static void main(String[] args) throws IOException {
-		FileRepositoryBuilder builder = new FileRepositoryBuilder();
-		Repository repository = builder
-		  .readEnvironment() // scan environment GIT_* variables
-		  .findGitDir() // scan up the file system tree
-		  .build();
-
-		ObjectId head = repository.resolve("HEAD");
-		System.out.println("ObjectId of HEAD: " + head);
-		repository.close();
-	}
-}
diff --git a/src/main/java/org/dstadler/jgit/WalkRev.java b/src/main/java/org/dstadler/jgit/WalkRev.java
deleted file mode 100755
index d3eb0b7..0000000
--- a/src/main/java/org/dstadler/jgit/WalkRev.java
+++ /dev/null
@@ -1,42 +0,0 @@
-package org.dstadler.jgit;
-
-import java.io.IOException;
-
-import org.eclipse.jgit.lib.Ref;
-import org.eclipse.jgit.lib.Repository;
-import org.eclipse.jgit.revwalk.RevCommit;
-import org.eclipse.jgit.revwalk.RevWalk;
-import org.eclipse.jgit.storage.file.FileRepositoryBuilder;
-
-
-
-/**
- * Simple snippet which shows how to use RevWalk to iterate over objects
- *
- * @author dominik.stadler@gmx.at
- */
-public class WalkRev {
-	public static void main(String[] args) throws IOException {
-		FileRepositoryBuilder builder = new FileRepositoryBuilder();
-		Repository repository = builder
-		  .readEnvironment() // scan environment GIT_* variables
-		  .findGitDir() // scan up the file system tree
-		  .build();
-
-		Ref head = repository.getRef("refs/heads/master");
-
-		// a RevWalk allows to walk over commits based on some filtering that is defined
-		RevWalk walk = new RevWalk(repository);
-
-		RevCommit commit = walk.parseCommit(head.getObjectId());
-		System.out.println("Commit: " + commit);
-
-		System.out.println("Walking all commits starting at HEAD");
-		walk.markStart(commit);
-		for(RevCommit rev : walk) {
-			System.out.println("Commit: " + rev);
-		}
-
-		repository.close();
-	}
-}
diff --git a/src/main/java/org/dstadler/jgit/api/GetRef.java b/src/main/java/org/dstadler/jgit/api/GetRef.java
new file mode 100644
index 0000000..b52addb
--- /dev/null
+++ b/src/main/java/org/dstadler/jgit/api/GetRef.java
@@ -0,0 +1,30 @@
+package org.dstadler.jgit.api;
+
+import java.io.IOException;
+
+import org.eclipse.jgit.lib.Ref;
+import org.eclipse.jgit.lib.Repository;
+import org.eclipse.jgit.storage.file.FileRepositoryBuilder;
+
+
+
+/**
+ * Simple snippet which shows how to retrieve a Ref for some reference string.
+ *
+ * @author dominik.stadler@gmx.at
+ */
+public class GetRef {
+	public static void main(String[] args) throws IOException {
+		FileRepositoryBuilder builder = new FileRepositoryBuilder();
+		Repository repository = builder
+		  .readEnvironment() // scan environment GIT_* variables
+		  .findGitDir() // scan up the file system tree
+		  .build();
+
+		// the Ref holds an ObjectId for any type of object (tree, commit, blob, tree)
+		Ref head = repository.getRef("refs/heads/master");
+		System.out.println("Ref of refs/heads/master: " + head);
+
+		repository.close();
+	}
+}
diff --git a/src/main/java/org/dstadler/jgit/api/GetRevCommitFromObjectId.java b/src/main/java/org/dstadler/jgit/api/GetRevCommitFromObjectId.java
new file mode 100644
index 0000000..b8fc07b
--- /dev/null
+++ b/src/main/java/org/dstadler/jgit/api/GetRevCommitFromObjectId.java
@@ -0,0 +1,35 @@
+package org.dstadler.jgit.api;
+
+import java.io.IOException;
+
+import org.eclipse.jgit.lib.Ref;
+import org.eclipse.jgit.lib.Repository;
+import org.eclipse.jgit.revwalk.RevCommit;
+import org.eclipse.jgit.revwalk.RevWalk;
+import org.eclipse.jgit.storage.file.FileRepositoryBuilder;
+
+
+
+/**
+ * Simple snippet which shows how to use RevWalk to iterate over objects
+ *
+ * @author dominik.stadler@gmx.at
+ */
+public class GetRevCommitFromObjectId {
+	public static void main(String[] args) throws IOException {
+		FileRepositoryBuilder builder = new FileRepositoryBuilder();
+		Repository repository = builder
+		  .readEnvironment() // scan environment GIT_* variables
+		  .findGitDir() // scan up the file system tree
+		  .build();
+
+		Ref head = repository.getRef("refs/heads/master");
+
+		// a RevWalk allows to walk over commits based on some filtering that is defined
+		RevWalk walk = new RevWalk(repository);
+		RevCommit commit = walk.parseCommit(head.getObjectId());
+		System.out.println("Found Commit: " + commit);
+
+		repository.close();
+	}
+}
diff --git a/src/main/java/org/dstadler/jgit/api/GetRevTreeFromObjectId.java b/src/main/java/org/dstadler/jgit/api/GetRevTreeFromObjectId.java
new file mode 100644
index 0000000..d8b3e3d
--- /dev/null
+++ b/src/main/java/org/dstadler/jgit/api/GetRevTreeFromObjectId.java
@@ -0,0 +1,43 @@
+package org.dstadler.jgit.api;
+
+import java.io.IOException;
+
+import org.eclipse.jgit.api.errors.GitAPIException;
+import org.eclipse.jgit.lib.Ref;
+import org.eclipse.jgit.lib.Repository;
+import org.eclipse.jgit.revwalk.RevCommit;
+import org.eclipse.jgit.revwalk.RevTree;
+import org.eclipse.jgit.revwalk.RevWalk;
+import org.eclipse.jgit.storage.file.FileRepositoryBuilder;
+
+
+
+/**
+ * Simple snippet which shows how to use RevWalk to iterate over objects
+ *
+ * @author dominik.stadler@gmx.at
+ */
+public class GetRevTreeFromObjectId {
+
+	public static void main(String[] args) throws IOException, GitAPIException {
+		FileRepositoryBuilder builder = new FileRepositoryBuilder();
+		Repository repository = builder
+		  .readEnvironment() // scan environment GIT_* variables
+		  .findGitDir() // scan up the file system tree
+		  .build();
+
+		Ref head = repository.getRef("HEAD");
+
+		// a RevWalk allows to walk over commits based on some filtering that is defined
+		RevWalk walk = new RevWalk(repository);
+
+		RevCommit commit = walk.parseCommit(head.getObjectId());
+		System.out.println("Commit: " + commit);
+
+		// a commit points to a tree
+		RevTree tree = walk.parseTree(commit.getTree().getId());
+		System.out.println("Found Tree: " + tree);
+
+		repository.close();
+	}
+}
diff --git a/src/main/java/org/dstadler/jgit/api/ResolveRef.java b/src/main/java/org/dstadler/jgit/api/ResolveRef.java
new file mode 100644
index 0000000..36089f7
--- /dev/null
+++ b/src/main/java/org/dstadler/jgit/api/ResolveRef.java
@@ -0,0 +1,28 @@
+package org.dstadler.jgit.api;
+
+import java.io.IOException;
+
+import org.eclipse.jgit.lib.ObjectId;
+import org.eclipse.jgit.lib.Repository;
+import org.eclipse.jgit.storage.file.FileRepositoryBuilder;
+
+
+
+/**
+ * Simple snippet which shows how to retrieve an ObjectId for some name.
+ *
+ * @author dominik.stadler@gmx.at
+ */
+public class ResolveRef {
+	public static void main(String[] args) throws IOException {
+		FileRepositoryBuilder builder = new FileRepositoryBuilder();
+		Repository repository = builder
+		  .readEnvironment() // scan environment GIT_* variables
+		  .findGitDir() // scan up the file system tree
+		  .build();
+
+		ObjectId head = repository.resolve("HEAD");
+		System.out.println("ObjectId of HEAD: " + head);
+		repository.close();
+	}
+}
diff --git a/src/main/java/org/dstadler/jgit/api/WalkRev.java b/src/main/java/org/dstadler/jgit/api/WalkRev.java
new file mode 100644
index 0000000..3c57a5f
--- /dev/null
+++ b/src/main/java/org/dstadler/jgit/api/WalkRev.java
@@ -0,0 +1,42 @@
+package org.dstadler.jgit.api;
+
+import java.io.IOException;
+
+import org.eclipse.jgit.lib.Ref;
+import org.eclipse.jgit.lib.Repository;
+import org.eclipse.jgit.revwalk.RevCommit;
+import org.eclipse.jgit.revwalk.RevWalk;
+import org.eclipse.jgit.storage.file.FileRepositoryBuilder;
+
+
+
+/**
+ * Simple snippet which shows how to use RevWalk to iterate over objects
+ *
+ * @author dominik.stadler@gmx.at
+ */
+public class WalkRev {
+	public static void main(String[] args) throws IOException {
+		FileRepositoryBuilder builder = new FileRepositoryBuilder();
+		Repository repository = builder
+		  .readEnvironment() // scan environment GIT_* variables
+		  .findGitDir() // scan up the file system tree
+		  .build();
+
+		Ref head = repository.getRef("refs/heads/master");
+
+		// a RevWalk allows to walk over commits based on some filtering that is defined
+		RevWalk walk = new RevWalk(repository);
+
+		RevCommit commit = walk.parseCommit(head.getObjectId());
+		System.out.println("Commit: " + commit);
+
+		System.out.println("Walking all commits starting at HEAD");
+		walk.markStart(commit);
+		for(RevCommit rev : walk) {
+			System.out.println("Commit: " + rev);
+		}
+
+		repository.close();
+	}
+}
diff --git a/src/main/java/org/dstadler/jgit/unfinished/GetRevTagFromObjectId.java b/src/main/java/org/dstadler/jgit/unfinished/GetRevTagFromObjectId.java
old mode 100755
new mode 100644
diff --git a/src/main/java/org/dstadler/jgit/unfinished/WalkTree.java b/src/main/java/org/dstadler/jgit/unfinished/WalkTree.java
old mode 100755
new mode 100644
Diff Between 12f09b3075c30ee14508076fdd3aa979e1a19947 a3033aec313556ba4e1ef55a66167a35432a4bc1diff --git a/src/main/java/org/dstadler/jgit/GetRef.java b/src/main/java/org/dstadler/jgit/GetRef.java
index 905f352..c8abf02 100755
--- a/src/main/java/org/dstadler/jgit/GetRef.java
+++ b/src/main/java/org/dstadler/jgit/GetRef.java
@@ -23,0 +24 @@
+		// the Ref holds an ObjectId for any type of object (tree, commit, blob, tree)
@@ -27,2 +27,0 @@
-
-
diff --git a/src/main/java/org/dstadler/jgit/GetRevCommitFromObjectId.java b/src/main/java/org/dstadler/jgit/GetRevCommitFromObjectId.java
new file mode 100755
index 0000000..41b3036
--- /dev/null
+++ b/src/main/java/org/dstadler/jgit/GetRevCommitFromObjectId.java
@@ -0,0 +1,35 @@
+package org.dstadler.jgit;
+
+import java.io.IOException;
+
+import org.eclipse.jgit.lib.Ref;
+import org.eclipse.jgit.lib.Repository;
+import org.eclipse.jgit.revwalk.RevCommit;
+import org.eclipse.jgit.revwalk.RevWalk;
+import org.eclipse.jgit.storage.file.FileRepositoryBuilder;
+
+
+
+/**
+ * Simple snippet which shows how to use RevWalk to iterate over objects
+ *
+ * @author dominik.stadler@gmx.at
+ */
+public class GetRevCommitFromObjectId {
+	public static void main(String[] args) throws IOException {
+		FileRepositoryBuilder builder = new FileRepositoryBuilder();
+		Repository repository = builder
+		  .readEnvironment() // scan environment GIT_* variables
+		  .findGitDir() // scan up the file system tree
+		  .build();
+
+		Ref head = repository.getRef("refs/heads/master");
+
+		// a RevWalk allows to walk over commits based on some filtering that is defined
+		RevWalk walk = new RevWalk(repository);
+		RevCommit commit = walk.parseCommit(head.getObjectId());
+		System.out.println("Found Commit: " + commit);
+
+		repository.close();
+	}
+}
diff --git a/src/main/java/org/dstadler/jgit/GetRevTreeFromObjectId.java b/src/main/java/org/dstadler/jgit/GetRevTreeFromObjectId.java
new file mode 100755
index 0000000..cf6d4da
--- /dev/null
+++ b/src/main/java/org/dstadler/jgit/GetRevTreeFromObjectId.java
@@ -0,0 +1,43 @@
+package org.dstadler.jgit;
+
+import java.io.IOException;
+
+import org.eclipse.jgit.api.errors.GitAPIException;
+import org.eclipse.jgit.lib.Ref;
+import org.eclipse.jgit.lib.Repository;
+import org.eclipse.jgit.revwalk.RevCommit;
+import org.eclipse.jgit.revwalk.RevTree;
+import org.eclipse.jgit.revwalk.RevWalk;
+import org.eclipse.jgit.storage.file.FileRepositoryBuilder;
+
+
+
+/**
+ * Simple snippet which shows how to use RevWalk to iterate over objects
+ *
+ * @author dominik.stadler@gmx.at
+ */
+public class GetRevTreeFromObjectId {
+
+	public static void main(String[] args) throws IOException, GitAPIException {
+		FileRepositoryBuilder builder = new FileRepositoryBuilder();
+		Repository repository = builder
+		  .readEnvironment() // scan environment GIT_* variables
+		  .findGitDir() // scan up the file system tree
+		  .build();
+
+		Ref head = repository.getRef("HEAD");
+
+		// a RevWalk allows to walk over commits based on some filtering that is defined
+		RevWalk walk = new RevWalk(repository);
+
+		RevCommit commit = walk.parseCommit(head.getObjectId());
+		System.out.println("Commit: " + commit);
+
+		// a commit points to a tree
+		RevTree tree = walk.parseTree(commit.getTree().getId());
+		System.out.println("Found Tree: " + tree);
+
+		repository.close();
+	}
+}
diff --git a/src/main/java/org/dstadler/jgit/WalkRev.java b/src/main/java/org/dstadler/jgit/WalkRev.java
new file mode 100755
index 0000000..d3eb0b7
--- /dev/null
+++ b/src/main/java/org/dstadler/jgit/WalkRev.java
@@ -0,0 +1,42 @@
+package org.dstadler.jgit;
+
+import java.io.IOException;
+
+import org.eclipse.jgit.lib.Ref;
+import org.eclipse.jgit.lib.Repository;
+import org.eclipse.jgit.revwalk.RevCommit;
+import org.eclipse.jgit.revwalk.RevWalk;
+import org.eclipse.jgit.storage.file.FileRepositoryBuilder;
+
+
+
+/**
+ * Simple snippet which shows how to use RevWalk to iterate over objects
+ *
+ * @author dominik.stadler@gmx.at
+ */
+public class WalkRev {
+	public static void main(String[] args) throws IOException {
+		FileRepositoryBuilder builder = new FileRepositoryBuilder();
+		Repository repository = builder
+		  .readEnvironment() // scan environment GIT_* variables
+		  .findGitDir() // scan up the file system tree
+		  .build();
+
+		Ref head = repository.getRef("refs/heads/master");
+
+		// a RevWalk allows to walk over commits based on some filtering that is defined
+		RevWalk walk = new RevWalk(repository);
+
+		RevCommit commit = walk.parseCommit(head.getObjectId());
+		System.out.println("Commit: " + commit);
+
+		System.out.println("Walking all commits starting at HEAD");
+		walk.markStart(commit);
+		for(RevCommit rev : walk) {
+			System.out.println("Commit: " + rev);
+		}
+
+		repository.close();
+	}
+}
diff --git a/src/main/java/org/dstadler/jgit/unfinished/GetRevTagFromObjectId.java b/src/main/java/org/dstadler/jgit/unfinished/GetRevTagFromObjectId.java
new file mode 100755
index 0000000..e3e56d9
--- /dev/null
+++ b/src/main/java/org/dstadler/jgit/unfinished/GetRevTagFromObjectId.java
@@ -0,0 +1,49 @@
+package org.dstadler.jgit.unfinished;
+
+import java.io.IOException;
+import java.util.List;
+
+import org.eclipse.jgit.api.Git;
+import org.eclipse.jgit.api.errors.GitAPIException;
+import org.eclipse.jgit.lib.Ref;
+import org.eclipse.jgit.lib.Repository;
+import org.eclipse.jgit.revwalk.RevObject;
+import org.eclipse.jgit.revwalk.RevTag;
+import org.eclipse.jgit.revwalk.RevWalk;
+import org.eclipse.jgit.storage.file.FileRepositoryBuilder;
+
+
+
+/**
+ * Simple snippet which shows how to use RevWalk to iterate over objects
+ *
+ * @author dominik.stadler@gmx.at
+ */
+public class GetRevTagFromObjectId {
+
+	public static void main(String[] args) throws IOException, GitAPIException {
+		FileRepositoryBuilder builder = new FileRepositoryBuilder();
+		Repository repository = builder
+		  .readEnvironment() // scan environment GIT_* variables
+		  .findGitDir() // scan up the file system tree
+		  .build();
+
+		List<Ref> call = new Git(repository).tagList().call();
+		for(Ref rev : call) {
+			System.out.println("Tag: " + rev);
+		}
+
+		//Ref head = repository.getRef("refs/tags/initialtag");
+
+		// a RevWalk allows to walk over commits based on some filtering that is defined
+		RevWalk walk = new RevWalk(repository);
+
+		RevObject any = walk.parseAny(call.get(0).getObjectId());
+		System.out.println("Any: " + any);
+
+		RevTag tag = walk.parseTag(call.get(0).getObjectId());
+		System.out.println("Found Tag: " + tag);
+
+		repository.close();
+	}
+}
diff --git a/src/main/java/org/dstadler/jgit/unfinished/WalkTree.java b/src/main/java/org/dstadler/jgit/unfinished/WalkTree.java
new file mode 100755
index 0000000..7480e1e
--- /dev/null
+++ b/src/main/java/org/dstadler/jgit/unfinished/WalkTree.java
@@ -0,0 +1,42 @@
+package org.dstadler.jgit.unfinished;
+
+import java.io.IOException;
+
+import org.eclipse.jgit.api.errors.GitAPIException;
+import org.eclipse.jgit.lib.Ref;
+import org.eclipse.jgit.lib.Repository;
+import org.eclipse.jgit.revwalk.RevCommit;
+import org.eclipse.jgit.revwalk.RevTree;
+import org.eclipse.jgit.revwalk.RevWalk;
+import org.eclipse.jgit.storage.file.FileRepositoryBuilder;
+
+
+
+/**
+ * Simple snippet which shows how to use RevWalk to iterate over objects
+ *
+ * @author dominik.stadler@gmx.at
+ */
+public class WalkTree {
+
+	public static void main(String[] args) throws IOException, GitAPIException {
+		FileRepositoryBuilder builder = new FileRepositoryBuilder();
+		Repository repository = builder
+		  .readEnvironment() // scan environment GIT_* variables
+		  .findGitDir() // scan up the file system tree
+		  .build();
+
+		Ref head = repository.getRef("HEAD");
+
+		// a RevWalk allows to walk over commits based on some filtering that is defined
+		RevWalk walk = new RevWalk(repository);
+
+		RevCommit commit = walk.parseCommit(head.getObjectId());
+		RevTree tree = commit.getTree();
+		System.out.println("Having tree: " + tree);
+
+		// TODO: how to look at all files/sub-trees of this Tree now?
+
+		repository.close();
+	}
+}
Diff Between a3033aec313556ba4e1ef55a66167a35432a4bc1 9d0b854958a15de19797cc968e0ebfdf2ae3e294diff --git a/pom.xml b/pom.xml
index 4126c2d..a171bf4 100755
--- a/pom.xml
+++ b/pom.xml
@@ -28 +28 @@
-      <version>4.8.2</version>
+      <version>4.11</version>
Diff Between 9d0b854958a15de19797cc968e0ebfdf2ae3e294 6b43245453423e52b541af69ba37804aef0393b2diff --git a/src/main/java/org/dstadler/jgit/App.java b/src/main/java/org/dstadler/jgit/App.java
deleted file mode 100755
index 947c9ef..0000000
--- a/src/main/java/org/dstadler/jgit/App.java
+++ /dev/null
@@ -1,13 +0,0 @@
-package org.dstadler.jgit;
-
-/**
- * Hello world!
- *
- */
-public class App 
-{
-    public static void main( String[] args )
-    {
-        System.out.println( "Hello World!" );
-    }
-}
diff --git a/src/main/java/org/dstadler/jgit/GetRef.java b/src/main/java/org/dstadler/jgit/GetRef.java
new file mode 100755
index 0000000..905f352
--- /dev/null
+++ b/src/main/java/org/dstadler/jgit/GetRef.java
@@ -0,0 +1,31 @@
+package org.dstadler.jgit;
+
+import java.io.IOException;
+
+import org.eclipse.jgit.lib.Ref;
+import org.eclipse.jgit.lib.Repository;
+import org.eclipse.jgit.storage.file.FileRepositoryBuilder;
+
+
+
+/**
+ * Simple snippet which shows how to retrieve a Ref for some reference string.
+ *
+ * @author dominik.stadler@gmx.at
+ */
+public class GetRef {
+	public static void main(String[] args) throws IOException {
+		FileRepositoryBuilder builder = new FileRepositoryBuilder();
+		Repository repository = builder
+		  .readEnvironment() // scan environment GIT_* variables
+		  .findGitDir() // scan up the file system tree
+		  .build();
+
+		Ref head = repository.getRef("refs/heads/master");
+		System.out.println("Ref of refs/heads/master: " + head);
+
+
+
+		repository.close();
+	}
+}
diff --git a/src/main/java/org/dstadler/jgit/RepositoryOpen.java b/src/main/java/org/dstadler/jgit/RepositoryOpen.java
new file mode 100755
index 0000000..f97ce2f
--- /dev/null
+++ b/src/main/java/org/dstadler/jgit/RepositoryOpen.java
@@ -0,0 +1,28 @@
+package org.dstadler.jgit;
+
+import java.io.File;
+import java.io.IOException;
+
+import org.eclipse.jgit.lib.Repository;
+import org.eclipse.jgit.storage.file.FileRepositoryBuilder;
+
+
+
+/**
+ * Simple snippet which shows how to open an existing repository
+ *
+ * @author dominik.stadler@gmx.at
+ */
+public class RepositoryOpen {
+	public static void main(String[] args) throws IOException {
+		FileRepositoryBuilder builder = new FileRepositoryBuilder();
+		Repository repository = builder.setGitDir(new File("/my/git/directory"))
+		  .readEnvironment() // scan environment GIT_* variables
+		  .findGitDir() // scan up the file system tree
+		  .build();
+
+		System.out.println("Having repository: " + repository.getDirectory());
+
+		repository.close();
+	}
+}
diff --git a/src/main/java/org/dstadler/jgit/ResolveRef.java b/src/main/java/org/dstadler/jgit/ResolveRef.java
new file mode 100755
index 0000000..e801d7e
--- /dev/null
+++ b/src/main/java/org/dstadler/jgit/ResolveRef.java
@@ -0,0 +1,28 @@
+package org.dstadler.jgit;
+
+import java.io.IOException;
+
+import org.eclipse.jgit.lib.ObjectId;
+import org.eclipse.jgit.lib.Repository;
+import org.eclipse.jgit.storage.file.FileRepositoryBuilder;
+
+
+
+/**
+ * Simple snippet which shows how to retrieve an ObjectId for some name.
+ *
+ * @author dominik.stadler@gmx.at
+ */
+public class ResolveRef {
+	public static void main(String[] args) throws IOException {
+		FileRepositoryBuilder builder = new FileRepositoryBuilder();
+		Repository repository = builder
+		  .readEnvironment() // scan environment GIT_* variables
+		  .findGitDir() // scan up the file system tree
+		  .build();
+
+		ObjectId head = repository.resolve("HEAD");
+		System.out.println("ObjectId of HEAD: " + head);
+		repository.close();
+	}
+}
diff --git a/src/test/java/org/dstadler/jgit/AppTest.java b/src/test/java/org/dstadler/jgit/AppTest.java
deleted file mode 100755
index c4c0e66..0000000
--- a/src/test/java/org/dstadler/jgit/AppTest.java
+++ /dev/null
@@ -1,38 +0,0 @@
-package org.dstadler.jgit;
-
-import junit.framework.Test;
-import junit.framework.TestCase;
-import junit.framework.TestSuite;
-
-/**
- * Unit test for simple App.
- */
-public class AppTest 
-    extends TestCase
-{
-    /**
-     * Create the test case
-     *
-     * @param testName name of the test case
-     */
-    public AppTest( String testName )
-    {
-        super( testName );
-    }
-
-    /**
-     * @return the suite of tests being tested
-     */
-    public static Test suite()
-    {
-        return new TestSuite( AppTest.class );
-    }
-
-    /**
-     * Rigourous Test :-)
-     */
-    public void testApp()
-    {
-        assertTrue( true );
-    }
-}
Diff Between 6b43245453423e52b541af69ba37804aef0393b2 256d3387cbb318f91e50a33f83d3b96102947370diff --git a/.gitignore b/.gitignore
index 0f182a0..d9f145c 100644
--- a/.gitignore
+++ b/.gitignore
@@ -1,0 +2,3 @@
+target
+.classpath
+.project
diff --git a/pom.xml b/pom.xml
new file mode 100755
index 0000000..4126c2d
--- /dev/null
+++ b/pom.xml
@@ -0,0 +1,32 @@
+<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
+  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
+  <modelVersion>4.0.0</modelVersion>
+  <groupId>org.dstadler.jgit</groupId>
+  <artifactId>jgit-cookbook</artifactId>
+  <packaging>jar</packaging>
+  <version>1.0-SNAPSHOT</version>
+  <name>jgit-cookbook</name>
+  <url>http://maven.apache.org</url>
+  <repositories>
+    <repository>
+      <id>jgit-repository</id>
+      <url>http://download.eclipse.org/jgit/maven</url>
+    </repository>
+  </repositories>
+
+  <!-- Core Library -->
+  <dependencies>
+    <dependency>
+      <groupId>org.eclipse.jgit</groupId>
+      <artifactId>org.eclipse.jgit</artifactId>
+      <version>2.3.1.201302201838-r</version>
+    </dependency>
+
+    <dependency>
+      <groupId>junit</groupId>
+      <artifactId>junit</artifactId>
+      <version>4.8.2</version>
+      <scope>test</scope>
+    </dependency>
+  </dependencies>
+</project>
diff --git a/src/main/java/org/dstadler/jgit/App.java b/src/main/java/org/dstadler/jgit/App.java
new file mode 100755
index 0000000..947c9ef
--- /dev/null
+++ b/src/main/java/org/dstadler/jgit/App.java
@@ -0,0 +1,13 @@
+package org.dstadler.jgit;
+
+/**
+ * Hello world!
+ *
+ */
+public class App 
+{
+    public static void main( String[] args )
+    {
+        System.out.println( "Hello World!" );
+    }
+}
diff --git a/src/test/java/org/dstadler/jgit/AppTest.java b/src/test/java/org/dstadler/jgit/AppTest.java
new file mode 100755
index 0000000..c4c0e66
--- /dev/null
+++ b/src/test/java/org/dstadler/jgit/AppTest.java
@@ -0,0 +1,38 @@
+package org.dstadler.jgit;
+
+import junit.framework.Test;
+import junit.framework.TestCase;
+import junit.framework.TestSuite;
+
+/**
+ * Unit test for simple App.
+ */
+public class AppTest 
+    extends TestCase
+{
+    /**
+     * Create the test case
+     *
+     * @param testName name of the test case
+     */
+    public AppTest( String testName )
+    {
+        super( testName );
+    }
+
+    /**
+     * @return the suite of tests being tested
+     */
+    public static Test suite()
+    {
+        return new TestSuite( AppTest.class );
+    }
+
+    /**
+     * Rigourous Test :-)
+     */
+    public void testApp()
+    {
+        assertTrue( true );
+    }
+}
